/*================================================================================
  code generated by: java2cpp
  class: javax.xml.transform.sax.TransformerHandler
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVAX_XML_TRANSFORM_SAX_TRANSFORMERHANDLER_HPP_DECL
#define J2CPP_JAVAX_XML_TRANSFORM_SAX_TRANSFORMERHANDLER_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace javax { namespace xml { namespace transform { class Result; } } } }
namespace j2cpp { namespace javax { namespace xml { namespace transform { class Transformer; } } } }


#include <java/lang/String.hpp>
#include <javax/xml/transform/Result.hpp>
#include <javax/xml/transform/Transformer.hpp>


namespace j2cpp {

namespace javax { namespace xml { namespace transform { namespace sax {

	class TransformerHandler;
	class TransformerHandler
		: public cpp_object<TransformerHandler>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)

		TransformerHandler(jobject jobj)
		: cpp_object<TransformerHandler>(jobj)
		{
		}

		void setResult(local_ref< javax::xml::transform::Result > const&);
		void setSystemId(local_ref< java::lang::String > const&);
		local_ref< java::lang::String > getSystemId();
		local_ref< javax::xml::transform::Transformer > getTransformer();
	}; //class TransformerHandler

} //namespace sax
} //namespace transform
} //namespace xml
} //namespace javax


} //namespace j2cpp

#endif //J2CPP_JAVAX_XML_TRANSFORM_SAX_TRANSFORMERHANDLER_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVAX_XML_TRANSFORM_SAX_TRANSFORMERHANDLER_HPP_IMPL
#define J2CPP_JAVAX_XML_TRANSFORM_SAX_TRANSFORMERHANDLER_HPP_IMPL

namespace j2cpp {


void javax::xml::transform::sax::TransformerHandler::setResult(local_ref< javax::xml::transform::Result > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(0), J2CPP_METHOD_SIGNATURE(0), false>(),
			a0.get_jtype()
		)
	);
}

void javax::xml::transform::sax::TransformerHandler::setSystemId(local_ref< java::lang::String > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::String > javax::xml::transform::sax::TransformerHandler::getSystemId()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>()
		)
	);
}

local_ref< javax::xml::transform::Transformer > javax::xml::transform::sax::TransformerHandler::getTransformer()
{
	return local_ref< javax::xml::transform::Transformer >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>()
		)
	);
}


J2CPP_DEFINE_CLASS(javax::xml::transform::sax::TransformerHandler,"javax/xml/transform/sax/TransformerHandler")
J2CPP_DEFINE_METHOD(javax::xml::transform::sax::TransformerHandler,0,"setResult","(Ljavax/xml/transform/Result;)V")
J2CPP_DEFINE_METHOD(javax::xml::transform::sax::TransformerHandler,1,"setSystemId","(Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(javax::xml::transform::sax::TransformerHandler,2,"getSystemId","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(javax::xml::transform::sax::TransformerHandler,3,"getTransformer","()Ljavax/xml/transform/Transformer;")

} //namespace j2cpp

#endif //J2CPP_JAVAX_XML_TRANSFORM_SAX_TRANSFORMERHANDLER_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
