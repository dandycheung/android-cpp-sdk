/*================================================================================
  code generated by: java2cpp
  class: javax.crypto.ExemptionMechanism
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVAX_CRYPTO_EXEMPTIONMECHANISM_HPP_DECL
#define J2CPP_JAVAX_CRYPTO_EXEMPTIONMECHANISM_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace security { namespace spec { class AlgorithmParameterSpec; } } } }
namespace j2cpp { namespace java { namespace security { class Provider; } } }
namespace j2cpp { namespace java { namespace security { class Key; } } }
namespace j2cpp { namespace java { namespace security { class AlgorithmParameters; } } }


#include <java/lang/String.hpp>
#include <java/security/AlgorithmParameters.hpp>
#include <java/security/Key.hpp>
#include <java/security/Provider.hpp>
#include <java/security/spec/AlgorithmParameterSpec.hpp>


namespace j2cpp {

namespace javax { namespace crypto {

	class ExemptionMechanism;
	class ExemptionMechanism
		: public cpp_object<ExemptionMechanism>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_METHOD(12)
		J2CPP_DECLARE_METHOD(13)
		J2CPP_DECLARE_METHOD(14)

		ExemptionMechanism(jobject jobj)
		: cpp_object<ExemptionMechanism>(jobj)
		{
		}

		local_ref< java::lang::String > getName();
		static local_ref< javax::crypto::ExemptionMechanism > getInstance(local_ref< java::lang::String > const&);
		static local_ref< javax::crypto::ExemptionMechanism > getInstance(local_ref< java::lang::String > const&, local_ref< java::lang::String > const&);
		static local_ref< javax::crypto::ExemptionMechanism > getInstance(local_ref< java::lang::String > const&, local_ref< java::security::Provider > const&);
		local_ref< java::security::Provider > getProvider();
		cpp_boolean isCryptoAllowed(local_ref< java::security::Key > const&);
		cpp_int getOutputSize(cpp_int const&);
		void init(local_ref< java::security::Key > const&);
		void init(local_ref< java::security::Key > const&, local_ref< java::security::AlgorithmParameters > const&);
		void init(local_ref< java::security::Key > const&, local_ref< java::security::spec::AlgorithmParameterSpec > const&);
		local_ref< cpp_byte_array<1> > genExemptionBlob();
		cpp_int genExemptionBlob(local_ref< cpp_byte_array<1> > const&);
		cpp_int genExemptionBlob(local_ref< cpp_byte_array<1> > const&, cpp_int const&);
	}; //class ExemptionMechanism

} //namespace crypto
} //namespace javax


} //namespace j2cpp

#endif //J2CPP_JAVAX_CRYPTO_EXEMPTIONMECHANISM_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVAX_CRYPTO_EXEMPTIONMECHANISM_HPP_IMPL
#define J2CPP_JAVAX_CRYPTO_EXEMPTIONMECHANISM_HPP_IMPL

namespace j2cpp {


template <>
local_ref< javax::crypto::ExemptionMechanism > create< javax::crypto::ExemptionMechanism>(local_ref< javax::crypto::ExemptionMechanismSpi > const &a0, local_ref< java::security::Provider > const &a1, local_ref< java::lang::String > const &a2)
{
	return local_ref< javax::crypto::ExemptionMechanism >(
		environment::get().get_jenv()->NewObject(
			get_class<javax::crypto::ExemptionMechanism::J2CPP_CLASS_NAME>(),
			get_method_id<javax::crypto::ExemptionMechanism::J2CPP_CLASS_NAME, javax::crypto::ExemptionMechanism::J2CPP_METHOD_NAME(0), javax::crypto::ExemptionMechanism::J2CPP_METHOD_SIGNATURE(0), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

local_ref< java::lang::String > javax::crypto::ExemptionMechanism::getName()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), false>()
		)
	);
}

local_ref< javax::crypto::ExemptionMechanism > javax::crypto::ExemptionMechanism::getInstance(local_ref< java::lang::String > const &a0)
{
	return local_ref< javax::crypto::ExemptionMechanism >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), true>(),
			a0.get_jtype()
		)
	);
}

local_ref< javax::crypto::ExemptionMechanism > javax::crypto::ExemptionMechanism::getInstance(local_ref< java::lang::String > const &a0, local_ref< java::lang::String > const &a1)
{
	return local_ref< javax::crypto::ExemptionMechanism >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), true>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< javax::crypto::ExemptionMechanism > javax::crypto::ExemptionMechanism::getInstance(local_ref< java::lang::String > const &a0, local_ref< java::security::Provider > const &a1)
{
	return local_ref< javax::crypto::ExemptionMechanism >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), true>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< java::security::Provider > javax::crypto::ExemptionMechanism::getProvider()
{
	return local_ref< java::security::Provider >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>()
		)
	);
}

cpp_boolean javax::crypto::ExemptionMechanism::isCryptoAllowed(local_ref< java::security::Key > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int javax::crypto::ExemptionMechanism::getOutputSize(cpp_int const &a0)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(7), J2CPP_METHOD_SIGNATURE(7), false>(),
			a0.get_jtype()
		)
	);
}

void javax::crypto::ExemptionMechanism::init(local_ref< java::security::Key > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(8), J2CPP_METHOD_SIGNATURE(8), false>(),
			a0.get_jtype()
		)
	);
}

void javax::crypto::ExemptionMechanism::init(local_ref< java::security::Key > const &a0, local_ref< java::security::AlgorithmParameters > const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(9), J2CPP_METHOD_SIGNATURE(9), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void javax::crypto::ExemptionMechanism::init(local_ref< java::security::Key > const &a0, local_ref< java::security::spec::AlgorithmParameterSpec > const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(10), J2CPP_METHOD_SIGNATURE(10), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< cpp_byte_array<1> > javax::crypto::ExemptionMechanism::genExemptionBlob()
{
	return local_ref< cpp_byte_array<1> >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(11), J2CPP_METHOD_SIGNATURE(11), false>()
		)
	);
}

cpp_int javax::crypto::ExemptionMechanism::genExemptionBlob(local_ref< cpp_byte_array<1> > const &a0)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(12), J2CPP_METHOD_SIGNATURE(12), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int javax::crypto::ExemptionMechanism::genExemptionBlob(local_ref< cpp_byte_array<1> > const &a0, cpp_int const &a1)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(13), J2CPP_METHOD_SIGNATURE(13), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}



J2CPP_DEFINE_CLASS(javax::crypto::ExemptionMechanism,"javax/crypto/ExemptionMechanism")
J2CPP_DEFINE_METHOD(javax::crypto::ExemptionMechanism,0,"<init>","(Ljavax/crypto/ExemptionMechanismSpi;Ljava/security/Provider;Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(javax::crypto::ExemptionMechanism,1,"getName","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(javax::crypto::ExemptionMechanism,2,"getInstance","(Ljava/lang/String;)Ljavax/crypto/ExemptionMechanism;")
J2CPP_DEFINE_METHOD(javax::crypto::ExemptionMechanism,3,"getInstance","(Ljava/lang/String;Ljava/lang/String;)Ljavax/crypto/ExemptionMechanism;")
J2CPP_DEFINE_METHOD(javax::crypto::ExemptionMechanism,4,"getInstance","(Ljava/lang/String;Ljava/security/Provider;)Ljavax/crypto/ExemptionMechanism;")
J2CPP_DEFINE_METHOD(javax::crypto::ExemptionMechanism,5,"getProvider","()Ljava/security/Provider;")
J2CPP_DEFINE_METHOD(javax::crypto::ExemptionMechanism,6,"isCryptoAllowed","(Ljava/security/Key;)Z")
J2CPP_DEFINE_METHOD(javax::crypto::ExemptionMechanism,7,"getOutputSize","(I)I")
J2CPP_DEFINE_METHOD(javax::crypto::ExemptionMechanism,8,"init","(Ljava/security/Key;)V")
J2CPP_DEFINE_METHOD(javax::crypto::ExemptionMechanism,9,"init","(Ljava/security/Key;Ljava/security/AlgorithmParameters;)V")
J2CPP_DEFINE_METHOD(javax::crypto::ExemptionMechanism,10,"init","(Ljava/security/Key;Ljava/security/spec/AlgorithmParameterSpec;)V")
J2CPP_DEFINE_METHOD(javax::crypto::ExemptionMechanism,11,"genExemptionBlob","()[B")
J2CPP_DEFINE_METHOD(javax::crypto::ExemptionMechanism,12,"genExemptionBlob","([B)I")
J2CPP_DEFINE_METHOD(javax::crypto::ExemptionMechanism,13,"genExemptionBlob","([BI)I")
J2CPP_DEFINE_METHOD(javax::crypto::ExemptionMechanism,14,"finalize","()V")

} //namespace j2cpp

#endif //J2CPP_JAVAX_CRYPTO_EXEMPTIONMECHANISM_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
