/*================================================================================
  code generated by: java2cpp
  class: org.json.JSONArray
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ORG_JSON_JSONARRAY_HPP_DECL
#define J2CPP_ORG_JSON_JSONARRAY_HPP_DECL


namespace j2cpp { namespace org { namespace json { class JSONTokener; } } }
namespace j2cpp { namespace org { namespace json { class JSONObject; } } }
namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace util { class Collection; } } }


#include <java/lang/Object.hpp>
#include <java/lang/String.hpp>
#include <java/util/Collection.hpp>
#include <org/json/JSONObject.hpp>
#include <org/json/JSONTokener.hpp>


namespace j2cpp {

namespace org { namespace json {

	class JSONArray;
	class JSONArray
		: public cpp_object<JSONArray>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_METHOD(12)
		J2CPP_DECLARE_METHOD(13)
		J2CPP_DECLARE_METHOD(14)
		J2CPP_DECLARE_METHOD(15)
		J2CPP_DECLARE_METHOD(16)
		J2CPP_DECLARE_METHOD(17)
		J2CPP_DECLARE_METHOD(18)
		J2CPP_DECLARE_METHOD(19)
		J2CPP_DECLARE_METHOD(20)
		J2CPP_DECLARE_METHOD(21)
		J2CPP_DECLARE_METHOD(22)
		J2CPP_DECLARE_METHOD(23)
		J2CPP_DECLARE_METHOD(24)
		J2CPP_DECLARE_METHOD(25)
		J2CPP_DECLARE_METHOD(26)
		J2CPP_DECLARE_METHOD(27)
		J2CPP_DECLARE_METHOD(28)
		J2CPP_DECLARE_METHOD(29)
		J2CPP_DECLARE_METHOD(30)
		J2CPP_DECLARE_METHOD(31)
		J2CPP_DECLARE_METHOD(32)
		J2CPP_DECLARE_METHOD(33)
		J2CPP_DECLARE_METHOD(34)
		J2CPP_DECLARE_METHOD(35)
		J2CPP_DECLARE_METHOD(36)
		J2CPP_DECLARE_METHOD(37)
		J2CPP_DECLARE_METHOD(38)
		J2CPP_DECLARE_METHOD(39)
		J2CPP_DECLARE_METHOD(40)
		J2CPP_DECLARE_METHOD(41)
		J2CPP_DECLARE_METHOD(42)

		JSONArray(jobject jobj)
		: cpp_object<JSONArray>(jobj)
		{
		}

		cpp_int length();
		local_ref< org::json::JSONArray > put(cpp_boolean const&);
		local_ref< org::json::JSONArray > put(cpp_double const&);
		local_ref< org::json::JSONArray > put(cpp_int const&);
		local_ref< org::json::JSONArray > put(cpp_long const&);
		local_ref< org::json::JSONArray > put(local_ref< java::lang::Object > const&);
		local_ref< org::json::JSONArray > put(cpp_int const&, cpp_boolean const&);
		local_ref< org::json::JSONArray > put(cpp_int const&, cpp_double const&);
		local_ref< org::json::JSONArray > put(cpp_int const&, cpp_int const&);
		local_ref< org::json::JSONArray > put(cpp_int const&, cpp_long const&);
		local_ref< org::json::JSONArray > put(cpp_int const&, local_ref< java::lang::Object > const&);
		cpp_boolean isNull(cpp_int const&);
		local_ref< java::lang::Object > get(cpp_int const&);
		local_ref< java::lang::Object > opt(cpp_int const&);
		cpp_boolean getBoolean(cpp_int const&);
		cpp_boolean optBoolean(cpp_int const&);
		cpp_boolean optBoolean(cpp_int const&, cpp_boolean const&);
		cpp_double getDouble(cpp_int const&);
		cpp_double optDouble(cpp_int const&);
		cpp_double optDouble(cpp_int const&, cpp_double const&);
		cpp_int getInt(cpp_int const&);
		cpp_int optInt(cpp_int const&);
		cpp_int optInt(cpp_int const&, cpp_int const&);
		cpp_long getLong(cpp_int const&);
		cpp_long optLong(cpp_int const&);
		cpp_long optLong(cpp_int const&, cpp_long const&);
		local_ref< java::lang::String > getString(cpp_int const&);
		local_ref< java::lang::String > optString(cpp_int const&);
		local_ref< java::lang::String > optString(cpp_int const&, local_ref< java::lang::String > const&);
		local_ref< org::json::JSONArray > getJSONArray(cpp_int const&);
		local_ref< org::json::JSONArray > optJSONArray(cpp_int const&);
		local_ref< org::json::JSONObject > getJSONObject(cpp_int const&);
		local_ref< org::json::JSONObject > optJSONObject(cpp_int const&);
		local_ref< org::json::JSONObject > toJSONObject(local_ref< org::json::JSONArray > const&);
		local_ref< java::lang::String > join(local_ref< java::lang::String > const&);
		local_ref< java::lang::String > toString();
		local_ref< java::lang::String > toString(cpp_int const&);
		cpp_boolean equals(local_ref< java::lang::Object > const&);
		cpp_int hashCode();
	}; //class JSONArray

} //namespace json
} //namespace org


} //namespace j2cpp

#endif //J2CPP_ORG_JSON_JSONARRAY_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ORG_JSON_JSONARRAY_HPP_IMPL
#define J2CPP_ORG_JSON_JSONARRAY_HPP_IMPL

namespace j2cpp {


template <>
local_ref< org::json::JSONArray > create< org::json::JSONArray>()
{
	return local_ref< org::json::JSONArray >(
		environment::get().get_jenv()->NewObject(
			get_class<org::json::JSONArray::J2CPP_CLASS_NAME>(),
			get_method_id<org::json::JSONArray::J2CPP_CLASS_NAME, org::json::JSONArray::J2CPP_METHOD_NAME(0), org::json::JSONArray::J2CPP_METHOD_SIGNATURE(0), false>()
		)
	);
}

template <>
local_ref< org::json::JSONArray > create< org::json::JSONArray>(local_ref< java::util::Collection > const &a0)
{
	return local_ref< org::json::JSONArray >(
		environment::get().get_jenv()->NewObject(
			get_class<org::json::JSONArray::J2CPP_CLASS_NAME>(),
			get_method_id<org::json::JSONArray::J2CPP_CLASS_NAME, org::json::JSONArray::J2CPP_METHOD_NAME(1), org::json::JSONArray::J2CPP_METHOD_SIGNATURE(1), false>(),
			a0.get_jtype()
		)
	);
}

template <>
local_ref< org::json::JSONArray > create< org::json::JSONArray>(local_ref< org::json::JSONTokener > const &a0)
{
	return local_ref< org::json::JSONArray >(
		environment::get().get_jenv()->NewObject(
			get_class<org::json::JSONArray::J2CPP_CLASS_NAME>(),
			get_method_id<org::json::JSONArray::J2CPP_CLASS_NAME, org::json::JSONArray::J2CPP_METHOD_NAME(2), org::json::JSONArray::J2CPP_METHOD_SIGNATURE(2), false>(),
			a0.get_jtype()
		)
	);
}

template <>
local_ref< org::json::JSONArray > create< org::json::JSONArray>(local_ref< java::lang::String > const &a0)
{
	return local_ref< org::json::JSONArray >(
		environment::get().get_jenv()->NewObject(
			get_class<org::json::JSONArray::J2CPP_CLASS_NAME>(),
			get_method_id<org::json::JSONArray::J2CPP_CLASS_NAME, org::json::JSONArray::J2CPP_METHOD_NAME(3), org::json::JSONArray::J2CPP_METHOD_SIGNATURE(3), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int org::json::JSONArray::length()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>()
		)
	);
}

local_ref< org::json::JSONArray > org::json::JSONArray::put(cpp_boolean const &a0)
{
	return local_ref< org::json::JSONArray >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< org::json::JSONArray > org::json::JSONArray::put(cpp_double const &a0)
{
	return local_ref< org::json::JSONArray >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< org::json::JSONArray > org::json::JSONArray::put(cpp_int const &a0)
{
	return local_ref< org::json::JSONArray >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(7), J2CPP_METHOD_SIGNATURE(7), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< org::json::JSONArray > org::json::JSONArray::put(cpp_long const &a0)
{
	return local_ref< org::json::JSONArray >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(8), J2CPP_METHOD_SIGNATURE(8), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< org::json::JSONArray > org::json::JSONArray::put(local_ref< java::lang::Object > const &a0)
{
	return local_ref< org::json::JSONArray >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(9), J2CPP_METHOD_SIGNATURE(9), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< org::json::JSONArray > org::json::JSONArray::put(cpp_int const &a0, cpp_boolean const &a1)
{
	return local_ref< org::json::JSONArray >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(10), J2CPP_METHOD_SIGNATURE(10), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< org::json::JSONArray > org::json::JSONArray::put(cpp_int const &a0, cpp_double const &a1)
{
	return local_ref< org::json::JSONArray >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(11), J2CPP_METHOD_SIGNATURE(11), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< org::json::JSONArray > org::json::JSONArray::put(cpp_int const &a0, cpp_int const &a1)
{
	return local_ref< org::json::JSONArray >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(12), J2CPP_METHOD_SIGNATURE(12), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< org::json::JSONArray > org::json::JSONArray::put(cpp_int const &a0, cpp_long const &a1)
{
	return local_ref< org::json::JSONArray >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(13), J2CPP_METHOD_SIGNATURE(13), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< org::json::JSONArray > org::json::JSONArray::put(cpp_int const &a0, local_ref< java::lang::Object > const &a1)
{
	return local_ref< org::json::JSONArray >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(14), J2CPP_METHOD_SIGNATURE(14), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_boolean org::json::JSONArray::isNull(cpp_int const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(15), J2CPP_METHOD_SIGNATURE(15), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::Object > org::json::JSONArray::get(cpp_int const &a0)
{
	return local_ref< java::lang::Object >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(16), J2CPP_METHOD_SIGNATURE(16), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::Object > org::json::JSONArray::opt(cpp_int const &a0)
{
	return local_ref< java::lang::Object >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(17), J2CPP_METHOD_SIGNATURE(17), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean org::json::JSONArray::getBoolean(cpp_int const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(18), J2CPP_METHOD_SIGNATURE(18), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean org::json::JSONArray::optBoolean(cpp_int const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(19), J2CPP_METHOD_SIGNATURE(19), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean org::json::JSONArray::optBoolean(cpp_int const &a0, cpp_boolean const &a1)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(20), J2CPP_METHOD_SIGNATURE(20), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_double org::json::JSONArray::getDouble(cpp_int const &a0)
{
	return cpp_double(
		environment::get().get_jenv()->CallDoubleMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(21), J2CPP_METHOD_SIGNATURE(21), false>(),
			a0.get_jtype()
		)
	);
}

cpp_double org::json::JSONArray::optDouble(cpp_int const &a0)
{
	return cpp_double(
		environment::get().get_jenv()->CallDoubleMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(22), J2CPP_METHOD_SIGNATURE(22), false>(),
			a0.get_jtype()
		)
	);
}

cpp_double org::json::JSONArray::optDouble(cpp_int const &a0, cpp_double const &a1)
{
	return cpp_double(
		environment::get().get_jenv()->CallDoubleMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(23), J2CPP_METHOD_SIGNATURE(23), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_int org::json::JSONArray::getInt(cpp_int const &a0)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(24), J2CPP_METHOD_SIGNATURE(24), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int org::json::JSONArray::optInt(cpp_int const &a0)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(25), J2CPP_METHOD_SIGNATURE(25), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int org::json::JSONArray::optInt(cpp_int const &a0, cpp_int const &a1)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(26), J2CPP_METHOD_SIGNATURE(26), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_long org::json::JSONArray::getLong(cpp_int const &a0)
{
	return cpp_long(
		environment::get().get_jenv()->CallLongMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(27), J2CPP_METHOD_SIGNATURE(27), false>(),
			a0.get_jtype()
		)
	);
}

cpp_long org::json::JSONArray::optLong(cpp_int const &a0)
{
	return cpp_long(
		environment::get().get_jenv()->CallLongMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(28), J2CPP_METHOD_SIGNATURE(28), false>(),
			a0.get_jtype()
		)
	);
}

cpp_long org::json::JSONArray::optLong(cpp_int const &a0, cpp_long const &a1)
{
	return cpp_long(
		environment::get().get_jenv()->CallLongMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(29), J2CPP_METHOD_SIGNATURE(29), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< java::lang::String > org::json::JSONArray::getString(cpp_int const &a0)
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(30), J2CPP_METHOD_SIGNATURE(30), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::String > org::json::JSONArray::optString(cpp_int const &a0)
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(31), J2CPP_METHOD_SIGNATURE(31), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::String > org::json::JSONArray::optString(cpp_int const &a0, local_ref< java::lang::String > const &a1)
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(32), J2CPP_METHOD_SIGNATURE(32), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< org::json::JSONArray > org::json::JSONArray::getJSONArray(cpp_int const &a0)
{
	return local_ref< org::json::JSONArray >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(33), J2CPP_METHOD_SIGNATURE(33), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< org::json::JSONArray > org::json::JSONArray::optJSONArray(cpp_int const &a0)
{
	return local_ref< org::json::JSONArray >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(34), J2CPP_METHOD_SIGNATURE(34), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< org::json::JSONObject > org::json::JSONArray::getJSONObject(cpp_int const &a0)
{
	return local_ref< org::json::JSONObject >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(35), J2CPP_METHOD_SIGNATURE(35), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< org::json::JSONObject > org::json::JSONArray::optJSONObject(cpp_int const &a0)
{
	return local_ref< org::json::JSONObject >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(36), J2CPP_METHOD_SIGNATURE(36), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< org::json::JSONObject > org::json::JSONArray::toJSONObject(local_ref< org::json::JSONArray > const &a0)
{
	return local_ref< org::json::JSONObject >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(37), J2CPP_METHOD_SIGNATURE(37), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::String > org::json::JSONArray::join(local_ref< java::lang::String > const &a0)
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(38), J2CPP_METHOD_SIGNATURE(38), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::String > org::json::JSONArray::toString()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(39), J2CPP_METHOD_SIGNATURE(39), false>()
		)
	);
}

local_ref< java::lang::String > org::json::JSONArray::toString(cpp_int const &a0)
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(40), J2CPP_METHOD_SIGNATURE(40), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean org::json::JSONArray::equals(local_ref< java::lang::Object > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(41), J2CPP_METHOD_SIGNATURE(41), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int org::json::JSONArray::hashCode()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(42), J2CPP_METHOD_SIGNATURE(42), false>()
		)
	);
}


J2CPP_DEFINE_CLASS(org::json::JSONArray,"org/json/JSONArray")
J2CPP_DEFINE_METHOD(org::json::JSONArray,0,"<init>","()V")
J2CPP_DEFINE_METHOD(org::json::JSONArray,1,"<init>","(Ljava/util/Collection;)V")
J2CPP_DEFINE_METHOD(org::json::JSONArray,2,"<init>","(Lorg/json/JSONTokener;)V")
J2CPP_DEFINE_METHOD(org::json::JSONArray,3,"<init>","(Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(org::json::JSONArray,4,"length","()I")
J2CPP_DEFINE_METHOD(org::json::JSONArray,5,"put","(Z)Lorg/json/JSONArray;")
J2CPP_DEFINE_METHOD(org::json::JSONArray,6,"put","(D)Lorg/json/JSONArray;")
J2CPP_DEFINE_METHOD(org::json::JSONArray,7,"put","(I)Lorg/json/JSONArray;")
J2CPP_DEFINE_METHOD(org::json::JSONArray,8,"put","(J)Lorg/json/JSONArray;")
J2CPP_DEFINE_METHOD(org::json::JSONArray,9,"put","(Ljava/lang/Object;)Lorg/json/JSONArray;")
J2CPP_DEFINE_METHOD(org::json::JSONArray,10,"put","(IZ)Lorg/json/JSONArray;")
J2CPP_DEFINE_METHOD(org::json::JSONArray,11,"put","(ID)Lorg/json/JSONArray;")
J2CPP_DEFINE_METHOD(org::json::JSONArray,12,"put","(II)Lorg/json/JSONArray;")
J2CPP_DEFINE_METHOD(org::json::JSONArray,13,"put","(IJ)Lorg/json/JSONArray;")
J2CPP_DEFINE_METHOD(org::json::JSONArray,14,"put","(ILjava/lang/Object;)Lorg/json/JSONArray;")
J2CPP_DEFINE_METHOD(org::json::JSONArray,15,"isNull","(I)Z")
J2CPP_DEFINE_METHOD(org::json::JSONArray,16,"get","(I)Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(org::json::JSONArray,17,"opt","(I)Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(org::json::JSONArray,18,"getBoolean","(I)Z")
J2CPP_DEFINE_METHOD(org::json::JSONArray,19,"optBoolean","(I)Z")
J2CPP_DEFINE_METHOD(org::json::JSONArray,20,"optBoolean","(IZ)Z")
J2CPP_DEFINE_METHOD(org::json::JSONArray,21,"getDouble","(I)D")
J2CPP_DEFINE_METHOD(org::json::JSONArray,22,"optDouble","(I)D")
J2CPP_DEFINE_METHOD(org::json::JSONArray,23,"optDouble","(ID)D")
J2CPP_DEFINE_METHOD(org::json::JSONArray,24,"getInt","(I)I")
J2CPP_DEFINE_METHOD(org::json::JSONArray,25,"optInt","(I)I")
J2CPP_DEFINE_METHOD(org::json::JSONArray,26,"optInt","(II)I")
J2CPP_DEFINE_METHOD(org::json::JSONArray,27,"getLong","(I)J")
J2CPP_DEFINE_METHOD(org::json::JSONArray,28,"optLong","(I)J")
J2CPP_DEFINE_METHOD(org::json::JSONArray,29,"optLong","(IJ)J")
J2CPP_DEFINE_METHOD(org::json::JSONArray,30,"getString","(I)Ljava/lang/String;")
J2CPP_DEFINE_METHOD(org::json::JSONArray,31,"optString","(I)Ljava/lang/String;")
J2CPP_DEFINE_METHOD(org::json::JSONArray,32,"optString","(ILjava/lang/String;)Ljava/lang/String;")
J2CPP_DEFINE_METHOD(org::json::JSONArray,33,"getJSONArray","(I)Lorg/json/JSONArray;")
J2CPP_DEFINE_METHOD(org::json::JSONArray,34,"optJSONArray","(I)Lorg/json/JSONArray;")
J2CPP_DEFINE_METHOD(org::json::JSONArray,35,"getJSONObject","(I)Lorg/json/JSONObject;")
J2CPP_DEFINE_METHOD(org::json::JSONArray,36,"optJSONObject","(I)Lorg/json/JSONObject;")
J2CPP_DEFINE_METHOD(org::json::JSONArray,37,"toJSONObject","(Lorg/json/JSONArray;)Lorg/json/JSONObject;")
J2CPP_DEFINE_METHOD(org::json::JSONArray,38,"join","(Ljava/lang/String;)Ljava/lang/String;")
J2CPP_DEFINE_METHOD(org::json::JSONArray,39,"toString","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(org::json::JSONArray,40,"toString","(I)Ljava/lang/String;")
J2CPP_DEFINE_METHOD(org::json::JSONArray,41,"equals","(Ljava/lang/Object;)Z")
J2CPP_DEFINE_METHOD(org::json::JSONArray,42,"hashCode","()I")

} //namespace j2cpp

#endif //J2CPP_ORG_JSON_JSONARRAY_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
