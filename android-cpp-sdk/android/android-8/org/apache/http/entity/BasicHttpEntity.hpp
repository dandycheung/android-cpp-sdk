/*================================================================================
  code generated by: java2cpp
  class: org.apache.http.entity.BasicHttpEntity
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ORG_APACHE_HTTP_ENTITY_BASICHTTPENTITY_HPP_DECL
#define J2CPP_ORG_APACHE_HTTP_ENTITY_BASICHTTPENTITY_HPP_DECL


namespace j2cpp { namespace java { namespace io { class InputStream; } } }
namespace j2cpp { namespace java { namespace io { class OutputStream; } } }


#include <java/io/InputStream.hpp>
#include <java/io/OutputStream.hpp>


namespace j2cpp {

namespace org { namespace apache { namespace http { namespace entity {

	class BasicHttpEntity;
	class BasicHttpEntity
		: public cpp_object<BasicHttpEntity>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)

		BasicHttpEntity(jobject jobj)
		: cpp_object<BasicHttpEntity>(jobj)
		{
		}

		cpp_long getContentLength();
		local_ref< java::io::InputStream > getContent();
		cpp_boolean isRepeatable();
		void setContentLength(cpp_long const&);
		void setContent(local_ref< java::io::InputStream > const&);
		void writeTo(local_ref< java::io::OutputStream > const&);
		cpp_boolean isStreaming();
		void consumeContent();
	}; //class BasicHttpEntity

} //namespace entity
} //namespace http
} //namespace apache
} //namespace org


} //namespace j2cpp

#endif //J2CPP_ORG_APACHE_HTTP_ENTITY_BASICHTTPENTITY_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ORG_APACHE_HTTP_ENTITY_BASICHTTPENTITY_HPP_IMPL
#define J2CPP_ORG_APACHE_HTTP_ENTITY_BASICHTTPENTITY_HPP_IMPL

namespace j2cpp {


template <>
local_ref< org::apache::http::entity::BasicHttpEntity > create< org::apache::http::entity::BasicHttpEntity>()
{
	return local_ref< org::apache::http::entity::BasicHttpEntity >(
		environment::get().get_jenv()->NewObject(
			get_class<org::apache::http::entity::BasicHttpEntity::J2CPP_CLASS_NAME>(),
			get_method_id<org::apache::http::entity::BasicHttpEntity::J2CPP_CLASS_NAME, org::apache::http::entity::BasicHttpEntity::J2CPP_METHOD_NAME(0), org::apache::http::entity::BasicHttpEntity::J2CPP_METHOD_SIGNATURE(0), false>()
		)
	);
}

cpp_long org::apache::http::entity::BasicHttpEntity::getContentLength()
{
	return cpp_long(
		environment::get().get_jenv()->CallLongMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), false>()
		)
	);
}

local_ref< java::io::InputStream > org::apache::http::entity::BasicHttpEntity::getContent()
{
	return local_ref< java::io::InputStream >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>()
		)
	);
}

cpp_boolean org::apache::http::entity::BasicHttpEntity::isRepeatable()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>()
		)
	);
}

void org::apache::http::entity::BasicHttpEntity::setContentLength(cpp_long const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>(),
			a0.get_jtype()
		)
	);
}

void org::apache::http::entity::BasicHttpEntity::setContent(local_ref< java::io::InputStream > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>(),
			a0.get_jtype()
		)
	);
}

void org::apache::http::entity::BasicHttpEntity::writeTo(local_ref< java::io::OutputStream > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean org::apache::http::entity::BasicHttpEntity::isStreaming()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(7), J2CPP_METHOD_SIGNATURE(7), false>()
		)
	);
}

void org::apache::http::entity::BasicHttpEntity::consumeContent()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(8), J2CPP_METHOD_SIGNATURE(8), false>()
		)
	);
}


J2CPP_DEFINE_CLASS(org::apache::http::entity::BasicHttpEntity,"org/apache/http/entity/BasicHttpEntity")
J2CPP_DEFINE_METHOD(org::apache::http::entity::BasicHttpEntity,0,"<init>","()V")
J2CPP_DEFINE_METHOD(org::apache::http::entity::BasicHttpEntity,1,"getContentLength","()J")
J2CPP_DEFINE_METHOD(org::apache::http::entity::BasicHttpEntity,2,"getContent","()Ljava/io/InputStream;")
J2CPP_DEFINE_METHOD(org::apache::http::entity::BasicHttpEntity,3,"isRepeatable","()Z")
J2CPP_DEFINE_METHOD(org::apache::http::entity::BasicHttpEntity,4,"setContentLength","(J)V")
J2CPP_DEFINE_METHOD(org::apache::http::entity::BasicHttpEntity,5,"setContent","(Ljava/io/InputStream;)V")
J2CPP_DEFINE_METHOD(org::apache::http::entity::BasicHttpEntity,6,"writeTo","(Ljava/io/OutputStream;)V")
J2CPP_DEFINE_METHOD(org::apache::http::entity::BasicHttpEntity,7,"isStreaming","()Z")
J2CPP_DEFINE_METHOD(org::apache::http::entity::BasicHttpEntity,8,"consumeContent","()V")

} //namespace j2cpp

#endif //J2CPP_ORG_APACHE_HTTP_ENTITY_BASICHTTPENTITY_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
