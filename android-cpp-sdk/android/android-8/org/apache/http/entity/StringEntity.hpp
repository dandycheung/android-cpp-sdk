/*================================================================================
  code generated by: java2cpp
  class: org.apache.http.entity.StringEntity
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ORG_APACHE_HTTP_ENTITY_STRINGENTITY_HPP_DECL
#define J2CPP_ORG_APACHE_HTTP_ENTITY_STRINGENTITY_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace io { class InputStream; } } }
namespace j2cpp { namespace java { namespace io { class OutputStream; } } }


#include <java/io/InputStream.hpp>
#include <java/io/OutputStream.hpp>
#include <java/lang/Object.hpp>
#include <java/lang/String.hpp>


namespace j2cpp {

namespace org { namespace apache { namespace http { namespace entity {

	class StringEntity;
	class StringEntity
		: public cpp_object<StringEntity>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_FIELD(0)

		StringEntity(jobject jobj)
		: cpp_object<StringEntity>(jobj)
		{
		}

		cpp_boolean isRepeatable();
		cpp_long getContentLength();
		local_ref< java::io::InputStream > getContent();
		void writeTo(local_ref< java::io::OutputStream > const&);
		cpp_boolean isStreaming();
		local_ref< java::lang::Object > clone();

	}; //class StringEntity

} //namespace entity
} //namespace http
} //namespace apache
} //namespace org


} //namespace j2cpp

#endif //J2CPP_ORG_APACHE_HTTP_ENTITY_STRINGENTITY_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ORG_APACHE_HTTP_ENTITY_STRINGENTITY_HPP_IMPL
#define J2CPP_ORG_APACHE_HTTP_ENTITY_STRINGENTITY_HPP_IMPL

namespace j2cpp {


template <>
local_ref< org::apache::http::entity::StringEntity > create< org::apache::http::entity::StringEntity>(local_ref< java::lang::String > const &a0, local_ref< java::lang::String > const &a1)
{
	return local_ref< org::apache::http::entity::StringEntity >(
		environment::get().get_jenv()->NewObject(
			get_class<org::apache::http::entity::StringEntity::J2CPP_CLASS_NAME>(),
			get_method_id<org::apache::http::entity::StringEntity::J2CPP_CLASS_NAME, org::apache::http::entity::StringEntity::J2CPP_METHOD_NAME(0), org::apache::http::entity::StringEntity::J2CPP_METHOD_SIGNATURE(0), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

template <>
local_ref< org::apache::http::entity::StringEntity > create< org::apache::http::entity::StringEntity>(local_ref< java::lang::String > const &a0)
{
	return local_ref< org::apache::http::entity::StringEntity >(
		environment::get().get_jenv()->NewObject(
			get_class<org::apache::http::entity::StringEntity::J2CPP_CLASS_NAME>(),
			get_method_id<org::apache::http::entity::StringEntity::J2CPP_CLASS_NAME, org::apache::http::entity::StringEntity::J2CPP_METHOD_NAME(1), org::apache::http::entity::StringEntity::J2CPP_METHOD_SIGNATURE(1), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean org::apache::http::entity::StringEntity::isRepeatable()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>()
		)
	);
}

cpp_long org::apache::http::entity::StringEntity::getContentLength()
{
	return cpp_long(
		environment::get().get_jenv()->CallLongMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>()
		)
	);
}

local_ref< java::io::InputStream > org::apache::http::entity::StringEntity::getContent()
{
	return local_ref< java::io::InputStream >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>()
		)
	);
}

void org::apache::http::entity::StringEntity::writeTo(local_ref< java::io::OutputStream > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean org::apache::http::entity::StringEntity::isStreaming()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>()
		)
	);
}

local_ref< java::lang::Object > org::apache::http::entity::StringEntity::clone()
{
	return local_ref< java::lang::Object >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(7), J2CPP_METHOD_SIGNATURE(7), false>()
		)
	);
}



J2CPP_DEFINE_CLASS(org::apache::http::entity::StringEntity,"org/apache/http/entity/StringEntity")
J2CPP_DEFINE_METHOD(org::apache::http::entity::StringEntity,0,"<init>","(Ljava/lang/String;Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(org::apache::http::entity::StringEntity,1,"<init>","(Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(org::apache::http::entity::StringEntity,2,"isRepeatable","()Z")
J2CPP_DEFINE_METHOD(org::apache::http::entity::StringEntity,3,"getContentLength","()J")
J2CPP_DEFINE_METHOD(org::apache::http::entity::StringEntity,4,"getContent","()Ljava/io/InputStream;")
J2CPP_DEFINE_METHOD(org::apache::http::entity::StringEntity,5,"writeTo","(Ljava/io/OutputStream;)V")
J2CPP_DEFINE_METHOD(org::apache::http::entity::StringEntity,6,"isStreaming","()Z")
J2CPP_DEFINE_METHOD(org::apache::http::entity::StringEntity,7,"clone","()Ljava/lang/Object;")
J2CPP_DEFINE_FIELD(org::apache::http::entity::StringEntity,0,"content","[B")

} //namespace j2cpp

#endif //J2CPP_ORG_APACHE_HTTP_ENTITY_STRINGENTITY_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
