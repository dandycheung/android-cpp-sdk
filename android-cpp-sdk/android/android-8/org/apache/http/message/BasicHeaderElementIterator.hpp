/*================================================================================
  code generated by: java2cpp
  class: org.apache.http.message.BasicHeaderElementIterator
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ORG_APACHE_HTTP_MESSAGE_BASICHEADERELEMENTITERATOR_HPP_DECL
#define J2CPP_ORG_APACHE_HTTP_MESSAGE_BASICHEADERELEMENTITERATOR_HPP_DECL


namespace j2cpp { namespace org { namespace apache { namespace http { namespace message { class HeaderValueParser; } } } } }
namespace j2cpp { namespace org { namespace apache { namespace http { class HeaderElement; } } } }
namespace j2cpp { namespace org { namespace apache { namespace http { class HeaderIterator; } } } }
namespace j2cpp { namespace java { namespace lang { class Object; } } }


#include <java/lang/Object.hpp>
#include <org/apache/http/HeaderElement.hpp>
#include <org/apache/http/HeaderIterator.hpp>
#include <org/apache/http/message/HeaderValueParser.hpp>


namespace j2cpp {

namespace org { namespace apache { namespace http { namespace message {

	class BasicHeaderElementIterator;
	class BasicHeaderElementIterator
		: public cpp_object<BasicHeaderElementIterator>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)

		BasicHeaderElementIterator(jobject jobj)
		: cpp_object<BasicHeaderElementIterator>(jobj)
		{
		}

		cpp_boolean hasNext();
		local_ref< org::apache::http::HeaderElement > nextElement();
		local_ref< java::lang::Object > next();
		void remove();
	}; //class BasicHeaderElementIterator

} //namespace message
} //namespace http
} //namespace apache
} //namespace org


} //namespace j2cpp

#endif //J2CPP_ORG_APACHE_HTTP_MESSAGE_BASICHEADERELEMENTITERATOR_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ORG_APACHE_HTTP_MESSAGE_BASICHEADERELEMENTITERATOR_HPP_IMPL
#define J2CPP_ORG_APACHE_HTTP_MESSAGE_BASICHEADERELEMENTITERATOR_HPP_IMPL

namespace j2cpp {


template <>
local_ref< org::apache::http::message::BasicHeaderElementIterator > create< org::apache::http::message::BasicHeaderElementIterator>(local_ref< org::apache::http::HeaderIterator > const &a0, local_ref< org::apache::http::message::HeaderValueParser > const &a1)
{
	return local_ref< org::apache::http::message::BasicHeaderElementIterator >(
		environment::get().get_jenv()->NewObject(
			get_class<org::apache::http::message::BasicHeaderElementIterator::J2CPP_CLASS_NAME>(),
			get_method_id<org::apache::http::message::BasicHeaderElementIterator::J2CPP_CLASS_NAME, org::apache::http::message::BasicHeaderElementIterator::J2CPP_METHOD_NAME(0), org::apache::http::message::BasicHeaderElementIterator::J2CPP_METHOD_SIGNATURE(0), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

template <>
local_ref< org::apache::http::message::BasicHeaderElementIterator > create< org::apache::http::message::BasicHeaderElementIterator>(local_ref< org::apache::http::HeaderIterator > const &a0)
{
	return local_ref< org::apache::http::message::BasicHeaderElementIterator >(
		environment::get().get_jenv()->NewObject(
			get_class<org::apache::http::message::BasicHeaderElementIterator::J2CPP_CLASS_NAME>(),
			get_method_id<org::apache::http::message::BasicHeaderElementIterator::J2CPP_CLASS_NAME, org::apache::http::message::BasicHeaderElementIterator::J2CPP_METHOD_NAME(1), org::apache::http::message::BasicHeaderElementIterator::J2CPP_METHOD_SIGNATURE(1), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean org::apache::http::message::BasicHeaderElementIterator::hasNext()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>()
		)
	);
}

local_ref< org::apache::http::HeaderElement > org::apache::http::message::BasicHeaderElementIterator::nextElement()
{
	return local_ref< org::apache::http::HeaderElement >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>()
		)
	);
}

local_ref< java::lang::Object > org::apache::http::message::BasicHeaderElementIterator::next()
{
	return local_ref< java::lang::Object >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>()
		)
	);
}

void org::apache::http::message::BasicHeaderElementIterator::remove()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>()
		)
	);
}


J2CPP_DEFINE_CLASS(org::apache::http::message::BasicHeaderElementIterator,"org/apache/http/message/BasicHeaderElementIterator")
J2CPP_DEFINE_METHOD(org::apache::http::message::BasicHeaderElementIterator,0,"<init>","(Lorg/apache/http/HeaderIterator;Lorg/apache/http/message/HeaderValueParser;)V")
J2CPP_DEFINE_METHOD(org::apache::http::message::BasicHeaderElementIterator,1,"<init>","(Lorg/apache/http/HeaderIterator;)V")
J2CPP_DEFINE_METHOD(org::apache::http::message::BasicHeaderElementIterator,2,"hasNext","()Z")
J2CPP_DEFINE_METHOD(org::apache::http::message::BasicHeaderElementIterator,3,"nextElement","()Lorg/apache/http/HeaderElement;")
J2CPP_DEFINE_METHOD(org::apache::http::message::BasicHeaderElementIterator,4,"next","()Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(org::apache::http::message::BasicHeaderElementIterator,5,"remove","()V")

} //namespace j2cpp

#endif //J2CPP_ORG_APACHE_HTTP_MESSAGE_BASICHEADERELEMENTITERATOR_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
