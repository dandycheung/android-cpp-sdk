/*================================================================================
  code generated by: java2cpp
  class: org.apache.http.util.CharArrayBuffer
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ORG_APACHE_HTTP_UTIL_CHARARRAYBUFFER_HPP_DECL
#define J2CPP_ORG_APACHE_HTTP_UTIL_CHARARRAYBUFFER_HPP_DECL


namespace j2cpp { namespace org { namespace apache { namespace http { namespace util { class ByteArrayBuffer; } } } } }
namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace lang { class Object; } } }


#include <java/lang/Object.hpp>
#include <java/lang/String.hpp>
#include <org/apache/http/util/ByteArrayBuffer.hpp>


namespace j2cpp {

namespace org { namespace apache { namespace http { namespace util {

	class CharArrayBuffer;
	class CharArrayBuffer
		: public cpp_object<CharArrayBuffer>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_METHOD(12)
		J2CPP_DECLARE_METHOD(13)
		J2CPP_DECLARE_METHOD(14)
		J2CPP_DECLARE_METHOD(15)
		J2CPP_DECLARE_METHOD(16)
		J2CPP_DECLARE_METHOD(17)
		J2CPP_DECLARE_METHOD(18)
		J2CPP_DECLARE_METHOD(19)
		J2CPP_DECLARE_METHOD(20)
		J2CPP_DECLARE_METHOD(21)
		J2CPP_DECLARE_METHOD(22)
		J2CPP_DECLARE_METHOD(23)

		CharArrayBuffer(jobject jobj)
		: cpp_object<CharArrayBuffer>(jobj)
		{
		}

		void append(local_ref< cpp_char_array<1> > const&, cpp_int const&, cpp_int const&);
		void append(local_ref< java::lang::String > const&);
		void append(local_ref< org::apache::http::util::CharArrayBuffer > const&, cpp_int const&, cpp_int const&);
		void append(local_ref< org::apache::http::util::CharArrayBuffer > const&);
		void append(cpp_char const&);
		void append(local_ref< cpp_byte_array<1> > const&, cpp_int const&, cpp_int const&);
		void append(local_ref< org::apache::http::util::ByteArrayBuffer > const&, cpp_int const&, cpp_int const&);
		void append(local_ref< java::lang::Object > const&);
		void clear();
		local_ref< cpp_char_array<1> > toCharArray();
		cpp_char charAt(cpp_int const&);
		local_ref< cpp_char_array<1> > buffer();
		cpp_int capacity();
		cpp_int length();
		void ensureCapacity(cpp_int const&);
		void setLength(cpp_int const&);
		cpp_boolean isEmpty();
		cpp_boolean isFull();
		cpp_int indexOf(cpp_int const&, cpp_int const&, cpp_int const&);
		cpp_int indexOf(cpp_int const&);
		local_ref< java::lang::String > substring(cpp_int const&, cpp_int const&);
		local_ref< java::lang::String > substringTrimmed(cpp_int const&, cpp_int const&);
		local_ref< java::lang::String > toString();
	}; //class CharArrayBuffer

} //namespace util
} //namespace http
} //namespace apache
} //namespace org


} //namespace j2cpp

#endif //J2CPP_ORG_APACHE_HTTP_UTIL_CHARARRAYBUFFER_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ORG_APACHE_HTTP_UTIL_CHARARRAYBUFFER_HPP_IMPL
#define J2CPP_ORG_APACHE_HTTP_UTIL_CHARARRAYBUFFER_HPP_IMPL

namespace j2cpp {


template <>
local_ref< org::apache::http::util::CharArrayBuffer > create< org::apache::http::util::CharArrayBuffer>(cpp_int const &a0)
{
	return local_ref< org::apache::http::util::CharArrayBuffer >(
		environment::get().get_jenv()->NewObject(
			get_class<org::apache::http::util::CharArrayBuffer::J2CPP_CLASS_NAME>(),
			get_method_id<org::apache::http::util::CharArrayBuffer::J2CPP_CLASS_NAME, org::apache::http::util::CharArrayBuffer::J2CPP_METHOD_NAME(0), org::apache::http::util::CharArrayBuffer::J2CPP_METHOD_SIGNATURE(0), false>(),
			a0.get_jtype()
		)
	);
}

void org::apache::http::util::CharArrayBuffer::append(local_ref< cpp_char_array<1> > const &a0, cpp_int const &a1, cpp_int const &a2)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

void org::apache::http::util::CharArrayBuffer::append(local_ref< java::lang::String > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>(),
			a0.get_jtype()
		)
	);
}

void org::apache::http::util::CharArrayBuffer::append(local_ref< org::apache::http::util::CharArrayBuffer > const &a0, cpp_int const &a1, cpp_int const &a2)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

void org::apache::http::util::CharArrayBuffer::append(local_ref< org::apache::http::util::CharArrayBuffer > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>(),
			a0.get_jtype()
		)
	);
}

void org::apache::http::util::CharArrayBuffer::append(cpp_char const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>(),
			a0.get_jtype()
		)
	);
}

void org::apache::http::util::CharArrayBuffer::append(local_ref< cpp_byte_array<1> > const &a0, cpp_int const &a1, cpp_int const &a2)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

void org::apache::http::util::CharArrayBuffer::append(local_ref< org::apache::http::util::ByteArrayBuffer > const &a0, cpp_int const &a1, cpp_int const &a2)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(7), J2CPP_METHOD_SIGNATURE(7), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

void org::apache::http::util::CharArrayBuffer::append(local_ref< java::lang::Object > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(8), J2CPP_METHOD_SIGNATURE(8), false>(),
			a0.get_jtype()
		)
	);
}

void org::apache::http::util::CharArrayBuffer::clear()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(9), J2CPP_METHOD_SIGNATURE(9), false>()
		)
	);
}

local_ref< cpp_char_array<1> > org::apache::http::util::CharArrayBuffer::toCharArray()
{
	return local_ref< cpp_char_array<1> >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(10), J2CPP_METHOD_SIGNATURE(10), false>()
		)
	);
}

cpp_char org::apache::http::util::CharArrayBuffer::charAt(cpp_int const &a0)
{
	return cpp_char(
		environment::get().get_jenv()->CallCharMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(11), J2CPP_METHOD_SIGNATURE(11), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< cpp_char_array<1> > org::apache::http::util::CharArrayBuffer::buffer()
{
	return local_ref< cpp_char_array<1> >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(12), J2CPP_METHOD_SIGNATURE(12), false>()
		)
	);
}

cpp_int org::apache::http::util::CharArrayBuffer::capacity()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(13), J2CPP_METHOD_SIGNATURE(13), false>()
		)
	);
}

cpp_int org::apache::http::util::CharArrayBuffer::length()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(14), J2CPP_METHOD_SIGNATURE(14), false>()
		)
	);
}

void org::apache::http::util::CharArrayBuffer::ensureCapacity(cpp_int const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(15), J2CPP_METHOD_SIGNATURE(15), false>(),
			a0.get_jtype()
		)
	);
}

void org::apache::http::util::CharArrayBuffer::setLength(cpp_int const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(16), J2CPP_METHOD_SIGNATURE(16), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean org::apache::http::util::CharArrayBuffer::isEmpty()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(17), J2CPP_METHOD_SIGNATURE(17), false>()
		)
	);
}

cpp_boolean org::apache::http::util::CharArrayBuffer::isFull()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(18), J2CPP_METHOD_SIGNATURE(18), false>()
		)
	);
}

cpp_int org::apache::http::util::CharArrayBuffer::indexOf(cpp_int const &a0, cpp_int const &a1, cpp_int const &a2)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(19), J2CPP_METHOD_SIGNATURE(19), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

cpp_int org::apache::http::util::CharArrayBuffer::indexOf(cpp_int const &a0)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(20), J2CPP_METHOD_SIGNATURE(20), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::String > org::apache::http::util::CharArrayBuffer::substring(cpp_int const &a0, cpp_int const &a1)
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(21), J2CPP_METHOD_SIGNATURE(21), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< java::lang::String > org::apache::http::util::CharArrayBuffer::substringTrimmed(cpp_int const &a0, cpp_int const &a1)
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(22), J2CPP_METHOD_SIGNATURE(22), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< java::lang::String > org::apache::http::util::CharArrayBuffer::toString()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(23), J2CPP_METHOD_SIGNATURE(23), false>()
		)
	);
}


J2CPP_DEFINE_CLASS(org::apache::http::util::CharArrayBuffer,"org/apache/http/util/CharArrayBuffer")
J2CPP_DEFINE_METHOD(org::apache::http::util::CharArrayBuffer,0,"<init>","(I)V")
J2CPP_DEFINE_METHOD(org::apache::http::util::CharArrayBuffer,1,"append","([CII)V")
J2CPP_DEFINE_METHOD(org::apache::http::util::CharArrayBuffer,2,"append","(Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(org::apache::http::util::CharArrayBuffer,3,"append","(Lorg/apache/http/util/CharArrayBuffer;II)V")
J2CPP_DEFINE_METHOD(org::apache::http::util::CharArrayBuffer,4,"append","(Lorg/apache/http/util/CharArrayBuffer;)V")
J2CPP_DEFINE_METHOD(org::apache::http::util::CharArrayBuffer,5,"append","(C)V")
J2CPP_DEFINE_METHOD(org::apache::http::util::CharArrayBuffer,6,"append","([BII)V")
J2CPP_DEFINE_METHOD(org::apache::http::util::CharArrayBuffer,7,"append","(Lorg/apache/http/util/ByteArrayBuffer;II)V")
J2CPP_DEFINE_METHOD(org::apache::http::util::CharArrayBuffer,8,"append","(Ljava/lang/Object;)V")
J2CPP_DEFINE_METHOD(org::apache::http::util::CharArrayBuffer,9,"clear","()V")
J2CPP_DEFINE_METHOD(org::apache::http::util::CharArrayBuffer,10,"toCharArray","()[C")
J2CPP_DEFINE_METHOD(org::apache::http::util::CharArrayBuffer,11,"charAt","(I)C")
J2CPP_DEFINE_METHOD(org::apache::http::util::CharArrayBuffer,12,"buffer","()[C")
J2CPP_DEFINE_METHOD(org::apache::http::util::CharArrayBuffer,13,"capacity","()I")
J2CPP_DEFINE_METHOD(org::apache::http::util::CharArrayBuffer,14,"length","()I")
J2CPP_DEFINE_METHOD(org::apache::http::util::CharArrayBuffer,15,"ensureCapacity","(I)V")
J2CPP_DEFINE_METHOD(org::apache::http::util::CharArrayBuffer,16,"setLength","(I)V")
J2CPP_DEFINE_METHOD(org::apache::http::util::CharArrayBuffer,17,"isEmpty","()Z")
J2CPP_DEFINE_METHOD(org::apache::http::util::CharArrayBuffer,18,"isFull","()Z")
J2CPP_DEFINE_METHOD(org::apache::http::util::CharArrayBuffer,19,"indexOf","(III)I")
J2CPP_DEFINE_METHOD(org::apache::http::util::CharArrayBuffer,20,"indexOf","(I)I")
J2CPP_DEFINE_METHOD(org::apache::http::util::CharArrayBuffer,21,"substring","(II)Ljava/lang/String;")
J2CPP_DEFINE_METHOD(org::apache::http::util::CharArrayBuffer,22,"substringTrimmed","(II)Ljava/lang/String;")
J2CPP_DEFINE_METHOD(org::apache::http::util::CharArrayBuffer,23,"toString","()Ljava/lang/String;")

} //namespace j2cpp

#endif //J2CPP_ORG_APACHE_HTTP_UTIL_CHARARRAYBUFFER_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
