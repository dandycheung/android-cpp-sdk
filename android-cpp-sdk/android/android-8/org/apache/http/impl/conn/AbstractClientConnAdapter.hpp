/*================================================================================
  code generated by: java2cpp
  class: org.apache.http.impl.conn.AbstractClientConnAdapter
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ORG_APACHE_HTTP_IMPL_CONN_ABSTRACTCLIENTCONNADAPTER_HPP_DECL
#define J2CPP_ORG_APACHE_HTTP_IMPL_CONN_ABSTRACTCLIENTCONNADAPTER_HPP_DECL


namespace j2cpp { namespace org { namespace apache { namespace http { class HttpResponse; } } } }
namespace j2cpp { namespace org { namespace apache { namespace http { class HttpEntityEnclosingRequest; } } } }
namespace j2cpp { namespace org { namespace apache { namespace http { class HttpConnectionMetrics; } } } }
namespace j2cpp { namespace org { namespace apache { namespace http { class HttpRequest; } } } }
namespace j2cpp { namespace java { namespace net { class InetAddress; } } }
namespace j2cpp { namespace java { namespace util { namespace concurrent { class TimeUnit; } } } }
namespace j2cpp { namespace javax { namespace net { namespace ssl { class SSLSession; } } } }


#include <java/net/InetAddress.hpp>
#include <java/util/concurrent/TimeUnit.hpp>
#include <javax/net/ssl/SSLSession.hpp>
#include <org/apache/http/HttpConnectionMetrics.hpp>
#include <org/apache/http/HttpEntityEnclosingRequest.hpp>
#include <org/apache/http/HttpRequest.hpp>
#include <org/apache/http/HttpResponse.hpp>


namespace j2cpp {

namespace org { namespace apache { namespace http { namespace impl { namespace conn {

	class AbstractClientConnAdapter;
	class AbstractClientConnAdapter
		: public cpp_object<AbstractClientConnAdapter>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_METHOD(12)
		J2CPP_DECLARE_METHOD(13)
		J2CPP_DECLARE_METHOD(14)
		J2CPP_DECLARE_METHOD(15)
		J2CPP_DECLARE_METHOD(16)
		J2CPP_DECLARE_METHOD(17)
		J2CPP_DECLARE_METHOD(18)
		J2CPP_DECLARE_METHOD(19)
		J2CPP_DECLARE_METHOD(20)
		J2CPP_DECLARE_METHOD(21)
		J2CPP_DECLARE_METHOD(22)
		J2CPP_DECLARE_METHOD(23)
		J2CPP_DECLARE_METHOD(24)
		J2CPP_DECLARE_METHOD(25)
		J2CPP_DECLARE_METHOD(26)
		J2CPP_DECLARE_METHOD(27)
		J2CPP_DECLARE_METHOD(28)

		AbstractClientConnAdapter(jobject jobj)
		: cpp_object<AbstractClientConnAdapter>(jobj)
		{
		}

		cpp_boolean isOpen();
		cpp_boolean isStale();
		void setSocketTimeout(cpp_int const&);
		cpp_int getSocketTimeout();
		local_ref< org::apache::http::HttpConnectionMetrics > getMetrics();
		void flush();
		cpp_boolean isResponseAvailable(cpp_int const&);
		void receiveResponseEntity(local_ref< org::apache::http::HttpResponse > const&);
		local_ref< org::apache::http::HttpResponse > receiveResponseHeader();
		void sendRequestEntity(local_ref< org::apache::http::HttpEntityEnclosingRequest > const&);
		void sendRequestHeader(local_ref< org::apache::http::HttpRequest > const&);
		local_ref< java::net::InetAddress > getLocalAddress();
		cpp_int getLocalPort();
		local_ref< java::net::InetAddress > getRemoteAddress();
		cpp_int getRemotePort();
		cpp_boolean isSecure();
		local_ref< javax::net::ssl::SSLSession > getSSLSession();
		void markReusable();
		void unmarkReusable();
		cpp_boolean isMarkedReusable();
		void setIdleDuration(cpp_long const&, local_ref< java::util::concurrent::TimeUnit > const&);
		void releaseConnection();
		void abortConnection();
	}; //class AbstractClientConnAdapter

} //namespace conn
} //namespace impl
} //namespace http
} //namespace apache
} //namespace org


} //namespace j2cpp

#endif //J2CPP_ORG_APACHE_HTTP_IMPL_CONN_ABSTRACTCLIENTCONNADAPTER_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ORG_APACHE_HTTP_IMPL_CONN_ABSTRACTCLIENTCONNADAPTER_HPP_IMPL
#define J2CPP_ORG_APACHE_HTTP_IMPL_CONN_ABSTRACTCLIENTCONNADAPTER_HPP_IMPL

namespace j2cpp {


template <>
local_ref< org::apache::http::impl::conn::AbstractClientConnAdapter > create< org::apache::http::impl::conn::AbstractClientConnAdapter>(local_ref< org::apache::http::conn::ClientConnectionManager > const &a0, local_ref< org::apache::http::conn::OperatedClientConnection > const &a1)
{
	return local_ref< org::apache::http::impl::conn::AbstractClientConnAdapter >(
		environment::get().get_jenv()->NewObject(
			get_class<org::apache::http::impl::conn::AbstractClientConnAdapter::J2CPP_CLASS_NAME>(),
			get_method_id<org::apache::http::impl::conn::AbstractClientConnAdapter::J2CPP_CLASS_NAME, org::apache::http::impl::conn::AbstractClientConnAdapter::J2CPP_METHOD_NAME(0), org::apache::http::impl::conn::AbstractClientConnAdapter::J2CPP_METHOD_SIGNATURE(0), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}






cpp_boolean org::apache::http::impl::conn::AbstractClientConnAdapter::isOpen()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>()
		)
	);
}

cpp_boolean org::apache::http::impl::conn::AbstractClientConnAdapter::isStale()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(7), J2CPP_METHOD_SIGNATURE(7), false>()
		)
	);
}

void org::apache::http::impl::conn::AbstractClientConnAdapter::setSocketTimeout(cpp_int const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(8), J2CPP_METHOD_SIGNATURE(8), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int org::apache::http::impl::conn::AbstractClientConnAdapter::getSocketTimeout()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(9), J2CPP_METHOD_SIGNATURE(9), false>()
		)
	);
}

local_ref< org::apache::http::HttpConnectionMetrics > org::apache::http::impl::conn::AbstractClientConnAdapter::getMetrics()
{
	return local_ref< org::apache::http::HttpConnectionMetrics >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(10), J2CPP_METHOD_SIGNATURE(10), false>()
		)
	);
}

void org::apache::http::impl::conn::AbstractClientConnAdapter::flush()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(11), J2CPP_METHOD_SIGNATURE(11), false>()
		)
	);
}

cpp_boolean org::apache::http::impl::conn::AbstractClientConnAdapter::isResponseAvailable(cpp_int const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(12), J2CPP_METHOD_SIGNATURE(12), false>(),
			a0.get_jtype()
		)
	);
}

void org::apache::http::impl::conn::AbstractClientConnAdapter::receiveResponseEntity(local_ref< org::apache::http::HttpResponse > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(13), J2CPP_METHOD_SIGNATURE(13), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< org::apache::http::HttpResponse > org::apache::http::impl::conn::AbstractClientConnAdapter::receiveResponseHeader()
{
	return local_ref< org::apache::http::HttpResponse >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(14), J2CPP_METHOD_SIGNATURE(14), false>()
		)
	);
}

void org::apache::http::impl::conn::AbstractClientConnAdapter::sendRequestEntity(local_ref< org::apache::http::HttpEntityEnclosingRequest > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(15), J2CPP_METHOD_SIGNATURE(15), false>(),
			a0.get_jtype()
		)
	);
}

void org::apache::http::impl::conn::AbstractClientConnAdapter::sendRequestHeader(local_ref< org::apache::http::HttpRequest > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(16), J2CPP_METHOD_SIGNATURE(16), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::net::InetAddress > org::apache::http::impl::conn::AbstractClientConnAdapter::getLocalAddress()
{
	return local_ref< java::net::InetAddress >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(17), J2CPP_METHOD_SIGNATURE(17), false>()
		)
	);
}

cpp_int org::apache::http::impl::conn::AbstractClientConnAdapter::getLocalPort()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(18), J2CPP_METHOD_SIGNATURE(18), false>()
		)
	);
}

local_ref< java::net::InetAddress > org::apache::http::impl::conn::AbstractClientConnAdapter::getRemoteAddress()
{
	return local_ref< java::net::InetAddress >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(19), J2CPP_METHOD_SIGNATURE(19), false>()
		)
	);
}

cpp_int org::apache::http::impl::conn::AbstractClientConnAdapter::getRemotePort()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(20), J2CPP_METHOD_SIGNATURE(20), false>()
		)
	);
}

cpp_boolean org::apache::http::impl::conn::AbstractClientConnAdapter::isSecure()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(21), J2CPP_METHOD_SIGNATURE(21), false>()
		)
	);
}

local_ref< javax::net::ssl::SSLSession > org::apache::http::impl::conn::AbstractClientConnAdapter::getSSLSession()
{
	return local_ref< javax::net::ssl::SSLSession >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(22), J2CPP_METHOD_SIGNATURE(22), false>()
		)
	);
}

void org::apache::http::impl::conn::AbstractClientConnAdapter::markReusable()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(23), J2CPP_METHOD_SIGNATURE(23), false>()
		)
	);
}

void org::apache::http::impl::conn::AbstractClientConnAdapter::unmarkReusable()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(24), J2CPP_METHOD_SIGNATURE(24), false>()
		)
	);
}

cpp_boolean org::apache::http::impl::conn::AbstractClientConnAdapter::isMarkedReusable()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(25), J2CPP_METHOD_SIGNATURE(25), false>()
		)
	);
}

void org::apache::http::impl::conn::AbstractClientConnAdapter::setIdleDuration(cpp_long const &a0, local_ref< java::util::concurrent::TimeUnit > const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(26), J2CPP_METHOD_SIGNATURE(26), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void org::apache::http::impl::conn::AbstractClientConnAdapter::releaseConnection()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(27), J2CPP_METHOD_SIGNATURE(27), false>()
		)
	);
}

void org::apache::http::impl::conn::AbstractClientConnAdapter::abortConnection()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(28), J2CPP_METHOD_SIGNATURE(28), false>()
		)
	);
}


J2CPP_DEFINE_CLASS(org::apache::http::impl::conn::AbstractClientConnAdapter,"org/apache/http/impl/conn/AbstractClientConnAdapter")
J2CPP_DEFINE_METHOD(org::apache::http::impl::conn::AbstractClientConnAdapter,0,"<init>","(Lorg/apache/http/conn/ClientConnectionManager;Lorg/apache/http/conn/OperatedClientConnection;)V")
J2CPP_DEFINE_METHOD(org::apache::http::impl::conn::AbstractClientConnAdapter,1,"detach","()V")
J2CPP_DEFINE_METHOD(org::apache::http::impl::conn::AbstractClientConnAdapter,2,"getWrappedConnection","()Lorg/apache/http/conn/OperatedClientConnection;")
J2CPP_DEFINE_METHOD(org::apache::http::impl::conn::AbstractClientConnAdapter,3,"getManager","()Lorg/apache/http/conn/ClientConnectionManager;")
J2CPP_DEFINE_METHOD(org::apache::http::impl::conn::AbstractClientConnAdapter,4,"assertNotAborted","()V")
J2CPP_DEFINE_METHOD(org::apache::http::impl::conn::AbstractClientConnAdapter,5,"assertValid","(Lorg/apache/http/conn/OperatedClientConnection;)V")
J2CPP_DEFINE_METHOD(org::apache::http::impl::conn::AbstractClientConnAdapter,6,"isOpen","()Z")
J2CPP_DEFINE_METHOD(org::apache::http::impl::conn::AbstractClientConnAdapter,7,"isStale","()Z")
J2CPP_DEFINE_METHOD(org::apache::http::impl::conn::AbstractClientConnAdapter,8,"setSocketTimeout","(I)V")
J2CPP_DEFINE_METHOD(org::apache::http::impl::conn::AbstractClientConnAdapter,9,"getSocketTimeout","()I")
J2CPP_DEFINE_METHOD(org::apache::http::impl::conn::AbstractClientConnAdapter,10,"getMetrics","()Lorg/apache/http/HttpConnectionMetrics;")
J2CPP_DEFINE_METHOD(org::apache::http::impl::conn::AbstractClientConnAdapter,11,"flush","()V")
J2CPP_DEFINE_METHOD(org::apache::http::impl::conn::AbstractClientConnAdapter,12,"isResponseAvailable","(I)Z")
J2CPP_DEFINE_METHOD(org::apache::http::impl::conn::AbstractClientConnAdapter,13,"receiveResponseEntity","(Lorg/apache/http/HttpResponse;)V")
J2CPP_DEFINE_METHOD(org::apache::http::impl::conn::AbstractClientConnAdapter,14,"receiveResponseHeader","()Lorg/apache/http/HttpResponse;")
J2CPP_DEFINE_METHOD(org::apache::http::impl::conn::AbstractClientConnAdapter,15,"sendRequestEntity","(Lorg/apache/http/HttpEntityEnclosingRequest;)V")
J2CPP_DEFINE_METHOD(org::apache::http::impl::conn::AbstractClientConnAdapter,16,"sendRequestHeader","(Lorg/apache/http/HttpRequest;)V")
J2CPP_DEFINE_METHOD(org::apache::http::impl::conn::AbstractClientConnAdapter,17,"getLocalAddress","()Ljava/net/InetAddress;")
J2CPP_DEFINE_METHOD(org::apache::http::impl::conn::AbstractClientConnAdapter,18,"getLocalPort","()I")
J2CPP_DEFINE_METHOD(org::apache::http::impl::conn::AbstractClientConnAdapter,19,"getRemoteAddress","()Ljava/net/InetAddress;")
J2CPP_DEFINE_METHOD(org::apache::http::impl::conn::AbstractClientConnAdapter,20,"getRemotePort","()I")
J2CPP_DEFINE_METHOD(org::apache::http::impl::conn::AbstractClientConnAdapter,21,"isSecure","()Z")
J2CPP_DEFINE_METHOD(org::apache::http::impl::conn::AbstractClientConnAdapter,22,"getSSLSession","()Ljavax/net/ssl/SSLSession;")
J2CPP_DEFINE_METHOD(org::apache::http::impl::conn::AbstractClientConnAdapter,23,"markReusable","()V")
J2CPP_DEFINE_METHOD(org::apache::http::impl::conn::AbstractClientConnAdapter,24,"unmarkReusable","()V")
J2CPP_DEFINE_METHOD(org::apache::http::impl::conn::AbstractClientConnAdapter,25,"isMarkedReusable","()Z")
J2CPP_DEFINE_METHOD(org::apache::http::impl::conn::AbstractClientConnAdapter,26,"setIdleDuration","(JLjava/util/concurrent/TimeUnit;)V")
J2CPP_DEFINE_METHOD(org::apache::http::impl::conn::AbstractClientConnAdapter,27,"releaseConnection","()V")
J2CPP_DEFINE_METHOD(org::apache::http::impl::conn::AbstractClientConnAdapter,28,"abortConnection","()V")

} //namespace j2cpp

#endif //J2CPP_ORG_APACHE_HTTP_IMPL_CONN_ABSTRACTCLIENTCONNADAPTER_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
