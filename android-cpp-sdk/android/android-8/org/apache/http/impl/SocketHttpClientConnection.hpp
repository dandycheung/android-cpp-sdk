/*================================================================================
  code generated by: java2cpp
  class: org.apache.http.impl.SocketHttpClientConnection
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ORG_APACHE_HTTP_IMPL_SOCKETHTTPCLIENTCONNECTION_HPP_DECL
#define J2CPP_ORG_APACHE_HTTP_IMPL_SOCKETHTTPCLIENTCONNECTION_HPP_DECL


namespace j2cpp { namespace java { namespace net { class InetAddress; } } }


#include <java/net/InetAddress.hpp>


namespace j2cpp {

namespace org { namespace apache { namespace http { namespace impl {

	class SocketHttpClientConnection;
	class SocketHttpClientConnection
		: public cpp_object<SocketHttpClientConnection>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_METHOD(12)
		J2CPP_DECLARE_METHOD(13)
		J2CPP_DECLARE_METHOD(14)
		J2CPP_DECLARE_METHOD(15)

		SocketHttpClientConnection(jobject jobj)
		: cpp_object<SocketHttpClientConnection>(jobj)
		{
		}

		cpp_boolean isOpen();
		local_ref< java::net::InetAddress > getLocalAddress();
		cpp_int getLocalPort();
		local_ref< java::net::InetAddress > getRemoteAddress();
		cpp_int getRemotePort();
		void setSocketTimeout(cpp_int const&);
		cpp_int getSocketTimeout();
		void shutdown();
		void close();
	}; //class SocketHttpClientConnection

} //namespace impl
} //namespace http
} //namespace apache
} //namespace org


} //namespace j2cpp

#endif //J2CPP_ORG_APACHE_HTTP_IMPL_SOCKETHTTPCLIENTCONNECTION_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ORG_APACHE_HTTP_IMPL_SOCKETHTTPCLIENTCONNECTION_HPP_IMPL
#define J2CPP_ORG_APACHE_HTTP_IMPL_SOCKETHTTPCLIENTCONNECTION_HPP_IMPL

namespace j2cpp {


template <>
local_ref< org::apache::http::impl::SocketHttpClientConnection > create< org::apache::http::impl::SocketHttpClientConnection>()
{
	return local_ref< org::apache::http::impl::SocketHttpClientConnection >(
		environment::get().get_jenv()->NewObject(
			get_class<org::apache::http::impl::SocketHttpClientConnection::J2CPP_CLASS_NAME>(),
			get_method_id<org::apache::http::impl::SocketHttpClientConnection::J2CPP_CLASS_NAME, org::apache::http::impl::SocketHttpClientConnection::J2CPP_METHOD_NAME(0), org::apache::http::impl::SocketHttpClientConnection::J2CPP_METHOD_SIGNATURE(0), false>()
		)
	);
}






cpp_boolean org::apache::http::impl::SocketHttpClientConnection::isOpen()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>()
		)
	);
}


local_ref< java::net::InetAddress > org::apache::http::impl::SocketHttpClientConnection::getLocalAddress()
{
	return local_ref< java::net::InetAddress >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(8), J2CPP_METHOD_SIGNATURE(8), false>()
		)
	);
}

cpp_int org::apache::http::impl::SocketHttpClientConnection::getLocalPort()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(9), J2CPP_METHOD_SIGNATURE(9), false>()
		)
	);
}

local_ref< java::net::InetAddress > org::apache::http::impl::SocketHttpClientConnection::getRemoteAddress()
{
	return local_ref< java::net::InetAddress >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(10), J2CPP_METHOD_SIGNATURE(10), false>()
		)
	);
}

cpp_int org::apache::http::impl::SocketHttpClientConnection::getRemotePort()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(11), J2CPP_METHOD_SIGNATURE(11), false>()
		)
	);
}

void org::apache::http::impl::SocketHttpClientConnection::setSocketTimeout(cpp_int const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(12), J2CPP_METHOD_SIGNATURE(12), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int org::apache::http::impl::SocketHttpClientConnection::getSocketTimeout()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(13), J2CPP_METHOD_SIGNATURE(13), false>()
		)
	);
}

void org::apache::http::impl::SocketHttpClientConnection::shutdown()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(14), J2CPP_METHOD_SIGNATURE(14), false>()
		)
	);
}

void org::apache::http::impl::SocketHttpClientConnection::close()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(15), J2CPP_METHOD_SIGNATURE(15), false>()
		)
	);
}


J2CPP_DEFINE_CLASS(org::apache::http::impl::SocketHttpClientConnection,"org/apache/http/impl/SocketHttpClientConnection")
J2CPP_DEFINE_METHOD(org::apache::http::impl::SocketHttpClientConnection,0,"<init>","()V")
J2CPP_DEFINE_METHOD(org::apache::http::impl::SocketHttpClientConnection,1,"assertNotOpen","()V")
J2CPP_DEFINE_METHOD(org::apache::http::impl::SocketHttpClientConnection,2,"assertOpen","()V")
J2CPP_DEFINE_METHOD(org::apache::http::impl::SocketHttpClientConnection,3,"createSessionInputBuffer","(Ljava/net/Socket;ILorg/apache/http/params/HttpParams;)Lorg/apache/http/io/SessionInputBuffer;")
J2CPP_DEFINE_METHOD(org::apache::http::impl::SocketHttpClientConnection,4,"createSessionOutputBuffer","(Ljava/net/Socket;ILorg/apache/http/params/HttpParams;)Lorg/apache/http/io/SessionOutputBuffer;")
J2CPP_DEFINE_METHOD(org::apache::http::impl::SocketHttpClientConnection,5,"bind","(Ljava/net/Socket;Lorg/apache/http/params/HttpParams;)V")
J2CPP_DEFINE_METHOD(org::apache::http::impl::SocketHttpClientConnection,6,"isOpen","()Z")
J2CPP_DEFINE_METHOD(org::apache::http::impl::SocketHttpClientConnection,7,"getSocket","()Ljava/net/Socket;")
J2CPP_DEFINE_METHOD(org::apache::http::impl::SocketHttpClientConnection,8,"getLocalAddress","()Ljava/net/InetAddress;")
J2CPP_DEFINE_METHOD(org::apache::http::impl::SocketHttpClientConnection,9,"getLocalPort","()I")
J2CPP_DEFINE_METHOD(org::apache::http::impl::SocketHttpClientConnection,10,"getRemoteAddress","()Ljava/net/InetAddress;")
J2CPP_DEFINE_METHOD(org::apache::http::impl::SocketHttpClientConnection,11,"getRemotePort","()I")
J2CPP_DEFINE_METHOD(org::apache::http::impl::SocketHttpClientConnection,12,"setSocketTimeout","(I)V")
J2CPP_DEFINE_METHOD(org::apache::http::impl::SocketHttpClientConnection,13,"getSocketTimeout","()I")
J2CPP_DEFINE_METHOD(org::apache::http::impl::SocketHttpClientConnection,14,"shutdown","()V")
J2CPP_DEFINE_METHOD(org::apache::http::impl::SocketHttpClientConnection,15,"close","()V")

} //namespace j2cpp

#endif //J2CPP_ORG_APACHE_HTTP_IMPL_SOCKETHTTPCLIENTCONNECTION_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
