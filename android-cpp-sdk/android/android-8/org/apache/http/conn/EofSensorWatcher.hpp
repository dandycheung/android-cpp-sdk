/*================================================================================
  code generated by: java2cpp
  class: org.apache.http.conn.EofSensorWatcher
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ORG_APACHE_HTTP_CONN_EOFSENSORWATCHER_HPP_DECL
#define J2CPP_ORG_APACHE_HTTP_CONN_EOFSENSORWATCHER_HPP_DECL


namespace j2cpp { namespace java { namespace io { class InputStream; } } }


#include <java/io/InputStream.hpp>


namespace j2cpp {

namespace org { namespace apache { namespace http { namespace conn {

	class EofSensorWatcher;
	class EofSensorWatcher
		: public cpp_object<EofSensorWatcher>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)

		EofSensorWatcher(jobject jobj)
		: cpp_object<EofSensorWatcher>(jobj)
		{
		}

		cpp_boolean eofDetected(local_ref< java::io::InputStream > const&);
		cpp_boolean streamClosed(local_ref< java::io::InputStream > const&);
		cpp_boolean streamAbort(local_ref< java::io::InputStream > const&);
	}; //class EofSensorWatcher

} //namespace conn
} //namespace http
} //namespace apache
} //namespace org


} //namespace j2cpp

#endif //J2CPP_ORG_APACHE_HTTP_CONN_EOFSENSORWATCHER_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ORG_APACHE_HTTP_CONN_EOFSENSORWATCHER_HPP_IMPL
#define J2CPP_ORG_APACHE_HTTP_CONN_EOFSENSORWATCHER_HPP_IMPL

namespace j2cpp {


cpp_boolean org::apache::http::conn::EofSensorWatcher::eofDetected(local_ref< java::io::InputStream > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(0), J2CPP_METHOD_SIGNATURE(0), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean org::apache::http::conn::EofSensorWatcher::streamClosed(local_ref< java::io::InputStream > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean org::apache::http::conn::EofSensorWatcher::streamAbort(local_ref< java::io::InputStream > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>(),
			a0.get_jtype()
		)
	);
}


J2CPP_DEFINE_CLASS(org::apache::http::conn::EofSensorWatcher,"org/apache/http/conn/EofSensorWatcher")
J2CPP_DEFINE_METHOD(org::apache::http::conn::EofSensorWatcher,0,"eofDetected","(Ljava/io/InputStream;)Z")
J2CPP_DEFINE_METHOD(org::apache::http::conn::EofSensorWatcher,1,"streamClosed","(Ljava/io/InputStream;)Z")
J2CPP_DEFINE_METHOD(org::apache::http::conn::EofSensorWatcher,2,"streamAbort","(Ljava/io/InputStream;)Z")

} //namespace j2cpp

#endif //J2CPP_ORG_APACHE_HTTP_CONN_EOFSENSORWATCHER_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
