/*================================================================================
  code generated by: java2cpp
  class: org.apache.http.conn.ClientConnectionManager
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ORG_APACHE_HTTP_CONN_CLIENTCONNECTIONMANAGER_HPP_DECL
#define J2CPP_ORG_APACHE_HTTP_CONN_CLIENTCONNECTIONMANAGER_HPP_DECL


namespace j2cpp { namespace org { namespace apache { namespace http { namespace conn { class ClientConnectionRequest; } } } } }
namespace j2cpp { namespace org { namespace apache { namespace http { namespace conn { namespace scheme { class SchemeRegistry; } } } } } }
namespace j2cpp { namespace org { namespace apache { namespace http { namespace conn { namespace routing { class HttpRoute; } } } } } }
namespace j2cpp { namespace org { namespace apache { namespace http { namespace conn { class ManagedClientConnection; } } } } }
namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace util { namespace concurrent { class TimeUnit; } } } }


#include <java/lang/Object.hpp>
#include <java/util/concurrent/TimeUnit.hpp>
#include <org/apache/http/conn/ClientConnectionRequest.hpp>
#include <org/apache/http/conn/ManagedClientConnection.hpp>
#include <org/apache/http/conn/routing/HttpRoute.hpp>
#include <org/apache/http/conn/scheme/SchemeRegistry.hpp>


namespace j2cpp {

namespace org { namespace apache { namespace http { namespace conn {

	class ClientConnectionManager;
	class ClientConnectionManager
		: public cpp_object<ClientConnectionManager>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)

		ClientConnectionManager(jobject jobj)
		: cpp_object<ClientConnectionManager>(jobj)
		{
		}

		local_ref< org::apache::http::conn::scheme::SchemeRegistry > getSchemeRegistry();
		local_ref< org::apache::http::conn::ClientConnectionRequest > requestConnection(local_ref< org::apache::http::conn::routing::HttpRoute > const&, local_ref< java::lang::Object > const&);
		void releaseConnection(local_ref< org::apache::http::conn::ManagedClientConnection > const&, cpp_long const&, local_ref< java::util::concurrent::TimeUnit > const&);
		void closeIdleConnections(cpp_long const&, local_ref< java::util::concurrent::TimeUnit > const&);
		void closeExpiredConnections();
		void shutdown();
	}; //class ClientConnectionManager

} //namespace conn
} //namespace http
} //namespace apache
} //namespace org


} //namespace j2cpp

#endif //J2CPP_ORG_APACHE_HTTP_CONN_CLIENTCONNECTIONMANAGER_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ORG_APACHE_HTTP_CONN_CLIENTCONNECTIONMANAGER_HPP_IMPL
#define J2CPP_ORG_APACHE_HTTP_CONN_CLIENTCONNECTIONMANAGER_HPP_IMPL

namespace j2cpp {


local_ref< org::apache::http::conn::scheme::SchemeRegistry > org::apache::http::conn::ClientConnectionManager::getSchemeRegistry()
{
	return local_ref< org::apache::http::conn::scheme::SchemeRegistry >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(0), J2CPP_METHOD_SIGNATURE(0), false>()
		)
	);
}

local_ref< org::apache::http::conn::ClientConnectionRequest > org::apache::http::conn::ClientConnectionManager::requestConnection(local_ref< org::apache::http::conn::routing::HttpRoute > const &a0, local_ref< java::lang::Object > const &a1)
{
	return local_ref< org::apache::http::conn::ClientConnectionRequest >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void org::apache::http::conn::ClientConnectionManager::releaseConnection(local_ref< org::apache::http::conn::ManagedClientConnection > const &a0, cpp_long const &a1, local_ref< java::util::concurrent::TimeUnit > const &a2)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

void org::apache::http::conn::ClientConnectionManager::closeIdleConnections(cpp_long const &a0, local_ref< java::util::concurrent::TimeUnit > const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void org::apache::http::conn::ClientConnectionManager::closeExpiredConnections()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>()
		)
	);
}

void org::apache::http::conn::ClientConnectionManager::shutdown()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>()
		)
	);
}


J2CPP_DEFINE_CLASS(org::apache::http::conn::ClientConnectionManager,"org/apache/http/conn/ClientConnectionManager")
J2CPP_DEFINE_METHOD(org::apache::http::conn::ClientConnectionManager,0,"getSchemeRegistry","()Lorg/apache/http/conn/scheme/SchemeRegistry;")
J2CPP_DEFINE_METHOD(org::apache::http::conn::ClientConnectionManager,1,"requestConnection","(Lorg/apache/http/conn/routing/HttpRoute;Ljava/lang/Object;)Lorg/apache/http/conn/ClientConnectionRequest;")
J2CPP_DEFINE_METHOD(org::apache::http::conn::ClientConnectionManager,2,"releaseConnection","(Lorg/apache/http/conn/ManagedClientConnection;JLjava/util/concurrent/TimeUnit;)V")
J2CPP_DEFINE_METHOD(org::apache::http::conn::ClientConnectionManager,3,"closeIdleConnections","(JLjava/util/concurrent/TimeUnit;)V")
J2CPP_DEFINE_METHOD(org::apache::http::conn::ClientConnectionManager,4,"closeExpiredConnections","()V")
J2CPP_DEFINE_METHOD(org::apache::http::conn::ClientConnectionManager,5,"shutdown","()V")

} //namespace j2cpp

#endif //J2CPP_ORG_APACHE_HTTP_CONN_CLIENTCONNECTIONMANAGER_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
