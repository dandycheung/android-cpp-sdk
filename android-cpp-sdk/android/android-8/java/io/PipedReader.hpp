/*================================================================================
  code generated by: java2cpp
  class: java.io.PipedReader
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_IO_PIPEDREADER_HPP_DECL
#define J2CPP_JAVA_IO_PIPEDREADER_HPP_DECL


namespace j2cpp { namespace java { namespace io { class PipedWriter; } } }


#include <java/io/PipedWriter.hpp>


namespace j2cpp {

namespace java { namespace io {

	class PipedReader;
	class PipedReader
		: public cpp_object<PipedReader>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)

		PipedReader(jobject jobj)
		: cpp_object<PipedReader>(jobj)
		{
		}

		void close();
		void connect(local_ref< java::io::PipedWriter > const&);
		cpp_int read();
		cpp_int read(local_ref< cpp_char_array<1> > const&, cpp_int const&, cpp_int const&);
		cpp_boolean ready();
	}; //class PipedReader

} //namespace io
} //namespace java


} //namespace j2cpp

#endif //J2CPP_JAVA_IO_PIPEDREADER_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_IO_PIPEDREADER_HPP_IMPL
#define J2CPP_JAVA_IO_PIPEDREADER_HPP_IMPL

namespace j2cpp {


template <>
local_ref< java::io::PipedReader > create< java::io::PipedReader>()
{
	return local_ref< java::io::PipedReader >(
		environment::get().get_jenv()->NewObject(
			get_class<java::io::PipedReader::J2CPP_CLASS_NAME>(),
			get_method_id<java::io::PipedReader::J2CPP_CLASS_NAME, java::io::PipedReader::J2CPP_METHOD_NAME(0), java::io::PipedReader::J2CPP_METHOD_SIGNATURE(0), false>()
		)
	);
}

template <>
local_ref< java::io::PipedReader > create< java::io::PipedReader>(local_ref< java::io::PipedWriter > const &a0)
{
	return local_ref< java::io::PipedReader >(
		environment::get().get_jenv()->NewObject(
			get_class<java::io::PipedReader::J2CPP_CLASS_NAME>(),
			get_method_id<java::io::PipedReader::J2CPP_CLASS_NAME, java::io::PipedReader::J2CPP_METHOD_NAME(1), java::io::PipedReader::J2CPP_METHOD_SIGNATURE(1), false>(),
			a0.get_jtype()
		)
	);
}

void java::io::PipedReader::close()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>()
		)
	);
}

void java::io::PipedReader::connect(local_ref< java::io::PipedWriter > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int java::io::PipedReader::read()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>()
		)
	);
}

cpp_int java::io::PipedReader::read(local_ref< cpp_char_array<1> > const &a0, cpp_int const &a1, cpp_int const &a2)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

cpp_boolean java::io::PipedReader::ready()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>()
		)
	);
}


J2CPP_DEFINE_CLASS(java::io::PipedReader,"java/io/PipedReader")
J2CPP_DEFINE_METHOD(java::io::PipedReader,0,"<init>","()V")
J2CPP_DEFINE_METHOD(java::io::PipedReader,1,"<init>","(Ljava/io/PipedWriter;)V")
J2CPP_DEFINE_METHOD(java::io::PipedReader,2,"close","()V")
J2CPP_DEFINE_METHOD(java::io::PipedReader,3,"connect","(Ljava/io/PipedWriter;)V")
J2CPP_DEFINE_METHOD(java::io::PipedReader,4,"read","()I")
J2CPP_DEFINE_METHOD(java::io::PipedReader,5,"read","([CII)I")
J2CPP_DEFINE_METHOD(java::io::PipedReader,6,"ready","()Z")

} //namespace j2cpp

#endif //J2CPP_JAVA_IO_PIPEDREADER_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
