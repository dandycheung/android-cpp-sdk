/*================================================================================
  code generated by: java2cpp
  class: java.io.Reader
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_IO_READER_HPP_DECL
#define J2CPP_JAVA_IO_READER_HPP_DECL


namespace j2cpp { namespace java { namespace nio { class CharBuffer; } } }


#include <java/nio/CharBuffer.hpp>


namespace j2cpp {

namespace java { namespace io {

	class Reader;
	class Reader
		: public cpp_object<Reader>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_FIELD(0)

		Reader(jobject jobj)
		: cpp_object<Reader>(jobj)
		{
		}

		void close();
		void mark(cpp_int const&);
		cpp_boolean markSupported();
		cpp_int read();
		cpp_int read(local_ref< cpp_char_array<1> > const&);
		cpp_int read(local_ref< cpp_char_array<1> > const&, cpp_int const&, cpp_int const&);
		cpp_boolean ready();
		void reset();
		cpp_long skip(cpp_long const&);
		cpp_int read(local_ref< java::nio::CharBuffer > const&);

	}; //class Reader

} //namespace io
} //namespace java


} //namespace j2cpp

#endif //J2CPP_JAVA_IO_READER_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_IO_READER_HPP_IMPL
#define J2CPP_JAVA_IO_READER_HPP_IMPL

namespace j2cpp {


template <>
local_ref< java::io::Reader > create< java::io::Reader>()
{
	return local_ref< java::io::Reader >(
		environment::get().get_jenv()->NewObject(
			get_class<java::io::Reader::J2CPP_CLASS_NAME>(),
			get_method_id<java::io::Reader::J2CPP_CLASS_NAME, java::io::Reader::J2CPP_METHOD_NAME(0), java::io::Reader::J2CPP_METHOD_SIGNATURE(0), false>()
		)
	);
}

template <>
local_ref< java::io::Reader > create< java::io::Reader>(local_ref< java::lang::Object > const &a0)
{
	return local_ref< java::io::Reader >(
		environment::get().get_jenv()->NewObject(
			get_class<java::io::Reader::J2CPP_CLASS_NAME>(),
			get_method_id<java::io::Reader::J2CPP_CLASS_NAME, java::io::Reader::J2CPP_METHOD_NAME(1), java::io::Reader::J2CPP_METHOD_SIGNATURE(1), false>(),
			a0.get_jtype()
		)
	);
}

void java::io::Reader::close()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>()
		)
	);
}

void java::io::Reader::mark(cpp_int const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean java::io::Reader::markSupported()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>()
		)
	);
}

cpp_int java::io::Reader::read()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>()
		)
	);
}

cpp_int java::io::Reader::read(local_ref< cpp_char_array<1> > const &a0)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int java::io::Reader::read(local_ref< cpp_char_array<1> > const &a0, cpp_int const &a1, cpp_int const &a2)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(7), J2CPP_METHOD_SIGNATURE(7), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

cpp_boolean java::io::Reader::ready()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(8), J2CPP_METHOD_SIGNATURE(8), false>()
		)
	);
}

void java::io::Reader::reset()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(9), J2CPP_METHOD_SIGNATURE(9), false>()
		)
	);
}

cpp_long java::io::Reader::skip(cpp_long const &a0)
{
	return cpp_long(
		environment::get().get_jenv()->CallLongMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(10), J2CPP_METHOD_SIGNATURE(10), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int java::io::Reader::read(local_ref< java::nio::CharBuffer > const &a0)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(11), J2CPP_METHOD_SIGNATURE(11), false>(),
			a0.get_jtype()
		)
	);
}



J2CPP_DEFINE_CLASS(java::io::Reader,"java/io/Reader")
J2CPP_DEFINE_METHOD(java::io::Reader,0,"<init>","()V")
J2CPP_DEFINE_METHOD(java::io::Reader,1,"<init>","(Ljava/lang/Object;)V")
J2CPP_DEFINE_METHOD(java::io::Reader,2,"close","()V")
J2CPP_DEFINE_METHOD(java::io::Reader,3,"mark","(I)V")
J2CPP_DEFINE_METHOD(java::io::Reader,4,"markSupported","()Z")
J2CPP_DEFINE_METHOD(java::io::Reader,5,"read","()I")
J2CPP_DEFINE_METHOD(java::io::Reader,6,"read","([C)I")
J2CPP_DEFINE_METHOD(java::io::Reader,7,"read","([CII)I")
J2CPP_DEFINE_METHOD(java::io::Reader,8,"ready","()Z")
J2CPP_DEFINE_METHOD(java::io::Reader,9,"reset","()V")
J2CPP_DEFINE_METHOD(java::io::Reader,10,"skip","(J)J")
J2CPP_DEFINE_METHOD(java::io::Reader,11,"read","(Ljava/nio/CharBuffer;)I")
J2CPP_DEFINE_FIELD(java::io::Reader,0,"lock","Ljava/lang/Object;")

} //namespace j2cpp

#endif //J2CPP_JAVA_IO_READER_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
