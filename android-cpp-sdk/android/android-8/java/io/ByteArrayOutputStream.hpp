/*================================================================================
  code generated by: java2cpp
  class: java.io.ByteArrayOutputStream
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_IO_BYTEARRAYOUTPUTSTREAM_HPP_DECL
#define J2CPP_JAVA_IO_BYTEARRAYOUTPUTSTREAM_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace io { class OutputStream; } } }


#include <java/io/OutputStream.hpp>
#include <java/lang/String.hpp>


namespace j2cpp {

namespace java { namespace io {

	class ByteArrayOutputStream;
	class ByteArrayOutputStream
		: public cpp_object<ByteArrayOutputStream>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_FIELD(0)
		J2CPP_DECLARE_FIELD(1)

		ByteArrayOutputStream(jobject jobj)
		: cpp_object<ByteArrayOutputStream>(jobj)
		{
		}

		void close();
		void reset();
		cpp_int size();
		local_ref< cpp_byte_array<1> > toByteArray();
		local_ref< java::lang::String > toString();
		local_ref< java::lang::String > toString(cpp_int const&);
		local_ref< java::lang::String > toString(local_ref< java::lang::String > const&);
		void write(local_ref< cpp_byte_array<1> > const&, cpp_int const&, cpp_int const&);
		void write(cpp_int const&);
		void writeTo(local_ref< java::io::OutputStream > const&);

	}; //class ByteArrayOutputStream

} //namespace io
} //namespace java


} //namespace j2cpp

#endif //J2CPP_JAVA_IO_BYTEARRAYOUTPUTSTREAM_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_IO_BYTEARRAYOUTPUTSTREAM_HPP_IMPL
#define J2CPP_JAVA_IO_BYTEARRAYOUTPUTSTREAM_HPP_IMPL

namespace j2cpp {


template <>
local_ref< java::io::ByteArrayOutputStream > create< java::io::ByteArrayOutputStream>()
{
	return local_ref< java::io::ByteArrayOutputStream >(
		environment::get().get_jenv()->NewObject(
			get_class<java::io::ByteArrayOutputStream::J2CPP_CLASS_NAME>(),
			get_method_id<java::io::ByteArrayOutputStream::J2CPP_CLASS_NAME, java::io::ByteArrayOutputStream::J2CPP_METHOD_NAME(0), java::io::ByteArrayOutputStream::J2CPP_METHOD_SIGNATURE(0), false>()
		)
	);
}

template <>
local_ref< java::io::ByteArrayOutputStream > create< java::io::ByteArrayOutputStream>(cpp_int const &a0)
{
	return local_ref< java::io::ByteArrayOutputStream >(
		environment::get().get_jenv()->NewObject(
			get_class<java::io::ByteArrayOutputStream::J2CPP_CLASS_NAME>(),
			get_method_id<java::io::ByteArrayOutputStream::J2CPP_CLASS_NAME, java::io::ByteArrayOutputStream::J2CPP_METHOD_NAME(1), java::io::ByteArrayOutputStream::J2CPP_METHOD_SIGNATURE(1), false>(),
			a0.get_jtype()
		)
	);
}

void java::io::ByteArrayOutputStream::close()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>()
		)
	);
}

void java::io::ByteArrayOutputStream::reset()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>()
		)
	);
}

cpp_int java::io::ByteArrayOutputStream::size()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>()
		)
	);
}

local_ref< cpp_byte_array<1> > java::io::ByteArrayOutputStream::toByteArray()
{
	return local_ref< cpp_byte_array<1> >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>()
		)
	);
}

local_ref< java::lang::String > java::io::ByteArrayOutputStream::toString()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>()
		)
	);
}

local_ref< java::lang::String > java::io::ByteArrayOutputStream::toString(cpp_int const &a0)
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(7), J2CPP_METHOD_SIGNATURE(7), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::String > java::io::ByteArrayOutputStream::toString(local_ref< java::lang::String > const &a0)
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(8), J2CPP_METHOD_SIGNATURE(8), false>(),
			a0.get_jtype()
		)
	);
}

void java::io::ByteArrayOutputStream::write(local_ref< cpp_byte_array<1> > const &a0, cpp_int const &a1, cpp_int const &a2)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(9), J2CPP_METHOD_SIGNATURE(9), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

void java::io::ByteArrayOutputStream::write(cpp_int const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(10), J2CPP_METHOD_SIGNATURE(10), false>(),
			a0.get_jtype()
		)
	);
}

void java::io::ByteArrayOutputStream::writeTo(local_ref< java::io::OutputStream > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(11), J2CPP_METHOD_SIGNATURE(11), false>(),
			a0.get_jtype()
		)
	);
}



J2CPP_DEFINE_CLASS(java::io::ByteArrayOutputStream,"java/io/ByteArrayOutputStream")
J2CPP_DEFINE_METHOD(java::io::ByteArrayOutputStream,0,"<init>","()V")
J2CPP_DEFINE_METHOD(java::io::ByteArrayOutputStream,1,"<init>","(I)V")
J2CPP_DEFINE_METHOD(java::io::ByteArrayOutputStream,2,"close","()V")
J2CPP_DEFINE_METHOD(java::io::ByteArrayOutputStream,3,"reset","()V")
J2CPP_DEFINE_METHOD(java::io::ByteArrayOutputStream,4,"size","()I")
J2CPP_DEFINE_METHOD(java::io::ByteArrayOutputStream,5,"toByteArray","()[B")
J2CPP_DEFINE_METHOD(java::io::ByteArrayOutputStream,6,"toString","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::io::ByteArrayOutputStream,7,"toString","(I)Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::io::ByteArrayOutputStream,8,"toString","(Ljava/lang/String;)Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::io::ByteArrayOutputStream,9,"write","([BII)V")
J2CPP_DEFINE_METHOD(java::io::ByteArrayOutputStream,10,"write","(I)V")
J2CPP_DEFINE_METHOD(java::io::ByteArrayOutputStream,11,"writeTo","(Ljava/io/OutputStream;)V")
J2CPP_DEFINE_FIELD(java::io::ByteArrayOutputStream,0,"buf","[B")
J2CPP_DEFINE_FIELD(java::io::ByteArrayOutputStream,1,"count","I")

} //namespace j2cpp

#endif //J2CPP_JAVA_IO_BYTEARRAYOUTPUTSTREAM_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
