/*================================================================================
  code generated by: java2cpp
  class: java.util.concurrent.ArrayBlockingQueue
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_CONCURRENT_ARRAYBLOCKINGQUEUE_HPP_DECL
#define J2CPP_JAVA_UTIL_CONCURRENT_ARRAYBLOCKINGQUEUE_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace util { class Collection; } } }
namespace j2cpp { namespace java { namespace util { namespace concurrent { class TimeUnit; } } } }
namespace j2cpp { namespace java { namespace util { class Iterator; } } }


#include <java/lang/Object.hpp>
#include <java/lang/String.hpp>
#include <java/util/Collection.hpp>
#include <java/util/Iterator.hpp>
#include <java/util/concurrent/TimeUnit.hpp>


namespace j2cpp {

namespace java { namespace util { namespace concurrent {

	class ArrayBlockingQueue;
	class ArrayBlockingQueue
		: public cpp_object<ArrayBlockingQueue>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_METHOD(12)
		J2CPP_DECLARE_METHOD(13)
		J2CPP_DECLARE_METHOD(14)
		J2CPP_DECLARE_METHOD(15)
		J2CPP_DECLARE_METHOD(16)
		J2CPP_DECLARE_METHOD(17)
		J2CPP_DECLARE_METHOD(18)
		J2CPP_DECLARE_METHOD(19)
		J2CPP_DECLARE_METHOD(20)
		J2CPP_DECLARE_METHOD(21)

		ArrayBlockingQueue(jobject jobj)
		: cpp_object<ArrayBlockingQueue>(jobj)
		{
		}

		cpp_boolean add(local_ref< java::lang::Object > const&);
		cpp_boolean offer(local_ref< java::lang::Object > const&);
		void put(local_ref< java::lang::Object > const&);
		cpp_boolean offer(local_ref< java::lang::Object > const&, cpp_long const&, local_ref< java::util::concurrent::TimeUnit > const&);
		local_ref< java::lang::Object > poll();
		local_ref< java::lang::Object > take();
		local_ref< java::lang::Object > poll(cpp_long const&, local_ref< java::util::concurrent::TimeUnit > const&);
		local_ref< java::lang::Object > peek();
		cpp_int size();
		cpp_int remainingCapacity();
		cpp_boolean remove(local_ref< java::lang::Object > const&);
		cpp_boolean contains(local_ref< java::lang::Object > const&);
		local_ref< cpp_object_array<java::lang::Object, 1> > toArray();
		local_ref< cpp_object_array<java::lang::Object, 1> > toArray(local_ref< cpp_object_array<java::lang::Object, 1> > const&);
		local_ref< java::lang::String > toString();
		void clear();
		cpp_int drainTo(local_ref< java::util::Collection > const&);
		cpp_int drainTo(local_ref< java::util::Collection > const&, cpp_int const&);
		local_ref< java::util::Iterator > iterator();
	}; //class ArrayBlockingQueue

} //namespace concurrent
} //namespace util
} //namespace java


} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_CONCURRENT_ARRAYBLOCKINGQUEUE_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_CONCURRENT_ARRAYBLOCKINGQUEUE_HPP_IMPL
#define J2CPP_JAVA_UTIL_CONCURRENT_ARRAYBLOCKINGQUEUE_HPP_IMPL

namespace j2cpp {


template <>
local_ref< java::util::concurrent::ArrayBlockingQueue > create< java::util::concurrent::ArrayBlockingQueue>(cpp_int const &a0)
{
	return local_ref< java::util::concurrent::ArrayBlockingQueue >(
		environment::get().get_jenv()->NewObject(
			get_class<java::util::concurrent::ArrayBlockingQueue::J2CPP_CLASS_NAME>(),
			get_method_id<java::util::concurrent::ArrayBlockingQueue::J2CPP_CLASS_NAME, java::util::concurrent::ArrayBlockingQueue::J2CPP_METHOD_NAME(0), java::util::concurrent::ArrayBlockingQueue::J2CPP_METHOD_SIGNATURE(0), false>(),
			a0.get_jtype()
		)
	);
}

template <>
local_ref< java::util::concurrent::ArrayBlockingQueue > create< java::util::concurrent::ArrayBlockingQueue>(cpp_int const &a0, cpp_boolean const &a1)
{
	return local_ref< java::util::concurrent::ArrayBlockingQueue >(
		environment::get().get_jenv()->NewObject(
			get_class<java::util::concurrent::ArrayBlockingQueue::J2CPP_CLASS_NAME>(),
			get_method_id<java::util::concurrent::ArrayBlockingQueue::J2CPP_CLASS_NAME, java::util::concurrent::ArrayBlockingQueue::J2CPP_METHOD_NAME(1), java::util::concurrent::ArrayBlockingQueue::J2CPP_METHOD_SIGNATURE(1), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

template <>
local_ref< java::util::concurrent::ArrayBlockingQueue > create< java::util::concurrent::ArrayBlockingQueue>(cpp_int const &a0, cpp_boolean const &a1, local_ref< java::util::Collection > const &a2)
{
	return local_ref< java::util::concurrent::ArrayBlockingQueue >(
		environment::get().get_jenv()->NewObject(
			get_class<java::util::concurrent::ArrayBlockingQueue::J2CPP_CLASS_NAME>(),
			get_method_id<java::util::concurrent::ArrayBlockingQueue::J2CPP_CLASS_NAME, java::util::concurrent::ArrayBlockingQueue::J2CPP_METHOD_NAME(2), java::util::concurrent::ArrayBlockingQueue::J2CPP_METHOD_SIGNATURE(2), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

cpp_boolean java::util::concurrent::ArrayBlockingQueue::add(local_ref< java::lang::Object > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean java::util::concurrent::ArrayBlockingQueue::offer(local_ref< java::lang::Object > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>(),
			a0.get_jtype()
		)
	);
}

void java::util::concurrent::ArrayBlockingQueue::put(local_ref< java::lang::Object > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean java::util::concurrent::ArrayBlockingQueue::offer(local_ref< java::lang::Object > const &a0, cpp_long const &a1, local_ref< java::util::concurrent::TimeUnit > const &a2)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

local_ref< java::lang::Object > java::util::concurrent::ArrayBlockingQueue::poll()
{
	return local_ref< java::lang::Object >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(7), J2CPP_METHOD_SIGNATURE(7), false>()
		)
	);
}

local_ref< java::lang::Object > java::util::concurrent::ArrayBlockingQueue::take()
{
	return local_ref< java::lang::Object >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(8), J2CPP_METHOD_SIGNATURE(8), false>()
		)
	);
}

local_ref< java::lang::Object > java::util::concurrent::ArrayBlockingQueue::poll(cpp_long const &a0, local_ref< java::util::concurrent::TimeUnit > const &a1)
{
	return local_ref< java::lang::Object >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(9), J2CPP_METHOD_SIGNATURE(9), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< java::lang::Object > java::util::concurrent::ArrayBlockingQueue::peek()
{
	return local_ref< java::lang::Object >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(10), J2CPP_METHOD_SIGNATURE(10), false>()
		)
	);
}

cpp_int java::util::concurrent::ArrayBlockingQueue::size()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(11), J2CPP_METHOD_SIGNATURE(11), false>()
		)
	);
}

cpp_int java::util::concurrent::ArrayBlockingQueue::remainingCapacity()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(12), J2CPP_METHOD_SIGNATURE(12), false>()
		)
	);
}

cpp_boolean java::util::concurrent::ArrayBlockingQueue::remove(local_ref< java::lang::Object > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(13), J2CPP_METHOD_SIGNATURE(13), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean java::util::concurrent::ArrayBlockingQueue::contains(local_ref< java::lang::Object > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(14), J2CPP_METHOD_SIGNATURE(14), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< cpp_object_array<java::lang::Object, 1> > java::util::concurrent::ArrayBlockingQueue::toArray()
{
	return local_ref< cpp_object_array<java::lang::Object, 1> >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(15), J2CPP_METHOD_SIGNATURE(15), false>()
		)
	);
}

local_ref< cpp_object_array<java::lang::Object, 1> > java::util::concurrent::ArrayBlockingQueue::toArray(local_ref< cpp_object_array<java::lang::Object, 1> > const &a0)
{
	return local_ref< cpp_object_array<java::lang::Object, 1> >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(16), J2CPP_METHOD_SIGNATURE(16), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::String > java::util::concurrent::ArrayBlockingQueue::toString()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(17), J2CPP_METHOD_SIGNATURE(17), false>()
		)
	);
}

void java::util::concurrent::ArrayBlockingQueue::clear()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(18), J2CPP_METHOD_SIGNATURE(18), false>()
		)
	);
}

cpp_int java::util::concurrent::ArrayBlockingQueue::drainTo(local_ref< java::util::Collection > const &a0)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(19), J2CPP_METHOD_SIGNATURE(19), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int java::util::concurrent::ArrayBlockingQueue::drainTo(local_ref< java::util::Collection > const &a0, cpp_int const &a1)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(20), J2CPP_METHOD_SIGNATURE(20), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< java::util::Iterator > java::util::concurrent::ArrayBlockingQueue::iterator()
{
	return local_ref< java::util::Iterator >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(21), J2CPP_METHOD_SIGNATURE(21), false>()
		)
	);
}


J2CPP_DEFINE_CLASS(java::util::concurrent::ArrayBlockingQueue,"java/util/concurrent/ArrayBlockingQueue")
J2CPP_DEFINE_METHOD(java::util::concurrent::ArrayBlockingQueue,0,"<init>","(I)V")
J2CPP_DEFINE_METHOD(java::util::concurrent::ArrayBlockingQueue,1,"<init>","(IZ)V")
J2CPP_DEFINE_METHOD(java::util::concurrent::ArrayBlockingQueue,2,"<init>","(IZLjava/util/Collection;)V")
J2CPP_DEFINE_METHOD(java::util::concurrent::ArrayBlockingQueue,3,"add","(Ljava/lang/Object;)Z")
J2CPP_DEFINE_METHOD(java::util::concurrent::ArrayBlockingQueue,4,"offer","(Ljava/lang/Object;)Z")
J2CPP_DEFINE_METHOD(java::util::concurrent::ArrayBlockingQueue,5,"put","(Ljava/lang/Object;)V")
J2CPP_DEFINE_METHOD(java::util::concurrent::ArrayBlockingQueue,6,"offer","(Ljava/lang/Object;JLjava/util/concurrent/TimeUnit;)Z")
J2CPP_DEFINE_METHOD(java::util::concurrent::ArrayBlockingQueue,7,"poll","()Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(java::util::concurrent::ArrayBlockingQueue,8,"take","()Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(java::util::concurrent::ArrayBlockingQueue,9,"poll","(JLjava/util/concurrent/TimeUnit;)Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(java::util::concurrent::ArrayBlockingQueue,10,"peek","()Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(java::util::concurrent::ArrayBlockingQueue,11,"size","()I")
J2CPP_DEFINE_METHOD(java::util::concurrent::ArrayBlockingQueue,12,"remainingCapacity","()I")
J2CPP_DEFINE_METHOD(java::util::concurrent::ArrayBlockingQueue,13,"remove","(Ljava/lang/Object;)Z")
J2CPP_DEFINE_METHOD(java::util::concurrent::ArrayBlockingQueue,14,"contains","(Ljava/lang/Object;)Z")
J2CPP_DEFINE_METHOD(java::util::concurrent::ArrayBlockingQueue,15,"toArray","()[java.lang.Object")
J2CPP_DEFINE_METHOD(java::util::concurrent::ArrayBlockingQueue,16,"toArray","([java.lang.Object)[java.lang.Object")
J2CPP_DEFINE_METHOD(java::util::concurrent::ArrayBlockingQueue,17,"toString","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::util::concurrent::ArrayBlockingQueue,18,"clear","()V")
J2CPP_DEFINE_METHOD(java::util::concurrent::ArrayBlockingQueue,19,"drainTo","(Ljava/util/Collection;)I")
J2CPP_DEFINE_METHOD(java::util::concurrent::ArrayBlockingQueue,20,"drainTo","(Ljava/util/Collection;I)I")
J2CPP_DEFINE_METHOD(java::util::concurrent::ArrayBlockingQueue,21,"iterator","()Ljava/util/Iterator;")

} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_CONCURRENT_ARRAYBLOCKINGQUEUE_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
