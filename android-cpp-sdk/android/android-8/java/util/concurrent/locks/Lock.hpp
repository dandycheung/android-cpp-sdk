/*================================================================================
  code generated by: java2cpp
  class: java.util.concurrent.locks.Lock
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_CONCURRENT_LOCKS_LOCK_HPP_DECL
#define J2CPP_JAVA_UTIL_CONCURRENT_LOCKS_LOCK_HPP_DECL


namespace j2cpp { namespace java { namespace util { namespace concurrent { class TimeUnit; } } } }
namespace j2cpp { namespace java { namespace util { namespace concurrent { namespace locks { class Condition; } } } } }


#include <java/util/concurrent/TimeUnit.hpp>
#include <java/util/concurrent/locks/Condition.hpp>


namespace j2cpp {

namespace java { namespace util { namespace concurrent { namespace locks {

	class Lock;
	class Lock
		: public cpp_object<Lock>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)

		Lock(jobject jobj)
		: cpp_object<Lock>(jobj)
		{
		}

		void lock();
		void lockInterruptibly();
		cpp_boolean tryLock();
		cpp_boolean tryLock(cpp_long const&, local_ref< java::util::concurrent::TimeUnit > const&);
		void unlock();
		local_ref< java::util::concurrent::locks::Condition > newCondition();
	}; //class Lock

} //namespace locks
} //namespace concurrent
} //namespace util
} //namespace java


} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_CONCURRENT_LOCKS_LOCK_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_CONCURRENT_LOCKS_LOCK_HPP_IMPL
#define J2CPP_JAVA_UTIL_CONCURRENT_LOCKS_LOCK_HPP_IMPL

namespace j2cpp {


void java::util::concurrent::locks::Lock::lock()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(0), J2CPP_METHOD_SIGNATURE(0), false>()
		)
	);
}

void java::util::concurrent::locks::Lock::lockInterruptibly()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), false>()
		)
	);
}

cpp_boolean java::util::concurrent::locks::Lock::tryLock()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>()
		)
	);
}

cpp_boolean java::util::concurrent::locks::Lock::tryLock(cpp_long const &a0, local_ref< java::util::concurrent::TimeUnit > const &a1)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void java::util::concurrent::locks::Lock::unlock()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>()
		)
	);
}

local_ref< java::util::concurrent::locks::Condition > java::util::concurrent::locks::Lock::newCondition()
{
	return local_ref< java::util::concurrent::locks::Condition >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>()
		)
	);
}


J2CPP_DEFINE_CLASS(java::util::concurrent::locks::Lock,"java/util/concurrent/locks/Lock")
J2CPP_DEFINE_METHOD(java::util::concurrent::locks::Lock,0,"lock","()V")
J2CPP_DEFINE_METHOD(java::util::concurrent::locks::Lock,1,"lockInterruptibly","()V")
J2CPP_DEFINE_METHOD(java::util::concurrent::locks::Lock,2,"tryLock","()Z")
J2CPP_DEFINE_METHOD(java::util::concurrent::locks::Lock,3,"tryLock","(JLjava/util/concurrent/TimeUnit;)Z")
J2CPP_DEFINE_METHOD(java::util::concurrent::locks::Lock,4,"unlock","()V")
J2CPP_DEFINE_METHOD(java::util::concurrent::locks::Lock,5,"newCondition","()Ljava/util/concurrent/locks/Condition;")

} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_CONCURRENT_LOCKS_LOCK_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
