/*================================================================================
  code generated by: java2cpp
  class: java.util.concurrent.atomic.AtomicLong
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_CONCURRENT_ATOMIC_ATOMICLONG_HPP_DECL
#define J2CPP_JAVA_UTIL_CONCURRENT_ATOMIC_ATOMICLONG_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class String; } } }


#include <java/lang/String.hpp>


namespace j2cpp {

namespace java { namespace util { namespace concurrent { namespace atomic {

	class AtomicLong;
	class AtomicLong
		: public cpp_object<AtomicLong>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_METHOD(12)
		J2CPP_DECLARE_METHOD(13)
		J2CPP_DECLARE_METHOD(14)
		J2CPP_DECLARE_METHOD(15)
		J2CPP_DECLARE_METHOD(16)
		J2CPP_DECLARE_METHOD(17)

		AtomicLong(jobject jobj)
		: cpp_object<AtomicLong>(jobj)
		{
		}

		cpp_long get();
		void set(cpp_long const&);
		cpp_long getAndSet(cpp_long const&);
		cpp_boolean compareAndSet(cpp_long const&, cpp_long const&);
		cpp_boolean weakCompareAndSet(cpp_long const&, cpp_long const&);
		cpp_long getAndIncrement();
		cpp_long getAndDecrement();
		cpp_long getAndAdd(cpp_long const&);
		cpp_long incrementAndGet();
		cpp_long decrementAndGet();
		cpp_long addAndGet(cpp_long const&);
		local_ref< java::lang::String > toString();
		cpp_int intValue();
		cpp_long longValue();
		cpp_float floatValue();
		cpp_double doubleValue();
	}; //class AtomicLong

} //namespace atomic
} //namespace concurrent
} //namespace util
} //namespace java


} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_CONCURRENT_ATOMIC_ATOMICLONG_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_CONCURRENT_ATOMIC_ATOMICLONG_HPP_IMPL
#define J2CPP_JAVA_UTIL_CONCURRENT_ATOMIC_ATOMICLONG_HPP_IMPL

namespace j2cpp {


template <>
local_ref< java::util::concurrent::atomic::AtomicLong > create< java::util::concurrent::atomic::AtomicLong>(cpp_long const &a0)
{
	return local_ref< java::util::concurrent::atomic::AtomicLong >(
		environment::get().get_jenv()->NewObject(
			get_class<java::util::concurrent::atomic::AtomicLong::J2CPP_CLASS_NAME>(),
			get_method_id<java::util::concurrent::atomic::AtomicLong::J2CPP_CLASS_NAME, java::util::concurrent::atomic::AtomicLong::J2CPP_METHOD_NAME(0), java::util::concurrent::atomic::AtomicLong::J2CPP_METHOD_SIGNATURE(0), false>(),
			a0.get_jtype()
		)
	);
}

template <>
local_ref< java::util::concurrent::atomic::AtomicLong > create< java::util::concurrent::atomic::AtomicLong>()
{
	return local_ref< java::util::concurrent::atomic::AtomicLong >(
		environment::get().get_jenv()->NewObject(
			get_class<java::util::concurrent::atomic::AtomicLong::J2CPP_CLASS_NAME>(),
			get_method_id<java::util::concurrent::atomic::AtomicLong::J2CPP_CLASS_NAME, java::util::concurrent::atomic::AtomicLong::J2CPP_METHOD_NAME(1), java::util::concurrent::atomic::AtomicLong::J2CPP_METHOD_SIGNATURE(1), false>()
		)
	);
}

cpp_long java::util::concurrent::atomic::AtomicLong::get()
{
	return cpp_long(
		environment::get().get_jenv()->CallLongMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>()
		)
	);
}

void java::util::concurrent::atomic::AtomicLong::set(cpp_long const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>(),
			a0.get_jtype()
		)
	);
}

cpp_long java::util::concurrent::atomic::AtomicLong::getAndSet(cpp_long const &a0)
{
	return cpp_long(
		environment::get().get_jenv()->CallLongMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean java::util::concurrent::atomic::AtomicLong::compareAndSet(cpp_long const &a0, cpp_long const &a1)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_boolean java::util::concurrent::atomic::AtomicLong::weakCompareAndSet(cpp_long const &a0, cpp_long const &a1)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_long java::util::concurrent::atomic::AtomicLong::getAndIncrement()
{
	return cpp_long(
		environment::get().get_jenv()->CallLongMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(7), J2CPP_METHOD_SIGNATURE(7), false>()
		)
	);
}

cpp_long java::util::concurrent::atomic::AtomicLong::getAndDecrement()
{
	return cpp_long(
		environment::get().get_jenv()->CallLongMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(8), J2CPP_METHOD_SIGNATURE(8), false>()
		)
	);
}

cpp_long java::util::concurrent::atomic::AtomicLong::getAndAdd(cpp_long const &a0)
{
	return cpp_long(
		environment::get().get_jenv()->CallLongMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(9), J2CPP_METHOD_SIGNATURE(9), false>(),
			a0.get_jtype()
		)
	);
}

cpp_long java::util::concurrent::atomic::AtomicLong::incrementAndGet()
{
	return cpp_long(
		environment::get().get_jenv()->CallLongMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(10), J2CPP_METHOD_SIGNATURE(10), false>()
		)
	);
}

cpp_long java::util::concurrent::atomic::AtomicLong::decrementAndGet()
{
	return cpp_long(
		environment::get().get_jenv()->CallLongMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(11), J2CPP_METHOD_SIGNATURE(11), false>()
		)
	);
}

cpp_long java::util::concurrent::atomic::AtomicLong::addAndGet(cpp_long const &a0)
{
	return cpp_long(
		environment::get().get_jenv()->CallLongMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(12), J2CPP_METHOD_SIGNATURE(12), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::String > java::util::concurrent::atomic::AtomicLong::toString()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(13), J2CPP_METHOD_SIGNATURE(13), false>()
		)
	);
}

cpp_int java::util::concurrent::atomic::AtomicLong::intValue()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(14), J2CPP_METHOD_SIGNATURE(14), false>()
		)
	);
}

cpp_long java::util::concurrent::atomic::AtomicLong::longValue()
{
	return cpp_long(
		environment::get().get_jenv()->CallLongMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(15), J2CPP_METHOD_SIGNATURE(15), false>()
		)
	);
}

cpp_float java::util::concurrent::atomic::AtomicLong::floatValue()
{
	return cpp_float(
		environment::get().get_jenv()->CallFloatMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(16), J2CPP_METHOD_SIGNATURE(16), false>()
		)
	);
}

cpp_double java::util::concurrent::atomic::AtomicLong::doubleValue()
{
	return cpp_double(
		environment::get().get_jenv()->CallDoubleMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(17), J2CPP_METHOD_SIGNATURE(17), false>()
		)
	);
}


J2CPP_DEFINE_CLASS(java::util::concurrent::atomic::AtomicLong,"java/util/concurrent/atomic/AtomicLong")
J2CPP_DEFINE_METHOD(java::util::concurrent::atomic::AtomicLong,0,"<init>","(J)V")
J2CPP_DEFINE_METHOD(java::util::concurrent::atomic::AtomicLong,1,"<init>","()V")
J2CPP_DEFINE_METHOD(java::util::concurrent::atomic::AtomicLong,2,"get","()J")
J2CPP_DEFINE_METHOD(java::util::concurrent::atomic::AtomicLong,3,"set","(J)V")
J2CPP_DEFINE_METHOD(java::util::concurrent::atomic::AtomicLong,4,"getAndSet","(J)J")
J2CPP_DEFINE_METHOD(java::util::concurrent::atomic::AtomicLong,5,"compareAndSet","(JJ)Z")
J2CPP_DEFINE_METHOD(java::util::concurrent::atomic::AtomicLong,6,"weakCompareAndSet","(JJ)Z")
J2CPP_DEFINE_METHOD(java::util::concurrent::atomic::AtomicLong,7,"getAndIncrement","()J")
J2CPP_DEFINE_METHOD(java::util::concurrent::atomic::AtomicLong,8,"getAndDecrement","()J")
J2CPP_DEFINE_METHOD(java::util::concurrent::atomic::AtomicLong,9,"getAndAdd","(J)J")
J2CPP_DEFINE_METHOD(java::util::concurrent::atomic::AtomicLong,10,"incrementAndGet","()J")
J2CPP_DEFINE_METHOD(java::util::concurrent::atomic::AtomicLong,11,"decrementAndGet","()J")
J2CPP_DEFINE_METHOD(java::util::concurrent::atomic::AtomicLong,12,"addAndGet","(J)J")
J2CPP_DEFINE_METHOD(java::util::concurrent::atomic::AtomicLong,13,"toString","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::util::concurrent::atomic::AtomicLong,14,"intValue","()I")
J2CPP_DEFINE_METHOD(java::util::concurrent::atomic::AtomicLong,15,"longValue","()J")
J2CPP_DEFINE_METHOD(java::util::concurrent::atomic::AtomicLong,16,"floatValue","()F")
J2CPP_DEFINE_METHOD(java::util::concurrent::atomic::AtomicLong,17,"doubleValue","()D")

} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_CONCURRENT_ATOMIC_ATOMICLONG_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
