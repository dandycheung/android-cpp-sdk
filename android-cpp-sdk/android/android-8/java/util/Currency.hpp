/*================================================================================
  code generated by: java2cpp
  class: java.util.Currency
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_CURRENCY_HPP_DECL
#define J2CPP_JAVA_UTIL_CURRENCY_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace util { class Locale; } } }


#include <java/lang/String.hpp>
#include <java/util/Locale.hpp>


namespace j2cpp {

namespace java { namespace util {

	class Currency;
	class Currency
		: public cpp_object<Currency>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)

		Currency(jobject jobj)
		: cpp_object<Currency>(jobj)
		{
		}

		static local_ref< java::util::Currency > getInstance(local_ref< java::lang::String > const&);
		static local_ref< java::util::Currency > getInstance(local_ref< java::util::Locale > const&);
		local_ref< java::lang::String > getCurrencyCode();
		local_ref< java::lang::String > getSymbol();
		local_ref< java::lang::String > getSymbol(local_ref< java::util::Locale > const&);
		cpp_int getDefaultFractionDigits();
		local_ref< java::lang::String > toString();
	}; //class Currency

} //namespace util
} //namespace java


} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_CURRENCY_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_CURRENCY_HPP_IMPL
#define J2CPP_JAVA_UTIL_CURRENCY_HPP_IMPL

namespace j2cpp {


template <>
local_ref< java::util::Currency > create< java::util::Currency>()
{
	return local_ref< java::util::Currency >(
		environment::get().get_jenv()->NewObject(
			get_class<java::util::Currency::J2CPP_CLASS_NAME>(),
			get_method_id<java::util::Currency::J2CPP_CLASS_NAME, java::util::Currency::J2CPP_METHOD_NAME(0), java::util::Currency::J2CPP_METHOD_SIGNATURE(0), false>()
		)
	);
}

local_ref< java::util::Currency > java::util::Currency::getInstance(local_ref< java::lang::String > const &a0)
{
	return local_ref< java::util::Currency >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), true>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::util::Currency > java::util::Currency::getInstance(local_ref< java::util::Locale > const &a0)
{
	return local_ref< java::util::Currency >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), true>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::String > java::util::Currency::getCurrencyCode()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>()
		)
	);
}

local_ref< java::lang::String > java::util::Currency::getSymbol()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>()
		)
	);
}

local_ref< java::lang::String > java::util::Currency::getSymbol(local_ref< java::util::Locale > const &a0)
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int java::util::Currency::getDefaultFractionDigits()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>()
		)
	);
}

local_ref< java::lang::String > java::util::Currency::toString()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(7), J2CPP_METHOD_SIGNATURE(7), false>()
		)
	);
}


J2CPP_DEFINE_CLASS(java::util::Currency,"java/util/Currency")
J2CPP_DEFINE_METHOD(java::util::Currency,0,"<init>","()V")
J2CPP_DEFINE_METHOD(java::util::Currency,1,"getInstance","(Ljava/lang/String;)Ljava/util/Currency;")
J2CPP_DEFINE_METHOD(java::util::Currency,2,"getInstance","(Ljava/util/Locale;)Ljava/util/Currency;")
J2CPP_DEFINE_METHOD(java::util::Currency,3,"getCurrencyCode","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::util::Currency,4,"getSymbol","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::util::Currency,5,"getSymbol","(Ljava/util/Locale;)Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::util::Currency,6,"getDefaultFractionDigits","()I")
J2CPP_DEFINE_METHOD(java::util::Currency,7,"toString","()Ljava/lang/String;")

} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_CURRENCY_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
