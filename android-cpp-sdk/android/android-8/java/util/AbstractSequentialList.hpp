/*================================================================================
  code generated by: java2cpp
  class: java.util.AbstractSequentialList
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_ABSTRACTSEQUENTIALLIST_HPP_DECL
#define J2CPP_JAVA_UTIL_ABSTRACTSEQUENTIALLIST_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace util { class ListIterator; } } }
namespace j2cpp { namespace java { namespace util { class Collection; } } }
namespace j2cpp { namespace java { namespace util { class Iterator; } } }


#include <java/lang/Object.hpp>
#include <java/util/Collection.hpp>
#include <java/util/Iterator.hpp>
#include <java/util/ListIterator.hpp>


namespace j2cpp {

namespace java { namespace util {

	class AbstractSequentialList;
	class AbstractSequentialList
		: public cpp_object<AbstractSequentialList>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)

		AbstractSequentialList(jobject jobj)
		: cpp_object<AbstractSequentialList>(jobj)
		{
		}

		void add(cpp_int const&, local_ref< java::lang::Object > const&);
		cpp_boolean addAll(cpp_int const&, local_ref< java::util::Collection > const&);
		local_ref< java::lang::Object > get(cpp_int const&);
		local_ref< java::util::Iterator > iterator();
		local_ref< java::util::ListIterator > listIterator(cpp_int const&);
		local_ref< java::lang::Object > remove(cpp_int const&);
		local_ref< java::lang::Object > set(cpp_int const&, local_ref< java::lang::Object > const&);
	}; //class AbstractSequentialList

} //namespace util
} //namespace java


} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_ABSTRACTSEQUENTIALLIST_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_ABSTRACTSEQUENTIALLIST_HPP_IMPL
#define J2CPP_JAVA_UTIL_ABSTRACTSEQUENTIALLIST_HPP_IMPL

namespace j2cpp {


template <>
local_ref< java::util::AbstractSequentialList > create< java::util::AbstractSequentialList>()
{
	return local_ref< java::util::AbstractSequentialList >(
		environment::get().get_jenv()->NewObject(
			get_class<java::util::AbstractSequentialList::J2CPP_CLASS_NAME>(),
			get_method_id<java::util::AbstractSequentialList::J2CPP_CLASS_NAME, java::util::AbstractSequentialList::J2CPP_METHOD_NAME(0), java::util::AbstractSequentialList::J2CPP_METHOD_SIGNATURE(0), false>()
		)
	);
}

void java::util::AbstractSequentialList::add(cpp_int const &a0, local_ref< java::lang::Object > const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_boolean java::util::AbstractSequentialList::addAll(cpp_int const &a0, local_ref< java::util::Collection > const &a1)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< java::lang::Object > java::util::AbstractSequentialList::get(cpp_int const &a0)
{
	return local_ref< java::lang::Object >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::util::Iterator > java::util::AbstractSequentialList::iterator()
{
	return local_ref< java::util::Iterator >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>()
		)
	);
}

local_ref< java::util::ListIterator > java::util::AbstractSequentialList::listIterator(cpp_int const &a0)
{
	return local_ref< java::util::ListIterator >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::Object > java::util::AbstractSequentialList::remove(cpp_int const &a0)
{
	return local_ref< java::lang::Object >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::Object > java::util::AbstractSequentialList::set(cpp_int const &a0, local_ref< java::lang::Object > const &a1)
{
	return local_ref< java::lang::Object >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(7), J2CPP_METHOD_SIGNATURE(7), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}


J2CPP_DEFINE_CLASS(java::util::AbstractSequentialList,"java/util/AbstractSequentialList")
J2CPP_DEFINE_METHOD(java::util::AbstractSequentialList,0,"<init>","()V")
J2CPP_DEFINE_METHOD(java::util::AbstractSequentialList,1,"add","(ILjava/lang/Object;)V")
J2CPP_DEFINE_METHOD(java::util::AbstractSequentialList,2,"addAll","(ILjava/util/Collection;)Z")
J2CPP_DEFINE_METHOD(java::util::AbstractSequentialList,3,"get","(I)Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(java::util::AbstractSequentialList,4,"iterator","()Ljava/util/Iterator;")
J2CPP_DEFINE_METHOD(java::util::AbstractSequentialList,5,"listIterator","(I)Ljava/util/ListIterator;")
J2CPP_DEFINE_METHOD(java::util::AbstractSequentialList,6,"remove","(I)Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(java::util::AbstractSequentialList,7,"set","(ILjava/lang/Object;)Ljava/lang/Object;")

} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_ABSTRACTSEQUENTIALLIST_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
