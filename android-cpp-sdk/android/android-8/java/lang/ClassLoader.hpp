/*================================================================================
  code generated by: java2cpp
  class: java.lang.ClassLoader
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_LANG_CLASSLOADER_HPP_DECL
#define J2CPP_JAVA_LANG_CLASSLOADER_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace lang { class Class; } } }
namespace j2cpp { namespace java { namespace net { class URL; } } }
namespace j2cpp { namespace java { namespace util { class Enumeration; } } }
namespace j2cpp { namespace java { namespace io { class InputStream; } } }


#include <java/io/InputStream.hpp>
#include <java/lang/Class.hpp>
#include <java/lang/String.hpp>
#include <java/net/URL.hpp>
#include <java/util/Enumeration.hpp>


namespace j2cpp {

namespace java { namespace lang {

	class ClassLoader;
	class ClassLoader
		: public cpp_object<ClassLoader>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_METHOD(12)
		J2CPP_DECLARE_METHOD(13)
		J2CPP_DECLARE_METHOD(14)
		J2CPP_DECLARE_METHOD(15)
		J2CPP_DECLARE_METHOD(16)
		J2CPP_DECLARE_METHOD(17)
		J2CPP_DECLARE_METHOD(18)
		J2CPP_DECLARE_METHOD(19)
		J2CPP_DECLARE_METHOD(20)
		J2CPP_DECLARE_METHOD(21)
		J2CPP_DECLARE_METHOD(22)
		J2CPP_DECLARE_METHOD(23)
		J2CPP_DECLARE_METHOD(24)
		J2CPP_DECLARE_METHOD(25)
		J2CPP_DECLARE_METHOD(26)
		J2CPP_DECLARE_METHOD(27)
		J2CPP_DECLARE_METHOD(28)
		J2CPP_DECLARE_METHOD(29)
		J2CPP_DECLARE_METHOD(30)

		ClassLoader(jobject jobj)
		: cpp_object<ClassLoader>(jobj)
		{
		}

		static local_ref< java::lang::ClassLoader > getSystemClassLoader();
		static local_ref< java::net::URL > getSystemResource(local_ref< java::lang::String > const&);
		static local_ref< java::util::Enumeration > getSystemResources(local_ref< java::lang::String > const&);
		static local_ref< java::io::InputStream > getSystemResourceAsStream(local_ref< java::lang::String > const&);
		local_ref< java::lang::ClassLoader > getParent();
		local_ref< java::net::URL > getResource(local_ref< java::lang::String > const&);
		local_ref< java::util::Enumeration > getResources(local_ref< java::lang::String > const&);
		local_ref< java::io::InputStream > getResourceAsStream(local_ref< java::lang::String > const&);
		local_ref< java::lang::Class > loadClass(local_ref< java::lang::String > const&);
		void setClassAssertionStatus(local_ref< java::lang::String > const&, cpp_boolean const&);
		void setPackageAssertionStatus(local_ref< java::lang::String > const&, cpp_boolean const&);
		void setDefaultAssertionStatus(cpp_boolean const&);
		void clearAssertionStatus();
	}; //class ClassLoader

} //namespace lang
} //namespace java


} //namespace j2cpp

#endif //J2CPP_JAVA_LANG_CLASSLOADER_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_LANG_CLASSLOADER_HPP_IMPL
#define J2CPP_JAVA_LANG_CLASSLOADER_HPP_IMPL

namespace j2cpp {


template <>
local_ref< java::lang::ClassLoader > create< java::lang::ClassLoader>()
{
	return local_ref< java::lang::ClassLoader >(
		environment::get().get_jenv()->NewObject(
			get_class<java::lang::ClassLoader::J2CPP_CLASS_NAME>(),
			get_method_id<java::lang::ClassLoader::J2CPP_CLASS_NAME, java::lang::ClassLoader::J2CPP_METHOD_NAME(0), java::lang::ClassLoader::J2CPP_METHOD_SIGNATURE(0), false>()
		)
	);
}

template <>
local_ref< java::lang::ClassLoader > create< java::lang::ClassLoader>(local_ref< java::lang::ClassLoader > const &a0)
{
	return local_ref< java::lang::ClassLoader >(
		environment::get().get_jenv()->NewObject(
			get_class<java::lang::ClassLoader::J2CPP_CLASS_NAME>(),
			get_method_id<java::lang::ClassLoader::J2CPP_CLASS_NAME, java::lang::ClassLoader::J2CPP_METHOD_NAME(1), java::lang::ClassLoader::J2CPP_METHOD_SIGNATURE(1), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::ClassLoader > java::lang::ClassLoader::getSystemClassLoader()
{
	return local_ref< java::lang::ClassLoader >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), true>()
		)
	);
}

local_ref< java::net::URL > java::lang::ClassLoader::getSystemResource(local_ref< java::lang::String > const &a0)
{
	return local_ref< java::net::URL >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), true>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::util::Enumeration > java::lang::ClassLoader::getSystemResources(local_ref< java::lang::String > const &a0)
{
	return local_ref< java::util::Enumeration >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), true>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::io::InputStream > java::lang::ClassLoader::getSystemResourceAsStream(local_ref< java::lang::String > const &a0)
{
	return local_ref< java::io::InputStream >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), true>(),
			a0.get_jtype()
		)
	);
}








local_ref< java::lang::ClassLoader > java::lang::ClassLoader::getParent()
{
	return local_ref< java::lang::ClassLoader >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(13), J2CPP_METHOD_SIGNATURE(13), false>()
		)
	);
}

local_ref< java::net::URL > java::lang::ClassLoader::getResource(local_ref< java::lang::String > const &a0)
{
	return local_ref< java::net::URL >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(14), J2CPP_METHOD_SIGNATURE(14), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::util::Enumeration > java::lang::ClassLoader::getResources(local_ref< java::lang::String > const &a0)
{
	return local_ref< java::util::Enumeration >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(15), J2CPP_METHOD_SIGNATURE(15), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::io::InputStream > java::lang::ClassLoader::getResourceAsStream(local_ref< java::lang::String > const &a0)
{
	return local_ref< java::io::InputStream >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(16), J2CPP_METHOD_SIGNATURE(16), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::Class > java::lang::ClassLoader::loadClass(local_ref< java::lang::String > const &a0)
{
	return local_ref< java::lang::Class >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(17), J2CPP_METHOD_SIGNATURE(17), false>(),
			a0.get_jtype()
		)
	);
}










void java::lang::ClassLoader::setClassAssertionStatus(local_ref< java::lang::String > const &a0, cpp_boolean const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(27), J2CPP_METHOD_SIGNATURE(27), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void java::lang::ClassLoader::setPackageAssertionStatus(local_ref< java::lang::String > const &a0, cpp_boolean const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(28), J2CPP_METHOD_SIGNATURE(28), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void java::lang::ClassLoader::setDefaultAssertionStatus(cpp_boolean const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(29), J2CPP_METHOD_SIGNATURE(29), false>(),
			a0.get_jtype()
		)
	);
}

void java::lang::ClassLoader::clearAssertionStatus()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(30), J2CPP_METHOD_SIGNATURE(30), false>()
		)
	);
}


J2CPP_DEFINE_CLASS(java::lang::ClassLoader,"java/lang/ClassLoader")
J2CPP_DEFINE_METHOD(java::lang::ClassLoader,0,"<init>","()V")
J2CPP_DEFINE_METHOD(java::lang::ClassLoader,1,"<init>","(Ljava/lang/ClassLoader;)V")
J2CPP_DEFINE_METHOD(java::lang::ClassLoader,2,"getSystemClassLoader","()Ljava/lang/ClassLoader;")
J2CPP_DEFINE_METHOD(java::lang::ClassLoader,3,"getSystemResource","(Ljava/lang/String;)Ljava/net/URL;")
J2CPP_DEFINE_METHOD(java::lang::ClassLoader,4,"getSystemResources","(Ljava/lang/String;)Ljava/util/Enumeration;")
J2CPP_DEFINE_METHOD(java::lang::ClassLoader,5,"getSystemResourceAsStream","(Ljava/lang/String;)Ljava/io/InputStream;")
J2CPP_DEFINE_METHOD(java::lang::ClassLoader,6,"defineClass","([BII)Ljava/lang/Class;")
J2CPP_DEFINE_METHOD(java::lang::ClassLoader,7,"defineClass","(Ljava/lang/String;[BII)Ljava/lang/Class;")
J2CPP_DEFINE_METHOD(java::lang::ClassLoader,8,"defineClass","(Ljava/lang/String;[BIILjava/security/ProtectionDomain;)Ljava/lang/Class;")
J2CPP_DEFINE_METHOD(java::lang::ClassLoader,9,"defineClass","(Ljava/lang/String;Ljava/nio/ByteBuffer;Ljava/security/ProtectionDomain;)Ljava/lang/Class;")
J2CPP_DEFINE_METHOD(java::lang::ClassLoader,10,"findClass","(Ljava/lang/String;)Ljava/lang/Class;")
J2CPP_DEFINE_METHOD(java::lang::ClassLoader,11,"findLoadedClass","(Ljava/lang/String;)Ljava/lang/Class;")
J2CPP_DEFINE_METHOD(java::lang::ClassLoader,12,"findSystemClass","(Ljava/lang/String;)Ljava/lang/Class;")
J2CPP_DEFINE_METHOD(java::lang::ClassLoader,13,"getParent","()Ljava/lang/ClassLoader;")
J2CPP_DEFINE_METHOD(java::lang::ClassLoader,14,"getResource","(Ljava/lang/String;)Ljava/net/URL;")
J2CPP_DEFINE_METHOD(java::lang::ClassLoader,15,"getResources","(Ljava/lang/String;)Ljava/util/Enumeration;")
J2CPP_DEFINE_METHOD(java::lang::ClassLoader,16,"getResourceAsStream","(Ljava/lang/String;)Ljava/io/InputStream;")
J2CPP_DEFINE_METHOD(java::lang::ClassLoader,17,"loadClass","(Ljava/lang/String;)Ljava/lang/Class;")
J2CPP_DEFINE_METHOD(java::lang::ClassLoader,18,"loadClass","(Ljava/lang/String;Z)Ljava/lang/Class;")
J2CPP_DEFINE_METHOD(java::lang::ClassLoader,19,"resolveClass","(Ljava/lang/Class;)V")
J2CPP_DEFINE_METHOD(java::lang::ClassLoader,20,"findResource","(Ljava/lang/String;)Ljava/net/URL;")
J2CPP_DEFINE_METHOD(java::lang::ClassLoader,21,"findResources","(Ljava/lang/String;)Ljava/util/Enumeration;")
J2CPP_DEFINE_METHOD(java::lang::ClassLoader,22,"findLibrary","(Ljava/lang/String;)Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::lang::ClassLoader,23,"getPackage","(Ljava/lang/String;)Ljava/lang/Package;")
J2CPP_DEFINE_METHOD(java::lang::ClassLoader,24,"getPackages","()[java.lang.Package")
J2CPP_DEFINE_METHOD(java::lang::ClassLoader,25,"definePackage","(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/net/URL;)Ljava/lang/Package;")
J2CPP_DEFINE_METHOD(java::lang::ClassLoader,26,"setSigners","(Ljava/lang/Class;[java.lang.Object)V")
J2CPP_DEFINE_METHOD(java::lang::ClassLoader,27,"setClassAssertionStatus","(Ljava/lang/String;Z)V")
J2CPP_DEFINE_METHOD(java::lang::ClassLoader,28,"setPackageAssertionStatus","(Ljava/lang/String;Z)V")
J2CPP_DEFINE_METHOD(java::lang::ClassLoader,29,"setDefaultAssertionStatus","(Z)V")
J2CPP_DEFINE_METHOD(java::lang::ClassLoader,30,"clearAssertionStatus","()V")

} //namespace j2cpp

#endif //J2CPP_JAVA_LANG_CLASSLOADER_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
