/*================================================================================
  code generated by: java2cpp
  class: java.lang.ThreadGroup
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_LANG_THREADGROUP_HPP_DECL
#define J2CPP_JAVA_LANG_THREADGROUP_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace lang { class Thread; } } }
namespace j2cpp { namespace java { namespace lang { class Throwable; } } }


#include <java/lang/String.hpp>
#include <java/lang/Thread.hpp>
#include <java/lang/Throwable.hpp>


namespace j2cpp {

namespace java { namespace lang {

	class ThreadGroup;
	class ThreadGroup
		: public cpp_object<ThreadGroup>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_METHOD(12)
		J2CPP_DECLARE_METHOD(13)
		J2CPP_DECLARE_METHOD(14)
		J2CPP_DECLARE_METHOD(15)
		J2CPP_DECLARE_METHOD(16)
		J2CPP_DECLARE_METHOD(17)
		J2CPP_DECLARE_METHOD(18)
		J2CPP_DECLARE_METHOD(19)
		J2CPP_DECLARE_METHOD(20)
		J2CPP_DECLARE_METHOD(21)
		J2CPP_DECLARE_METHOD(22)
		J2CPP_DECLARE_METHOD(23)
		J2CPP_DECLARE_METHOD(24)
		J2CPP_DECLARE_METHOD(25)

		ThreadGroup(jobject jobj)
		: cpp_object<ThreadGroup>(jobj)
		{
		}

		cpp_int activeCount();
		cpp_int activeGroupCount();
		cpp_boolean allowThreadSuspension(cpp_boolean const&);
		void checkAccess();
		void destroy();
		cpp_int enumerate(local_ref< cpp_object_array<java::lang::Thread, 1> > const&);
		cpp_int enumerate(local_ref< cpp_object_array<java::lang::Thread, 1> > const&, cpp_boolean const&);
		cpp_int enumerate(local_ref< cpp_object_array<java::lang::ThreadGroup, 1> > const&);
		cpp_int enumerate(local_ref< cpp_object_array<java::lang::ThreadGroup, 1> > const&, cpp_boolean const&);
		cpp_int getMaxPriority();
		local_ref< java::lang::String > getName();
		local_ref< java::lang::ThreadGroup > getParent();
		void interrupt();
		cpp_boolean isDaemon();
		cpp_boolean isDestroyed();
		void list();
		cpp_boolean parentOf(local_ref< java::lang::ThreadGroup > const&);
		void resume();
		void setDaemon(cpp_boolean const&);
		void setMaxPriority(cpp_int const&);
		void stop();
		void suspend();
		local_ref< java::lang::String > toString();
		void uncaughtException(local_ref< java::lang::Thread > const&, local_ref< java::lang::Throwable > const&);
	}; //class ThreadGroup

} //namespace lang
} //namespace java


} //namespace j2cpp

#endif //J2CPP_JAVA_LANG_THREADGROUP_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_LANG_THREADGROUP_HPP_IMPL
#define J2CPP_JAVA_LANG_THREADGROUP_HPP_IMPL

namespace j2cpp {


template <>
local_ref< java::lang::ThreadGroup > create< java::lang::ThreadGroup>(local_ref< java::lang::String > const &a0)
{
	return local_ref< java::lang::ThreadGroup >(
		environment::get().get_jenv()->NewObject(
			get_class<java::lang::ThreadGroup::J2CPP_CLASS_NAME>(),
			get_method_id<java::lang::ThreadGroup::J2CPP_CLASS_NAME, java::lang::ThreadGroup::J2CPP_METHOD_NAME(0), java::lang::ThreadGroup::J2CPP_METHOD_SIGNATURE(0), false>(),
			a0.get_jtype()
		)
	);
}

template <>
local_ref< java::lang::ThreadGroup > create< java::lang::ThreadGroup>(local_ref< java::lang::ThreadGroup > const &a0, local_ref< java::lang::String > const &a1)
{
	return local_ref< java::lang::ThreadGroup >(
		environment::get().get_jenv()->NewObject(
			get_class<java::lang::ThreadGroup::J2CPP_CLASS_NAME>(),
			get_method_id<java::lang::ThreadGroup::J2CPP_CLASS_NAME, java::lang::ThreadGroup::J2CPP_METHOD_NAME(1), java::lang::ThreadGroup::J2CPP_METHOD_SIGNATURE(1), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_int java::lang::ThreadGroup::activeCount()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>()
		)
	);
}

cpp_int java::lang::ThreadGroup::activeGroupCount()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>()
		)
	);
}

cpp_boolean java::lang::ThreadGroup::allowThreadSuspension(cpp_boolean const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>(),
			a0.get_jtype()
		)
	);
}

void java::lang::ThreadGroup::checkAccess()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>()
		)
	);
}

void java::lang::ThreadGroup::destroy()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>()
		)
	);
}

cpp_int java::lang::ThreadGroup::enumerate(local_ref< cpp_object_array<java::lang::Thread, 1> > const &a0)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(7), J2CPP_METHOD_SIGNATURE(7), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int java::lang::ThreadGroup::enumerate(local_ref< cpp_object_array<java::lang::Thread, 1> > const &a0, cpp_boolean const &a1)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(8), J2CPP_METHOD_SIGNATURE(8), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_int java::lang::ThreadGroup::enumerate(local_ref< cpp_object_array<java::lang::ThreadGroup, 1> > const &a0)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(9), J2CPP_METHOD_SIGNATURE(9), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int java::lang::ThreadGroup::enumerate(local_ref< cpp_object_array<java::lang::ThreadGroup, 1> > const &a0, cpp_boolean const &a1)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(10), J2CPP_METHOD_SIGNATURE(10), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_int java::lang::ThreadGroup::getMaxPriority()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(11), J2CPP_METHOD_SIGNATURE(11), false>()
		)
	);
}

local_ref< java::lang::String > java::lang::ThreadGroup::getName()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(12), J2CPP_METHOD_SIGNATURE(12), false>()
		)
	);
}

local_ref< java::lang::ThreadGroup > java::lang::ThreadGroup::getParent()
{
	return local_ref< java::lang::ThreadGroup >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(13), J2CPP_METHOD_SIGNATURE(13), false>()
		)
	);
}

void java::lang::ThreadGroup::interrupt()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(14), J2CPP_METHOD_SIGNATURE(14), false>()
		)
	);
}

cpp_boolean java::lang::ThreadGroup::isDaemon()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(15), J2CPP_METHOD_SIGNATURE(15), false>()
		)
	);
}

cpp_boolean java::lang::ThreadGroup::isDestroyed()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(16), J2CPP_METHOD_SIGNATURE(16), false>()
		)
	);
}

void java::lang::ThreadGroup::list()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(17), J2CPP_METHOD_SIGNATURE(17), false>()
		)
	);
}

cpp_boolean java::lang::ThreadGroup::parentOf(local_ref< java::lang::ThreadGroup > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(18), J2CPP_METHOD_SIGNATURE(18), false>(),
			a0.get_jtype()
		)
	);
}

void java::lang::ThreadGroup::resume()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(19), J2CPP_METHOD_SIGNATURE(19), false>()
		)
	);
}

void java::lang::ThreadGroup::setDaemon(cpp_boolean const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(20), J2CPP_METHOD_SIGNATURE(20), false>(),
			a0.get_jtype()
		)
	);
}

void java::lang::ThreadGroup::setMaxPriority(cpp_int const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(21), J2CPP_METHOD_SIGNATURE(21), false>(),
			a0.get_jtype()
		)
	);
}

void java::lang::ThreadGroup::stop()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(22), J2CPP_METHOD_SIGNATURE(22), false>()
		)
	);
}

void java::lang::ThreadGroup::suspend()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(23), J2CPP_METHOD_SIGNATURE(23), false>()
		)
	);
}

local_ref< java::lang::String > java::lang::ThreadGroup::toString()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(24), J2CPP_METHOD_SIGNATURE(24), false>()
		)
	);
}

void java::lang::ThreadGroup::uncaughtException(local_ref< java::lang::Thread > const &a0, local_ref< java::lang::Throwable > const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(25), J2CPP_METHOD_SIGNATURE(25), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}


J2CPP_DEFINE_CLASS(java::lang::ThreadGroup,"java/lang/ThreadGroup")
J2CPP_DEFINE_METHOD(java::lang::ThreadGroup,0,"<init>","(Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(java::lang::ThreadGroup,1,"<init>","(Ljava/lang/ThreadGroup;Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(java::lang::ThreadGroup,2,"activeCount","()I")
J2CPP_DEFINE_METHOD(java::lang::ThreadGroup,3,"activeGroupCount","()I")
J2CPP_DEFINE_METHOD(java::lang::ThreadGroup,4,"allowThreadSuspension","(Z)Z")
J2CPP_DEFINE_METHOD(java::lang::ThreadGroup,5,"checkAccess","()V")
J2CPP_DEFINE_METHOD(java::lang::ThreadGroup,6,"destroy","()V")
J2CPP_DEFINE_METHOD(java::lang::ThreadGroup,7,"enumerate","([java.lang.Thread)I")
J2CPP_DEFINE_METHOD(java::lang::ThreadGroup,8,"enumerate","([java.lang.ThreadZ)I")
J2CPP_DEFINE_METHOD(java::lang::ThreadGroup,9,"enumerate","([java.lang.ThreadGroup)I")
J2CPP_DEFINE_METHOD(java::lang::ThreadGroup,10,"enumerate","([java.lang.ThreadGroupZ)I")
J2CPP_DEFINE_METHOD(java::lang::ThreadGroup,11,"getMaxPriority","()I")
J2CPP_DEFINE_METHOD(java::lang::ThreadGroup,12,"getName","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::lang::ThreadGroup,13,"getParent","()Ljava/lang/ThreadGroup;")
J2CPP_DEFINE_METHOD(java::lang::ThreadGroup,14,"interrupt","()V")
J2CPP_DEFINE_METHOD(java::lang::ThreadGroup,15,"isDaemon","()Z")
J2CPP_DEFINE_METHOD(java::lang::ThreadGroup,16,"isDestroyed","()Z")
J2CPP_DEFINE_METHOD(java::lang::ThreadGroup,17,"list","()V")
J2CPP_DEFINE_METHOD(java::lang::ThreadGroup,18,"parentOf","(Ljava/lang/ThreadGroup;)Z")
J2CPP_DEFINE_METHOD(java::lang::ThreadGroup,19,"resume","()V")
J2CPP_DEFINE_METHOD(java::lang::ThreadGroup,20,"setDaemon","(Z)V")
J2CPP_DEFINE_METHOD(java::lang::ThreadGroup,21,"setMaxPriority","(I)V")
J2CPP_DEFINE_METHOD(java::lang::ThreadGroup,22,"stop","()V")
J2CPP_DEFINE_METHOD(java::lang::ThreadGroup,23,"suspend","()V")
J2CPP_DEFINE_METHOD(java::lang::ThreadGroup,24,"toString","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::lang::ThreadGroup,25,"uncaughtException","(Ljava/lang/Thread;Ljava/lang/Throwable;)V")

} //namespace j2cpp

#endif //J2CPP_JAVA_LANG_THREADGROUP_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
