/*================================================================================
  code generated by: java2cpp
  class: java.lang.StringBuilder
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_LANG_STRINGBUILDER_HPP_DECL
#define J2CPP_JAVA_LANG_STRINGBUILDER_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace lang { class StringBuffer; } } }
namespace j2cpp { namespace java { namespace lang { class CharSequence; } } }
namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace lang { class Appendable; } } }


#include <java/lang/Appendable.hpp>
#include <java/lang/CharSequence.hpp>
#include <java/lang/Object.hpp>
#include <java/lang/String.hpp>
#include <java/lang/StringBuffer.hpp>


namespace j2cpp {

namespace java { namespace lang {

	class StringBuilder;
	class StringBuilder
		: public cpp_object<StringBuilder>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_METHOD(12)
		J2CPP_DECLARE_METHOD(13)
		J2CPP_DECLARE_METHOD(14)
		J2CPP_DECLARE_METHOD(15)
		J2CPP_DECLARE_METHOD(16)
		J2CPP_DECLARE_METHOD(17)
		J2CPP_DECLARE_METHOD(18)
		J2CPP_DECLARE_METHOD(19)
		J2CPP_DECLARE_METHOD(20)
		J2CPP_DECLARE_METHOD(21)
		J2CPP_DECLARE_METHOD(22)
		J2CPP_DECLARE_METHOD(23)
		J2CPP_DECLARE_METHOD(24)
		J2CPP_DECLARE_METHOD(25)
		J2CPP_DECLARE_METHOD(26)
		J2CPP_DECLARE_METHOD(27)
		J2CPP_DECLARE_METHOD(28)
		J2CPP_DECLARE_METHOD(29)
		J2CPP_DECLARE_METHOD(30)
		J2CPP_DECLARE_METHOD(31)
		J2CPP_DECLARE_METHOD(32)
		J2CPP_DECLARE_METHOD(33)
		J2CPP_DECLARE_METHOD(34)
		J2CPP_DECLARE_METHOD(35)
		J2CPP_DECLARE_METHOD(36)
		J2CPP_DECLARE_METHOD(37)

		StringBuilder(jobject jobj)
		: cpp_object<StringBuilder>(jobj)
		{
		}

		local_ref< java::lang::StringBuilder > append(cpp_boolean const&);
		local_ref< java::lang::StringBuilder > append(cpp_char const&);
		local_ref< java::lang::StringBuilder > append(cpp_int const&);
		local_ref< java::lang::StringBuilder > append(cpp_long const&);
		local_ref< java::lang::StringBuilder > append(cpp_float const&);
		local_ref< java::lang::StringBuilder > append(cpp_double const&);
		local_ref< java::lang::StringBuilder > append(local_ref< java::lang::Object > const&);
		local_ref< java::lang::StringBuilder > append(local_ref< java::lang::String > const&);
		local_ref< java::lang::StringBuilder > append(local_ref< java::lang::StringBuffer > const&);
		local_ref< java::lang::StringBuilder > append(local_ref< cpp_char_array<1> > const&);
		local_ref< java::lang::StringBuilder > append(local_ref< cpp_char_array<1> > const&, cpp_int const&, cpp_int const&);
		local_ref< java::lang::StringBuilder > append(local_ref< java::lang::CharSequence > const&);
		local_ref< java::lang::StringBuilder > append(local_ref< java::lang::CharSequence > const&, cpp_int const&, cpp_int const&);
		local_ref< java::lang::StringBuilder > appendCodePoint(cpp_int const&);
		local_ref< java::lang::StringBuilder > deleteThe(cpp_int const&, cpp_int const&);
		local_ref< java::lang::StringBuilder > deleteCharAt(cpp_int const&);
		local_ref< java::lang::StringBuilder > insert(cpp_int const&, cpp_boolean const&);
		local_ref< java::lang::StringBuilder > insert(cpp_int const&, cpp_char const&);
		local_ref< java::lang::StringBuilder > insert(cpp_int const&, cpp_int const&);
		local_ref< java::lang::StringBuilder > insert(cpp_int const&, cpp_long const&);
		local_ref< java::lang::StringBuilder > insert(cpp_int const&, cpp_float const&);
		local_ref< java::lang::StringBuilder > insert(cpp_int const&, cpp_double const&);
		local_ref< java::lang::StringBuilder > insert(cpp_int const&, local_ref< java::lang::Object > const&);
		local_ref< java::lang::StringBuilder > insert(cpp_int const&, local_ref< java::lang::String > const&);
		local_ref< java::lang::StringBuilder > insert(cpp_int const&, local_ref< cpp_char_array<1> > const&);
		local_ref< java::lang::StringBuilder > insert(cpp_int const&, local_ref< cpp_char_array<1> > const&, cpp_int const&, cpp_int const&);
		local_ref< java::lang::StringBuilder > insert(cpp_int const&, local_ref< java::lang::CharSequence > const&);
		local_ref< java::lang::StringBuilder > insert(cpp_int const&, local_ref< java::lang::CharSequence > const&, cpp_int const&, cpp_int const&);
		local_ref< java::lang::StringBuilder > replace(cpp_int const&, cpp_int const&, local_ref< java::lang::String > const&);
		local_ref< java::lang::StringBuilder > reverse();
		local_ref< java::lang::String > toString();
		local_ref< java::lang::Appendable > append_1(local_ref< java::lang::CharSequence > const&, cpp_int const&, cpp_int const&);
		local_ref< java::lang::Appendable > append_1(local_ref< java::lang::CharSequence > const&);
		local_ref< java::lang::Appendable > append_1(cpp_char const&);
	}; //class StringBuilder

} //namespace lang
} //namespace java


} //namespace j2cpp

#endif //J2CPP_JAVA_LANG_STRINGBUILDER_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_LANG_STRINGBUILDER_HPP_IMPL
#define J2CPP_JAVA_LANG_STRINGBUILDER_HPP_IMPL

namespace j2cpp {


template <>
local_ref< java::lang::StringBuilder > create< java::lang::StringBuilder>()
{
	return local_ref< java::lang::StringBuilder >(
		environment::get().get_jenv()->NewObject(
			get_class<java::lang::StringBuilder::J2CPP_CLASS_NAME>(),
			get_method_id<java::lang::StringBuilder::J2CPP_CLASS_NAME, java::lang::StringBuilder::J2CPP_METHOD_NAME(0), java::lang::StringBuilder::J2CPP_METHOD_SIGNATURE(0), false>()
		)
	);
}

template <>
local_ref< java::lang::StringBuilder > create< java::lang::StringBuilder>(cpp_int const &a0)
{
	return local_ref< java::lang::StringBuilder >(
		environment::get().get_jenv()->NewObject(
			get_class<java::lang::StringBuilder::J2CPP_CLASS_NAME>(),
			get_method_id<java::lang::StringBuilder::J2CPP_CLASS_NAME, java::lang::StringBuilder::J2CPP_METHOD_NAME(1), java::lang::StringBuilder::J2CPP_METHOD_SIGNATURE(1), false>(),
			a0.get_jtype()
		)
	);
}

template <>
local_ref< java::lang::StringBuilder > create< java::lang::StringBuilder>(local_ref< java::lang::CharSequence > const &a0)
{
	return local_ref< java::lang::StringBuilder >(
		environment::get().get_jenv()->NewObject(
			get_class<java::lang::StringBuilder::J2CPP_CLASS_NAME>(),
			get_method_id<java::lang::StringBuilder::J2CPP_CLASS_NAME, java::lang::StringBuilder::J2CPP_METHOD_NAME(2), java::lang::StringBuilder::J2CPP_METHOD_SIGNATURE(2), false>(),
			a0.get_jtype()
		)
	);
}

template <>
local_ref< java::lang::StringBuilder > create< java::lang::StringBuilder>(local_ref< java::lang::String > const &a0)
{
	return local_ref< java::lang::StringBuilder >(
		environment::get().get_jenv()->NewObject(
			get_class<java::lang::StringBuilder::J2CPP_CLASS_NAME>(),
			get_method_id<java::lang::StringBuilder::J2CPP_CLASS_NAME, java::lang::StringBuilder::J2CPP_METHOD_NAME(3), java::lang::StringBuilder::J2CPP_METHOD_SIGNATURE(3), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::StringBuilder > java::lang::StringBuilder::append(cpp_boolean const &a0)
{
	return local_ref< java::lang::StringBuilder >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::StringBuilder > java::lang::StringBuilder::append(cpp_char const &a0)
{
	return local_ref< java::lang::StringBuilder >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::StringBuilder > java::lang::StringBuilder::append(cpp_int const &a0)
{
	return local_ref< java::lang::StringBuilder >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::StringBuilder > java::lang::StringBuilder::append(cpp_long const &a0)
{
	return local_ref< java::lang::StringBuilder >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(7), J2CPP_METHOD_SIGNATURE(7), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::StringBuilder > java::lang::StringBuilder::append(cpp_float const &a0)
{
	return local_ref< java::lang::StringBuilder >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(8), J2CPP_METHOD_SIGNATURE(8), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::StringBuilder > java::lang::StringBuilder::append(cpp_double const &a0)
{
	return local_ref< java::lang::StringBuilder >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(9), J2CPP_METHOD_SIGNATURE(9), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::StringBuilder > java::lang::StringBuilder::append(local_ref< java::lang::Object > const &a0)
{
	return local_ref< java::lang::StringBuilder >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(10), J2CPP_METHOD_SIGNATURE(10), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::StringBuilder > java::lang::StringBuilder::append(local_ref< java::lang::String > const &a0)
{
	return local_ref< java::lang::StringBuilder >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(11), J2CPP_METHOD_SIGNATURE(11), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::StringBuilder > java::lang::StringBuilder::append(local_ref< java::lang::StringBuffer > const &a0)
{
	return local_ref< java::lang::StringBuilder >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(12), J2CPP_METHOD_SIGNATURE(12), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::StringBuilder > java::lang::StringBuilder::append(local_ref< cpp_char_array<1> > const &a0)
{
	return local_ref< java::lang::StringBuilder >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(13), J2CPP_METHOD_SIGNATURE(13), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::StringBuilder > java::lang::StringBuilder::append(local_ref< cpp_char_array<1> > const &a0, cpp_int const &a1, cpp_int const &a2)
{
	return local_ref< java::lang::StringBuilder >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(14), J2CPP_METHOD_SIGNATURE(14), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

local_ref< java::lang::StringBuilder > java::lang::StringBuilder::append(local_ref< java::lang::CharSequence > const &a0)
{
	return local_ref< java::lang::StringBuilder >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(15), J2CPP_METHOD_SIGNATURE(15), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::StringBuilder > java::lang::StringBuilder::append(local_ref< java::lang::CharSequence > const &a0, cpp_int const &a1, cpp_int const &a2)
{
	return local_ref< java::lang::StringBuilder >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(16), J2CPP_METHOD_SIGNATURE(16), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

local_ref< java::lang::StringBuilder > java::lang::StringBuilder::appendCodePoint(cpp_int const &a0)
{
	return local_ref< java::lang::StringBuilder >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(17), J2CPP_METHOD_SIGNATURE(17), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::StringBuilder > java::lang::StringBuilder::deleteThe(cpp_int const &a0, cpp_int const &a1)
{
	return local_ref< java::lang::StringBuilder >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(18), J2CPP_METHOD_SIGNATURE(18), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< java::lang::StringBuilder > java::lang::StringBuilder::deleteCharAt(cpp_int const &a0)
{
	return local_ref< java::lang::StringBuilder >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(19), J2CPP_METHOD_SIGNATURE(19), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::StringBuilder > java::lang::StringBuilder::insert(cpp_int const &a0, cpp_boolean const &a1)
{
	return local_ref< java::lang::StringBuilder >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(20), J2CPP_METHOD_SIGNATURE(20), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< java::lang::StringBuilder > java::lang::StringBuilder::insert(cpp_int const &a0, cpp_char const &a1)
{
	return local_ref< java::lang::StringBuilder >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(21), J2CPP_METHOD_SIGNATURE(21), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< java::lang::StringBuilder > java::lang::StringBuilder::insert(cpp_int const &a0, cpp_int const &a1)
{
	return local_ref< java::lang::StringBuilder >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(22), J2CPP_METHOD_SIGNATURE(22), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< java::lang::StringBuilder > java::lang::StringBuilder::insert(cpp_int const &a0, cpp_long const &a1)
{
	return local_ref< java::lang::StringBuilder >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(23), J2CPP_METHOD_SIGNATURE(23), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< java::lang::StringBuilder > java::lang::StringBuilder::insert(cpp_int const &a0, cpp_float const &a1)
{
	return local_ref< java::lang::StringBuilder >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(24), J2CPP_METHOD_SIGNATURE(24), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< java::lang::StringBuilder > java::lang::StringBuilder::insert(cpp_int const &a0, cpp_double const &a1)
{
	return local_ref< java::lang::StringBuilder >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(25), J2CPP_METHOD_SIGNATURE(25), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< java::lang::StringBuilder > java::lang::StringBuilder::insert(cpp_int const &a0, local_ref< java::lang::Object > const &a1)
{
	return local_ref< java::lang::StringBuilder >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(26), J2CPP_METHOD_SIGNATURE(26), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< java::lang::StringBuilder > java::lang::StringBuilder::insert(cpp_int const &a0, local_ref< java::lang::String > const &a1)
{
	return local_ref< java::lang::StringBuilder >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(27), J2CPP_METHOD_SIGNATURE(27), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< java::lang::StringBuilder > java::lang::StringBuilder::insert(cpp_int const &a0, local_ref< cpp_char_array<1> > const &a1)
{
	return local_ref< java::lang::StringBuilder >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(28), J2CPP_METHOD_SIGNATURE(28), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< java::lang::StringBuilder > java::lang::StringBuilder::insert(cpp_int const &a0, local_ref< cpp_char_array<1> > const &a1, cpp_int const &a2, cpp_int const &a3)
{
	return local_ref< java::lang::StringBuilder >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(29), J2CPP_METHOD_SIGNATURE(29), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype(), a3.get_jtype()
		)
	);
}

local_ref< java::lang::StringBuilder > java::lang::StringBuilder::insert(cpp_int const &a0, local_ref< java::lang::CharSequence > const &a1)
{
	return local_ref< java::lang::StringBuilder >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(30), J2CPP_METHOD_SIGNATURE(30), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< java::lang::StringBuilder > java::lang::StringBuilder::insert(cpp_int const &a0, local_ref< java::lang::CharSequence > const &a1, cpp_int const &a2, cpp_int const &a3)
{
	return local_ref< java::lang::StringBuilder >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(31), J2CPP_METHOD_SIGNATURE(31), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype(), a3.get_jtype()
		)
	);
}

local_ref< java::lang::StringBuilder > java::lang::StringBuilder::replace(cpp_int const &a0, cpp_int const &a1, local_ref< java::lang::String > const &a2)
{
	return local_ref< java::lang::StringBuilder >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(32), J2CPP_METHOD_SIGNATURE(32), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

local_ref< java::lang::StringBuilder > java::lang::StringBuilder::reverse()
{
	return local_ref< java::lang::StringBuilder >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(33), J2CPP_METHOD_SIGNATURE(33), false>()
		)
	);
}

local_ref< java::lang::String > java::lang::StringBuilder::toString()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(34), J2CPP_METHOD_SIGNATURE(34), false>()
		)
	);
}

local_ref< java::lang::Appendable > java::lang::StringBuilder::append_1(local_ref< java::lang::CharSequence > const &a0, cpp_int const &a1, cpp_int const &a2)
{
	return local_ref< java::lang::Appendable >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(35), J2CPP_METHOD_SIGNATURE(35), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

local_ref< java::lang::Appendable > java::lang::StringBuilder::append_1(local_ref< java::lang::CharSequence > const &a0)
{
	return local_ref< java::lang::Appendable >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(36), J2CPP_METHOD_SIGNATURE(36), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::Appendable > java::lang::StringBuilder::append_1(cpp_char const &a0)
{
	return local_ref< java::lang::Appendable >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(37), J2CPP_METHOD_SIGNATURE(37), false>(),
			a0.get_jtype()
		)
	);
}


J2CPP_DEFINE_CLASS(java::lang::StringBuilder,"java/lang/StringBuilder")
J2CPP_DEFINE_METHOD(java::lang::StringBuilder,0,"<init>","()V")
J2CPP_DEFINE_METHOD(java::lang::StringBuilder,1,"<init>","(I)V")
J2CPP_DEFINE_METHOD(java::lang::StringBuilder,2,"<init>","(Ljava/lang/CharSequence;)V")
J2CPP_DEFINE_METHOD(java::lang::StringBuilder,3,"<init>","(Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(java::lang::StringBuilder,4,"append","(Z)Ljava/lang/StringBuilder;")
J2CPP_DEFINE_METHOD(java::lang::StringBuilder,5,"append","(C)Ljava/lang/StringBuilder;")
J2CPP_DEFINE_METHOD(java::lang::StringBuilder,6,"append","(I)Ljava/lang/StringBuilder;")
J2CPP_DEFINE_METHOD(java::lang::StringBuilder,7,"append","(J)Ljava/lang/StringBuilder;")
J2CPP_DEFINE_METHOD(java::lang::StringBuilder,8,"append","(F)Ljava/lang/StringBuilder;")
J2CPP_DEFINE_METHOD(java::lang::StringBuilder,9,"append","(D)Ljava/lang/StringBuilder;")
J2CPP_DEFINE_METHOD(java::lang::StringBuilder,10,"append","(Ljava/lang/Object;)Ljava/lang/StringBuilder;")
J2CPP_DEFINE_METHOD(java::lang::StringBuilder,11,"append","(Ljava/lang/String;)Ljava/lang/StringBuilder;")
J2CPP_DEFINE_METHOD(java::lang::StringBuilder,12,"append","(Ljava/lang/StringBuffer;)Ljava/lang/StringBuilder;")
J2CPP_DEFINE_METHOD(java::lang::StringBuilder,13,"append","([C)Ljava/lang/StringBuilder;")
J2CPP_DEFINE_METHOD(java::lang::StringBuilder,14,"append","([CII)Ljava/lang/StringBuilder;")
J2CPP_DEFINE_METHOD(java::lang::StringBuilder,15,"append","(Ljava/lang/CharSequence;)Ljava/lang/StringBuilder;")
J2CPP_DEFINE_METHOD(java::lang::StringBuilder,16,"append","(Ljava/lang/CharSequence;II)Ljava/lang/StringBuilder;")
J2CPP_DEFINE_METHOD(java::lang::StringBuilder,17,"appendCodePoint","(I)Ljava/lang/StringBuilder;")
J2CPP_DEFINE_METHOD(java::lang::StringBuilder,18,"delete","(II)Ljava/lang/StringBuilder;")
J2CPP_DEFINE_METHOD(java::lang::StringBuilder,19,"deleteCharAt","(I)Ljava/lang/StringBuilder;")
J2CPP_DEFINE_METHOD(java::lang::StringBuilder,20,"insert","(IZ)Ljava/lang/StringBuilder;")
J2CPP_DEFINE_METHOD(java::lang::StringBuilder,21,"insert","(IC)Ljava/lang/StringBuilder;")
J2CPP_DEFINE_METHOD(java::lang::StringBuilder,22,"insert","(II)Ljava/lang/StringBuilder;")
J2CPP_DEFINE_METHOD(java::lang::StringBuilder,23,"insert","(IJ)Ljava/lang/StringBuilder;")
J2CPP_DEFINE_METHOD(java::lang::StringBuilder,24,"insert","(IF)Ljava/lang/StringBuilder;")
J2CPP_DEFINE_METHOD(java::lang::StringBuilder,25,"insert","(ID)Ljava/lang/StringBuilder;")
J2CPP_DEFINE_METHOD(java::lang::StringBuilder,26,"insert","(ILjava/lang/Object;)Ljava/lang/StringBuilder;")
J2CPP_DEFINE_METHOD(java::lang::StringBuilder,27,"insert","(ILjava/lang/String;)Ljava/lang/StringBuilder;")
J2CPP_DEFINE_METHOD(java::lang::StringBuilder,28,"insert","(I[C)Ljava/lang/StringBuilder;")
J2CPP_DEFINE_METHOD(java::lang::StringBuilder,29,"insert","(I[CII)Ljava/lang/StringBuilder;")
J2CPP_DEFINE_METHOD(java::lang::StringBuilder,30,"insert","(ILjava/lang/CharSequence;)Ljava/lang/StringBuilder;")
J2CPP_DEFINE_METHOD(java::lang::StringBuilder,31,"insert","(ILjava/lang/CharSequence;II)Ljava/lang/StringBuilder;")
J2CPP_DEFINE_METHOD(java::lang::StringBuilder,32,"replace","(IILjava/lang/String;)Ljava/lang/StringBuilder;")
J2CPP_DEFINE_METHOD(java::lang::StringBuilder,33,"reverse","()Ljava/lang/StringBuilder;")
J2CPP_DEFINE_METHOD(java::lang::StringBuilder,34,"toString","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::lang::StringBuilder,35,"append","(Ljava/lang/CharSequence;II)Ljava/lang/Appendable;")
J2CPP_DEFINE_METHOD(java::lang::StringBuilder,36,"append","(Ljava/lang/CharSequence;)Ljava/lang/Appendable;")
J2CPP_DEFINE_METHOD(java::lang::StringBuilder,37,"append","(C)Ljava/lang/Appendable;")

} //namespace j2cpp

#endif //J2CPP_JAVA_LANG_STRINGBUILDER_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
