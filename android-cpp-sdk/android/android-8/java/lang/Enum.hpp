/*================================================================================
  code generated by: java2cpp
  class: java.lang.Enum
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_LANG_ENUM_HPP_DECL
#define J2CPP_JAVA_LANG_ENUM_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace lang { class Class; } } }
namespace j2cpp { namespace java { namespace lang { class Object; } } }


#include <java/lang/Class.hpp>
#include <java/lang/Object.hpp>
#include <java/lang/String.hpp>


namespace j2cpp {

namespace java { namespace lang {

	class Enum;
	class Enum
		: public cpp_object<Enum>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)

		Enum(jobject jobj)
		: cpp_object<Enum>(jobj)
		{
		}

		local_ref< java::lang::String > name();
		cpp_int ordinal();
		local_ref< java::lang::String > toString();
		cpp_boolean equals(local_ref< java::lang::Object > const&);
		cpp_int hashCode();
		cpp_int compareTo(local_ref< java::lang::Enum > const&);
		local_ref< java::lang::Class > getDeclaringClass();
		static local_ref< java::lang::Enum > valueOf(local_ref< java::lang::Class > const&, local_ref< java::lang::String > const&);
		cpp_int compareTo(local_ref< java::lang::Object > const&);
	}; //class Enum

} //namespace lang
} //namespace java


} //namespace j2cpp

#endif //J2CPP_JAVA_LANG_ENUM_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_LANG_ENUM_HPP_IMPL
#define J2CPP_JAVA_LANG_ENUM_HPP_IMPL

namespace j2cpp {


template <>
local_ref< java::lang::Enum > create< java::lang::Enum>(local_ref< java::lang::String > const &a0, cpp_int const &a1)
{
	return local_ref< java::lang::Enum >(
		environment::get().get_jenv()->NewObject(
			get_class<java::lang::Enum::J2CPP_CLASS_NAME>(),
			get_method_id<java::lang::Enum::J2CPP_CLASS_NAME, java::lang::Enum::J2CPP_METHOD_NAME(0), java::lang::Enum::J2CPP_METHOD_SIGNATURE(0), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< java::lang::String > java::lang::Enum::name()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), false>()
		)
	);
}

cpp_int java::lang::Enum::ordinal()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>()
		)
	);
}

local_ref< java::lang::String > java::lang::Enum::toString()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>()
		)
	);
}

cpp_boolean java::lang::Enum::equals(local_ref< java::lang::Object > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int java::lang::Enum::hashCode()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>()
		)
	);
}


cpp_int java::lang::Enum::compareTo(local_ref< java::lang::Enum > const &a0)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(7), J2CPP_METHOD_SIGNATURE(7), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::Class > java::lang::Enum::getDeclaringClass()
{
	return local_ref< java::lang::Class >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(8), J2CPP_METHOD_SIGNATURE(8), false>()
		)
	);
}

local_ref< java::lang::Enum > java::lang::Enum::valueOf(local_ref< java::lang::Class > const &a0, local_ref< java::lang::String > const &a1)
{
	return local_ref< java::lang::Enum >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(9), J2CPP_METHOD_SIGNATURE(9), true>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_int java::lang::Enum::compareTo(local_ref< java::lang::Object > const &a0)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(10), J2CPP_METHOD_SIGNATURE(10), false>(),
			a0.get_jtype()
		)
	);
}


J2CPP_DEFINE_CLASS(java::lang::Enum,"java/lang/Enum")
J2CPP_DEFINE_METHOD(java::lang::Enum,0,"<init>","(Ljava/lang/String;I)V")
J2CPP_DEFINE_METHOD(java::lang::Enum,1,"name","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::lang::Enum,2,"ordinal","()I")
J2CPP_DEFINE_METHOD(java::lang::Enum,3,"toString","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::lang::Enum,4,"equals","(Ljava/lang/Object;)Z")
J2CPP_DEFINE_METHOD(java::lang::Enum,5,"hashCode","()I")
J2CPP_DEFINE_METHOD(java::lang::Enum,6,"clone","()Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(java::lang::Enum,7,"compareTo","(Ljava/lang/Enum;)I")
J2CPP_DEFINE_METHOD(java::lang::Enum,8,"getDeclaringClass","()Ljava/lang/Class;")
J2CPP_DEFINE_METHOD(java::lang::Enum,9,"valueOf","(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;")
J2CPP_DEFINE_METHOD(java::lang::Enum,10,"compareTo","(Ljava/lang/Object;)I")

} //namespace j2cpp

#endif //J2CPP_JAVA_LANG_ENUM_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
