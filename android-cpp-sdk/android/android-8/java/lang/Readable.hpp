/*================================================================================
  code generated by: java2cpp
  class: java.lang.Readable
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_LANG_READABLE_HPP_DECL
#define J2CPP_JAVA_LANG_READABLE_HPP_DECL


namespace j2cpp { namespace java { namespace nio { class CharBuffer; } } }


#include <java/nio/CharBuffer.hpp>


namespace j2cpp {

namespace java { namespace lang {

	class Readable;
	class Readable
		: public cpp_object<Readable>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)

		Readable(jobject jobj)
		: cpp_object<Readable>(jobj)
		{
		}

		cpp_int read(local_ref< java::nio::CharBuffer > const&);
	}; //class Readable

} //namespace lang
} //namespace java


} //namespace j2cpp

#endif //J2CPP_JAVA_LANG_READABLE_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_LANG_READABLE_HPP_IMPL
#define J2CPP_JAVA_LANG_READABLE_HPP_IMPL

namespace j2cpp {


cpp_int java::lang::Readable::read(local_ref< java::nio::CharBuffer > const &a0)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(0), J2CPP_METHOD_SIGNATURE(0), false>(),
			a0.get_jtype()
		)
	);
}


J2CPP_DEFINE_CLASS(java::lang::Readable,"java/lang/Readable")
J2CPP_DEFINE_METHOD(java::lang::Readable,0,"read","(Ljava/nio/CharBuffer;)I")

} //namespace j2cpp

#endif //J2CPP_JAVA_LANG_READABLE_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
