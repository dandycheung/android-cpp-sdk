/*================================================================================
  code generated by: java2cpp
  class: java.nio.channels.spi.AbstractSelectableChannel
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_NIO_CHANNELS_SPI_ABSTRACTSELECTABLECHANNEL_HPP_DECL
#define J2CPP_JAVA_NIO_CHANNELS_SPI_ABSTRACTSELECTABLECHANNEL_HPP_DECL


namespace j2cpp { namespace java { namespace nio { namespace channels { class SelectableChannel; } } } }
namespace j2cpp { namespace java { namespace nio { namespace channels { class SelectionKey; } } } }
namespace j2cpp { namespace java { namespace nio { namespace channels { namespace spi { class SelectorProvider; } } } } }
namespace j2cpp { namespace java { namespace nio { namespace channels { class Selector; } } } }
namespace j2cpp { namespace java { namespace lang { class Object; } } }


#include <java/lang/Object.hpp>
#include <java/nio/channels/SelectableChannel.hpp>
#include <java/nio/channels/SelectionKey.hpp>
#include <java/nio/channels/Selector.hpp>
#include <java/nio/channels/spi/SelectorProvider.hpp>


namespace j2cpp {

namespace java { namespace nio { namespace channels { namespace spi {

	class AbstractSelectableChannel;
	class AbstractSelectableChannel
		: public cpp_object<AbstractSelectableChannel>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)

		AbstractSelectableChannel(jobject jobj)
		: cpp_object<AbstractSelectableChannel>(jobj)
		{
		}

		local_ref< java::nio::channels::spi::SelectorProvider > provider();
		cpp_boolean isRegistered();
		local_ref< java::nio::channels::SelectionKey > keyFor(local_ref< java::nio::channels::Selector > const&);
		local_ref< java::nio::channels::SelectionKey > register(local_ref< java::nio::channels::Selector > const&, cpp_int const&, local_ref< java::lang::Object > const&);
		cpp_boolean isBlocking();
		local_ref< java::lang::Object > blockingLock();
		local_ref< java::nio::channels::SelectableChannel > configureBlocking(cpp_boolean const&);
	}; //class AbstractSelectableChannel

} //namespace spi
} //namespace channels
} //namespace nio
} //namespace java


} //namespace j2cpp

#endif //J2CPP_JAVA_NIO_CHANNELS_SPI_ABSTRACTSELECTABLECHANNEL_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_NIO_CHANNELS_SPI_ABSTRACTSELECTABLECHANNEL_HPP_IMPL
#define J2CPP_JAVA_NIO_CHANNELS_SPI_ABSTRACTSELECTABLECHANNEL_HPP_IMPL

namespace j2cpp {


template <>
local_ref< java::nio::channels::spi::AbstractSelectableChannel > create< java::nio::channels::spi::AbstractSelectableChannel>(local_ref< java::nio::channels::spi::SelectorProvider > const &a0)
{
	return local_ref< java::nio::channels::spi::AbstractSelectableChannel >(
		environment::get().get_jenv()->NewObject(
			get_class<java::nio::channels::spi::AbstractSelectableChannel::J2CPP_CLASS_NAME>(),
			get_method_id<java::nio::channels::spi::AbstractSelectableChannel::J2CPP_CLASS_NAME, java::nio::channels::spi::AbstractSelectableChannel::J2CPP_METHOD_NAME(0), java::nio::channels::spi::AbstractSelectableChannel::J2CPP_METHOD_SIGNATURE(0), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::nio::channels::spi::SelectorProvider > java::nio::channels::spi::AbstractSelectableChannel::provider()
{
	return local_ref< java::nio::channels::spi::SelectorProvider >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), false>()
		)
	);
}

cpp_boolean java::nio::channels::spi::AbstractSelectableChannel::isRegistered()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>()
		)
	);
}

local_ref< java::nio::channels::SelectionKey > java::nio::channels::spi::AbstractSelectableChannel::keyFor(local_ref< java::nio::channels::Selector > const &a0)
{
	return local_ref< java::nio::channels::SelectionKey >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::nio::channels::SelectionKey > java::nio::channels::spi::AbstractSelectableChannel::register(local_ref< java::nio::channels::Selector > const &a0, cpp_int const &a1, local_ref< java::lang::Object > const &a2)
{
	return local_ref< java::nio::channels::SelectionKey >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}



cpp_boolean java::nio::channels::spi::AbstractSelectableChannel::isBlocking()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(7), J2CPP_METHOD_SIGNATURE(7), false>()
		)
	);
}

local_ref< java::lang::Object > java::nio::channels::spi::AbstractSelectableChannel::blockingLock()
{
	return local_ref< java::lang::Object >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(8), J2CPP_METHOD_SIGNATURE(8), false>()
		)
	);
}

local_ref< java::nio::channels::SelectableChannel > java::nio::channels::spi::AbstractSelectableChannel::configureBlocking(cpp_boolean const &a0)
{
	return local_ref< java::nio::channels::SelectableChannel >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(9), J2CPP_METHOD_SIGNATURE(9), false>(),
			a0.get_jtype()
		)
	);
}



J2CPP_DEFINE_CLASS(java::nio::channels::spi::AbstractSelectableChannel,"java/nio/channels/spi/AbstractSelectableChannel")
J2CPP_DEFINE_METHOD(java::nio::channels::spi::AbstractSelectableChannel,0,"<init>","(Ljava/nio/channels/spi/SelectorProvider;)V")
J2CPP_DEFINE_METHOD(java::nio::channels::spi::AbstractSelectableChannel,1,"provider","()Ljava/nio/channels/spi/SelectorProvider;")
J2CPP_DEFINE_METHOD(java::nio::channels::spi::AbstractSelectableChannel,2,"isRegistered","()Z")
J2CPP_DEFINE_METHOD(java::nio::channels::spi::AbstractSelectableChannel,3,"keyFor","(Ljava/nio/channels/Selector;)Ljava/nio/channels/SelectionKey;")
J2CPP_DEFINE_METHOD(java::nio::channels::spi::AbstractSelectableChannel,4,"register","(Ljava/nio/channels/Selector;ILjava/lang/Object;)Ljava/nio/channels/SelectionKey;")
J2CPP_DEFINE_METHOD(java::nio::channels::spi::AbstractSelectableChannel,5,"implCloseChannel","()V")
J2CPP_DEFINE_METHOD(java::nio::channels::spi::AbstractSelectableChannel,6,"implCloseSelectableChannel","()V")
J2CPP_DEFINE_METHOD(java::nio::channels::spi::AbstractSelectableChannel,7,"isBlocking","()Z")
J2CPP_DEFINE_METHOD(java::nio::channels::spi::AbstractSelectableChannel,8,"blockingLock","()Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(java::nio::channels::spi::AbstractSelectableChannel,9,"configureBlocking","(Z)Ljava/nio/channels/SelectableChannel;")
J2CPP_DEFINE_METHOD(java::nio::channels::spi::AbstractSelectableChannel,10,"implConfigureBlocking","(Z)V")

} //namespace j2cpp

#endif //J2CPP_JAVA_NIO_CHANNELS_SPI_ABSTRACTSELECTABLECHANNEL_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
