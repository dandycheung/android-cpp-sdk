/*================================================================================
  code generated by: java2cpp
  class: java.security.spec.ECPoint
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_SECURITY_SPEC_ECPOINT_HPP_DECL
#define J2CPP_JAVA_SECURITY_SPEC_ECPOINT_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace math { class BigInteger; } } }


#include <java/lang/Object.hpp>
#include <java/math/BigInteger.hpp>


namespace j2cpp {

namespace java { namespace security { namespace spec {

	class ECPoint;
	class ECPoint
		: public cpp_object<ECPoint>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_FIELD(0)

		ECPoint(jobject jobj)
		: cpp_object<ECPoint>(jobj)
		{
		}

		local_ref< java::math::BigInteger > getAffineX();
		local_ref< java::math::BigInteger > getAffineY();
		cpp_boolean equals(local_ref< java::lang::Object > const&);
		cpp_int hashCode();

		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(0), J2CPP_FIELD_SIGNATURE(0), local_ref< java::security::spec::ECPoint > > POINT_INFINITY;
	}; //class ECPoint

} //namespace spec
} //namespace security
} //namespace java


} //namespace j2cpp

#endif //J2CPP_JAVA_SECURITY_SPEC_ECPOINT_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_SECURITY_SPEC_ECPOINT_HPP_IMPL
#define J2CPP_JAVA_SECURITY_SPEC_ECPOINT_HPP_IMPL

namespace j2cpp {


template <>
local_ref< java::security::spec::ECPoint > create< java::security::spec::ECPoint>(local_ref< java::math::BigInteger > const &a0, local_ref< java::math::BigInteger > const &a1)
{
	return local_ref< java::security::spec::ECPoint >(
		environment::get().get_jenv()->NewObject(
			get_class<java::security::spec::ECPoint::J2CPP_CLASS_NAME>(),
			get_method_id<java::security::spec::ECPoint::J2CPP_CLASS_NAME, java::security::spec::ECPoint::J2CPP_METHOD_NAME(0), java::security::spec::ECPoint::J2CPP_METHOD_SIGNATURE(0), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< java::math::BigInteger > java::security::spec::ECPoint::getAffineX()
{
	return local_ref< java::math::BigInteger >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), false>()
		)
	);
}

local_ref< java::math::BigInteger > java::security::spec::ECPoint::getAffineY()
{
	return local_ref< java::math::BigInteger >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>()
		)
	);
}

cpp_boolean java::security::spec::ECPoint::equals(local_ref< java::lang::Object > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int java::security::spec::ECPoint::hashCode()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>()
		)
	);
}


static_field<
	java::security::spec::ECPoint::J2CPP_CLASS_NAME,
	java::security::spec::ECPoint::J2CPP_FIELD_NAME(0),
	java::security::spec::ECPoint::J2CPP_FIELD_SIGNATURE(0),
	local_ref< java::security::spec::ECPoint >
> java::security::spec::ECPoint::POINT_INFINITY;


J2CPP_DEFINE_CLASS(java::security::spec::ECPoint,"java/security/spec/ECPoint")
J2CPP_DEFINE_METHOD(java::security::spec::ECPoint,0,"<init>","(Ljava/math/BigInteger;Ljava/math/BigInteger;)V")
J2CPP_DEFINE_METHOD(java::security::spec::ECPoint,1,"getAffineX","()Ljava/math/BigInteger;")
J2CPP_DEFINE_METHOD(java::security::spec::ECPoint,2,"getAffineY","()Ljava/math/BigInteger;")
J2CPP_DEFINE_METHOD(java::security::spec::ECPoint,3,"equals","(Ljava/lang/Object;)Z")
J2CPP_DEFINE_METHOD(java::security::spec::ECPoint,4,"hashCode","()I")
J2CPP_DEFINE_METHOD(java::security::spec::ECPoint,5,"<clinit>","()V")
J2CPP_DEFINE_FIELD(java::security::spec::ECPoint,0,"POINT_INFINITY","Ljava/security/spec/ECPoint;")

} //namespace j2cpp

#endif //J2CPP_JAVA_SECURITY_SPEC_ECPOINT_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
