/*================================================================================
  code generated by: java2cpp
  class: java.security.cert.PKIXCertPathChecker
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_SECURITY_CERT_PKIXCERTPATHCHECKER_HPP_DECL
#define J2CPP_JAVA_SECURITY_CERT_PKIXCERTPATHCHECKER_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace security { namespace cert { class Certificate; } } } }
namespace j2cpp { namespace java { namespace util { class Collection; } } }
namespace j2cpp { namespace java { namespace util { class Set; } } }


#include <java/lang/Object.hpp>
#include <java/security/cert/Certificate.hpp>
#include <java/util/Collection.hpp>
#include <java/util/Set.hpp>


namespace j2cpp {

namespace java { namespace security { namespace cert {

	class PKIXCertPathChecker;
	class PKIXCertPathChecker
		: public cpp_object<PKIXCertPathChecker>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)

		PKIXCertPathChecker(jobject jobj)
		: cpp_object<PKIXCertPathChecker>(jobj)
		{
		}

		local_ref< java::lang::Object > clone();
		void init(cpp_boolean const&);
		cpp_boolean isForwardCheckingSupported();
		local_ref< java::util::Set > getSupportedExtensions();
		void check(local_ref< java::security::cert::Certificate > const&, local_ref< java::util::Collection > const&);
	}; //class PKIXCertPathChecker

} //namespace cert
} //namespace security
} //namespace java


} //namespace j2cpp

#endif //J2CPP_JAVA_SECURITY_CERT_PKIXCERTPATHCHECKER_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_SECURITY_CERT_PKIXCERTPATHCHECKER_HPP_IMPL
#define J2CPP_JAVA_SECURITY_CERT_PKIXCERTPATHCHECKER_HPP_IMPL

namespace j2cpp {


template <>
local_ref< java::security::cert::PKIXCertPathChecker > create< java::security::cert::PKIXCertPathChecker>()
{
	return local_ref< java::security::cert::PKIXCertPathChecker >(
		environment::get().get_jenv()->NewObject(
			get_class<java::security::cert::PKIXCertPathChecker::J2CPP_CLASS_NAME>(),
			get_method_id<java::security::cert::PKIXCertPathChecker::J2CPP_CLASS_NAME, java::security::cert::PKIXCertPathChecker::J2CPP_METHOD_NAME(0), java::security::cert::PKIXCertPathChecker::J2CPP_METHOD_SIGNATURE(0), false>()
		)
	);
}

local_ref< java::lang::Object > java::security::cert::PKIXCertPathChecker::clone()
{
	return local_ref< java::lang::Object >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), false>()
		)
	);
}

void java::security::cert::PKIXCertPathChecker::init(cpp_boolean const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean java::security::cert::PKIXCertPathChecker::isForwardCheckingSupported()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>()
		)
	);
}

local_ref< java::util::Set > java::security::cert::PKIXCertPathChecker::getSupportedExtensions()
{
	return local_ref< java::util::Set >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>()
		)
	);
}

void java::security::cert::PKIXCertPathChecker::check(local_ref< java::security::cert::Certificate > const &a0, local_ref< java::util::Collection > const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}


J2CPP_DEFINE_CLASS(java::security::cert::PKIXCertPathChecker,"java/security/cert/PKIXCertPathChecker")
J2CPP_DEFINE_METHOD(java::security::cert::PKIXCertPathChecker,0,"<init>","()V")
J2CPP_DEFINE_METHOD(java::security::cert::PKIXCertPathChecker,1,"clone","()Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(java::security::cert::PKIXCertPathChecker,2,"init","(Z)V")
J2CPP_DEFINE_METHOD(java::security::cert::PKIXCertPathChecker,3,"isForwardCheckingSupported","()Z")
J2CPP_DEFINE_METHOD(java::security::cert::PKIXCertPathChecker,4,"getSupportedExtensions","()Ljava/util/Set;")
J2CPP_DEFINE_METHOD(java::security::cert::PKIXCertPathChecker,5,"check","(Ljava/security/cert/Certificate;Ljava/util/Collection;)V")

} //namespace j2cpp

#endif //J2CPP_JAVA_SECURITY_CERT_PKIXCERTPATHCHECKER_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
