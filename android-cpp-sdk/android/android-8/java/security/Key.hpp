/*================================================================================
  code generated by: java2cpp
  class: java.security.Key
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_SECURITY_KEY_HPP_DECL
#define J2CPP_JAVA_SECURITY_KEY_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class String; } } }


#include <java/lang/String.hpp>


namespace j2cpp {

namespace java { namespace security {

	class Key;
	class Key
		: public cpp_object<Key>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_FIELD(0)

		Key(jobject jobj)
		: cpp_object<Key>(jobj)
		{
		}

		local_ref< java::lang::String > getAlgorithm();
		local_ref< java::lang::String > getFormat();
		local_ref< cpp_byte_array<1> > getEncoded();

		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(0), J2CPP_FIELD_SIGNATURE(0), cpp_long > serialVersionUID;
	}; //class Key

} //namespace security
} //namespace java


} //namespace j2cpp

#endif //J2CPP_JAVA_SECURITY_KEY_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_SECURITY_KEY_HPP_IMPL
#define J2CPP_JAVA_SECURITY_KEY_HPP_IMPL

namespace j2cpp {


local_ref< java::lang::String > java::security::Key::getAlgorithm()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(0), J2CPP_METHOD_SIGNATURE(0), false>()
		)
	);
}

local_ref< java::lang::String > java::security::Key::getFormat()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), false>()
		)
	);
}

local_ref< cpp_byte_array<1> > java::security::Key::getEncoded()
{
	return local_ref< cpp_byte_array<1> >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>()
		)
	);
}


static_field<
	java::security::Key::J2CPP_CLASS_NAME,
	java::security::Key::J2CPP_FIELD_NAME(0),
	java::security::Key::J2CPP_FIELD_SIGNATURE(0),
	cpp_long
> java::security::Key::serialVersionUID;


J2CPP_DEFINE_CLASS(java::security::Key,"java/security/Key")
J2CPP_DEFINE_METHOD(java::security::Key,0,"getAlgorithm","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::security::Key,1,"getFormat","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::security::Key,2,"getEncoded","()[B")
J2CPP_DEFINE_FIELD(java::security::Key,0,"serialVersionUID","J")

} //namespace j2cpp

#endif //J2CPP_JAVA_SECURITY_KEY_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
