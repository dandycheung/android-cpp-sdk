/*================================================================================
  code generated by: java2cpp
  class: java.sql.DriverManager
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_SQL_DRIVERMANAGER_HPP_DECL
#define J2CPP_JAVA_SQL_DRIVERMANAGER_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace util { class Enumeration; } } }
namespace j2cpp { namespace java { namespace util { class Properties; } } }
namespace j2cpp { namespace java { namespace io { class PrintStream; } } }
namespace j2cpp { namespace java { namespace io { class PrintWriter; } } }
namespace j2cpp { namespace java { namespace sql { class Connection; } } }
namespace j2cpp { namespace java { namespace sql { class Driver; } } }


#include <java/io/PrintStream.hpp>
#include <java/io/PrintWriter.hpp>
#include <java/lang/String.hpp>
#include <java/sql/Connection.hpp>
#include <java/sql/Driver.hpp>
#include <java/util/Enumeration.hpp>
#include <java/util/Properties.hpp>


namespace j2cpp {

namespace java { namespace sql {

	class DriverManager;
	class DriverManager
		: public cpp_object<DriverManager>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_METHOD(12)
		J2CPP_DECLARE_METHOD(13)
		J2CPP_DECLARE_METHOD(14)

		DriverManager(jobject jobj)
		: cpp_object<DriverManager>(jobj)
		{
		}

		static void deregisterDriver(local_ref< java::sql::Driver > const&);
		static local_ref< java::sql::Connection > getConnection(local_ref< java::lang::String > const&);
		static local_ref< java::sql::Connection > getConnection(local_ref< java::lang::String > const&, local_ref< java::util::Properties > const&);
		static local_ref< java::sql::Connection > getConnection(local_ref< java::lang::String > const&, local_ref< java::lang::String > const&, local_ref< java::lang::String > const&);
		static local_ref< java::sql::Driver > getDriver(local_ref< java::lang::String > const&);
		static local_ref< java::util::Enumeration > getDrivers();
		static cpp_int getLoginTimeout();
		static local_ref< java::io::PrintStream > getLogStream();
		static local_ref< java::io::PrintWriter > getLogWriter();
		static void println(local_ref< java::lang::String > const&);
		static void registerDriver(local_ref< java::sql::Driver > const&);
		static void setLoginTimeout(cpp_int const&);
		static void setLogStream(local_ref< java::io::PrintStream > const&);
		static void setLogWriter(local_ref< java::io::PrintWriter > const&);
	}; //class DriverManager

} //namespace sql
} //namespace java


} //namespace j2cpp

#endif //J2CPP_JAVA_SQL_DRIVERMANAGER_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_SQL_DRIVERMANAGER_HPP_IMPL
#define J2CPP_JAVA_SQL_DRIVERMANAGER_HPP_IMPL

namespace j2cpp {


template <>
local_ref< java::sql::DriverManager > create< java::sql::DriverManager>()
{
	return local_ref< java::sql::DriverManager >(
		environment::get().get_jenv()->NewObject(
			get_class<java::sql::DriverManager::J2CPP_CLASS_NAME>(),
			get_method_id<java::sql::DriverManager::J2CPP_CLASS_NAME, java::sql::DriverManager::J2CPP_METHOD_NAME(0), java::sql::DriverManager::J2CPP_METHOD_SIGNATURE(0), false>()
		)
	);
}

void java::sql::DriverManager::deregisterDriver(local_ref< java::sql::Driver > const &a0)
{
	return void(
		environment::get().get_jenv()->CallStaticVoidMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), true>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::sql::Connection > java::sql::DriverManager::getConnection(local_ref< java::lang::String > const &a0)
{
	return local_ref< java::sql::Connection >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), true>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::sql::Connection > java::sql::DriverManager::getConnection(local_ref< java::lang::String > const &a0, local_ref< java::util::Properties > const &a1)
{
	return local_ref< java::sql::Connection >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), true>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< java::sql::Connection > java::sql::DriverManager::getConnection(local_ref< java::lang::String > const &a0, local_ref< java::lang::String > const &a1, local_ref< java::lang::String > const &a2)
{
	return local_ref< java::sql::Connection >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), true>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

local_ref< java::sql::Driver > java::sql::DriverManager::getDriver(local_ref< java::lang::String > const &a0)
{
	return local_ref< java::sql::Driver >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), true>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::util::Enumeration > java::sql::DriverManager::getDrivers()
{
	return local_ref< java::util::Enumeration >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), true>()
		)
	);
}

cpp_int java::sql::DriverManager::getLoginTimeout()
{
	return cpp_int(
		environment::get().get_jenv()->CallStaticIntMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(7), J2CPP_METHOD_SIGNATURE(7), true>()
		)
	);
}

local_ref< java::io::PrintStream > java::sql::DriverManager::getLogStream()
{
	return local_ref< java::io::PrintStream >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(8), J2CPP_METHOD_SIGNATURE(8), true>()
		)
	);
}

local_ref< java::io::PrintWriter > java::sql::DriverManager::getLogWriter()
{
	return local_ref< java::io::PrintWriter >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(9), J2CPP_METHOD_SIGNATURE(9), true>()
		)
	);
}

void java::sql::DriverManager::println(local_ref< java::lang::String > const &a0)
{
	return void(
		environment::get().get_jenv()->CallStaticVoidMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(10), J2CPP_METHOD_SIGNATURE(10), true>(),
			a0.get_jtype()
		)
	);
}

void java::sql::DriverManager::registerDriver(local_ref< java::sql::Driver > const &a0)
{
	return void(
		environment::get().get_jenv()->CallStaticVoidMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(11), J2CPP_METHOD_SIGNATURE(11), true>(),
			a0.get_jtype()
		)
	);
}

void java::sql::DriverManager::setLoginTimeout(cpp_int const &a0)
{
	return void(
		environment::get().get_jenv()->CallStaticVoidMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(12), J2CPP_METHOD_SIGNATURE(12), true>(),
			a0.get_jtype()
		)
	);
}

void java::sql::DriverManager::setLogStream(local_ref< java::io::PrintStream > const &a0)
{
	return void(
		environment::get().get_jenv()->CallStaticVoidMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(13), J2CPP_METHOD_SIGNATURE(13), true>(),
			a0.get_jtype()
		)
	);
}

void java::sql::DriverManager::setLogWriter(local_ref< java::io::PrintWriter > const &a0)
{
	return void(
		environment::get().get_jenv()->CallStaticVoidMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(14), J2CPP_METHOD_SIGNATURE(14), true>(),
			a0.get_jtype()
		)
	);
}


J2CPP_DEFINE_CLASS(java::sql::DriverManager,"java/sql/DriverManager")
J2CPP_DEFINE_METHOD(java::sql::DriverManager,0,"<init>","()V")
J2CPP_DEFINE_METHOD(java::sql::DriverManager,1,"deregisterDriver","(Ljava/sql/Driver;)V")
J2CPP_DEFINE_METHOD(java::sql::DriverManager,2,"getConnection","(Ljava/lang/String;)Ljava/sql/Connection;")
J2CPP_DEFINE_METHOD(java::sql::DriverManager,3,"getConnection","(Ljava/lang/String;Ljava/util/Properties;)Ljava/sql/Connection;")
J2CPP_DEFINE_METHOD(java::sql::DriverManager,4,"getConnection","(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/sql/Connection;")
J2CPP_DEFINE_METHOD(java::sql::DriverManager,5,"getDriver","(Ljava/lang/String;)Ljava/sql/Driver;")
J2CPP_DEFINE_METHOD(java::sql::DriverManager,6,"getDrivers","()Ljava/util/Enumeration;")
J2CPP_DEFINE_METHOD(java::sql::DriverManager,7,"getLoginTimeout","()I")
J2CPP_DEFINE_METHOD(java::sql::DriverManager,8,"getLogStream","()Ljava/io/PrintStream;")
J2CPP_DEFINE_METHOD(java::sql::DriverManager,9,"getLogWriter","()Ljava/io/PrintWriter;")
J2CPP_DEFINE_METHOD(java::sql::DriverManager,10,"println","(Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(java::sql::DriverManager,11,"registerDriver","(Ljava/sql/Driver;)V")
J2CPP_DEFINE_METHOD(java::sql::DriverManager,12,"setLoginTimeout","(I)V")
J2CPP_DEFINE_METHOD(java::sql::DriverManager,13,"setLogStream","(Ljava/io/PrintStream;)V")
J2CPP_DEFINE_METHOD(java::sql::DriverManager,14,"setLogWriter","(Ljava/io/PrintWriter;)V")

} //namespace j2cpp

#endif //J2CPP_JAVA_SQL_DRIVERMANAGER_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
