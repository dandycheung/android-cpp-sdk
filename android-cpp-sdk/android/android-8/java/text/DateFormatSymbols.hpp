/*================================================================================
  code generated by: java2cpp
  class: java.text.DateFormatSymbols
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_TEXT_DATEFORMATSYMBOLS_HPP_DECL
#define J2CPP_JAVA_TEXT_DATEFORMATSYMBOLS_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace util { class Locale; } } }


#include <java/lang/Object.hpp>
#include <java/lang/String.hpp>
#include <java/util/Locale.hpp>


namespace j2cpp {

namespace java { namespace text {

	class DateFormatSymbols;
	class DateFormatSymbols
		: public cpp_object<DateFormatSymbols>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_METHOD(12)
		J2CPP_DECLARE_METHOD(13)
		J2CPP_DECLARE_METHOD(14)
		J2CPP_DECLARE_METHOD(15)
		J2CPP_DECLARE_METHOD(16)
		J2CPP_DECLARE_METHOD(17)
		J2CPP_DECLARE_METHOD(18)
		J2CPP_DECLARE_METHOD(19)
		J2CPP_DECLARE_METHOD(20)

		DateFormatSymbols(jobject jobj)
		: cpp_object<DateFormatSymbols>(jobj)
		{
		}

		local_ref< java::lang::Object > clone();
		cpp_boolean equals(local_ref< java::lang::Object > const&);
		local_ref< cpp_object_array<java::lang::String, 1> > getAmPmStrings();
		local_ref< cpp_object_array<java::lang::String, 1> > getEras();
		local_ref< java::lang::String > getLocalPatternChars();
		local_ref< cpp_object_array<java::lang::String, 1> > getMonths();
		local_ref< cpp_object_array<java::lang::String, 1> > getShortMonths();
		local_ref< cpp_object_array<java::lang::String, 1> > getShortWeekdays();
		local_ref< cpp_object_array<java::lang::String, 1> > getWeekdays();
		local_ref< cpp_object_array<java::lang::String, 2> > getZoneStrings();
		cpp_int hashCode();
		void setAmPmStrings(local_ref< cpp_object_array<java::lang::String, 1> > const&);
		void setEras(local_ref< cpp_object_array<java::lang::String, 1> > const&);
		void setLocalPatternChars(local_ref< java::lang::String > const&);
		void setMonths(local_ref< cpp_object_array<java::lang::String, 1> > const&);
		void setShortMonths(local_ref< cpp_object_array<java::lang::String, 1> > const&);
		void setShortWeekdays(local_ref< cpp_object_array<java::lang::String, 1> > const&);
		void setWeekdays(local_ref< cpp_object_array<java::lang::String, 1> > const&);
		void setZoneStrings(local_ref< cpp_object_array<java::lang::String, 2> > const&);
	}; //class DateFormatSymbols

} //namespace text
} //namespace java


} //namespace j2cpp

#endif //J2CPP_JAVA_TEXT_DATEFORMATSYMBOLS_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_TEXT_DATEFORMATSYMBOLS_HPP_IMPL
#define J2CPP_JAVA_TEXT_DATEFORMATSYMBOLS_HPP_IMPL

namespace j2cpp {


template <>
local_ref< java::text::DateFormatSymbols > create< java::text::DateFormatSymbols>()
{
	return local_ref< java::text::DateFormatSymbols >(
		environment::get().get_jenv()->NewObject(
			get_class<java::text::DateFormatSymbols::J2CPP_CLASS_NAME>(),
			get_method_id<java::text::DateFormatSymbols::J2CPP_CLASS_NAME, java::text::DateFormatSymbols::J2CPP_METHOD_NAME(0), java::text::DateFormatSymbols::J2CPP_METHOD_SIGNATURE(0), false>()
		)
	);
}

template <>
local_ref< java::text::DateFormatSymbols > create< java::text::DateFormatSymbols>(local_ref< java::util::Locale > const &a0)
{
	return local_ref< java::text::DateFormatSymbols >(
		environment::get().get_jenv()->NewObject(
			get_class<java::text::DateFormatSymbols::J2CPP_CLASS_NAME>(),
			get_method_id<java::text::DateFormatSymbols::J2CPP_CLASS_NAME, java::text::DateFormatSymbols::J2CPP_METHOD_NAME(1), java::text::DateFormatSymbols::J2CPP_METHOD_SIGNATURE(1), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::Object > java::text::DateFormatSymbols::clone()
{
	return local_ref< java::lang::Object >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>()
		)
	);
}

cpp_boolean java::text::DateFormatSymbols::equals(local_ref< java::lang::Object > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< cpp_object_array<java::lang::String, 1> > java::text::DateFormatSymbols::getAmPmStrings()
{
	return local_ref< cpp_object_array<java::lang::String, 1> >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>()
		)
	);
}

local_ref< cpp_object_array<java::lang::String, 1> > java::text::DateFormatSymbols::getEras()
{
	return local_ref< cpp_object_array<java::lang::String, 1> >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>()
		)
	);
}

local_ref< java::lang::String > java::text::DateFormatSymbols::getLocalPatternChars()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>()
		)
	);
}

local_ref< cpp_object_array<java::lang::String, 1> > java::text::DateFormatSymbols::getMonths()
{
	return local_ref< cpp_object_array<java::lang::String, 1> >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(7), J2CPP_METHOD_SIGNATURE(7), false>()
		)
	);
}

local_ref< cpp_object_array<java::lang::String, 1> > java::text::DateFormatSymbols::getShortMonths()
{
	return local_ref< cpp_object_array<java::lang::String, 1> >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(8), J2CPP_METHOD_SIGNATURE(8), false>()
		)
	);
}

local_ref< cpp_object_array<java::lang::String, 1> > java::text::DateFormatSymbols::getShortWeekdays()
{
	return local_ref< cpp_object_array<java::lang::String, 1> >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(9), J2CPP_METHOD_SIGNATURE(9), false>()
		)
	);
}

local_ref< cpp_object_array<java::lang::String, 1> > java::text::DateFormatSymbols::getWeekdays()
{
	return local_ref< cpp_object_array<java::lang::String, 1> >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(10), J2CPP_METHOD_SIGNATURE(10), false>()
		)
	);
}

local_ref< cpp_object_array<java::lang::String, 2> > java::text::DateFormatSymbols::getZoneStrings()
{
	return local_ref< cpp_object_array<java::lang::String, 2> >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(11), J2CPP_METHOD_SIGNATURE(11), false>()
		)
	);
}

cpp_int java::text::DateFormatSymbols::hashCode()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(12), J2CPP_METHOD_SIGNATURE(12), false>()
		)
	);
}

void java::text::DateFormatSymbols::setAmPmStrings(local_ref< cpp_object_array<java::lang::String, 1> > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(13), J2CPP_METHOD_SIGNATURE(13), false>(),
			a0.get_jtype()
		)
	);
}

void java::text::DateFormatSymbols::setEras(local_ref< cpp_object_array<java::lang::String, 1> > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(14), J2CPP_METHOD_SIGNATURE(14), false>(),
			a0.get_jtype()
		)
	);
}

void java::text::DateFormatSymbols::setLocalPatternChars(local_ref< java::lang::String > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(15), J2CPP_METHOD_SIGNATURE(15), false>(),
			a0.get_jtype()
		)
	);
}

void java::text::DateFormatSymbols::setMonths(local_ref< cpp_object_array<java::lang::String, 1> > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(16), J2CPP_METHOD_SIGNATURE(16), false>(),
			a0.get_jtype()
		)
	);
}

void java::text::DateFormatSymbols::setShortMonths(local_ref< cpp_object_array<java::lang::String, 1> > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(17), J2CPP_METHOD_SIGNATURE(17), false>(),
			a0.get_jtype()
		)
	);
}

void java::text::DateFormatSymbols::setShortWeekdays(local_ref< cpp_object_array<java::lang::String, 1> > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(18), J2CPP_METHOD_SIGNATURE(18), false>(),
			a0.get_jtype()
		)
	);
}

void java::text::DateFormatSymbols::setWeekdays(local_ref< cpp_object_array<java::lang::String, 1> > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(19), J2CPP_METHOD_SIGNATURE(19), false>(),
			a0.get_jtype()
		)
	);
}

void java::text::DateFormatSymbols::setZoneStrings(local_ref< cpp_object_array<java::lang::String, 2> > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(20), J2CPP_METHOD_SIGNATURE(20), false>(),
			a0.get_jtype()
		)
	);
}


J2CPP_DEFINE_CLASS(java::text::DateFormatSymbols,"java/text/DateFormatSymbols")
J2CPP_DEFINE_METHOD(java::text::DateFormatSymbols,0,"<init>","()V")
J2CPP_DEFINE_METHOD(java::text::DateFormatSymbols,1,"<init>","(Ljava/util/Locale;)V")
J2CPP_DEFINE_METHOD(java::text::DateFormatSymbols,2,"clone","()Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(java::text::DateFormatSymbols,3,"equals","(Ljava/lang/Object;)Z")
J2CPP_DEFINE_METHOD(java::text::DateFormatSymbols,4,"getAmPmStrings","()[java.lang.String")
J2CPP_DEFINE_METHOD(java::text::DateFormatSymbols,5,"getEras","()[java.lang.String")
J2CPP_DEFINE_METHOD(java::text::DateFormatSymbols,6,"getLocalPatternChars","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::text::DateFormatSymbols,7,"getMonths","()[java.lang.String")
J2CPP_DEFINE_METHOD(java::text::DateFormatSymbols,8,"getShortMonths","()[java.lang.String")
J2CPP_DEFINE_METHOD(java::text::DateFormatSymbols,9,"getShortWeekdays","()[java.lang.String")
J2CPP_DEFINE_METHOD(java::text::DateFormatSymbols,10,"getWeekdays","()[java.lang.String")
J2CPP_DEFINE_METHOD(java::text::DateFormatSymbols,11,"getZoneStrings","()[[java.lang.String")
J2CPP_DEFINE_METHOD(java::text::DateFormatSymbols,12,"hashCode","()I")
J2CPP_DEFINE_METHOD(java::text::DateFormatSymbols,13,"setAmPmStrings","([java.lang.String)V")
J2CPP_DEFINE_METHOD(java::text::DateFormatSymbols,14,"setEras","([java.lang.String)V")
J2CPP_DEFINE_METHOD(java::text::DateFormatSymbols,15,"setLocalPatternChars","(Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(java::text::DateFormatSymbols,16,"setMonths","([java.lang.String)V")
J2CPP_DEFINE_METHOD(java::text::DateFormatSymbols,17,"setShortMonths","([java.lang.String)V")
J2CPP_DEFINE_METHOD(java::text::DateFormatSymbols,18,"setShortWeekdays","([java.lang.String)V")
J2CPP_DEFINE_METHOD(java::text::DateFormatSymbols,19,"setWeekdays","([java.lang.String)V")
J2CPP_DEFINE_METHOD(java::text::DateFormatSymbols,20,"setZoneStrings","([[java.lang.String)V")

} //namespace j2cpp

#endif //J2CPP_JAVA_TEXT_DATEFORMATSYMBOLS_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
