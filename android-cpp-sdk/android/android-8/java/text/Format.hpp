/*================================================================================
  code generated by: java2cpp
  class: java.text.Format
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_TEXT_FORMAT_HPP_DECL
#define J2CPP_JAVA_TEXT_FORMAT_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace lang { class StringBuffer; } } }
namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace text { class AttributedCharacterIterator; } } }
namespace j2cpp { namespace java { namespace text { class FieldPosition; } } }
namespace j2cpp { namespace java { namespace text { class ParsePosition; } } }


#include <java/lang/Object.hpp>
#include <java/lang/String.hpp>
#include <java/lang/StringBuffer.hpp>
#include <java/text/AttributedCharacterIterator.hpp>
#include <java/text/FieldPosition.hpp>
#include <java/text/ParsePosition.hpp>


namespace j2cpp {

namespace java { namespace text {

	class Format;
	namespace Format_ {

		class Field;
		class Field
			: public cpp_object<Field>
		{
		public:

			J2CPP_DECLARE_CLASS

			J2CPP_DECLARE_METHOD(0)

			Field(jobject jobj)
			: cpp_object<Field>(jobj)
			{
			}

		}; //class Field

	} //namespace Format_

	class Format
		: public cpp_object<Format>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)

		typedef Format_::Field Field;

		Format(jobject jobj)
		: cpp_object<Format>(jobj)
		{
		}

		local_ref< java::lang::Object > clone();
		local_ref< java::lang::String > format(local_ref< java::lang::Object > const&);
		local_ref< java::lang::StringBuffer > format(local_ref< java::lang::Object > const&, local_ref< java::lang::StringBuffer > const&, local_ref< java::text::FieldPosition > const&);
		local_ref< java::text::AttributedCharacterIterator > formatToCharacterIterator(local_ref< java::lang::Object > const&);
		local_ref< java::lang::Object > parseObject(local_ref< java::lang::String > const&);
		local_ref< java::lang::Object > parseObject(local_ref< java::lang::String > const&, local_ref< java::text::ParsePosition > const&);
	}; //class Format

} //namespace text
} //namespace java


} //namespace j2cpp

#endif //J2CPP_JAVA_TEXT_FORMAT_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_TEXT_FORMAT_HPP_IMPL
#define J2CPP_JAVA_TEXT_FORMAT_HPP_IMPL

namespace j2cpp {



template <>
local_ref< java::text::Format_::Field > create< java::text::Format_::Field>(local_ref< java::lang::String > const &a0)
{
	return local_ref< java::text::Format_::Field >(
		environment::get().get_jenv()->NewObject(
			get_class<java::text::Format_::Field::J2CPP_CLASS_NAME>(),
			get_method_id<java::text::Format_::Field::J2CPP_CLASS_NAME, java::text::Format_::Field::J2CPP_METHOD_NAME(0), java::text::Format_::Field::J2CPP_METHOD_SIGNATURE(0), false>(),
			a0.get_jtype()
		)
	);
}


J2CPP_DEFINE_CLASS(java::text::Format_::Field,"java/text/Format$Field")
J2CPP_DEFINE_METHOD(java::text::Format_::Field,0,"<init>","(Ljava/lang/String;)V")


template <>
local_ref< java::text::Format > create< java::text::Format>()
{
	return local_ref< java::text::Format >(
		environment::get().get_jenv()->NewObject(
			get_class<java::text::Format::J2CPP_CLASS_NAME>(),
			get_method_id<java::text::Format::J2CPP_CLASS_NAME, java::text::Format::J2CPP_METHOD_NAME(0), java::text::Format::J2CPP_METHOD_SIGNATURE(0), false>()
		)
	);
}

local_ref< java::lang::Object > java::text::Format::clone()
{
	return local_ref< java::lang::Object >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), false>()
		)
	);
}

local_ref< java::lang::String > java::text::Format::format(local_ref< java::lang::Object > const &a0)
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::StringBuffer > java::text::Format::format(local_ref< java::lang::Object > const &a0, local_ref< java::lang::StringBuffer > const &a1, local_ref< java::text::FieldPosition > const &a2)
{
	return local_ref< java::lang::StringBuffer >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

local_ref< java::text::AttributedCharacterIterator > java::text::Format::formatToCharacterIterator(local_ref< java::lang::Object > const &a0)
{
	return local_ref< java::text::AttributedCharacterIterator >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::Object > java::text::Format::parseObject(local_ref< java::lang::String > const &a0)
{
	return local_ref< java::lang::Object >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::Object > java::text::Format::parseObject(local_ref< java::lang::String > const &a0, local_ref< java::text::ParsePosition > const &a1)
{
	return local_ref< java::lang::Object >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}


J2CPP_DEFINE_CLASS(java::text::Format,"java/text/Format")
J2CPP_DEFINE_METHOD(java::text::Format,0,"<init>","()V")
J2CPP_DEFINE_METHOD(java::text::Format,1,"clone","()Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(java::text::Format,2,"format","(Ljava/lang/Object;)Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::text::Format,3,"format","(Ljava/lang/Object;Ljava/lang/StringBuffer;Ljava/text/FieldPosition;)Ljava/lang/StringBuffer;")
J2CPP_DEFINE_METHOD(java::text::Format,4,"formatToCharacterIterator","(Ljava/lang/Object;)Ljava/text/AttributedCharacterIterator;")
J2CPP_DEFINE_METHOD(java::text::Format,5,"parseObject","(Ljava/lang/String;)Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(java::text::Format,6,"parseObject","(Ljava/lang/String;Ljava/text/ParsePosition;)Ljava/lang/Object;")

} //namespace j2cpp

#endif //J2CPP_JAVA_TEXT_FORMAT_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
