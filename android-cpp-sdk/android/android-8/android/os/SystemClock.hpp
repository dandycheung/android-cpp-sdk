/*================================================================================
  code generated by: java2cpp
  class: android.os.SystemClock
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_OS_SYSTEMCLOCK_HPP_DECL
#define J2CPP_ANDROID_OS_SYSTEMCLOCK_HPP_DECL






namespace j2cpp {

namespace android { namespace os {

	class SystemClock;
	class SystemClock
		: public cpp_object<SystemClock>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)

		SystemClock(jobject jobj)
		: cpp_object<SystemClock>(jobj)
		{
		}

		static void sleep(cpp_long const&);
		static cpp_boolean setCurrentTimeMillis(cpp_long const&);
		static cpp_long uptimeMillis();
		static cpp_long elapsedRealtime();
		static cpp_long currentThreadTimeMillis();
	}; //class SystemClock

} //namespace os
} //namespace android


} //namespace j2cpp

#endif //J2CPP_ANDROID_OS_SYSTEMCLOCK_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_OS_SYSTEMCLOCK_HPP_IMPL
#define J2CPP_ANDROID_OS_SYSTEMCLOCK_HPP_IMPL

namespace j2cpp {


template <>
local_ref< android::os::SystemClock > create< android::os::SystemClock>()
{
	return local_ref< android::os::SystemClock >(
		environment::get().get_jenv()->NewObject(
			get_class<android::os::SystemClock::J2CPP_CLASS_NAME>(),
			get_method_id<android::os::SystemClock::J2CPP_CLASS_NAME, android::os::SystemClock::J2CPP_METHOD_NAME(0), android::os::SystemClock::J2CPP_METHOD_SIGNATURE(0), false>()
		)
	);
}

void android::os::SystemClock::sleep(cpp_long const &a0)
{
	return void(
		environment::get().get_jenv()->CallStaticVoidMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), true>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean android::os::SystemClock::setCurrentTimeMillis(cpp_long const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallStaticBooleanMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), true>(),
			a0.get_jtype()
		)
	);
}

cpp_long android::os::SystemClock::uptimeMillis()
{
	return cpp_long(
		environment::get().get_jenv()->CallStaticLongMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), true>()
		)
	);
}

cpp_long android::os::SystemClock::elapsedRealtime()
{
	return cpp_long(
		environment::get().get_jenv()->CallStaticLongMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), true>()
		)
	);
}

cpp_long android::os::SystemClock::currentThreadTimeMillis()
{
	return cpp_long(
		environment::get().get_jenv()->CallStaticLongMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), true>()
		)
	);
}


J2CPP_DEFINE_CLASS(android::os::SystemClock,"android/os/SystemClock")
J2CPP_DEFINE_METHOD(android::os::SystemClock,0,"<init>","()V")
J2CPP_DEFINE_METHOD(android::os::SystemClock,1,"sleep","(J)V")
J2CPP_DEFINE_METHOD(android::os::SystemClock,2,"setCurrentTimeMillis","(J)Z")
J2CPP_DEFINE_METHOD(android::os::SystemClock,3,"uptimeMillis","()J")
J2CPP_DEFINE_METHOD(android::os::SystemClock,4,"elapsedRealtime","()J")
J2CPP_DEFINE_METHOD(android::os::SystemClock,5,"currentThreadTimeMillis","()J")

} //namespace j2cpp

#endif //J2CPP_ANDROID_OS_SYSTEMCLOCK_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
