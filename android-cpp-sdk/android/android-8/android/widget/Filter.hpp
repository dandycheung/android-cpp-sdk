/*================================================================================
  code generated by: java2cpp
  class: android.widget.Filter
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_WIDGET_FILTER_HPP_DECL
#define J2CPP_ANDROID_WIDGET_FILTER_HPP_DECL


namespace j2cpp { namespace android { namespace widget { namespace Filter_ { class FilterListener; } } } }
namespace j2cpp { namespace java { namespace lang { class CharSequence; } } }
namespace j2cpp { namespace java { namespace lang { class Object; } } }


#include <android/widget/Filter.hpp>
#include <java/lang/CharSequence.hpp>
#include <java/lang/Object.hpp>


namespace j2cpp {

namespace android { namespace widget {

	class Filter;
	namespace Filter_ {

		class FilterListener;
		class FilterListener
			: public cpp_object<FilterListener>
		{
		public:

			J2CPP_DECLARE_CLASS

			J2CPP_DECLARE_METHOD(0)

			FilterListener(jobject jobj)
			: cpp_object<FilterListener>(jobj)
			{
			}

			void onFilterComplete(cpp_int const&);
		}; //class FilterListener

		class FilterResults;
		class FilterResults
			: public cpp_object<FilterResults>
		{
		public:

			J2CPP_DECLARE_CLASS

			J2CPP_DECLARE_METHOD(0)
			J2CPP_DECLARE_FIELD(0)
			J2CPP_DECLARE_FIELD(1)

			FilterResults(jobject jobj)
			: cpp_object<FilterResults>(jobj)
			, values(jobj)
			, count(jobj)
			{
			}


			field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(0), J2CPP_FIELD_SIGNATURE(0), local_ref< java::lang::Object > > values;
			field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(1), J2CPP_FIELD_SIGNATURE(1), cpp_int > count;
		}; //class FilterResults

	} //namespace Filter_

	class Filter
		: public cpp_object<Filter>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)

		typedef Filter_::FilterListener FilterListener;
		typedef Filter_::FilterResults FilterResults;

		Filter(jobject jobj)
		: cpp_object<Filter>(jobj)
		{
		}

		void filter(local_ref< java::lang::CharSequence > const&);
		void filter(local_ref< java::lang::CharSequence > const&, local_ref< android::widget::Filter_::FilterListener > const&);
		local_ref< java::lang::CharSequence > convertResultToString(local_ref< java::lang::Object > const&);
	}; //class Filter

} //namespace widget
} //namespace android


} //namespace j2cpp

#endif //J2CPP_ANDROID_WIDGET_FILTER_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_WIDGET_FILTER_HPP_IMPL
#define J2CPP_ANDROID_WIDGET_FILTER_HPP_IMPL

namespace j2cpp {



void android::widget::Filter_::FilterListener::onFilterComplete(cpp_int const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(0), J2CPP_METHOD_SIGNATURE(0), false>(),
			a0.get_jtype()
		)
	);
}


J2CPP_DEFINE_CLASS(android::widget::Filter_::FilterListener,"android/widget/Filter$FilterListener")
J2CPP_DEFINE_METHOD(android::widget::Filter_::FilterListener,0,"onFilterComplete","(I)V")

template <>
local_ref< android::widget::Filter_::FilterResults > create< android::widget::Filter_::FilterResults>()
{
	return local_ref< android::widget::Filter_::FilterResults >(
		environment::get().get_jenv()->NewObject(
			get_class<android::widget::Filter_::FilterResults::J2CPP_CLASS_NAME>(),
			get_method_id<android::widget::Filter_::FilterResults::J2CPP_CLASS_NAME, android::widget::Filter_::FilterResults::J2CPP_METHOD_NAME(0), android::widget::Filter_::FilterResults::J2CPP_METHOD_SIGNATURE(0), false>()
		)
	);
}



J2CPP_DEFINE_CLASS(android::widget::Filter_::FilterResults,"android/widget/Filter$FilterResults")
J2CPP_DEFINE_METHOD(android::widget::Filter_::FilterResults,0,"<init>","()V")
J2CPP_DEFINE_FIELD(android::widget::Filter_::FilterResults,0,"values","Ljava/lang/Object;")
J2CPP_DEFINE_FIELD(android::widget::Filter_::FilterResults,1,"count","I")


template <>
local_ref< android::widget::Filter > create< android::widget::Filter>()
{
	return local_ref< android::widget::Filter >(
		environment::get().get_jenv()->NewObject(
			get_class<android::widget::Filter::J2CPP_CLASS_NAME>(),
			get_method_id<android::widget::Filter::J2CPP_CLASS_NAME, android::widget::Filter::J2CPP_METHOD_NAME(0), android::widget::Filter::J2CPP_METHOD_SIGNATURE(0), false>()
		)
	);
}

void android::widget::Filter::filter(local_ref< java::lang::CharSequence > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), false>(),
			a0.get_jtype()
		)
	);
}

void android::widget::Filter::filter(local_ref< java::lang::CharSequence > const &a0, local_ref< android::widget::Filter_::FilterListener > const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}



local_ref< java::lang::CharSequence > android::widget::Filter::convertResultToString(local_ref< java::lang::Object > const &a0)
{
	return local_ref< java::lang::CharSequence >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>(),
			a0.get_jtype()
		)
	);
}


J2CPP_DEFINE_CLASS(android::widget::Filter,"android/widget/Filter")
J2CPP_DEFINE_METHOD(android::widget::Filter,0,"<init>","()V")
J2CPP_DEFINE_METHOD(android::widget::Filter,1,"filter","(Ljava/lang/CharSequence;)V")
J2CPP_DEFINE_METHOD(android::widget::Filter,2,"filter","(Ljava/lang/CharSequence;Landroid/widget/Filter$FilterListener;)V")
J2CPP_DEFINE_METHOD(android::widget::Filter,3,"performFiltering","(Ljava/lang/CharSequence;)Landroid/widget/Filter$FilterResults;")
J2CPP_DEFINE_METHOD(android::widget::Filter,4,"publishResults","(Ljava/lang/CharSequence;Landroid/widget/Filter$FilterResults;)V")
J2CPP_DEFINE_METHOD(android::widget::Filter,5,"convertResultToString","(Ljava/lang/Object;)Ljava/lang/CharSequence;")

} //namespace j2cpp

#endif //J2CPP_ANDROID_WIDGET_FILTER_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
