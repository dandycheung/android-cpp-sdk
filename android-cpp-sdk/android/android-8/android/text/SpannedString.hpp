/*================================================================================
  code generated by: java2cpp
  class: android.text.SpannedString
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_TEXT_SPANNEDSTRING_HPP_DECL
#define J2CPP_ANDROID_TEXT_SPANNEDSTRING_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class CharSequence; } } }


#include <java/lang/CharSequence.hpp>


namespace j2cpp {

namespace android { namespace text {

	class SpannedString;
	class SpannedString
		: public cpp_object<SpannedString>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)

		SpannedString(jobject jobj)
		: cpp_object<SpannedString>(jobj)
		{
		}

		local_ref< java::lang::CharSequence > subSequence(cpp_int const&, cpp_int const&);
		static local_ref< android::text::SpannedString > valueOf(local_ref< java::lang::CharSequence > const&);
	}; //class SpannedString

} //namespace text
} //namespace android


} //namespace j2cpp

#endif //J2CPP_ANDROID_TEXT_SPANNEDSTRING_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_TEXT_SPANNEDSTRING_HPP_IMPL
#define J2CPP_ANDROID_TEXT_SPANNEDSTRING_HPP_IMPL

namespace j2cpp {


template <>
local_ref< android::text::SpannedString > create< android::text::SpannedString>(local_ref< java::lang::CharSequence > const &a0)
{
	return local_ref< android::text::SpannedString >(
		environment::get().get_jenv()->NewObject(
			get_class<android::text::SpannedString::J2CPP_CLASS_NAME>(),
			get_method_id<android::text::SpannedString::J2CPP_CLASS_NAME, android::text::SpannedString::J2CPP_METHOD_NAME(0), android::text::SpannedString::J2CPP_METHOD_SIGNATURE(0), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::CharSequence > android::text::SpannedString::subSequence(cpp_int const &a0, cpp_int const &a1)
{
	return local_ref< java::lang::CharSequence >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< android::text::SpannedString > android::text::SpannedString::valueOf(local_ref< java::lang::CharSequence > const &a0)
{
	return local_ref< android::text::SpannedString >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), true>(),
			a0.get_jtype()
		)
	);
}


J2CPP_DEFINE_CLASS(android::text::SpannedString,"android/text/SpannedString")
J2CPP_DEFINE_METHOD(android::text::SpannedString,0,"<init>","(Ljava/lang/CharSequence;)V")
J2CPP_DEFINE_METHOD(android::text::SpannedString,1,"subSequence","(II)Ljava/lang/CharSequence;")
J2CPP_DEFINE_METHOD(android::text::SpannedString,2,"valueOf","(Ljava/lang/CharSequence;)Landroid/text/SpannedString;")

} //namespace j2cpp

#endif //J2CPP_ANDROID_TEXT_SPANNEDSTRING_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
