/*================================================================================
  code generated by: java2cpp
  class: android.graphics.PointF
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_GRAPHICS_POINTF_HPP_DECL
#define J2CPP_ANDROID_GRAPHICS_POINTF_HPP_DECL


namespace j2cpp { namespace android { namespace graphics { class Point; } } }


#include <android/graphics/Point.hpp>


namespace j2cpp {

namespace android { namespace graphics {

	class PointF;
	class PointF
		: public cpp_object<PointF>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_FIELD(0)
		J2CPP_DECLARE_FIELD(1)

		PointF(jobject jobj)
		: cpp_object<PointF>(jobj)
		, x(jobj)
		, y(jobj)
		{
		}

		void set(cpp_float const&, cpp_float const&);
		void set(local_ref< android::graphics::PointF > const&);
		void negate();
		void offset(cpp_float const&, cpp_float const&);
		cpp_boolean equals(cpp_float const&, cpp_float const&);
		cpp_float length();
		static cpp_float length(cpp_float const&, cpp_float const&);

		field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(0), J2CPP_FIELD_SIGNATURE(0), cpp_float > x;
		field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(1), J2CPP_FIELD_SIGNATURE(1), cpp_float > y;
	}; //class PointF

} //namespace graphics
} //namespace android


} //namespace j2cpp

#endif //J2CPP_ANDROID_GRAPHICS_POINTF_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_GRAPHICS_POINTF_HPP_IMPL
#define J2CPP_ANDROID_GRAPHICS_POINTF_HPP_IMPL

namespace j2cpp {


template <>
local_ref< android::graphics::PointF > create< android::graphics::PointF>()
{
	return local_ref< android::graphics::PointF >(
		environment::get().get_jenv()->NewObject(
			get_class<android::graphics::PointF::J2CPP_CLASS_NAME>(),
			get_method_id<android::graphics::PointF::J2CPP_CLASS_NAME, android::graphics::PointF::J2CPP_METHOD_NAME(0), android::graphics::PointF::J2CPP_METHOD_SIGNATURE(0), false>()
		)
	);
}

template <>
local_ref< android::graphics::PointF > create< android::graphics::PointF>(cpp_float const &a0, cpp_float const &a1)
{
	return local_ref< android::graphics::PointF >(
		environment::get().get_jenv()->NewObject(
			get_class<android::graphics::PointF::J2CPP_CLASS_NAME>(),
			get_method_id<android::graphics::PointF::J2CPP_CLASS_NAME, android::graphics::PointF::J2CPP_METHOD_NAME(1), android::graphics::PointF::J2CPP_METHOD_SIGNATURE(1), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

template <>
local_ref< android::graphics::PointF > create< android::graphics::PointF>(local_ref< android::graphics::Point > const &a0)
{
	return local_ref< android::graphics::PointF >(
		environment::get().get_jenv()->NewObject(
			get_class<android::graphics::PointF::J2CPP_CLASS_NAME>(),
			get_method_id<android::graphics::PointF::J2CPP_CLASS_NAME, android::graphics::PointF::J2CPP_METHOD_NAME(2), android::graphics::PointF::J2CPP_METHOD_SIGNATURE(2), false>(),
			a0.get_jtype()
		)
	);
}

void android::graphics::PointF::set(cpp_float const &a0, cpp_float const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void android::graphics::PointF::set(local_ref< android::graphics::PointF > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>(),
			a0.get_jtype()
		)
	);
}

void android::graphics::PointF::negate()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>()
		)
	);
}

void android::graphics::PointF::offset(cpp_float const &a0, cpp_float const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_boolean android::graphics::PointF::equals(cpp_float const &a0, cpp_float const &a1)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(7), J2CPP_METHOD_SIGNATURE(7), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_float android::graphics::PointF::length()
{
	return cpp_float(
		environment::get().get_jenv()->CallFloatMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(8), J2CPP_METHOD_SIGNATURE(8), false>()
		)
	);
}

cpp_float android::graphics::PointF::length(cpp_float const &a0, cpp_float const &a1)
{
	return cpp_float(
		environment::get().get_jenv()->CallStaticFloatMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(9), J2CPP_METHOD_SIGNATURE(9), true>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}



J2CPP_DEFINE_CLASS(android::graphics::PointF,"android/graphics/PointF")
J2CPP_DEFINE_METHOD(android::graphics::PointF,0,"<init>","()V")
J2CPP_DEFINE_METHOD(android::graphics::PointF,1,"<init>","(FF)V")
J2CPP_DEFINE_METHOD(android::graphics::PointF,2,"<init>","(Landroid/graphics/Point;)V")
J2CPP_DEFINE_METHOD(android::graphics::PointF,3,"set","(FF)V")
J2CPP_DEFINE_METHOD(android::graphics::PointF,4,"set","(Landroid/graphics/PointF;)V")
J2CPP_DEFINE_METHOD(android::graphics::PointF,5,"negate","()V")
J2CPP_DEFINE_METHOD(android::graphics::PointF,6,"offset","(FF)V")
J2CPP_DEFINE_METHOD(android::graphics::PointF,7,"equals","(FF)Z")
J2CPP_DEFINE_METHOD(android::graphics::PointF,8,"length","()F")
J2CPP_DEFINE_METHOD(android::graphics::PointF,9,"length","(FF)F")
J2CPP_DEFINE_FIELD(android::graphics::PointF,0,"x","F")
J2CPP_DEFINE_FIELD(android::graphics::PointF,1,"y","F")

} //namespace j2cpp

#endif //J2CPP_ANDROID_GRAPHICS_POINTF_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
