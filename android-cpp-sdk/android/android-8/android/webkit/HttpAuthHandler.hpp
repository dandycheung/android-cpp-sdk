/*================================================================================
  code generated by: java2cpp
  class: android.webkit.HttpAuthHandler
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_WEBKIT_HTTPAUTHHANDLER_HPP_DECL
#define J2CPP_ANDROID_WEBKIT_HTTPAUTHHANDLER_HPP_DECL


namespace j2cpp { namespace android { namespace os { class Message; } } }
namespace j2cpp { namespace java { namespace lang { class String; } } }


#include <android/os/Message.hpp>
#include <java/lang/String.hpp>


namespace j2cpp {

namespace android { namespace webkit {

	class HttpAuthHandler;
	class HttpAuthHandler
		: public cpp_object<HttpAuthHandler>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)

		HttpAuthHandler(jobject jobj)
		: cpp_object<HttpAuthHandler>(jobj)
		{
		}

		void handleMessage(local_ref< android::os::Message > const&);
		void proceed(local_ref< java::lang::String > const&, local_ref< java::lang::String > const&);
		void cancel();
		cpp_boolean useHttpAuthUsernamePassword();
	}; //class HttpAuthHandler

} //namespace webkit
} //namespace android


} //namespace j2cpp

#endif //J2CPP_ANDROID_WEBKIT_HTTPAUTHHANDLER_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_WEBKIT_HTTPAUTHHANDLER_HPP_IMPL
#define J2CPP_ANDROID_WEBKIT_HTTPAUTHHANDLER_HPP_IMPL

namespace j2cpp {


template <>
local_ref< android::webkit::HttpAuthHandler > create< android::webkit::HttpAuthHandler>()
{
	return local_ref< android::webkit::HttpAuthHandler >(
		environment::get().get_jenv()->NewObject(
			get_class<android::webkit::HttpAuthHandler::J2CPP_CLASS_NAME>(),
			get_method_id<android::webkit::HttpAuthHandler::J2CPP_CLASS_NAME, android::webkit::HttpAuthHandler::J2CPP_METHOD_NAME(0), android::webkit::HttpAuthHandler::J2CPP_METHOD_SIGNATURE(0), false>()
		)
	);
}

void android::webkit::HttpAuthHandler::handleMessage(local_ref< android::os::Message > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), false>(),
			a0.get_jtype()
		)
	);
}

void android::webkit::HttpAuthHandler::proceed(local_ref< java::lang::String > const &a0, local_ref< java::lang::String > const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void android::webkit::HttpAuthHandler::cancel()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>()
		)
	);
}

cpp_boolean android::webkit::HttpAuthHandler::useHttpAuthUsernamePassword()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>()
		)
	);
}


J2CPP_DEFINE_CLASS(android::webkit::HttpAuthHandler,"android/webkit/HttpAuthHandler")
J2CPP_DEFINE_METHOD(android::webkit::HttpAuthHandler,0,"<init>","()V")
J2CPP_DEFINE_METHOD(android::webkit::HttpAuthHandler,1,"handleMessage","(Landroid/os/Message;)V")
J2CPP_DEFINE_METHOD(android::webkit::HttpAuthHandler,2,"proceed","(Ljava/lang/String;Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(android::webkit::HttpAuthHandler,3,"cancel","()V")
J2CPP_DEFINE_METHOD(android::webkit::HttpAuthHandler,4,"useHttpAuthUsernamePassword","()Z")

} //namespace j2cpp

#endif //J2CPP_ANDROID_WEBKIT_HTTPAUTHHANDLER_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
