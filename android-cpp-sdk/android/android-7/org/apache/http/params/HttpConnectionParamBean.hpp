/*================================================================================
  code generated by: java2cpp
  class: org.apache.http.params.HttpConnectionParamBean
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ORG_APACHE_HTTP_PARAMS_HTTPCONNECTIONPARAMBEAN_HPP_DECL
#define J2CPP_ORG_APACHE_HTTP_PARAMS_HTTPCONNECTIONPARAMBEAN_HPP_DECL


namespace j2cpp { namespace org { namespace apache { namespace http { namespace params { class HttpParams; } } } } }


#include <org/apache/http/params/HttpParams.hpp>


namespace j2cpp {

namespace org { namespace apache { namespace http { namespace params {

	class HttpConnectionParamBean;
	class HttpConnectionParamBean
		: public cpp_object<HttpConnectionParamBean>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)

		HttpConnectionParamBean(jobject jobj)
		: cpp_object<HttpConnectionParamBean>(jobj)
		{
		}

		void setSoTimeout(cpp_int const&);
		void setTcpNoDelay(cpp_boolean const&);
		void setSocketBufferSize(cpp_int const&);
		void setLinger(cpp_int const&);
		void setConnectionTimeout(cpp_int const&);
		void setStaleCheckingEnabled(cpp_boolean const&);
	}; //class HttpConnectionParamBean

} //namespace params
} //namespace http
} //namespace apache
} //namespace org


} //namespace j2cpp

#endif //J2CPP_ORG_APACHE_HTTP_PARAMS_HTTPCONNECTIONPARAMBEAN_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ORG_APACHE_HTTP_PARAMS_HTTPCONNECTIONPARAMBEAN_HPP_IMPL
#define J2CPP_ORG_APACHE_HTTP_PARAMS_HTTPCONNECTIONPARAMBEAN_HPP_IMPL

namespace j2cpp {


template <>
local_ref< org::apache::http::params::HttpConnectionParamBean > create< org::apache::http::params::HttpConnectionParamBean>(local_ref< org::apache::http::params::HttpParams > const &a0)
{
	return local_ref< org::apache::http::params::HttpConnectionParamBean >(
		environment::get().get_jenv()->NewObject(
			get_class<org::apache::http::params::HttpConnectionParamBean::J2CPP_CLASS_NAME>(),
			get_method_id<org::apache::http::params::HttpConnectionParamBean::J2CPP_CLASS_NAME, org::apache::http::params::HttpConnectionParamBean::J2CPP_METHOD_NAME(0), org::apache::http::params::HttpConnectionParamBean::J2CPP_METHOD_SIGNATURE(0), false>(),
			a0.get_jtype()
		)
	);
}

void org::apache::http::params::HttpConnectionParamBean::setSoTimeout(cpp_int const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), false>(),
			a0.get_jtype()
		)
	);
}

void org::apache::http::params::HttpConnectionParamBean::setTcpNoDelay(cpp_boolean const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>(),
			a0.get_jtype()
		)
	);
}

void org::apache::http::params::HttpConnectionParamBean::setSocketBufferSize(cpp_int const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>(),
			a0.get_jtype()
		)
	);
}

void org::apache::http::params::HttpConnectionParamBean::setLinger(cpp_int const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>(),
			a0.get_jtype()
		)
	);
}

void org::apache::http::params::HttpConnectionParamBean::setConnectionTimeout(cpp_int const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>(),
			a0.get_jtype()
		)
	);
}

void org::apache::http::params::HttpConnectionParamBean::setStaleCheckingEnabled(cpp_boolean const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>(),
			a0.get_jtype()
		)
	);
}


J2CPP_DEFINE_CLASS(org::apache::http::params::HttpConnectionParamBean,"org/apache/http/params/HttpConnectionParamBean")
J2CPP_DEFINE_METHOD(org::apache::http::params::HttpConnectionParamBean,0,"<init>","(Lorg/apache/http/params/HttpParams;)V")
J2CPP_DEFINE_METHOD(org::apache::http::params::HttpConnectionParamBean,1,"setSoTimeout","(I)V")
J2CPP_DEFINE_METHOD(org::apache::http::params::HttpConnectionParamBean,2,"setTcpNoDelay","(Z)V")
J2CPP_DEFINE_METHOD(org::apache::http::params::HttpConnectionParamBean,3,"setSocketBufferSize","(I)V")
J2CPP_DEFINE_METHOD(org::apache::http::params::HttpConnectionParamBean,4,"setLinger","(I)V")
J2CPP_DEFINE_METHOD(org::apache::http::params::HttpConnectionParamBean,5,"setConnectionTimeout","(I)V")
J2CPP_DEFINE_METHOD(org::apache::http::params::HttpConnectionParamBean,6,"setStaleCheckingEnabled","(Z)V")

} //namespace j2cpp

#endif //J2CPP_ORG_APACHE_HTTP_PARAMS_HTTPCONNECTIONPARAMBEAN_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
