/*================================================================================
  code generated by: java2cpp
  class: org.xml.sax.SAXParseException
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ORG_XML_SAX_SAXPARSEEXCEPTION_HPP_DECL
#define J2CPP_ORG_XML_SAX_SAXPARSEEXCEPTION_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace lang { class Exception; } } }
namespace j2cpp { namespace org { namespace xml { namespace sax { class Locator; } } } }


#include <java/lang/Exception.hpp>
#include <java/lang/String.hpp>
#include <org/xml/sax/Locator.hpp>


namespace j2cpp {

namespace org { namespace xml { namespace sax {

	class SAXParseException;
	class SAXParseException
		: public cpp_object<SAXParseException>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)

		SAXParseException(jobject jobj)
		: cpp_object<SAXParseException>(jobj)
		{
		}

		local_ref< java::lang::String > getPublicId();
		local_ref< java::lang::String > getSystemId();
		cpp_int getLineNumber();
		cpp_int getColumnNumber();
	}; //class SAXParseException

} //namespace sax
} //namespace xml
} //namespace org


} //namespace j2cpp

#endif //J2CPP_ORG_XML_SAX_SAXPARSEEXCEPTION_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ORG_XML_SAX_SAXPARSEEXCEPTION_HPP_IMPL
#define J2CPP_ORG_XML_SAX_SAXPARSEEXCEPTION_HPP_IMPL

namespace j2cpp {


template <>
local_ref< org::xml::sax::SAXParseException > create< org::xml::sax::SAXParseException>(local_ref< java::lang::String > const &a0, local_ref< org::xml::sax::Locator > const &a1)
{
	return local_ref< org::xml::sax::SAXParseException >(
		environment::get().get_jenv()->NewObject(
			get_class<org::xml::sax::SAXParseException::J2CPP_CLASS_NAME>(),
			get_method_id<org::xml::sax::SAXParseException::J2CPP_CLASS_NAME, org::xml::sax::SAXParseException::J2CPP_METHOD_NAME(0), org::xml::sax::SAXParseException::J2CPP_METHOD_SIGNATURE(0), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

template <>
local_ref< org::xml::sax::SAXParseException > create< org::xml::sax::SAXParseException>(local_ref< java::lang::String > const &a0, local_ref< org::xml::sax::Locator > const &a1, local_ref< java::lang::Exception > const &a2)
{
	return local_ref< org::xml::sax::SAXParseException >(
		environment::get().get_jenv()->NewObject(
			get_class<org::xml::sax::SAXParseException::J2CPP_CLASS_NAME>(),
			get_method_id<org::xml::sax::SAXParseException::J2CPP_CLASS_NAME, org::xml::sax::SAXParseException::J2CPP_METHOD_NAME(1), org::xml::sax::SAXParseException::J2CPP_METHOD_SIGNATURE(1), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

template <>
local_ref< org::xml::sax::SAXParseException > create< org::xml::sax::SAXParseException>(local_ref< java::lang::String > const &a0, local_ref< java::lang::String > const &a1, local_ref< java::lang::String > const &a2, cpp_int const &a3, cpp_int const &a4)
{
	return local_ref< org::xml::sax::SAXParseException >(
		environment::get().get_jenv()->NewObject(
			get_class<org::xml::sax::SAXParseException::J2CPP_CLASS_NAME>(),
			get_method_id<org::xml::sax::SAXParseException::J2CPP_CLASS_NAME, org::xml::sax::SAXParseException::J2CPP_METHOD_NAME(2), org::xml::sax::SAXParseException::J2CPP_METHOD_SIGNATURE(2), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype(), a3.get_jtype(), a4.get_jtype()
		)
	);
}

template <>
local_ref< org::xml::sax::SAXParseException > create< org::xml::sax::SAXParseException>(local_ref< java::lang::String > const &a0, local_ref< java::lang::String > const &a1, local_ref< java::lang::String > const &a2, cpp_int const &a3, cpp_int const &a4, local_ref< java::lang::Exception > const &a5)
{
	return local_ref< org::xml::sax::SAXParseException >(
		environment::get().get_jenv()->NewObject(
			get_class<org::xml::sax::SAXParseException::J2CPP_CLASS_NAME>(),
			get_method_id<org::xml::sax::SAXParseException::J2CPP_CLASS_NAME, org::xml::sax::SAXParseException::J2CPP_METHOD_NAME(3), org::xml::sax::SAXParseException::J2CPP_METHOD_SIGNATURE(3), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype(), a3.get_jtype(), a4.get_jtype(), a5.get_jtype()
		)
	);
}

local_ref< java::lang::String > org::xml::sax::SAXParseException::getPublicId()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>()
		)
	);
}

local_ref< java::lang::String > org::xml::sax::SAXParseException::getSystemId()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>()
		)
	);
}

cpp_int org::xml::sax::SAXParseException::getLineNumber()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>()
		)
	);
}

cpp_int org::xml::sax::SAXParseException::getColumnNumber()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(7), J2CPP_METHOD_SIGNATURE(7), false>()
		)
	);
}


J2CPP_DEFINE_CLASS(org::xml::sax::SAXParseException,"org/xml/sax/SAXParseException")
J2CPP_DEFINE_METHOD(org::xml::sax::SAXParseException,0,"<init>","(Ljava/lang/String;Lorg/xml/sax/Locator;)V")
J2CPP_DEFINE_METHOD(org::xml::sax::SAXParseException,1,"<init>","(Ljava/lang/String;Lorg/xml/sax/Locator;Ljava/lang/Exception;)V")
J2CPP_DEFINE_METHOD(org::xml::sax::SAXParseException,2,"<init>","(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;II)V")
J2CPP_DEFINE_METHOD(org::xml::sax::SAXParseException,3,"<init>","(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IILjava/lang/Exception;)V")
J2CPP_DEFINE_METHOD(org::xml::sax::SAXParseException,4,"getPublicId","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(org::xml::sax::SAXParseException,5,"getSystemId","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(org::xml::sax::SAXParseException,6,"getLineNumber","()I")
J2CPP_DEFINE_METHOD(org::xml::sax::SAXParseException,7,"getColumnNumber","()I")

} //namespace j2cpp

#endif //J2CPP_ORG_XML_SAX_SAXPARSEEXCEPTION_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
