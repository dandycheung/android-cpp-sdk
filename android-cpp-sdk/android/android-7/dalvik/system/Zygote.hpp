/*================================================================================
  code generated by: java2cpp
  class: dalvik.system.Zygote
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_DALVIK_SYSTEM_ZYGOTE_HPP_DECL
#define J2CPP_DALVIK_SYSTEM_ZYGOTE_HPP_DECL






namespace j2cpp {

namespace dalvik { namespace system {

	class Zygote;
	class Zygote
		: public cpp_object<Zygote>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_FIELD(0)
		J2CPP_DECLARE_FIELD(1)
		J2CPP_DECLARE_FIELD(2)

		Zygote(jobject jobj)
		: cpp_object<Zygote>(jobj)
		{
		}

		static cpp_int fork();
		static cpp_int forkAndSpecialize(cpp_int const&, cpp_int const&, local_ref< cpp_int_array<1> > const&, cpp_int const&, local_ref< cpp_int_array<2> > const&);
		static cpp_int forkAndSpecialize(cpp_int const&, cpp_int const&, local_ref< cpp_int_array<1> > const&, cpp_boolean const&, local_ref< cpp_int_array<2> > const&);
		static cpp_int forkSystemServer(cpp_int const&, cpp_int const&, local_ref< cpp_int_array<1> > const&, cpp_int const&, local_ref< cpp_int_array<2> > const&);
		static cpp_int forkSystemServer(cpp_int const&, cpp_int const&, local_ref< cpp_int_array<1> > const&, cpp_boolean const&, local_ref< cpp_int_array<2> > const&);

		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(0), J2CPP_FIELD_SIGNATURE(0), cpp_int > DEBUG_ENABLE_DEBUGGER;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(1), J2CPP_FIELD_SIGNATURE(1), cpp_int > DEBUG_ENABLE_CHECKJNI;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(2), J2CPP_FIELD_SIGNATURE(2), cpp_int > DEBUG_ENABLE_ASSERT;
	}; //class Zygote

} //namespace system
} //namespace dalvik


} //namespace j2cpp

#endif //J2CPP_DALVIK_SYSTEM_ZYGOTE_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_DALVIK_SYSTEM_ZYGOTE_HPP_IMPL
#define J2CPP_DALVIK_SYSTEM_ZYGOTE_HPP_IMPL

namespace j2cpp {


template <>
local_ref< dalvik::system::Zygote > create< dalvik::system::Zygote>()
{
	return local_ref< dalvik::system::Zygote >(
		environment::get().get_jenv()->NewObject(
			get_class<dalvik::system::Zygote::J2CPP_CLASS_NAME>(),
			get_method_id<dalvik::system::Zygote::J2CPP_CLASS_NAME, dalvik::system::Zygote::J2CPP_METHOD_NAME(0), dalvik::system::Zygote::J2CPP_METHOD_SIGNATURE(0), false>()
		)
	);
}

cpp_int dalvik::system::Zygote::fork()
{
	return cpp_int(
		environment::get().get_jenv()->CallStaticIntMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), true>()
		)
	);
}

cpp_int dalvik::system::Zygote::forkAndSpecialize(cpp_int const &a0, cpp_int const &a1, local_ref< cpp_int_array<1> > const &a2, cpp_int const &a3, local_ref< cpp_int_array<2> > const &a4)
{
	return cpp_int(
		environment::get().get_jenv()->CallStaticIntMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), true>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype(), a3.get_jtype(), a4.get_jtype()
		)
	);
}

cpp_int dalvik::system::Zygote::forkAndSpecialize(cpp_int const &a0, cpp_int const &a1, local_ref< cpp_int_array<1> > const &a2, cpp_boolean const &a3, local_ref< cpp_int_array<2> > const &a4)
{
	return cpp_int(
		environment::get().get_jenv()->CallStaticIntMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), true>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype(), a3.get_jtype(), a4.get_jtype()
		)
	);
}

cpp_int dalvik::system::Zygote::forkSystemServer(cpp_int const &a0, cpp_int const &a1, local_ref< cpp_int_array<1> > const &a2, cpp_int const &a3, local_ref< cpp_int_array<2> > const &a4)
{
	return cpp_int(
		environment::get().get_jenv()->CallStaticIntMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), true>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype(), a3.get_jtype(), a4.get_jtype()
		)
	);
}

cpp_int dalvik::system::Zygote::forkSystemServer(cpp_int const &a0, cpp_int const &a1, local_ref< cpp_int_array<1> > const &a2, cpp_boolean const &a3, local_ref< cpp_int_array<2> > const &a4)
{
	return cpp_int(
		environment::get().get_jenv()->CallStaticIntMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), true>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype(), a3.get_jtype(), a4.get_jtype()
		)
	);
}


static_field<
	dalvik::system::Zygote::J2CPP_CLASS_NAME,
	dalvik::system::Zygote::J2CPP_FIELD_NAME(0),
	dalvik::system::Zygote::J2CPP_FIELD_SIGNATURE(0),
	cpp_int
> dalvik::system::Zygote::DEBUG_ENABLE_DEBUGGER;

static_field<
	dalvik::system::Zygote::J2CPP_CLASS_NAME,
	dalvik::system::Zygote::J2CPP_FIELD_NAME(1),
	dalvik::system::Zygote::J2CPP_FIELD_SIGNATURE(1),
	cpp_int
> dalvik::system::Zygote::DEBUG_ENABLE_CHECKJNI;

static_field<
	dalvik::system::Zygote::J2CPP_CLASS_NAME,
	dalvik::system::Zygote::J2CPP_FIELD_NAME(2),
	dalvik::system::Zygote::J2CPP_FIELD_SIGNATURE(2),
	cpp_int
> dalvik::system::Zygote::DEBUG_ENABLE_ASSERT;


J2CPP_DEFINE_CLASS(dalvik::system::Zygote,"dalvik/system/Zygote")
J2CPP_DEFINE_METHOD(dalvik::system::Zygote,0,"<init>","()V")
J2CPP_DEFINE_METHOD(dalvik::system::Zygote,1,"fork","()I")
J2CPP_DEFINE_METHOD(dalvik::system::Zygote,2,"forkAndSpecialize","(II[II[[I)I")
J2CPP_DEFINE_METHOD(dalvik::system::Zygote,3,"forkAndSpecialize","(II[IZ[[I)I")
J2CPP_DEFINE_METHOD(dalvik::system::Zygote,4,"forkSystemServer","(II[II[[I)I")
J2CPP_DEFINE_METHOD(dalvik::system::Zygote,5,"forkSystemServer","(II[IZ[[I)I")
J2CPP_DEFINE_FIELD(dalvik::system::Zygote,0,"DEBUG_ENABLE_DEBUGGER","I")
J2CPP_DEFINE_FIELD(dalvik::system::Zygote,1,"DEBUG_ENABLE_CHECKJNI","I")
J2CPP_DEFINE_FIELD(dalvik::system::Zygote,2,"DEBUG_ENABLE_ASSERT","I")

} //namespace j2cpp

#endif //J2CPP_DALVIK_SYSTEM_ZYGOTE_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
