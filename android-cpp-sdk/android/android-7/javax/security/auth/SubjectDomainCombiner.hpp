/*================================================================================
  code generated by: java2cpp
  class: javax.security.auth.SubjectDomainCombiner
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVAX_SECURITY_AUTH_SUBJECTDOMAINCOMBINER_HPP_DECL
#define J2CPP_JAVAX_SECURITY_AUTH_SUBJECTDOMAINCOMBINER_HPP_DECL


namespace j2cpp { namespace javax { namespace security { namespace auth { class Subject; } } } }
namespace j2cpp { namespace java { namespace security { class ProtectionDomain; } } }


#include <java/security/ProtectionDomain.hpp>
#include <javax/security/auth/Subject.hpp>


namespace j2cpp {

namespace javax { namespace security { namespace auth {

	class SubjectDomainCombiner;
	class SubjectDomainCombiner
		: public cpp_object<SubjectDomainCombiner>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)

		SubjectDomainCombiner(jobject jobj)
		: cpp_object<SubjectDomainCombiner>(jobj)
		{
		}

		local_ref< javax::security::auth::Subject > getSubject();
		local_ref< cpp_object_array<java::security::ProtectionDomain, 1> > combine(local_ref< cpp_object_array<java::security::ProtectionDomain, 1> > const&, local_ref< cpp_object_array<java::security::ProtectionDomain, 1> > const&);
	}; //class SubjectDomainCombiner

} //namespace auth
} //namespace security
} //namespace javax


} //namespace j2cpp

#endif //J2CPP_JAVAX_SECURITY_AUTH_SUBJECTDOMAINCOMBINER_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVAX_SECURITY_AUTH_SUBJECTDOMAINCOMBINER_HPP_IMPL
#define J2CPP_JAVAX_SECURITY_AUTH_SUBJECTDOMAINCOMBINER_HPP_IMPL

namespace j2cpp {


template <>
local_ref< javax::security::auth::SubjectDomainCombiner > create< javax::security::auth::SubjectDomainCombiner>(local_ref< javax::security::auth::Subject > const &a0)
{
	return local_ref< javax::security::auth::SubjectDomainCombiner >(
		environment::get().get_jenv()->NewObject(
			get_class<javax::security::auth::SubjectDomainCombiner::J2CPP_CLASS_NAME>(),
			get_method_id<javax::security::auth::SubjectDomainCombiner::J2CPP_CLASS_NAME, javax::security::auth::SubjectDomainCombiner::J2CPP_METHOD_NAME(0), javax::security::auth::SubjectDomainCombiner::J2CPP_METHOD_SIGNATURE(0), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< javax::security::auth::Subject > javax::security::auth::SubjectDomainCombiner::getSubject()
{
	return local_ref< javax::security::auth::Subject >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), false>()
		)
	);
}

local_ref< cpp_object_array<java::security::ProtectionDomain, 1> > javax::security::auth::SubjectDomainCombiner::combine(local_ref< cpp_object_array<java::security::ProtectionDomain, 1> > const &a0, local_ref< cpp_object_array<java::security::ProtectionDomain, 1> > const &a1)
{
	return local_ref< cpp_object_array<java::security::ProtectionDomain, 1> >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}


J2CPP_DEFINE_CLASS(javax::security::auth::SubjectDomainCombiner,"javax/security/auth/SubjectDomainCombiner")
J2CPP_DEFINE_METHOD(javax::security::auth::SubjectDomainCombiner,0,"<init>","(Ljavax/security/auth/Subject;)V")
J2CPP_DEFINE_METHOD(javax::security::auth::SubjectDomainCombiner,1,"getSubject","()Ljavax/security/auth/Subject;")
J2CPP_DEFINE_METHOD(javax::security::auth::SubjectDomainCombiner,2,"combine","([java.security.ProtectionDomain[java.security.ProtectionDomain)[java.security.ProtectionDomain")

} //namespace j2cpp

#endif //J2CPP_JAVAX_SECURITY_AUTH_SUBJECTDOMAINCOMBINER_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
