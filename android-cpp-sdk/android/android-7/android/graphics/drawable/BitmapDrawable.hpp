/*================================================================================
  code generated by: java2cpp
  class: android.graphics.drawable.BitmapDrawable
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_GRAPHICS_DRAWABLE_BITMAPDRAWABLE_HPP_DECL
#define J2CPP_ANDROID_GRAPHICS_DRAWABLE_BITMAPDRAWABLE_HPP_DECL


namespace j2cpp { namespace java { namespace io { class InputStream; } } }
namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace org { namespace xmlpull { namespace v1 { class XmlPullParser; } } } }
namespace j2cpp { namespace android { namespace graphics { class Paint; } } }
namespace j2cpp { namespace android { namespace graphics { class Canvas; } } }
namespace j2cpp { namespace android { namespace graphics { namespace Shader_ { class TileMode; } } } }
namespace j2cpp { namespace android { namespace graphics { class Bitmap; } } }
namespace j2cpp { namespace android { namespace graphics { namespace drawable { class Drawable; } } } }
namespace j2cpp { namespace android { namespace graphics { namespace drawable { namespace Drawable_ { class ConstantState; } } } } }
namespace j2cpp { namespace android { namespace graphics { class ColorFilter; } } }
namespace j2cpp { namespace android { namespace content { namespace res { class Resources; } } } }
namespace j2cpp { namespace android { namespace util { class AttributeSet; } } }
namespace j2cpp { namespace android { namespace util { class DisplayMetrics; } } }


#include <android/content/res/Resources.hpp>
#include <android/graphics/Bitmap.hpp>
#include <android/graphics/Canvas.hpp>
#include <android/graphics/ColorFilter.hpp>
#include <android/graphics/Paint.hpp>
#include <android/graphics/Shader.hpp>
#include <android/graphics/drawable/Drawable.hpp>
#include <android/util/AttributeSet.hpp>
#include <android/util/DisplayMetrics.hpp>
#include <java/io/InputStream.hpp>
#include <java/lang/String.hpp>
#include <org/xmlpull/v1/XmlPullParser.hpp>


namespace j2cpp {

namespace android { namespace graphics { namespace drawable {

	class BitmapDrawable;
	class BitmapDrawable
		: public cpp_object<BitmapDrawable>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_METHOD(12)
		J2CPP_DECLARE_METHOD(13)
		J2CPP_DECLARE_METHOD(14)
		J2CPP_DECLARE_METHOD(15)
		J2CPP_DECLARE_METHOD(16)
		J2CPP_DECLARE_METHOD(17)
		J2CPP_DECLARE_METHOD(18)
		J2CPP_DECLARE_METHOD(19)
		J2CPP_DECLARE_METHOD(20)
		J2CPP_DECLARE_METHOD(21)
		J2CPP_DECLARE_METHOD(22)
		J2CPP_DECLARE_METHOD(23)
		J2CPP_DECLARE_METHOD(24)
		J2CPP_DECLARE_METHOD(25)
		J2CPP_DECLARE_METHOD(26)
		J2CPP_DECLARE_METHOD(27)
		J2CPP_DECLARE_METHOD(28)
		J2CPP_DECLARE_METHOD(29)
		J2CPP_DECLARE_METHOD(30)
		J2CPP_DECLARE_METHOD(31)
		J2CPP_DECLARE_METHOD(32)
		J2CPP_DECLARE_METHOD(33)

		BitmapDrawable(jobject jobj)
		: cpp_object<BitmapDrawable>(jobj)
		{
		}

		local_ref< android::graphics::Paint > getPaint();
		local_ref< android::graphics::Bitmap > getBitmap();
		void setTargetDensity(local_ref< android::graphics::Canvas > const&);
		void setTargetDensity(local_ref< android::util::DisplayMetrics > const&);
		void setTargetDensity(cpp_int const&);
		cpp_int getGravity();
		void setGravity(cpp_int const&);
		void setAntiAlias(cpp_boolean const&);
		void setFilterBitmap(cpp_boolean const&);
		void setDither(cpp_boolean const&);
		local_ref< android::graphics::Shader_::TileMode > getTileModeX();
		local_ref< android::graphics::Shader_::TileMode > getTileModeY();
		void setTileModeX(local_ref< android::graphics::Shader_::TileMode > const&);
		void setTileModeY(local_ref< android::graphics::Shader_::TileMode > const&);
		void setTileModeXY(local_ref< android::graphics::Shader_::TileMode > const&, local_ref< android::graphics::Shader_::TileMode > const&);
		cpp_int getChangingConfigurations();
		void draw(local_ref< android::graphics::Canvas > const&);
		void setAlpha(cpp_int const&);
		void setColorFilter(local_ref< android::graphics::ColorFilter > const&);
		local_ref< android::graphics::drawable::Drawable > mutate();
		void inflate(local_ref< android::content::res::Resources > const&, local_ref< org::xmlpull::v1::XmlPullParser > const&, local_ref< android::util::AttributeSet > const&);
		cpp_int getIntrinsicWidth();
		cpp_int getIntrinsicHeight();
		cpp_int getOpacity();
		local_ref< android::graphics::drawable::Drawable_::ConstantState > getConstantState();
	}; //class BitmapDrawable

} //namespace drawable
} //namespace graphics
} //namespace android


} //namespace j2cpp

#endif //J2CPP_ANDROID_GRAPHICS_DRAWABLE_BITMAPDRAWABLE_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_GRAPHICS_DRAWABLE_BITMAPDRAWABLE_HPP_IMPL
#define J2CPP_ANDROID_GRAPHICS_DRAWABLE_BITMAPDRAWABLE_HPP_IMPL

namespace j2cpp {


template <>
local_ref< android::graphics::drawable::BitmapDrawable > create< android::graphics::drawable::BitmapDrawable>()
{
	return local_ref< android::graphics::drawable::BitmapDrawable >(
		environment::get().get_jenv()->NewObject(
			get_class<android::graphics::drawable::BitmapDrawable::J2CPP_CLASS_NAME>(),
			get_method_id<android::graphics::drawable::BitmapDrawable::J2CPP_CLASS_NAME, android::graphics::drawable::BitmapDrawable::J2CPP_METHOD_NAME(0), android::graphics::drawable::BitmapDrawable::J2CPP_METHOD_SIGNATURE(0), false>()
		)
	);
}

template <>
local_ref< android::graphics::drawable::BitmapDrawable > create< android::graphics::drawable::BitmapDrawable>(local_ref< android::content::res::Resources > const &a0)
{
	return local_ref< android::graphics::drawable::BitmapDrawable >(
		environment::get().get_jenv()->NewObject(
			get_class<android::graphics::drawable::BitmapDrawable::J2CPP_CLASS_NAME>(),
			get_method_id<android::graphics::drawable::BitmapDrawable::J2CPP_CLASS_NAME, android::graphics::drawable::BitmapDrawable::J2CPP_METHOD_NAME(1), android::graphics::drawable::BitmapDrawable::J2CPP_METHOD_SIGNATURE(1), false>(),
			a0.get_jtype()
		)
	);
}

template <>
local_ref< android::graphics::drawable::BitmapDrawable > create< android::graphics::drawable::BitmapDrawable>(local_ref< android::graphics::Bitmap > const &a0)
{
	return local_ref< android::graphics::drawable::BitmapDrawable >(
		environment::get().get_jenv()->NewObject(
			get_class<android::graphics::drawable::BitmapDrawable::J2CPP_CLASS_NAME>(),
			get_method_id<android::graphics::drawable::BitmapDrawable::J2CPP_CLASS_NAME, android::graphics::drawable::BitmapDrawable::J2CPP_METHOD_NAME(2), android::graphics::drawable::BitmapDrawable::J2CPP_METHOD_SIGNATURE(2), false>(),
			a0.get_jtype()
		)
	);
}

template <>
local_ref< android::graphics::drawable::BitmapDrawable > create< android::graphics::drawable::BitmapDrawable>(local_ref< android::content::res::Resources > const &a0, local_ref< android::graphics::Bitmap > const &a1)
{
	return local_ref< android::graphics::drawable::BitmapDrawable >(
		environment::get().get_jenv()->NewObject(
			get_class<android::graphics::drawable::BitmapDrawable::J2CPP_CLASS_NAME>(),
			get_method_id<android::graphics::drawable::BitmapDrawable::J2CPP_CLASS_NAME, android::graphics::drawable::BitmapDrawable::J2CPP_METHOD_NAME(3), android::graphics::drawable::BitmapDrawable::J2CPP_METHOD_SIGNATURE(3), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

template <>
local_ref< android::graphics::drawable::BitmapDrawable > create< android::graphics::drawable::BitmapDrawable>(local_ref< java::lang::String > const &a0)
{
	return local_ref< android::graphics::drawable::BitmapDrawable >(
		environment::get().get_jenv()->NewObject(
			get_class<android::graphics::drawable::BitmapDrawable::J2CPP_CLASS_NAME>(),
			get_method_id<android::graphics::drawable::BitmapDrawable::J2CPP_CLASS_NAME, android::graphics::drawable::BitmapDrawable::J2CPP_METHOD_NAME(4), android::graphics::drawable::BitmapDrawable::J2CPP_METHOD_SIGNATURE(4), false>(),
			a0.get_jtype()
		)
	);
}

template <>
local_ref< android::graphics::drawable::BitmapDrawable > create< android::graphics::drawable::BitmapDrawable>(local_ref< android::content::res::Resources > const &a0, local_ref< java::lang::String > const &a1)
{
	return local_ref< android::graphics::drawable::BitmapDrawable >(
		environment::get().get_jenv()->NewObject(
			get_class<android::graphics::drawable::BitmapDrawable::J2CPP_CLASS_NAME>(),
			get_method_id<android::graphics::drawable::BitmapDrawable::J2CPP_CLASS_NAME, android::graphics::drawable::BitmapDrawable::J2CPP_METHOD_NAME(5), android::graphics::drawable::BitmapDrawable::J2CPP_METHOD_SIGNATURE(5), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

template <>
local_ref< android::graphics::drawable::BitmapDrawable > create< android::graphics::drawable::BitmapDrawable>(local_ref< java::io::InputStream > const &a0)
{
	return local_ref< android::graphics::drawable::BitmapDrawable >(
		environment::get().get_jenv()->NewObject(
			get_class<android::graphics::drawable::BitmapDrawable::J2CPP_CLASS_NAME>(),
			get_method_id<android::graphics::drawable::BitmapDrawable::J2CPP_CLASS_NAME, android::graphics::drawable::BitmapDrawable::J2CPP_METHOD_NAME(6), android::graphics::drawable::BitmapDrawable::J2CPP_METHOD_SIGNATURE(6), false>(),
			a0.get_jtype()
		)
	);
}

template <>
local_ref< android::graphics::drawable::BitmapDrawable > create< android::graphics::drawable::BitmapDrawable>(local_ref< android::content::res::Resources > const &a0, local_ref< java::io::InputStream > const &a1)
{
	return local_ref< android::graphics::drawable::BitmapDrawable >(
		environment::get().get_jenv()->NewObject(
			get_class<android::graphics::drawable::BitmapDrawable::J2CPP_CLASS_NAME>(),
			get_method_id<android::graphics::drawable::BitmapDrawable::J2CPP_CLASS_NAME, android::graphics::drawable::BitmapDrawable::J2CPP_METHOD_NAME(7), android::graphics::drawable::BitmapDrawable::J2CPP_METHOD_SIGNATURE(7), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< android::graphics::Paint > android::graphics::drawable::BitmapDrawable::getPaint()
{
	return local_ref< android::graphics::Paint >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(8), J2CPP_METHOD_SIGNATURE(8), false>()
		)
	);
}

local_ref< android::graphics::Bitmap > android::graphics::drawable::BitmapDrawable::getBitmap()
{
	return local_ref< android::graphics::Bitmap >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(9), J2CPP_METHOD_SIGNATURE(9), false>()
		)
	);
}

void android::graphics::drawable::BitmapDrawable::setTargetDensity(local_ref< android::graphics::Canvas > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(10), J2CPP_METHOD_SIGNATURE(10), false>(),
			a0.get_jtype()
		)
	);
}

void android::graphics::drawable::BitmapDrawable::setTargetDensity(local_ref< android::util::DisplayMetrics > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(11), J2CPP_METHOD_SIGNATURE(11), false>(),
			a0.get_jtype()
		)
	);
}

void android::graphics::drawable::BitmapDrawable::setTargetDensity(cpp_int const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(12), J2CPP_METHOD_SIGNATURE(12), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int android::graphics::drawable::BitmapDrawable::getGravity()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(13), J2CPP_METHOD_SIGNATURE(13), false>()
		)
	);
}

void android::graphics::drawable::BitmapDrawable::setGravity(cpp_int const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(14), J2CPP_METHOD_SIGNATURE(14), false>(),
			a0.get_jtype()
		)
	);
}

void android::graphics::drawable::BitmapDrawable::setAntiAlias(cpp_boolean const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(15), J2CPP_METHOD_SIGNATURE(15), false>(),
			a0.get_jtype()
		)
	);
}

void android::graphics::drawable::BitmapDrawable::setFilterBitmap(cpp_boolean const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(16), J2CPP_METHOD_SIGNATURE(16), false>(),
			a0.get_jtype()
		)
	);
}

void android::graphics::drawable::BitmapDrawable::setDither(cpp_boolean const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(17), J2CPP_METHOD_SIGNATURE(17), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< android::graphics::Shader_::TileMode > android::graphics::drawable::BitmapDrawable::getTileModeX()
{
	return local_ref< android::graphics::Shader_::TileMode >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(18), J2CPP_METHOD_SIGNATURE(18), false>()
		)
	);
}

local_ref< android::graphics::Shader_::TileMode > android::graphics::drawable::BitmapDrawable::getTileModeY()
{
	return local_ref< android::graphics::Shader_::TileMode >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(19), J2CPP_METHOD_SIGNATURE(19), false>()
		)
	);
}

void android::graphics::drawable::BitmapDrawable::setTileModeX(local_ref< android::graphics::Shader_::TileMode > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(20), J2CPP_METHOD_SIGNATURE(20), false>(),
			a0.get_jtype()
		)
	);
}

void android::graphics::drawable::BitmapDrawable::setTileModeY(local_ref< android::graphics::Shader_::TileMode > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(21), J2CPP_METHOD_SIGNATURE(21), false>(),
			a0.get_jtype()
		)
	);
}

void android::graphics::drawable::BitmapDrawable::setTileModeXY(local_ref< android::graphics::Shader_::TileMode > const &a0, local_ref< android::graphics::Shader_::TileMode > const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(22), J2CPP_METHOD_SIGNATURE(22), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_int android::graphics::drawable::BitmapDrawable::getChangingConfigurations()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(23), J2CPP_METHOD_SIGNATURE(23), false>()
		)
	);
}


void android::graphics::drawable::BitmapDrawable::draw(local_ref< android::graphics::Canvas > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(25), J2CPP_METHOD_SIGNATURE(25), false>(),
			a0.get_jtype()
		)
	);
}

void android::graphics::drawable::BitmapDrawable::setAlpha(cpp_int const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(26), J2CPP_METHOD_SIGNATURE(26), false>(),
			a0.get_jtype()
		)
	);
}

void android::graphics::drawable::BitmapDrawable::setColorFilter(local_ref< android::graphics::ColorFilter > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(27), J2CPP_METHOD_SIGNATURE(27), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< android::graphics::drawable::Drawable > android::graphics::drawable::BitmapDrawable::mutate()
{
	return local_ref< android::graphics::drawable::Drawable >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(28), J2CPP_METHOD_SIGNATURE(28), false>()
		)
	);
}

void android::graphics::drawable::BitmapDrawable::inflate(local_ref< android::content::res::Resources > const &a0, local_ref< org::xmlpull::v1::XmlPullParser > const &a1, local_ref< android::util::AttributeSet > const &a2)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(29), J2CPP_METHOD_SIGNATURE(29), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

cpp_int android::graphics::drawable::BitmapDrawable::getIntrinsicWidth()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(30), J2CPP_METHOD_SIGNATURE(30), false>()
		)
	);
}

cpp_int android::graphics::drawable::BitmapDrawable::getIntrinsicHeight()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(31), J2CPP_METHOD_SIGNATURE(31), false>()
		)
	);
}

cpp_int android::graphics::drawable::BitmapDrawable::getOpacity()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(32), J2CPP_METHOD_SIGNATURE(32), false>()
		)
	);
}

local_ref< android::graphics::drawable::Drawable_::ConstantState > android::graphics::drawable::BitmapDrawable::getConstantState()
{
	return local_ref< android::graphics::drawable::Drawable_::ConstantState >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(33), J2CPP_METHOD_SIGNATURE(33), false>()
		)
	);
}


J2CPP_DEFINE_CLASS(android::graphics::drawable::BitmapDrawable,"android/graphics/drawable/BitmapDrawable")
J2CPP_DEFINE_METHOD(android::graphics::drawable::BitmapDrawable,0,"<init>","()V")
J2CPP_DEFINE_METHOD(android::graphics::drawable::BitmapDrawable,1,"<init>","(Landroid/content/res/Resources;)V")
J2CPP_DEFINE_METHOD(android::graphics::drawable::BitmapDrawable,2,"<init>","(Landroid/graphics/Bitmap;)V")
J2CPP_DEFINE_METHOD(android::graphics::drawable::BitmapDrawable,3,"<init>","(Landroid/content/res/Resources;Landroid/graphics/Bitmap;)V")
J2CPP_DEFINE_METHOD(android::graphics::drawable::BitmapDrawable,4,"<init>","(Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(android::graphics::drawable::BitmapDrawable,5,"<init>","(Landroid/content/res/Resources;Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(android::graphics::drawable::BitmapDrawable,6,"<init>","(Ljava/io/InputStream;)V")
J2CPP_DEFINE_METHOD(android::graphics::drawable::BitmapDrawable,7,"<init>","(Landroid/content/res/Resources;Ljava/io/InputStream;)V")
J2CPP_DEFINE_METHOD(android::graphics::drawable::BitmapDrawable,8,"getPaint","()Landroid/graphics/Paint;")
J2CPP_DEFINE_METHOD(android::graphics::drawable::BitmapDrawable,9,"getBitmap","()Landroid/graphics/Bitmap;")
J2CPP_DEFINE_METHOD(android::graphics::drawable::BitmapDrawable,10,"setTargetDensity","(Landroid/graphics/Canvas;)V")
J2CPP_DEFINE_METHOD(android::graphics::drawable::BitmapDrawable,11,"setTargetDensity","(Landroid/util/DisplayMetrics;)V")
J2CPP_DEFINE_METHOD(android::graphics::drawable::BitmapDrawable,12,"setTargetDensity","(I)V")
J2CPP_DEFINE_METHOD(android::graphics::drawable::BitmapDrawable,13,"getGravity","()I")
J2CPP_DEFINE_METHOD(android::graphics::drawable::BitmapDrawable,14,"setGravity","(I)V")
J2CPP_DEFINE_METHOD(android::graphics::drawable::BitmapDrawable,15,"setAntiAlias","(Z)V")
J2CPP_DEFINE_METHOD(android::graphics::drawable::BitmapDrawable,16,"setFilterBitmap","(Z)V")
J2CPP_DEFINE_METHOD(android::graphics::drawable::BitmapDrawable,17,"setDither","(Z)V")
J2CPP_DEFINE_METHOD(android::graphics::drawable::BitmapDrawable,18,"getTileModeX","()Landroid/graphics/Shader$TileMode;")
J2CPP_DEFINE_METHOD(android::graphics::drawable::BitmapDrawable,19,"getTileModeY","()Landroid/graphics/Shader$TileMode;")
J2CPP_DEFINE_METHOD(android::graphics::drawable::BitmapDrawable,20,"setTileModeX","(Landroid/graphics/Shader$TileMode;)V")
J2CPP_DEFINE_METHOD(android::graphics::drawable::BitmapDrawable,21,"setTileModeY","(Landroid/graphics/Shader$TileMode;)V")
J2CPP_DEFINE_METHOD(android::graphics::drawable::BitmapDrawable,22,"setTileModeXY","(Landroid/graphics/Shader$TileMode;Landroid/graphics/Shader$TileMode;)V")
J2CPP_DEFINE_METHOD(android::graphics::drawable::BitmapDrawable,23,"getChangingConfigurations","()I")
J2CPP_DEFINE_METHOD(android::graphics::drawable::BitmapDrawable,24,"onBoundsChange","(Landroid/graphics/Rect;)V")
J2CPP_DEFINE_METHOD(android::graphics::drawable::BitmapDrawable,25,"draw","(Landroid/graphics/Canvas;)V")
J2CPP_DEFINE_METHOD(android::graphics::drawable::BitmapDrawable,26,"setAlpha","(I)V")
J2CPP_DEFINE_METHOD(android::graphics::drawable::BitmapDrawable,27,"setColorFilter","(Landroid/graphics/ColorFilter;)V")
J2CPP_DEFINE_METHOD(android::graphics::drawable::BitmapDrawable,28,"mutate","()Landroid/graphics/drawable/Drawable;")
J2CPP_DEFINE_METHOD(android::graphics::drawable::BitmapDrawable,29,"inflate","(Landroid/content/res/Resources;Lorg/xmlpull/v1/XmlPullParser;Landroid/util/AttributeSet;)V")
J2CPP_DEFINE_METHOD(android::graphics::drawable::BitmapDrawable,30,"getIntrinsicWidth","()I")
J2CPP_DEFINE_METHOD(android::graphics::drawable::BitmapDrawable,31,"getIntrinsicHeight","()I")
J2CPP_DEFINE_METHOD(android::graphics::drawable::BitmapDrawable,32,"getOpacity","()I")
J2CPP_DEFINE_METHOD(android::graphics::drawable::BitmapDrawable,33,"getConstantState","()Landroid/graphics/drawable/Drawable$ConstantState;")

} //namespace j2cpp

#endif //J2CPP_ANDROID_GRAPHICS_DRAWABLE_BITMAPDRAWABLE_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
