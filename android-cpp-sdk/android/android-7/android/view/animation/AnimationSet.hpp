/*================================================================================
  code generated by: java2cpp
  class: android.view.animation.AnimationSet
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_VIEW_ANIMATION_ANIMATIONSET_HPP_DECL
#define J2CPP_ANDROID_VIEW_ANIMATION_ANIMATIONSET_HPP_DECL


namespace j2cpp { namespace java { namespace util { class List; } } }
namespace j2cpp { namespace android { namespace content { class Context; } } }
namespace j2cpp { namespace android { namespace view { namespace animation { class Transformation; } } } }
namespace j2cpp { namespace android { namespace view { namespace animation { class Animation; } } } }
namespace j2cpp { namespace android { namespace util { class AttributeSet; } } }


#include <android/content/Context.hpp>
#include <android/util/AttributeSet.hpp>
#include <android/view/animation/Animation.hpp>
#include <android/view/animation/Transformation.hpp>
#include <java/util/List.hpp>


namespace j2cpp {

namespace android { namespace view { namespace animation {

	class AnimationSet;
	class AnimationSet
		: public cpp_object<AnimationSet>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_METHOD(12)
		J2CPP_DECLARE_METHOD(13)
		J2CPP_DECLARE_METHOD(14)
		J2CPP_DECLARE_METHOD(15)
		J2CPP_DECLARE_METHOD(16)
		J2CPP_DECLARE_METHOD(17)
		J2CPP_DECLARE_METHOD(18)
		J2CPP_DECLARE_METHOD(19)
		J2CPP_DECLARE_METHOD(20)
		J2CPP_DECLARE_METHOD(21)
		J2CPP_DECLARE_METHOD(22)

		AnimationSet(jobject jobj)
		: cpp_object<AnimationSet>(jobj)
		{
		}

		void setFillAfter(cpp_boolean const&);
		void setFillBefore(cpp_boolean const&);
		void setRepeatMode(cpp_int const&);
		void setStartOffset(cpp_long const&);
		void setDuration(cpp_long const&);
		void addAnimation(local_ref< android::view::animation::Animation > const&);
		void setStartTime(cpp_long const&);
		cpp_long getStartTime();
		void restrictDuration(cpp_long const&);
		cpp_long getDuration();
		cpp_long computeDurationHint();
		cpp_boolean getTransformation(cpp_long const&, local_ref< android::view::animation::Transformation > const&);
		void scaleCurrentDuration(cpp_float const&);
		void initialize(cpp_int const&, cpp_int const&, cpp_int const&, cpp_int const&);
		void reset();
		local_ref< java::util::List > getAnimations();
		cpp_boolean willChangeTransformationMatrix();
		cpp_boolean willChangeBounds();
	}; //class AnimationSet

} //namespace animation
} //namespace view
} //namespace android


} //namespace j2cpp

#endif //J2CPP_ANDROID_VIEW_ANIMATION_ANIMATIONSET_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_VIEW_ANIMATION_ANIMATIONSET_HPP_IMPL
#define J2CPP_ANDROID_VIEW_ANIMATION_ANIMATIONSET_HPP_IMPL

namespace j2cpp {


template <>
local_ref< android::view::animation::AnimationSet > create< android::view::animation::AnimationSet>(local_ref< android::content::Context > const &a0, local_ref< android::util::AttributeSet > const &a1)
{
	return local_ref< android::view::animation::AnimationSet >(
		environment::get().get_jenv()->NewObject(
			get_class<android::view::animation::AnimationSet::J2CPP_CLASS_NAME>(),
			get_method_id<android::view::animation::AnimationSet::J2CPP_CLASS_NAME, android::view::animation::AnimationSet::J2CPP_METHOD_NAME(0), android::view::animation::AnimationSet::J2CPP_METHOD_SIGNATURE(0), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

template <>
local_ref< android::view::animation::AnimationSet > create< android::view::animation::AnimationSet>(cpp_boolean const &a0)
{
	return local_ref< android::view::animation::AnimationSet >(
		environment::get().get_jenv()->NewObject(
			get_class<android::view::animation::AnimationSet::J2CPP_CLASS_NAME>(),
			get_method_id<android::view::animation::AnimationSet::J2CPP_CLASS_NAME, android::view::animation::AnimationSet::J2CPP_METHOD_NAME(1), android::view::animation::AnimationSet::J2CPP_METHOD_SIGNATURE(1), false>(),
			a0.get_jtype()
		)
	);
}


void android::view::animation::AnimationSet::setFillAfter(cpp_boolean const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>(),
			a0.get_jtype()
		)
	);
}

void android::view::animation::AnimationSet::setFillBefore(cpp_boolean const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>(),
			a0.get_jtype()
		)
	);
}

void android::view::animation::AnimationSet::setRepeatMode(cpp_int const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>(),
			a0.get_jtype()
		)
	);
}

void android::view::animation::AnimationSet::setStartOffset(cpp_long const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>(),
			a0.get_jtype()
		)
	);
}

void android::view::animation::AnimationSet::setDuration(cpp_long const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(7), J2CPP_METHOD_SIGNATURE(7), false>(),
			a0.get_jtype()
		)
	);
}

void android::view::animation::AnimationSet::addAnimation(local_ref< android::view::animation::Animation > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(8), J2CPP_METHOD_SIGNATURE(8), false>(),
			a0.get_jtype()
		)
	);
}

void android::view::animation::AnimationSet::setStartTime(cpp_long const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(9), J2CPP_METHOD_SIGNATURE(9), false>(),
			a0.get_jtype()
		)
	);
}

cpp_long android::view::animation::AnimationSet::getStartTime()
{
	return cpp_long(
		environment::get().get_jenv()->CallLongMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(10), J2CPP_METHOD_SIGNATURE(10), false>()
		)
	);
}

void android::view::animation::AnimationSet::restrictDuration(cpp_long const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(11), J2CPP_METHOD_SIGNATURE(11), false>(),
			a0.get_jtype()
		)
	);
}

cpp_long android::view::animation::AnimationSet::getDuration()
{
	return cpp_long(
		environment::get().get_jenv()->CallLongMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(12), J2CPP_METHOD_SIGNATURE(12), false>()
		)
	);
}

cpp_long android::view::animation::AnimationSet::computeDurationHint()
{
	return cpp_long(
		environment::get().get_jenv()->CallLongMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(13), J2CPP_METHOD_SIGNATURE(13), false>()
		)
	);
}

cpp_boolean android::view::animation::AnimationSet::getTransformation(cpp_long const &a0, local_ref< android::view::animation::Transformation > const &a1)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(14), J2CPP_METHOD_SIGNATURE(14), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void android::view::animation::AnimationSet::scaleCurrentDuration(cpp_float const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(15), J2CPP_METHOD_SIGNATURE(15), false>(),
			a0.get_jtype()
		)
	);
}

void android::view::animation::AnimationSet::initialize(cpp_int const &a0, cpp_int const &a1, cpp_int const &a2, cpp_int const &a3)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(16), J2CPP_METHOD_SIGNATURE(16), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype(), a3.get_jtype()
		)
	);
}

void android::view::animation::AnimationSet::reset()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(17), J2CPP_METHOD_SIGNATURE(17), false>()
		)
	);
}

local_ref< java::util::List > android::view::animation::AnimationSet::getAnimations()
{
	return local_ref< java::util::List >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(18), J2CPP_METHOD_SIGNATURE(18), false>()
		)
	);
}

cpp_boolean android::view::animation::AnimationSet::willChangeTransformationMatrix()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(19), J2CPP_METHOD_SIGNATURE(19), false>()
		)
	);
}

cpp_boolean android::view::animation::AnimationSet::willChangeBounds()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(20), J2CPP_METHOD_SIGNATURE(20), false>()
		)
	);
}




J2CPP_DEFINE_CLASS(android::view::animation::AnimationSet,"android/view/animation/AnimationSet")
J2CPP_DEFINE_METHOD(android::view::animation::AnimationSet,0,"<init>","(Landroid/content/Context;Landroid/util/AttributeSet;)V")
J2CPP_DEFINE_METHOD(android::view::animation::AnimationSet,1,"<init>","(Z)V")
J2CPP_DEFINE_METHOD(android::view::animation::AnimationSet,2,"clone","()Landroid/view/animation/AnimationSet;")
J2CPP_DEFINE_METHOD(android::view::animation::AnimationSet,3,"setFillAfter","(Z)V")
J2CPP_DEFINE_METHOD(android::view::animation::AnimationSet,4,"setFillBefore","(Z)V")
J2CPP_DEFINE_METHOD(android::view::animation::AnimationSet,5,"setRepeatMode","(I)V")
J2CPP_DEFINE_METHOD(android::view::animation::AnimationSet,6,"setStartOffset","(J)V")
J2CPP_DEFINE_METHOD(android::view::animation::AnimationSet,7,"setDuration","(J)V")
J2CPP_DEFINE_METHOD(android::view::animation::AnimationSet,8,"addAnimation","(Landroid/view/animation/Animation;)V")
J2CPP_DEFINE_METHOD(android::view::animation::AnimationSet,9,"setStartTime","(J)V")
J2CPP_DEFINE_METHOD(android::view::animation::AnimationSet,10,"getStartTime","()J")
J2CPP_DEFINE_METHOD(android::view::animation::AnimationSet,11,"restrictDuration","(J)V")
J2CPP_DEFINE_METHOD(android::view::animation::AnimationSet,12,"getDuration","()J")
J2CPP_DEFINE_METHOD(android::view::animation::AnimationSet,13,"computeDurationHint","()J")
J2CPP_DEFINE_METHOD(android::view::animation::AnimationSet,14,"getTransformation","(JLandroid/view/animation/Transformation;)Z")
J2CPP_DEFINE_METHOD(android::view::animation::AnimationSet,15,"scaleCurrentDuration","(F)V")
J2CPP_DEFINE_METHOD(android::view::animation::AnimationSet,16,"initialize","(IIII)V")
J2CPP_DEFINE_METHOD(android::view::animation::AnimationSet,17,"reset","()V")
J2CPP_DEFINE_METHOD(android::view::animation::AnimationSet,18,"getAnimations","()Ljava/util/List;")
J2CPP_DEFINE_METHOD(android::view::animation::AnimationSet,19,"willChangeTransformationMatrix","()Z")
J2CPP_DEFINE_METHOD(android::view::animation::AnimationSet,20,"willChangeBounds","()Z")
J2CPP_DEFINE_METHOD(android::view::animation::AnimationSet,21,"clone","()Landroid/view/animation/Animation;")
J2CPP_DEFINE_METHOD(android::view::animation::AnimationSet,22,"clone","()Ljava/lang/Object;")

} //namespace j2cpp

#endif //J2CPP_ANDROID_VIEW_ANIMATION_ANIMATIONSET_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
