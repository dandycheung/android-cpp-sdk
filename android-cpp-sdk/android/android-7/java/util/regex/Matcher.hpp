/*================================================================================
  code generated by: java2cpp
  class: java.util.regex.Matcher
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_REGEX_MATCHER_HPP_DECL
#define J2CPP_JAVA_UTIL_REGEX_MATCHER_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class StringBuffer; } } }
namespace j2cpp { namespace java { namespace lang { class CharSequence; } } }
namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace util { namespace regex { class MatchResult; } } } }
namespace j2cpp { namespace java { namespace util { namespace regex { class Pattern; } } } }


#include <java/lang/CharSequence.hpp>
#include <java/lang/String.hpp>
#include <java/lang/StringBuffer.hpp>
#include <java/util/regex/MatchResult.hpp>
#include <java/util/regex/Pattern.hpp>


namespace j2cpp {

namespace java { namespace util { namespace regex {

	class Matcher;
	class Matcher
		: public cpp_object<Matcher>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_METHOD(12)
		J2CPP_DECLARE_METHOD(13)
		J2CPP_DECLARE_METHOD(14)
		J2CPP_DECLARE_METHOD(15)
		J2CPP_DECLARE_METHOD(16)
		J2CPP_DECLARE_METHOD(17)
		J2CPP_DECLARE_METHOD(18)
		J2CPP_DECLARE_METHOD(19)
		J2CPP_DECLARE_METHOD(20)
		J2CPP_DECLARE_METHOD(21)
		J2CPP_DECLARE_METHOD(22)
		J2CPP_DECLARE_METHOD(23)
		J2CPP_DECLARE_METHOD(24)
		J2CPP_DECLARE_METHOD(25)
		J2CPP_DECLARE_METHOD(26)
		J2CPP_DECLARE_METHOD(27)
		J2CPP_DECLARE_METHOD(28)
		J2CPP_DECLARE_METHOD(29)
		J2CPP_DECLARE_METHOD(30)
		J2CPP_DECLARE_METHOD(31)

		Matcher(jobject jobj)
		: cpp_object<Matcher>(jobj)
		{
		}

		local_ref< java::util::regex::Matcher > reset();
		local_ref< java::util::regex::Matcher > reset(local_ref< java::lang::CharSequence > const&);
		local_ref< java::util::regex::Matcher > usePattern(local_ref< java::util::regex::Pattern > const&);
		local_ref< java::util::regex::Pattern > pattern();
		cpp_int groupCount();
		local_ref< java::util::regex::Matcher > region(cpp_int const&, cpp_int const&);
		cpp_int regionStart();
		cpp_int regionEnd();
		local_ref< java::util::regex::Matcher > useAnchoringBounds(cpp_boolean const&);
		cpp_boolean hasAnchoringBounds();
		local_ref< java::util::regex::Matcher > useTransparentBounds(cpp_boolean const&);
		cpp_boolean hasTransparentBounds();
		cpp_boolean find();
		cpp_boolean find(cpp_int const&);
		cpp_boolean matches();
		cpp_boolean lookingAt();
		cpp_int start();
		cpp_int start(cpp_int const&);
		cpp_int end();
		cpp_int end(cpp_int const&);
		local_ref< java::lang::String > group();
		local_ref< java::lang::String > group(cpp_int const&);
		cpp_boolean hitEnd();
		cpp_boolean requireEnd();
		local_ref< java::util::regex::MatchResult > toMatchResult();
		local_ref< java::util::regex::Matcher > appendReplacement(local_ref< java::lang::StringBuffer > const&, local_ref< java::lang::String > const&);
		local_ref< java::lang::StringBuffer > appendTail(local_ref< java::lang::StringBuffer > const&);
		local_ref< java::lang::String > replaceAll(local_ref< java::lang::String > const&);
		local_ref< java::lang::String > replaceFirst(local_ref< java::lang::String > const&);
		static local_ref< java::lang::String > quoteReplacement(local_ref< java::lang::String > const&);
	}; //class Matcher

} //namespace regex
} //namespace util
} //namespace java


} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_REGEX_MATCHER_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_REGEX_MATCHER_HPP_IMPL
#define J2CPP_JAVA_UTIL_REGEX_MATCHER_HPP_IMPL

namespace j2cpp {


template <>
local_ref< java::util::regex::Matcher > create< java::util::regex::Matcher>()
{
	return local_ref< java::util::regex::Matcher >(
		environment::get().get_jenv()->NewObject(
			get_class<java::util::regex::Matcher::J2CPP_CLASS_NAME>(),
			get_method_id<java::util::regex::Matcher::J2CPP_CLASS_NAME, java::util::regex::Matcher::J2CPP_METHOD_NAME(0), java::util::regex::Matcher::J2CPP_METHOD_SIGNATURE(0), false>()
		)
	);
}

local_ref< java::util::regex::Matcher > java::util::regex::Matcher::reset()
{
	return local_ref< java::util::regex::Matcher >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), false>()
		)
	);
}

local_ref< java::util::regex::Matcher > java::util::regex::Matcher::reset(local_ref< java::lang::CharSequence > const &a0)
{
	return local_ref< java::util::regex::Matcher >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::util::regex::Matcher > java::util::regex::Matcher::usePattern(local_ref< java::util::regex::Pattern > const &a0)
{
	return local_ref< java::util::regex::Matcher >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::util::regex::Pattern > java::util::regex::Matcher::pattern()
{
	return local_ref< java::util::regex::Pattern >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>()
		)
	);
}

cpp_int java::util::regex::Matcher::groupCount()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>()
		)
	);
}

local_ref< java::util::regex::Matcher > java::util::regex::Matcher::region(cpp_int const &a0, cpp_int const &a1)
{
	return local_ref< java::util::regex::Matcher >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_int java::util::regex::Matcher::regionStart()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(7), J2CPP_METHOD_SIGNATURE(7), false>()
		)
	);
}

cpp_int java::util::regex::Matcher::regionEnd()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(8), J2CPP_METHOD_SIGNATURE(8), false>()
		)
	);
}

local_ref< java::util::regex::Matcher > java::util::regex::Matcher::useAnchoringBounds(cpp_boolean const &a0)
{
	return local_ref< java::util::regex::Matcher >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(9), J2CPP_METHOD_SIGNATURE(9), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean java::util::regex::Matcher::hasAnchoringBounds()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(10), J2CPP_METHOD_SIGNATURE(10), false>()
		)
	);
}

local_ref< java::util::regex::Matcher > java::util::regex::Matcher::useTransparentBounds(cpp_boolean const &a0)
{
	return local_ref< java::util::regex::Matcher >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(11), J2CPP_METHOD_SIGNATURE(11), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean java::util::regex::Matcher::hasTransparentBounds()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(12), J2CPP_METHOD_SIGNATURE(12), false>()
		)
	);
}

cpp_boolean java::util::regex::Matcher::find()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(13), J2CPP_METHOD_SIGNATURE(13), false>()
		)
	);
}

cpp_boolean java::util::regex::Matcher::find(cpp_int const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(14), J2CPP_METHOD_SIGNATURE(14), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean java::util::regex::Matcher::matches()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(15), J2CPP_METHOD_SIGNATURE(15), false>()
		)
	);
}

cpp_boolean java::util::regex::Matcher::lookingAt()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(16), J2CPP_METHOD_SIGNATURE(16), false>()
		)
	);
}

cpp_int java::util::regex::Matcher::start()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(17), J2CPP_METHOD_SIGNATURE(17), false>()
		)
	);
}

cpp_int java::util::regex::Matcher::start(cpp_int const &a0)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(18), J2CPP_METHOD_SIGNATURE(18), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int java::util::regex::Matcher::end()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(19), J2CPP_METHOD_SIGNATURE(19), false>()
		)
	);
}

cpp_int java::util::regex::Matcher::end(cpp_int const &a0)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(20), J2CPP_METHOD_SIGNATURE(20), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::String > java::util::regex::Matcher::group()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(21), J2CPP_METHOD_SIGNATURE(21), false>()
		)
	);
}

local_ref< java::lang::String > java::util::regex::Matcher::group(cpp_int const &a0)
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(22), J2CPP_METHOD_SIGNATURE(22), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean java::util::regex::Matcher::hitEnd()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(23), J2CPP_METHOD_SIGNATURE(23), false>()
		)
	);
}

cpp_boolean java::util::regex::Matcher::requireEnd()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(24), J2CPP_METHOD_SIGNATURE(24), false>()
		)
	);
}

local_ref< java::util::regex::MatchResult > java::util::regex::Matcher::toMatchResult()
{
	return local_ref< java::util::regex::MatchResult >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(25), J2CPP_METHOD_SIGNATURE(25), false>()
		)
	);
}

local_ref< java::util::regex::Matcher > java::util::regex::Matcher::appendReplacement(local_ref< java::lang::StringBuffer > const &a0, local_ref< java::lang::String > const &a1)
{
	return local_ref< java::util::regex::Matcher >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(26), J2CPP_METHOD_SIGNATURE(26), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< java::lang::StringBuffer > java::util::regex::Matcher::appendTail(local_ref< java::lang::StringBuffer > const &a0)
{
	return local_ref< java::lang::StringBuffer >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(27), J2CPP_METHOD_SIGNATURE(27), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::String > java::util::regex::Matcher::replaceAll(local_ref< java::lang::String > const &a0)
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(28), J2CPP_METHOD_SIGNATURE(28), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::String > java::util::regex::Matcher::replaceFirst(local_ref< java::lang::String > const &a0)
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(29), J2CPP_METHOD_SIGNATURE(29), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::String > java::util::regex::Matcher::quoteReplacement(local_ref< java::lang::String > const &a0)
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(30), J2CPP_METHOD_SIGNATURE(30), true>(),
			a0.get_jtype()
		)
	);
}



J2CPP_DEFINE_CLASS(java::util::regex::Matcher,"java/util/regex/Matcher")
J2CPP_DEFINE_METHOD(java::util::regex::Matcher,0,"<init>","()V")
J2CPP_DEFINE_METHOD(java::util::regex::Matcher,1,"reset","()Ljava/util/regex/Matcher;")
J2CPP_DEFINE_METHOD(java::util::regex::Matcher,2,"reset","(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;")
J2CPP_DEFINE_METHOD(java::util::regex::Matcher,3,"usePattern","(Ljava/util/regex/Pattern;)Ljava/util/regex/Matcher;")
J2CPP_DEFINE_METHOD(java::util::regex::Matcher,4,"pattern","()Ljava/util/regex/Pattern;")
J2CPP_DEFINE_METHOD(java::util::regex::Matcher,5,"groupCount","()I")
J2CPP_DEFINE_METHOD(java::util::regex::Matcher,6,"region","(II)Ljava/util/regex/Matcher;")
J2CPP_DEFINE_METHOD(java::util::regex::Matcher,7,"regionStart","()I")
J2CPP_DEFINE_METHOD(java::util::regex::Matcher,8,"regionEnd","()I")
J2CPP_DEFINE_METHOD(java::util::regex::Matcher,9,"useAnchoringBounds","(Z)Ljava/util/regex/Matcher;")
J2CPP_DEFINE_METHOD(java::util::regex::Matcher,10,"hasAnchoringBounds","()Z")
J2CPP_DEFINE_METHOD(java::util::regex::Matcher,11,"useTransparentBounds","(Z)Ljava/util/regex/Matcher;")
J2CPP_DEFINE_METHOD(java::util::regex::Matcher,12,"hasTransparentBounds","()Z")
J2CPP_DEFINE_METHOD(java::util::regex::Matcher,13,"find","()Z")
J2CPP_DEFINE_METHOD(java::util::regex::Matcher,14,"find","(I)Z")
J2CPP_DEFINE_METHOD(java::util::regex::Matcher,15,"matches","()Z")
J2CPP_DEFINE_METHOD(java::util::regex::Matcher,16,"lookingAt","()Z")
J2CPP_DEFINE_METHOD(java::util::regex::Matcher,17,"start","()I")
J2CPP_DEFINE_METHOD(java::util::regex::Matcher,18,"start","(I)I")
J2CPP_DEFINE_METHOD(java::util::regex::Matcher,19,"end","()I")
J2CPP_DEFINE_METHOD(java::util::regex::Matcher,20,"end","(I)I")
J2CPP_DEFINE_METHOD(java::util::regex::Matcher,21,"group","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::util::regex::Matcher,22,"group","(I)Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::util::regex::Matcher,23,"hitEnd","()Z")
J2CPP_DEFINE_METHOD(java::util::regex::Matcher,24,"requireEnd","()Z")
J2CPP_DEFINE_METHOD(java::util::regex::Matcher,25,"toMatchResult","()Ljava/util/regex/MatchResult;")
J2CPP_DEFINE_METHOD(java::util::regex::Matcher,26,"appendReplacement","(Ljava/lang/StringBuffer;Ljava/lang/String;)Ljava/util/regex/Matcher;")
J2CPP_DEFINE_METHOD(java::util::regex::Matcher,27,"appendTail","(Ljava/lang/StringBuffer;)Ljava/lang/StringBuffer;")
J2CPP_DEFINE_METHOD(java::util::regex::Matcher,28,"replaceAll","(Ljava/lang/String;)Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::util::regex::Matcher,29,"replaceFirst","(Ljava/lang/String;)Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::util::regex::Matcher,30,"quoteReplacement","(Ljava/lang/String;)Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::util::regex::Matcher,31,"finalize","()V")

} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_REGEX_MATCHER_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
