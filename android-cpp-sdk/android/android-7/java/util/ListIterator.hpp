/*================================================================================
  code generated by: java2cpp
  class: java.util.ListIterator
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_LISTITERATOR_HPP_DECL
#define J2CPP_JAVA_UTIL_LISTITERATOR_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class Object; } } }


#include <java/lang/Object.hpp>


namespace j2cpp {

namespace java { namespace util {

	class ListIterator;
	class ListIterator
		: public cpp_object<ListIterator>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)

		ListIterator(jobject jobj)
		: cpp_object<ListIterator>(jobj)
		{
		}

		void add(local_ref< java::lang::Object > const&);
		cpp_boolean hasNext();
		cpp_boolean hasPrevious();
		local_ref< java::lang::Object > next();
		cpp_int nextIndex();
		local_ref< java::lang::Object > previous();
		cpp_int previousIndex();
		void remove();
		void set(local_ref< java::lang::Object > const&);
	}; //class ListIterator

} //namespace util
} //namespace java


} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_LISTITERATOR_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_LISTITERATOR_HPP_IMPL
#define J2CPP_JAVA_UTIL_LISTITERATOR_HPP_IMPL

namespace j2cpp {


void java::util::ListIterator::add(local_ref< java::lang::Object > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(0), J2CPP_METHOD_SIGNATURE(0), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean java::util::ListIterator::hasNext()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), false>()
		)
	);
}

cpp_boolean java::util::ListIterator::hasPrevious()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>()
		)
	);
}

local_ref< java::lang::Object > java::util::ListIterator::next()
{
	return local_ref< java::lang::Object >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>()
		)
	);
}

cpp_int java::util::ListIterator::nextIndex()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>()
		)
	);
}

local_ref< java::lang::Object > java::util::ListIterator::previous()
{
	return local_ref< java::lang::Object >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>()
		)
	);
}

cpp_int java::util::ListIterator::previousIndex()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>()
		)
	);
}

void java::util::ListIterator::remove()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(7), J2CPP_METHOD_SIGNATURE(7), false>()
		)
	);
}

void java::util::ListIterator::set(local_ref< java::lang::Object > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(8), J2CPP_METHOD_SIGNATURE(8), false>(),
			a0.get_jtype()
		)
	);
}


J2CPP_DEFINE_CLASS(java::util::ListIterator,"java/util/ListIterator")
J2CPP_DEFINE_METHOD(java::util::ListIterator,0,"add","(Ljava/lang/Object;)V")
J2CPP_DEFINE_METHOD(java::util::ListIterator,1,"hasNext","()Z")
J2CPP_DEFINE_METHOD(java::util::ListIterator,2,"hasPrevious","()Z")
J2CPP_DEFINE_METHOD(java::util::ListIterator,3,"next","()Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(java::util::ListIterator,4,"nextIndex","()I")
J2CPP_DEFINE_METHOD(java::util::ListIterator,5,"previous","()Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(java::util::ListIterator,6,"previousIndex","()I")
J2CPP_DEFINE_METHOD(java::util::ListIterator,7,"remove","()V")
J2CPP_DEFINE_METHOD(java::util::ListIterator,8,"set","(Ljava/lang/Object;)V")

} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_LISTITERATOR_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
