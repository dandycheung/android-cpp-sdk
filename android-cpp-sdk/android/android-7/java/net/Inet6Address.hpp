/*================================================================================
  code generated by: java2cpp
  class: java.net.Inet6Address
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_NET_INET6ADDRESS_HPP_DECL
#define J2CPP_JAVA_NET_INET6ADDRESS_HPP_DECL


namespace j2cpp { namespace java { namespace net { class NetworkInterface; } } }
namespace j2cpp { namespace java { namespace lang { class String; } } }


#include <java/lang/String.hpp>
#include <java/net/NetworkInterface.hpp>


namespace j2cpp {

namespace java { namespace net {

	class Inet6Address;
	class Inet6Address
		: public cpp_object<Inet6Address>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_METHOD(12)
		J2CPP_DECLARE_METHOD(13)
		J2CPP_DECLARE_METHOD(14)
		J2CPP_DECLARE_METHOD(15)
		J2CPP_DECLARE_METHOD(16)

		Inet6Address(jobject jobj)
		: cpp_object<Inet6Address>(jobj)
		{
		}

		static local_ref< java::net::Inet6Address > getByAddress(local_ref< java::lang::String > const&, local_ref< cpp_byte_array<1> > const&, cpp_int const&);
		static local_ref< java::net::Inet6Address > getByAddress(local_ref< java::lang::String > const&, local_ref< cpp_byte_array<1> > const&, local_ref< java::net::NetworkInterface > const&);
		cpp_boolean isMulticastAddress();
		cpp_boolean isAnyLocalAddress();
		cpp_boolean isLoopbackAddress();
		cpp_boolean isLinkLocalAddress();
		cpp_boolean isSiteLocalAddress();
		cpp_boolean isMCGlobal();
		cpp_boolean isMCNodeLocal();
		cpp_boolean isMCLinkLocal();
		cpp_boolean isMCSiteLocal();
		cpp_boolean isMCOrgLocal();
		cpp_int getScopeId();
		local_ref< java::net::NetworkInterface > getScopedInterface();
		cpp_boolean isIPv4CompatibleAddress();
		local_ref< java::lang::String > toString();
	}; //class Inet6Address

} //namespace net
} //namespace java


} //namespace j2cpp

#endif //J2CPP_JAVA_NET_INET6ADDRESS_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_NET_INET6ADDRESS_HPP_IMPL
#define J2CPP_JAVA_NET_INET6ADDRESS_HPP_IMPL

namespace j2cpp {


template <>
local_ref< java::net::Inet6Address > create< java::net::Inet6Address>()
{
	return local_ref< java::net::Inet6Address >(
		environment::get().get_jenv()->NewObject(
			get_class<java::net::Inet6Address::J2CPP_CLASS_NAME>(),
			get_method_id<java::net::Inet6Address::J2CPP_CLASS_NAME, java::net::Inet6Address::J2CPP_METHOD_NAME(0), java::net::Inet6Address::J2CPP_METHOD_SIGNATURE(0), false>()
		)
	);
}

local_ref< java::net::Inet6Address > java::net::Inet6Address::getByAddress(local_ref< java::lang::String > const &a0, local_ref< cpp_byte_array<1> > const &a1, cpp_int const &a2)
{
	return local_ref< java::net::Inet6Address >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), true>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

local_ref< java::net::Inet6Address > java::net::Inet6Address::getByAddress(local_ref< java::lang::String > const &a0, local_ref< cpp_byte_array<1> > const &a1, local_ref< java::net::NetworkInterface > const &a2)
{
	return local_ref< java::net::Inet6Address >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), true>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

cpp_boolean java::net::Inet6Address::isMulticastAddress()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>()
		)
	);
}

cpp_boolean java::net::Inet6Address::isAnyLocalAddress()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>()
		)
	);
}

cpp_boolean java::net::Inet6Address::isLoopbackAddress()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>()
		)
	);
}

cpp_boolean java::net::Inet6Address::isLinkLocalAddress()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>()
		)
	);
}

cpp_boolean java::net::Inet6Address::isSiteLocalAddress()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(7), J2CPP_METHOD_SIGNATURE(7), false>()
		)
	);
}

cpp_boolean java::net::Inet6Address::isMCGlobal()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(8), J2CPP_METHOD_SIGNATURE(8), false>()
		)
	);
}

cpp_boolean java::net::Inet6Address::isMCNodeLocal()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(9), J2CPP_METHOD_SIGNATURE(9), false>()
		)
	);
}

cpp_boolean java::net::Inet6Address::isMCLinkLocal()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(10), J2CPP_METHOD_SIGNATURE(10), false>()
		)
	);
}

cpp_boolean java::net::Inet6Address::isMCSiteLocal()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(11), J2CPP_METHOD_SIGNATURE(11), false>()
		)
	);
}

cpp_boolean java::net::Inet6Address::isMCOrgLocal()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(12), J2CPP_METHOD_SIGNATURE(12), false>()
		)
	);
}

cpp_int java::net::Inet6Address::getScopeId()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(13), J2CPP_METHOD_SIGNATURE(13), false>()
		)
	);
}

local_ref< java::net::NetworkInterface > java::net::Inet6Address::getScopedInterface()
{
	return local_ref< java::net::NetworkInterface >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(14), J2CPP_METHOD_SIGNATURE(14), false>()
		)
	);
}

cpp_boolean java::net::Inet6Address::isIPv4CompatibleAddress()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(15), J2CPP_METHOD_SIGNATURE(15), false>()
		)
	);
}

local_ref< java::lang::String > java::net::Inet6Address::toString()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(16), J2CPP_METHOD_SIGNATURE(16), false>()
		)
	);
}


J2CPP_DEFINE_CLASS(java::net::Inet6Address,"java/net/Inet6Address")
J2CPP_DEFINE_METHOD(java::net::Inet6Address,0,"<init>","()V")
J2CPP_DEFINE_METHOD(java::net::Inet6Address,1,"getByAddress","(Ljava/lang/String;[BI)Ljava/net/Inet6Address;")
J2CPP_DEFINE_METHOD(java::net::Inet6Address,2,"getByAddress","(Ljava/lang/String;[BLjava/net/NetworkInterface;)Ljava/net/Inet6Address;")
J2CPP_DEFINE_METHOD(java::net::Inet6Address,3,"isMulticastAddress","()Z")
J2CPP_DEFINE_METHOD(java::net::Inet6Address,4,"isAnyLocalAddress","()Z")
J2CPP_DEFINE_METHOD(java::net::Inet6Address,5,"isLoopbackAddress","()Z")
J2CPP_DEFINE_METHOD(java::net::Inet6Address,6,"isLinkLocalAddress","()Z")
J2CPP_DEFINE_METHOD(java::net::Inet6Address,7,"isSiteLocalAddress","()Z")
J2CPP_DEFINE_METHOD(java::net::Inet6Address,8,"isMCGlobal","()Z")
J2CPP_DEFINE_METHOD(java::net::Inet6Address,9,"isMCNodeLocal","()Z")
J2CPP_DEFINE_METHOD(java::net::Inet6Address,10,"isMCLinkLocal","()Z")
J2CPP_DEFINE_METHOD(java::net::Inet6Address,11,"isMCSiteLocal","()Z")
J2CPP_DEFINE_METHOD(java::net::Inet6Address,12,"isMCOrgLocal","()Z")
J2CPP_DEFINE_METHOD(java::net::Inet6Address,13,"getScopeId","()I")
J2CPP_DEFINE_METHOD(java::net::Inet6Address,14,"getScopedInterface","()Ljava/net/NetworkInterface;")
J2CPP_DEFINE_METHOD(java::net::Inet6Address,15,"isIPv4CompatibleAddress","()Z")
J2CPP_DEFINE_METHOD(java::net::Inet6Address,16,"toString","()Ljava/lang/String;")

} //namespace j2cpp

#endif //J2CPP_JAVA_NET_INET6ADDRESS_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
