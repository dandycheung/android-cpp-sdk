/*================================================================================
  code generated by: java2cpp
  class: java.net.DatagramSocket
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_NET_DATAGRAMSOCKET_HPP_DECL
#define J2CPP_JAVA_NET_DATAGRAMSOCKET_HPP_DECL


namespace j2cpp { namespace java { namespace net { class SocketAddress; } } }
namespace j2cpp { namespace java { namespace net { class DatagramSocketImplFactory; } } }
namespace j2cpp { namespace java { namespace net { class InetAddress; } } }
namespace j2cpp { namespace java { namespace net { class DatagramPacket; } } }
namespace j2cpp { namespace java { namespace nio { namespace channels { class DatagramChannel; } } } }


#include <java/net/DatagramPacket.hpp>
#include <java/net/DatagramSocketImplFactory.hpp>
#include <java/net/InetAddress.hpp>
#include <java/net/SocketAddress.hpp>
#include <java/nio/channels/DatagramChannel.hpp>


namespace j2cpp {

namespace java { namespace net {

	class DatagramSocket;
	class DatagramSocket
		: public cpp_object<DatagramSocket>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_METHOD(12)
		J2CPP_DECLARE_METHOD(13)
		J2CPP_DECLARE_METHOD(14)
		J2CPP_DECLARE_METHOD(15)
		J2CPP_DECLARE_METHOD(16)
		J2CPP_DECLARE_METHOD(17)
		J2CPP_DECLARE_METHOD(18)
		J2CPP_DECLARE_METHOD(19)
		J2CPP_DECLARE_METHOD(20)
		J2CPP_DECLARE_METHOD(21)
		J2CPP_DECLARE_METHOD(22)
		J2CPP_DECLARE_METHOD(23)
		J2CPP_DECLARE_METHOD(24)
		J2CPP_DECLARE_METHOD(25)
		J2CPP_DECLARE_METHOD(26)
		J2CPP_DECLARE_METHOD(27)
		J2CPP_DECLARE_METHOD(28)
		J2CPP_DECLARE_METHOD(29)
		J2CPP_DECLARE_METHOD(30)
		J2CPP_DECLARE_METHOD(31)
		J2CPP_DECLARE_METHOD(32)
		J2CPP_DECLARE_METHOD(33)
		J2CPP_DECLARE_METHOD(34)

		DatagramSocket(jobject jobj)
		: cpp_object<DatagramSocket>(jobj)
		{
		}

		void close();
		void connect(local_ref< java::net::InetAddress > const&, cpp_int const&);
		void disconnect();
		local_ref< java::net::InetAddress > getInetAddress();
		local_ref< java::net::InetAddress > getLocalAddress();
		cpp_int getLocalPort();
		cpp_int getPort();
		cpp_int getReceiveBufferSize();
		cpp_int getSendBufferSize();
		cpp_int getSoTimeout();
		void receive(local_ref< java::net::DatagramPacket > const&);
		void send(local_ref< java::net::DatagramPacket > const&);
		void setSendBufferSize(cpp_int const&);
		void setReceiveBufferSize(cpp_int const&);
		void setSoTimeout(cpp_int const&);
		static void setDatagramSocketImplFactory(local_ref< java::net::DatagramSocketImplFactory > const&);
		void bind(local_ref< java::net::SocketAddress > const&);
		void connect(local_ref< java::net::SocketAddress > const&);
		cpp_boolean isBound();
		cpp_boolean isConnected();
		local_ref< java::net::SocketAddress > getRemoteSocketAddress();
		local_ref< java::net::SocketAddress > getLocalSocketAddress();
		void setReuseAddress(cpp_boolean const&);
		cpp_boolean getReuseAddress();
		void setBroadcast(cpp_boolean const&);
		cpp_boolean getBroadcast();
		void setTrafficClass(cpp_int const&);
		cpp_int getTrafficClass();
		cpp_boolean isClosed();
		local_ref< java::nio::channels::DatagramChannel > getChannel();
	}; //class DatagramSocket

} //namespace net
} //namespace java


} //namespace j2cpp

#endif //J2CPP_JAVA_NET_DATAGRAMSOCKET_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_NET_DATAGRAMSOCKET_HPP_IMPL
#define J2CPP_JAVA_NET_DATAGRAMSOCKET_HPP_IMPL

namespace j2cpp {


template <>
local_ref< java::net::DatagramSocket > create< java::net::DatagramSocket>()
{
	return local_ref< java::net::DatagramSocket >(
		environment::get().get_jenv()->NewObject(
			get_class<java::net::DatagramSocket::J2CPP_CLASS_NAME>(),
			get_method_id<java::net::DatagramSocket::J2CPP_CLASS_NAME, java::net::DatagramSocket::J2CPP_METHOD_NAME(0), java::net::DatagramSocket::J2CPP_METHOD_SIGNATURE(0), false>()
		)
	);
}

template <>
local_ref< java::net::DatagramSocket > create< java::net::DatagramSocket>(cpp_int const &a0)
{
	return local_ref< java::net::DatagramSocket >(
		environment::get().get_jenv()->NewObject(
			get_class<java::net::DatagramSocket::J2CPP_CLASS_NAME>(),
			get_method_id<java::net::DatagramSocket::J2CPP_CLASS_NAME, java::net::DatagramSocket::J2CPP_METHOD_NAME(1), java::net::DatagramSocket::J2CPP_METHOD_SIGNATURE(1), false>(),
			a0.get_jtype()
		)
	);
}

template <>
local_ref< java::net::DatagramSocket > create< java::net::DatagramSocket>(cpp_int const &a0, local_ref< java::net::InetAddress > const &a1)
{
	return local_ref< java::net::DatagramSocket >(
		environment::get().get_jenv()->NewObject(
			get_class<java::net::DatagramSocket::J2CPP_CLASS_NAME>(),
			get_method_id<java::net::DatagramSocket::J2CPP_CLASS_NAME, java::net::DatagramSocket::J2CPP_METHOD_NAME(2), java::net::DatagramSocket::J2CPP_METHOD_SIGNATURE(2), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

template <>
local_ref< java::net::DatagramSocket > create< java::net::DatagramSocket>(local_ref< java::net::DatagramSocketImpl > const &a0)
{
	return local_ref< java::net::DatagramSocket >(
		environment::get().get_jenv()->NewObject(
			get_class<java::net::DatagramSocket::J2CPP_CLASS_NAME>(),
			get_method_id<java::net::DatagramSocket::J2CPP_CLASS_NAME, java::net::DatagramSocket::J2CPP_METHOD_NAME(3), java::net::DatagramSocket::J2CPP_METHOD_SIGNATURE(3), false>(),
			a0.get_jtype()
		)
	);
}

template <>
local_ref< java::net::DatagramSocket > create< java::net::DatagramSocket>(local_ref< java::net::SocketAddress > const &a0)
{
	return local_ref< java::net::DatagramSocket >(
		environment::get().get_jenv()->NewObject(
			get_class<java::net::DatagramSocket::J2CPP_CLASS_NAME>(),
			get_method_id<java::net::DatagramSocket::J2CPP_CLASS_NAME, java::net::DatagramSocket::J2CPP_METHOD_NAME(4), java::net::DatagramSocket::J2CPP_METHOD_SIGNATURE(4), false>(),
			a0.get_jtype()
		)
	);
}

void java::net::DatagramSocket::close()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>()
		)
	);
}

void java::net::DatagramSocket::connect(local_ref< java::net::InetAddress > const &a0, cpp_int const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void java::net::DatagramSocket::disconnect()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(7), J2CPP_METHOD_SIGNATURE(7), false>()
		)
	);
}

local_ref< java::net::InetAddress > java::net::DatagramSocket::getInetAddress()
{
	return local_ref< java::net::InetAddress >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(8), J2CPP_METHOD_SIGNATURE(8), false>()
		)
	);
}

local_ref< java::net::InetAddress > java::net::DatagramSocket::getLocalAddress()
{
	return local_ref< java::net::InetAddress >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(9), J2CPP_METHOD_SIGNATURE(9), false>()
		)
	);
}

cpp_int java::net::DatagramSocket::getLocalPort()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(10), J2CPP_METHOD_SIGNATURE(10), false>()
		)
	);
}

cpp_int java::net::DatagramSocket::getPort()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(11), J2CPP_METHOD_SIGNATURE(11), false>()
		)
	);
}

cpp_int java::net::DatagramSocket::getReceiveBufferSize()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(12), J2CPP_METHOD_SIGNATURE(12), false>()
		)
	);
}

cpp_int java::net::DatagramSocket::getSendBufferSize()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(13), J2CPP_METHOD_SIGNATURE(13), false>()
		)
	);
}

cpp_int java::net::DatagramSocket::getSoTimeout()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(14), J2CPP_METHOD_SIGNATURE(14), false>()
		)
	);
}

void java::net::DatagramSocket::receive(local_ref< java::net::DatagramPacket > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(15), J2CPP_METHOD_SIGNATURE(15), false>(),
			a0.get_jtype()
		)
	);
}

void java::net::DatagramSocket::send(local_ref< java::net::DatagramPacket > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(16), J2CPP_METHOD_SIGNATURE(16), false>(),
			a0.get_jtype()
		)
	);
}

void java::net::DatagramSocket::setSendBufferSize(cpp_int const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(17), J2CPP_METHOD_SIGNATURE(17), false>(),
			a0.get_jtype()
		)
	);
}

void java::net::DatagramSocket::setReceiveBufferSize(cpp_int const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(18), J2CPP_METHOD_SIGNATURE(18), false>(),
			a0.get_jtype()
		)
	);
}

void java::net::DatagramSocket::setSoTimeout(cpp_int const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(19), J2CPP_METHOD_SIGNATURE(19), false>(),
			a0.get_jtype()
		)
	);
}

void java::net::DatagramSocket::setDatagramSocketImplFactory(local_ref< java::net::DatagramSocketImplFactory > const &a0)
{
	return void(
		environment::get().get_jenv()->CallStaticVoidMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(20), J2CPP_METHOD_SIGNATURE(20), true>(),
			a0.get_jtype()
		)
	);
}

void java::net::DatagramSocket::bind(local_ref< java::net::SocketAddress > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(21), J2CPP_METHOD_SIGNATURE(21), false>(),
			a0.get_jtype()
		)
	);
}

void java::net::DatagramSocket::connect(local_ref< java::net::SocketAddress > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(22), J2CPP_METHOD_SIGNATURE(22), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean java::net::DatagramSocket::isBound()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(23), J2CPP_METHOD_SIGNATURE(23), false>()
		)
	);
}

cpp_boolean java::net::DatagramSocket::isConnected()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(24), J2CPP_METHOD_SIGNATURE(24), false>()
		)
	);
}

local_ref< java::net::SocketAddress > java::net::DatagramSocket::getRemoteSocketAddress()
{
	return local_ref< java::net::SocketAddress >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(25), J2CPP_METHOD_SIGNATURE(25), false>()
		)
	);
}

local_ref< java::net::SocketAddress > java::net::DatagramSocket::getLocalSocketAddress()
{
	return local_ref< java::net::SocketAddress >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(26), J2CPP_METHOD_SIGNATURE(26), false>()
		)
	);
}

void java::net::DatagramSocket::setReuseAddress(cpp_boolean const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(27), J2CPP_METHOD_SIGNATURE(27), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean java::net::DatagramSocket::getReuseAddress()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(28), J2CPP_METHOD_SIGNATURE(28), false>()
		)
	);
}

void java::net::DatagramSocket::setBroadcast(cpp_boolean const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(29), J2CPP_METHOD_SIGNATURE(29), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean java::net::DatagramSocket::getBroadcast()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(30), J2CPP_METHOD_SIGNATURE(30), false>()
		)
	);
}

void java::net::DatagramSocket::setTrafficClass(cpp_int const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(31), J2CPP_METHOD_SIGNATURE(31), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int java::net::DatagramSocket::getTrafficClass()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(32), J2CPP_METHOD_SIGNATURE(32), false>()
		)
	);
}

cpp_boolean java::net::DatagramSocket::isClosed()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(33), J2CPP_METHOD_SIGNATURE(33), false>()
		)
	);
}

local_ref< java::nio::channels::DatagramChannel > java::net::DatagramSocket::getChannel()
{
	return local_ref< java::nio::channels::DatagramChannel >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(34), J2CPP_METHOD_SIGNATURE(34), false>()
		)
	);
}


J2CPP_DEFINE_CLASS(java::net::DatagramSocket,"java/net/DatagramSocket")
J2CPP_DEFINE_METHOD(java::net::DatagramSocket,0,"<init>","()V")
J2CPP_DEFINE_METHOD(java::net::DatagramSocket,1,"<init>","(I)V")
J2CPP_DEFINE_METHOD(java::net::DatagramSocket,2,"<init>","(ILjava/net/InetAddress;)V")
J2CPP_DEFINE_METHOD(java::net::DatagramSocket,3,"<init>","(Ljava/net/DatagramSocketImpl;)V")
J2CPP_DEFINE_METHOD(java::net::DatagramSocket,4,"<init>","(Ljava/net/SocketAddress;)V")
J2CPP_DEFINE_METHOD(java::net::DatagramSocket,5,"close","()V")
J2CPP_DEFINE_METHOD(java::net::DatagramSocket,6,"connect","(Ljava/net/InetAddress;I)V")
J2CPP_DEFINE_METHOD(java::net::DatagramSocket,7,"disconnect","()V")
J2CPP_DEFINE_METHOD(java::net::DatagramSocket,8,"getInetAddress","()Ljava/net/InetAddress;")
J2CPP_DEFINE_METHOD(java::net::DatagramSocket,9,"getLocalAddress","()Ljava/net/InetAddress;")
J2CPP_DEFINE_METHOD(java::net::DatagramSocket,10,"getLocalPort","()I")
J2CPP_DEFINE_METHOD(java::net::DatagramSocket,11,"getPort","()I")
J2CPP_DEFINE_METHOD(java::net::DatagramSocket,12,"getReceiveBufferSize","()I")
J2CPP_DEFINE_METHOD(java::net::DatagramSocket,13,"getSendBufferSize","()I")
J2CPP_DEFINE_METHOD(java::net::DatagramSocket,14,"getSoTimeout","()I")
J2CPP_DEFINE_METHOD(java::net::DatagramSocket,15,"receive","(Ljava/net/DatagramPacket;)V")
J2CPP_DEFINE_METHOD(java::net::DatagramSocket,16,"send","(Ljava/net/DatagramPacket;)V")
J2CPP_DEFINE_METHOD(java::net::DatagramSocket,17,"setSendBufferSize","(I)V")
J2CPP_DEFINE_METHOD(java::net::DatagramSocket,18,"setReceiveBufferSize","(I)V")
J2CPP_DEFINE_METHOD(java::net::DatagramSocket,19,"setSoTimeout","(I)V")
J2CPP_DEFINE_METHOD(java::net::DatagramSocket,20,"setDatagramSocketImplFactory","(Ljava/net/DatagramSocketImplFactory;)V")
J2CPP_DEFINE_METHOD(java::net::DatagramSocket,21,"bind","(Ljava/net/SocketAddress;)V")
J2CPP_DEFINE_METHOD(java::net::DatagramSocket,22,"connect","(Ljava/net/SocketAddress;)V")
J2CPP_DEFINE_METHOD(java::net::DatagramSocket,23,"isBound","()Z")
J2CPP_DEFINE_METHOD(java::net::DatagramSocket,24,"isConnected","()Z")
J2CPP_DEFINE_METHOD(java::net::DatagramSocket,25,"getRemoteSocketAddress","()Ljava/net/SocketAddress;")
J2CPP_DEFINE_METHOD(java::net::DatagramSocket,26,"getLocalSocketAddress","()Ljava/net/SocketAddress;")
J2CPP_DEFINE_METHOD(java::net::DatagramSocket,27,"setReuseAddress","(Z)V")
J2CPP_DEFINE_METHOD(java::net::DatagramSocket,28,"getReuseAddress","()Z")
J2CPP_DEFINE_METHOD(java::net::DatagramSocket,29,"setBroadcast","(Z)V")
J2CPP_DEFINE_METHOD(java::net::DatagramSocket,30,"getBroadcast","()Z")
J2CPP_DEFINE_METHOD(java::net::DatagramSocket,31,"setTrafficClass","(I)V")
J2CPP_DEFINE_METHOD(java::net::DatagramSocket,32,"getTrafficClass","()I")
J2CPP_DEFINE_METHOD(java::net::DatagramSocket,33,"isClosed","()Z")
J2CPP_DEFINE_METHOD(java::net::DatagramSocket,34,"getChannel","()Ljava/nio/channels/DatagramChannel;")

} //namespace j2cpp

#endif //J2CPP_JAVA_NET_DATAGRAMSOCKET_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
