/*================================================================================
  code generated by: java2cpp
  class: java.io.FileWriter
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_IO_FILEWRITER_HPP_DECL
#define J2CPP_JAVA_IO_FILEWRITER_HPP_DECL


namespace j2cpp { namespace java { namespace io { class File; } } }
namespace j2cpp { namespace java { namespace io { class FileDescriptor; } } }
namespace j2cpp { namespace java { namespace lang { class String; } } }


#include <java/io/File.hpp>
#include <java/io/FileDescriptor.hpp>
#include <java/lang/String.hpp>


namespace j2cpp {

namespace java { namespace io {

	class FileWriter;
	class FileWriter
		: public cpp_object<FileWriter>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)

		FileWriter(jobject jobj)
		: cpp_object<FileWriter>(jobj)
		{
		}

	}; //class FileWriter

} //namespace io
} //namespace java


} //namespace j2cpp

#endif //J2CPP_JAVA_IO_FILEWRITER_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_IO_FILEWRITER_HPP_IMPL
#define J2CPP_JAVA_IO_FILEWRITER_HPP_IMPL

namespace j2cpp {


template <>
local_ref< java::io::FileWriter > create< java::io::FileWriter>(local_ref< java::io::File > const &a0)
{
	return local_ref< java::io::FileWriter >(
		environment::get().get_jenv()->NewObject(
			get_class<java::io::FileWriter::J2CPP_CLASS_NAME>(),
			get_method_id<java::io::FileWriter::J2CPP_CLASS_NAME, java::io::FileWriter::J2CPP_METHOD_NAME(0), java::io::FileWriter::J2CPP_METHOD_SIGNATURE(0), false>(),
			a0.get_jtype()
		)
	);
}

template <>
local_ref< java::io::FileWriter > create< java::io::FileWriter>(local_ref< java::io::File > const &a0, cpp_boolean const &a1)
{
	return local_ref< java::io::FileWriter >(
		environment::get().get_jenv()->NewObject(
			get_class<java::io::FileWriter::J2CPP_CLASS_NAME>(),
			get_method_id<java::io::FileWriter::J2CPP_CLASS_NAME, java::io::FileWriter::J2CPP_METHOD_NAME(1), java::io::FileWriter::J2CPP_METHOD_SIGNATURE(1), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

template <>
local_ref< java::io::FileWriter > create< java::io::FileWriter>(local_ref< java::io::FileDescriptor > const &a0)
{
	return local_ref< java::io::FileWriter >(
		environment::get().get_jenv()->NewObject(
			get_class<java::io::FileWriter::J2CPP_CLASS_NAME>(),
			get_method_id<java::io::FileWriter::J2CPP_CLASS_NAME, java::io::FileWriter::J2CPP_METHOD_NAME(2), java::io::FileWriter::J2CPP_METHOD_SIGNATURE(2), false>(),
			a0.get_jtype()
		)
	);
}

template <>
local_ref< java::io::FileWriter > create< java::io::FileWriter>(local_ref< java::lang::String > const &a0)
{
	return local_ref< java::io::FileWriter >(
		environment::get().get_jenv()->NewObject(
			get_class<java::io::FileWriter::J2CPP_CLASS_NAME>(),
			get_method_id<java::io::FileWriter::J2CPP_CLASS_NAME, java::io::FileWriter::J2CPP_METHOD_NAME(3), java::io::FileWriter::J2CPP_METHOD_SIGNATURE(3), false>(),
			a0.get_jtype()
		)
	);
}

template <>
local_ref< java::io::FileWriter > create< java::io::FileWriter>(local_ref< java::lang::String > const &a0, cpp_boolean const &a1)
{
	return local_ref< java::io::FileWriter >(
		environment::get().get_jenv()->NewObject(
			get_class<java::io::FileWriter::J2CPP_CLASS_NAME>(),
			get_method_id<java::io::FileWriter::J2CPP_CLASS_NAME, java::io::FileWriter::J2CPP_METHOD_NAME(4), java::io::FileWriter::J2CPP_METHOD_SIGNATURE(4), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}


J2CPP_DEFINE_CLASS(java::io::FileWriter,"java/io/FileWriter")
J2CPP_DEFINE_METHOD(java::io::FileWriter,0,"<init>","(Ljava/io/File;)V")
J2CPP_DEFINE_METHOD(java::io::FileWriter,1,"<init>","(Ljava/io/File;Z)V")
J2CPP_DEFINE_METHOD(java::io::FileWriter,2,"<init>","(Ljava/io/FileDescriptor;)V")
J2CPP_DEFINE_METHOD(java::io::FileWriter,3,"<init>","(Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(java::io::FileWriter,4,"<init>","(Ljava/lang/String;Z)V")

} //namespace j2cpp

#endif //J2CPP_JAVA_IO_FILEWRITER_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
