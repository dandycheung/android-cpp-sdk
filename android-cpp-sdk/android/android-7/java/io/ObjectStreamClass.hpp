/*================================================================================
  code generated by: java2cpp
  class: java.io.ObjectStreamClass
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_IO_OBJECTSTREAMCLASS_HPP_DECL
#define J2CPP_JAVA_IO_OBJECTSTREAMCLASS_HPP_DECL


namespace j2cpp { namespace java { namespace io { class ObjectStreamField; } } }
namespace j2cpp { namespace java { namespace lang { class Class; } } }
namespace j2cpp { namespace java { namespace lang { class String; } } }


#include <java/io/ObjectStreamField.hpp>
#include <java/lang/Class.hpp>
#include <java/lang/String.hpp>


namespace j2cpp {

namespace java { namespace io {

	class ObjectStreamClass;
	class ObjectStreamClass
		: public cpp_object<ObjectStreamClass>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_FIELD(0)

		ObjectStreamClass(jobject jobj)
		: cpp_object<ObjectStreamClass>(jobj)
		{
		}

		local_ref< java::lang::Class > forClass();
		local_ref< java::io::ObjectStreamField > getField(local_ref< java::lang::String > const&);
		local_ref< cpp_object_array<java::io::ObjectStreamField, 1> > getFields();
		local_ref< java::lang::String > getName();
		cpp_long getSerialVersionUID();
		static local_ref< java::io::ObjectStreamClass > lookup(local_ref< java::lang::Class > const&);
		local_ref< java::lang::String > toString();

		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(0), J2CPP_FIELD_SIGNATURE(0), local_ref< cpp_object_array<java::io::ObjectStreamField, 1> > > NO_FIELDS;
	}; //class ObjectStreamClass

} //namespace io
} //namespace java


} //namespace j2cpp

#endif //J2CPP_JAVA_IO_OBJECTSTREAMCLASS_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_IO_OBJECTSTREAMCLASS_HPP_IMPL
#define J2CPP_JAVA_IO_OBJECTSTREAMCLASS_HPP_IMPL

namespace j2cpp {


template <>
local_ref< java::io::ObjectStreamClass > create< java::io::ObjectStreamClass>()
{
	return local_ref< java::io::ObjectStreamClass >(
		environment::get().get_jenv()->NewObject(
			get_class<java::io::ObjectStreamClass::J2CPP_CLASS_NAME>(),
			get_method_id<java::io::ObjectStreamClass::J2CPP_CLASS_NAME, java::io::ObjectStreamClass::J2CPP_METHOD_NAME(0), java::io::ObjectStreamClass::J2CPP_METHOD_SIGNATURE(0), false>()
		)
	);
}

local_ref< java::lang::Class > java::io::ObjectStreamClass::forClass()
{
	return local_ref< java::lang::Class >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), false>()
		)
	);
}

local_ref< java::io::ObjectStreamField > java::io::ObjectStreamClass::getField(local_ref< java::lang::String > const &a0)
{
	return local_ref< java::io::ObjectStreamField >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< cpp_object_array<java::io::ObjectStreamField, 1> > java::io::ObjectStreamClass::getFields()
{
	return local_ref< cpp_object_array<java::io::ObjectStreamField, 1> >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>()
		)
	);
}

local_ref< java::lang::String > java::io::ObjectStreamClass::getName()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>()
		)
	);
}

cpp_long java::io::ObjectStreamClass::getSerialVersionUID()
{
	return cpp_long(
		environment::get().get_jenv()->CallLongMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>()
		)
	);
}

local_ref< java::io::ObjectStreamClass > java::io::ObjectStreamClass::lookup(local_ref< java::lang::Class > const &a0)
{
	return local_ref< java::io::ObjectStreamClass >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), true>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::String > java::io::ObjectStreamClass::toString()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(7), J2CPP_METHOD_SIGNATURE(7), false>()
		)
	);
}


static_field<
	java::io::ObjectStreamClass::J2CPP_CLASS_NAME,
	java::io::ObjectStreamClass::J2CPP_FIELD_NAME(0),
	java::io::ObjectStreamClass::J2CPP_FIELD_SIGNATURE(0),
	local_ref< cpp_object_array<java::io::ObjectStreamField, 1> >
> java::io::ObjectStreamClass::NO_FIELDS;


J2CPP_DEFINE_CLASS(java::io::ObjectStreamClass,"java/io/ObjectStreamClass")
J2CPP_DEFINE_METHOD(java::io::ObjectStreamClass,0,"<init>","()V")
J2CPP_DEFINE_METHOD(java::io::ObjectStreamClass,1,"forClass","()Ljava/lang/Class;")
J2CPP_DEFINE_METHOD(java::io::ObjectStreamClass,2,"getField","(Ljava/lang/String;)Ljava/io/ObjectStreamField;")
J2CPP_DEFINE_METHOD(java::io::ObjectStreamClass,3,"getFields","()[java.io.ObjectStreamField")
J2CPP_DEFINE_METHOD(java::io::ObjectStreamClass,4,"getName","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::io::ObjectStreamClass,5,"getSerialVersionUID","()J")
J2CPP_DEFINE_METHOD(java::io::ObjectStreamClass,6,"lookup","(Ljava/lang/Class;)Ljava/io/ObjectStreamClass;")
J2CPP_DEFINE_METHOD(java::io::ObjectStreamClass,7,"toString","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::io::ObjectStreamClass,8,"<clinit>","()V")
J2CPP_DEFINE_FIELD(java::io::ObjectStreamClass,0,"NO_FIELDS","[java.io.ObjectStreamField")

} //namespace j2cpp

#endif //J2CPP_JAVA_IO_OBJECTSTREAMCLASS_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
