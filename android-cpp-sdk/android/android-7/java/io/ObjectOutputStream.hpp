/*================================================================================
  code generated by: java2cpp
  class: java.io.ObjectOutputStream
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_IO_OBJECTOUTPUTSTREAM_HPP_DECL
#define J2CPP_JAVA_IO_OBJECTOUTPUTSTREAM_HPP_DECL


namespace j2cpp { namespace java { namespace io { class ObjectOutput; } } }
namespace j2cpp { namespace java { namespace io { namespace ObjectOutputStream_ { class PutField; } } } }
namespace j2cpp { namespace java { namespace io { class OutputStream; } } }
namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace lang { class String; } } }


#include <java/io/ObjectOutput.hpp>
#include <java/io/ObjectOutputStream.hpp>
#include <java/io/OutputStream.hpp>
#include <java/lang/Object.hpp>
#include <java/lang/String.hpp>


namespace j2cpp {

namespace java { namespace io {

	class ObjectOutputStream;
	namespace ObjectOutputStream_ {

		class PutField;
		class PutField
			: public cpp_object<PutField>
		{
		public:

			J2CPP_DECLARE_CLASS

			J2CPP_DECLARE_METHOD(0)
			J2CPP_DECLARE_METHOD(1)
			J2CPP_DECLARE_METHOD(2)
			J2CPP_DECLARE_METHOD(3)
			J2CPP_DECLARE_METHOD(4)
			J2CPP_DECLARE_METHOD(5)
			J2CPP_DECLARE_METHOD(6)
			J2CPP_DECLARE_METHOD(7)
			J2CPP_DECLARE_METHOD(8)
			J2CPP_DECLARE_METHOD(9)
			J2CPP_DECLARE_METHOD(10)

			PutField(jobject jobj)
			: cpp_object<PutField>(jobj)
			{
			}

			void put(local_ref< java::lang::String > const&, cpp_boolean const&);
			void put(local_ref< java::lang::String > const&, cpp_char const&);
			void put(local_ref< java::lang::String > const&, cpp_byte const&);
			void put(local_ref< java::lang::String > const&, cpp_short const&);
			void put(local_ref< java::lang::String > const&, cpp_int const&);
			void put(local_ref< java::lang::String > const&, cpp_long const&);
			void put(local_ref< java::lang::String > const&, cpp_float const&);
			void put(local_ref< java::lang::String > const&, cpp_double const&);
			void put(local_ref< java::lang::String > const&, local_ref< java::lang::Object > const&);
			void write(local_ref< java::io::ObjectOutput > const&);
		}; //class PutField

	} //namespace ObjectOutputStream_

	class ObjectOutputStream
		: public cpp_object<ObjectOutputStream>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_METHOD(12)
		J2CPP_DECLARE_METHOD(13)
		J2CPP_DECLARE_METHOD(14)
		J2CPP_DECLARE_METHOD(15)
		J2CPP_DECLARE_METHOD(16)
		J2CPP_DECLARE_METHOD(17)
		J2CPP_DECLARE_METHOD(18)
		J2CPP_DECLARE_METHOD(19)
		J2CPP_DECLARE_METHOD(20)
		J2CPP_DECLARE_METHOD(21)
		J2CPP_DECLARE_METHOD(22)
		J2CPP_DECLARE_METHOD(23)
		J2CPP_DECLARE_METHOD(24)
		J2CPP_DECLARE_METHOD(25)
		J2CPP_DECLARE_METHOD(26)
		J2CPP_DECLARE_METHOD(27)
		J2CPP_DECLARE_METHOD(28)
		J2CPP_DECLARE_METHOD(29)
		J2CPP_DECLARE_METHOD(30)
		J2CPP_DECLARE_METHOD(31)
		J2CPP_DECLARE_METHOD(32)

		typedef ObjectOutputStream_::PutField PutField;

		ObjectOutputStream(jobject jobj)
		: cpp_object<ObjectOutputStream>(jobj)
		{
		}

		void close();
		void defaultWriteObject();
		void flush();
		local_ref< java::io::ObjectOutputStream_::PutField > putFields();
		void reset();
		void useProtocolVersion(cpp_int const&);
		void write(local_ref< cpp_byte_array<1> > const&);
		void write(local_ref< cpp_byte_array<1> > const&, cpp_int const&, cpp_int const&);
		void write(cpp_int const&);
		void writeBoolean(cpp_boolean const&);
		void writeByte(cpp_int const&);
		void writeBytes(local_ref< java::lang::String > const&);
		void writeChar(cpp_int const&);
		void writeChars(local_ref< java::lang::String > const&);
		void writeDouble(cpp_double const&);
		void writeFields();
		void writeFloat(cpp_float const&);
		void writeInt(cpp_int const&);
		void writeLong(cpp_long const&);
		void writeObject(local_ref< java::lang::Object > const&);
		void writeUnshared(local_ref< java::lang::Object > const&);
		void writeShort(cpp_int const&);
		void writeUTF(local_ref< java::lang::String > const&);
	}; //class ObjectOutputStream

} //namespace io
} //namespace java


} //namespace j2cpp

#endif //J2CPP_JAVA_IO_OBJECTOUTPUTSTREAM_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_IO_OBJECTOUTPUTSTREAM_HPP_IMPL
#define J2CPP_JAVA_IO_OBJECTOUTPUTSTREAM_HPP_IMPL

namespace j2cpp {



template <>
local_ref< java::io::ObjectOutputStream_::PutField > create< java::io::ObjectOutputStream_::PutField>()
{
	return local_ref< java::io::ObjectOutputStream_::PutField >(
		environment::get().get_jenv()->NewObject(
			get_class<java::io::ObjectOutputStream_::PutField::J2CPP_CLASS_NAME>(),
			get_method_id<java::io::ObjectOutputStream_::PutField::J2CPP_CLASS_NAME, java::io::ObjectOutputStream_::PutField::J2CPP_METHOD_NAME(0), java::io::ObjectOutputStream_::PutField::J2CPP_METHOD_SIGNATURE(0), false>()
		)
	);
}

void java::io::ObjectOutputStream_::PutField::put(local_ref< java::lang::String > const &a0, cpp_boolean const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void java::io::ObjectOutputStream_::PutField::put(local_ref< java::lang::String > const &a0, cpp_char const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void java::io::ObjectOutputStream_::PutField::put(local_ref< java::lang::String > const &a0, cpp_byte const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void java::io::ObjectOutputStream_::PutField::put(local_ref< java::lang::String > const &a0, cpp_short const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void java::io::ObjectOutputStream_::PutField::put(local_ref< java::lang::String > const &a0, cpp_int const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void java::io::ObjectOutputStream_::PutField::put(local_ref< java::lang::String > const &a0, cpp_long const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void java::io::ObjectOutputStream_::PutField::put(local_ref< java::lang::String > const &a0, cpp_float const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(7), J2CPP_METHOD_SIGNATURE(7), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void java::io::ObjectOutputStream_::PutField::put(local_ref< java::lang::String > const &a0, cpp_double const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(8), J2CPP_METHOD_SIGNATURE(8), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void java::io::ObjectOutputStream_::PutField::put(local_ref< java::lang::String > const &a0, local_ref< java::lang::Object > const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(9), J2CPP_METHOD_SIGNATURE(9), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void java::io::ObjectOutputStream_::PutField::write(local_ref< java::io::ObjectOutput > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(10), J2CPP_METHOD_SIGNATURE(10), false>(),
			a0.get_jtype()
		)
	);
}


J2CPP_DEFINE_CLASS(java::io::ObjectOutputStream_::PutField,"java/io/ObjectOutputStream$PutField")
J2CPP_DEFINE_METHOD(java::io::ObjectOutputStream_::PutField,0,"<init>","()V")
J2CPP_DEFINE_METHOD(java::io::ObjectOutputStream_::PutField,1,"put","(Ljava/lang/String;Z)V")
J2CPP_DEFINE_METHOD(java::io::ObjectOutputStream_::PutField,2,"put","(Ljava/lang/String;C)V")
J2CPP_DEFINE_METHOD(java::io::ObjectOutputStream_::PutField,3,"put","(Ljava/lang/String;B)V")
J2CPP_DEFINE_METHOD(java::io::ObjectOutputStream_::PutField,4,"put","(Ljava/lang/String;S)V")
J2CPP_DEFINE_METHOD(java::io::ObjectOutputStream_::PutField,5,"put","(Ljava/lang/String;I)V")
J2CPP_DEFINE_METHOD(java::io::ObjectOutputStream_::PutField,6,"put","(Ljava/lang/String;J)V")
J2CPP_DEFINE_METHOD(java::io::ObjectOutputStream_::PutField,7,"put","(Ljava/lang/String;F)V")
J2CPP_DEFINE_METHOD(java::io::ObjectOutputStream_::PutField,8,"put","(Ljava/lang/String;D)V")
J2CPP_DEFINE_METHOD(java::io::ObjectOutputStream_::PutField,9,"put","(Ljava/lang/String;Ljava/lang/Object;)V")
J2CPP_DEFINE_METHOD(java::io::ObjectOutputStream_::PutField,10,"write","(Ljava/io/ObjectOutput;)V")


template <>
local_ref< java::io::ObjectOutputStream > create< java::io::ObjectOutputStream>()
{
	return local_ref< java::io::ObjectOutputStream >(
		environment::get().get_jenv()->NewObject(
			get_class<java::io::ObjectOutputStream::J2CPP_CLASS_NAME>(),
			get_method_id<java::io::ObjectOutputStream::J2CPP_CLASS_NAME, java::io::ObjectOutputStream::J2CPP_METHOD_NAME(0), java::io::ObjectOutputStream::J2CPP_METHOD_SIGNATURE(0), false>()
		)
	);
}

template <>
local_ref< java::io::ObjectOutputStream > create< java::io::ObjectOutputStream>(local_ref< java::io::OutputStream > const &a0)
{
	return local_ref< java::io::ObjectOutputStream >(
		environment::get().get_jenv()->NewObject(
			get_class<java::io::ObjectOutputStream::J2CPP_CLASS_NAME>(),
			get_method_id<java::io::ObjectOutputStream::J2CPP_CLASS_NAME, java::io::ObjectOutputStream::J2CPP_METHOD_NAME(1), java::io::ObjectOutputStream::J2CPP_METHOD_SIGNATURE(1), false>(),
			a0.get_jtype()
		)
	);
}



void java::io::ObjectOutputStream::close()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>()
		)
	);
}

void java::io::ObjectOutputStream::defaultWriteObject()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>()
		)
	);
}



void java::io::ObjectOutputStream::flush()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(8), J2CPP_METHOD_SIGNATURE(8), false>()
		)
	);
}

local_ref< java::io::ObjectOutputStream_::PutField > java::io::ObjectOutputStream::putFields()
{
	return local_ref< java::io::ObjectOutputStream_::PutField >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(9), J2CPP_METHOD_SIGNATURE(9), false>()
		)
	);
}


void java::io::ObjectOutputStream::reset()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(11), J2CPP_METHOD_SIGNATURE(11), false>()
		)
	);
}

void java::io::ObjectOutputStream::useProtocolVersion(cpp_int const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(12), J2CPP_METHOD_SIGNATURE(12), false>(),
			a0.get_jtype()
		)
	);
}

void java::io::ObjectOutputStream::write(local_ref< cpp_byte_array<1> > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(13), J2CPP_METHOD_SIGNATURE(13), false>(),
			a0.get_jtype()
		)
	);
}

void java::io::ObjectOutputStream::write(local_ref< cpp_byte_array<1> > const &a0, cpp_int const &a1, cpp_int const &a2)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(14), J2CPP_METHOD_SIGNATURE(14), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

void java::io::ObjectOutputStream::write(cpp_int const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(15), J2CPP_METHOD_SIGNATURE(15), false>(),
			a0.get_jtype()
		)
	);
}

void java::io::ObjectOutputStream::writeBoolean(cpp_boolean const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(16), J2CPP_METHOD_SIGNATURE(16), false>(),
			a0.get_jtype()
		)
	);
}

void java::io::ObjectOutputStream::writeByte(cpp_int const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(17), J2CPP_METHOD_SIGNATURE(17), false>(),
			a0.get_jtype()
		)
	);
}

void java::io::ObjectOutputStream::writeBytes(local_ref< java::lang::String > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(18), J2CPP_METHOD_SIGNATURE(18), false>(),
			a0.get_jtype()
		)
	);
}

void java::io::ObjectOutputStream::writeChar(cpp_int const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(19), J2CPP_METHOD_SIGNATURE(19), false>(),
			a0.get_jtype()
		)
	);
}

void java::io::ObjectOutputStream::writeChars(local_ref< java::lang::String > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(20), J2CPP_METHOD_SIGNATURE(20), false>(),
			a0.get_jtype()
		)
	);
}

void java::io::ObjectOutputStream::writeDouble(cpp_double const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(21), J2CPP_METHOD_SIGNATURE(21), false>(),
			a0.get_jtype()
		)
	);
}

void java::io::ObjectOutputStream::writeFields()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(22), J2CPP_METHOD_SIGNATURE(22), false>()
		)
	);
}

void java::io::ObjectOutputStream::writeFloat(cpp_float const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(23), J2CPP_METHOD_SIGNATURE(23), false>(),
			a0.get_jtype()
		)
	);
}

void java::io::ObjectOutputStream::writeInt(cpp_int const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(24), J2CPP_METHOD_SIGNATURE(24), false>(),
			a0.get_jtype()
		)
	);
}

void java::io::ObjectOutputStream::writeLong(cpp_long const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(25), J2CPP_METHOD_SIGNATURE(25), false>(),
			a0.get_jtype()
		)
	);
}


void java::io::ObjectOutputStream::writeObject(local_ref< java::lang::Object > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(27), J2CPP_METHOD_SIGNATURE(27), false>(),
			a0.get_jtype()
		)
	);
}

void java::io::ObjectOutputStream::writeUnshared(local_ref< java::lang::Object > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(28), J2CPP_METHOD_SIGNATURE(28), false>(),
			a0.get_jtype()
		)
	);
}


void java::io::ObjectOutputStream::writeShort(cpp_int const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(30), J2CPP_METHOD_SIGNATURE(30), false>(),
			a0.get_jtype()
		)
	);
}


void java::io::ObjectOutputStream::writeUTF(local_ref< java::lang::String > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(32), J2CPP_METHOD_SIGNATURE(32), false>(),
			a0.get_jtype()
		)
	);
}


J2CPP_DEFINE_CLASS(java::io::ObjectOutputStream,"java/io/ObjectOutputStream")
J2CPP_DEFINE_METHOD(java::io::ObjectOutputStream,0,"<init>","()V")
J2CPP_DEFINE_METHOD(java::io::ObjectOutputStream,1,"<init>","(Ljava/io/OutputStream;)V")
J2CPP_DEFINE_METHOD(java::io::ObjectOutputStream,2,"annotateClass","(Ljava/lang/Class;)V")
J2CPP_DEFINE_METHOD(java::io::ObjectOutputStream,3,"annotateProxyClass","(Ljava/lang/Class;)V")
J2CPP_DEFINE_METHOD(java::io::ObjectOutputStream,4,"close","()V")
J2CPP_DEFINE_METHOD(java::io::ObjectOutputStream,5,"defaultWriteObject","()V")
J2CPP_DEFINE_METHOD(java::io::ObjectOutputStream,6,"drain","()V")
J2CPP_DEFINE_METHOD(java::io::ObjectOutputStream,7,"enableReplaceObject","(Z)Z")
J2CPP_DEFINE_METHOD(java::io::ObjectOutputStream,8,"flush","()V")
J2CPP_DEFINE_METHOD(java::io::ObjectOutputStream,9,"putFields","()Ljava/io/ObjectOutputStream$PutField;")
J2CPP_DEFINE_METHOD(java::io::ObjectOutputStream,10,"replaceObject","(Ljava/lang/Object;)Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(java::io::ObjectOutputStream,11,"reset","()V")
J2CPP_DEFINE_METHOD(java::io::ObjectOutputStream,12,"useProtocolVersion","(I)V")
J2CPP_DEFINE_METHOD(java::io::ObjectOutputStream,13,"write","([B)V")
J2CPP_DEFINE_METHOD(java::io::ObjectOutputStream,14,"write","([BII)V")
J2CPP_DEFINE_METHOD(java::io::ObjectOutputStream,15,"write","(I)V")
J2CPP_DEFINE_METHOD(java::io::ObjectOutputStream,16,"writeBoolean","(Z)V")
J2CPP_DEFINE_METHOD(java::io::ObjectOutputStream,17,"writeByte","(I)V")
J2CPP_DEFINE_METHOD(java::io::ObjectOutputStream,18,"writeBytes","(Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(java::io::ObjectOutputStream,19,"writeChar","(I)V")
J2CPP_DEFINE_METHOD(java::io::ObjectOutputStream,20,"writeChars","(Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(java::io::ObjectOutputStream,21,"writeDouble","(D)V")
J2CPP_DEFINE_METHOD(java::io::ObjectOutputStream,22,"writeFields","()V")
J2CPP_DEFINE_METHOD(java::io::ObjectOutputStream,23,"writeFloat","(F)V")
J2CPP_DEFINE_METHOD(java::io::ObjectOutputStream,24,"writeInt","(I)V")
J2CPP_DEFINE_METHOD(java::io::ObjectOutputStream,25,"writeLong","(J)V")
J2CPP_DEFINE_METHOD(java::io::ObjectOutputStream,26,"writeClassDescriptor","(Ljava/io/ObjectStreamClass;)V")
J2CPP_DEFINE_METHOD(java::io::ObjectOutputStream,27,"writeObject","(Ljava/lang/Object;)V")
J2CPP_DEFINE_METHOD(java::io::ObjectOutputStream,28,"writeUnshared","(Ljava/lang/Object;)V")
J2CPP_DEFINE_METHOD(java::io::ObjectOutputStream,29,"writeObjectOverride","(Ljava/lang/Object;)V")
J2CPP_DEFINE_METHOD(java::io::ObjectOutputStream,30,"writeShort","(I)V")
J2CPP_DEFINE_METHOD(java::io::ObjectOutputStream,31,"writeStreamHeader","()V")
J2CPP_DEFINE_METHOD(java::io::ObjectOutputStream,32,"writeUTF","(Ljava/lang/String;)V")

} //namespace j2cpp

#endif //J2CPP_JAVA_IO_OBJECTOUTPUTSTREAM_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
