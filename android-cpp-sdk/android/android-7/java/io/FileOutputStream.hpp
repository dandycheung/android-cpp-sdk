/*================================================================================
  code generated by: java2cpp
  class: java.io.FileOutputStream
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_IO_FILEOUTPUTSTREAM_HPP_DECL
#define J2CPP_JAVA_IO_FILEOUTPUTSTREAM_HPP_DECL


namespace j2cpp { namespace java { namespace io { class File; } } }
namespace j2cpp { namespace java { namespace io { class FileDescriptor; } } }
namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace nio { namespace channels { class FileChannel; } } } }


#include <java/io/File.hpp>
#include <java/io/FileDescriptor.hpp>
#include <java/lang/String.hpp>
#include <java/nio/channels/FileChannel.hpp>


namespace j2cpp {

namespace java { namespace io {

	class FileOutputStream;
	class FileOutputStream
		: public cpp_object<FileOutputStream>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)

		FileOutputStream(jobject jobj)
		: cpp_object<FileOutputStream>(jobj)
		{
		}

		void close();
		local_ref< java::nio::channels::FileChannel > getChannel();
		local_ref< java::io::FileDescriptor > getFD();
		void write(local_ref< cpp_byte_array<1> > const&);
		void write(local_ref< cpp_byte_array<1> > const&, cpp_int const&, cpp_int const&);
		void write(cpp_int const&);
	}; //class FileOutputStream

} //namespace io
} //namespace java


} //namespace j2cpp

#endif //J2CPP_JAVA_IO_FILEOUTPUTSTREAM_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_IO_FILEOUTPUTSTREAM_HPP_IMPL
#define J2CPP_JAVA_IO_FILEOUTPUTSTREAM_HPP_IMPL

namespace j2cpp {


template <>
local_ref< java::io::FileOutputStream > create< java::io::FileOutputStream>(local_ref< java::io::File > const &a0)
{
	return local_ref< java::io::FileOutputStream >(
		environment::get().get_jenv()->NewObject(
			get_class<java::io::FileOutputStream::J2CPP_CLASS_NAME>(),
			get_method_id<java::io::FileOutputStream::J2CPP_CLASS_NAME, java::io::FileOutputStream::J2CPP_METHOD_NAME(0), java::io::FileOutputStream::J2CPP_METHOD_SIGNATURE(0), false>(),
			a0.get_jtype()
		)
	);
}

template <>
local_ref< java::io::FileOutputStream > create< java::io::FileOutputStream>(local_ref< java::io::File > const &a0, cpp_boolean const &a1)
{
	return local_ref< java::io::FileOutputStream >(
		environment::get().get_jenv()->NewObject(
			get_class<java::io::FileOutputStream::J2CPP_CLASS_NAME>(),
			get_method_id<java::io::FileOutputStream::J2CPP_CLASS_NAME, java::io::FileOutputStream::J2CPP_METHOD_NAME(1), java::io::FileOutputStream::J2CPP_METHOD_SIGNATURE(1), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

template <>
local_ref< java::io::FileOutputStream > create< java::io::FileOutputStream>(local_ref< java::io::FileDescriptor > const &a0)
{
	return local_ref< java::io::FileOutputStream >(
		environment::get().get_jenv()->NewObject(
			get_class<java::io::FileOutputStream::J2CPP_CLASS_NAME>(),
			get_method_id<java::io::FileOutputStream::J2CPP_CLASS_NAME, java::io::FileOutputStream::J2CPP_METHOD_NAME(2), java::io::FileOutputStream::J2CPP_METHOD_SIGNATURE(2), false>(),
			a0.get_jtype()
		)
	);
}

template <>
local_ref< java::io::FileOutputStream > create< java::io::FileOutputStream>(local_ref< java::lang::String > const &a0)
{
	return local_ref< java::io::FileOutputStream >(
		environment::get().get_jenv()->NewObject(
			get_class<java::io::FileOutputStream::J2CPP_CLASS_NAME>(),
			get_method_id<java::io::FileOutputStream::J2CPP_CLASS_NAME, java::io::FileOutputStream::J2CPP_METHOD_NAME(3), java::io::FileOutputStream::J2CPP_METHOD_SIGNATURE(3), false>(),
			a0.get_jtype()
		)
	);
}

template <>
local_ref< java::io::FileOutputStream > create< java::io::FileOutputStream>(local_ref< java::lang::String > const &a0, cpp_boolean const &a1)
{
	return local_ref< java::io::FileOutputStream >(
		environment::get().get_jenv()->NewObject(
			get_class<java::io::FileOutputStream::J2CPP_CLASS_NAME>(),
			get_method_id<java::io::FileOutputStream::J2CPP_CLASS_NAME, java::io::FileOutputStream::J2CPP_METHOD_NAME(4), java::io::FileOutputStream::J2CPP_METHOD_SIGNATURE(4), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void java::io::FileOutputStream::close()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>()
		)
	);
}


local_ref< java::nio::channels::FileChannel > java::io::FileOutputStream::getChannel()
{
	return local_ref< java::nio::channels::FileChannel >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(7), J2CPP_METHOD_SIGNATURE(7), false>()
		)
	);
}

local_ref< java::io::FileDescriptor > java::io::FileOutputStream::getFD()
{
	return local_ref< java::io::FileDescriptor >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(8), J2CPP_METHOD_SIGNATURE(8), false>()
		)
	);
}

void java::io::FileOutputStream::write(local_ref< cpp_byte_array<1> > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(9), J2CPP_METHOD_SIGNATURE(9), false>(),
			a0.get_jtype()
		)
	);
}

void java::io::FileOutputStream::write(local_ref< cpp_byte_array<1> > const &a0, cpp_int const &a1, cpp_int const &a2)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(10), J2CPP_METHOD_SIGNATURE(10), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

void java::io::FileOutputStream::write(cpp_int const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(11), J2CPP_METHOD_SIGNATURE(11), false>(),
			a0.get_jtype()
		)
	);
}


J2CPP_DEFINE_CLASS(java::io::FileOutputStream,"java/io/FileOutputStream")
J2CPP_DEFINE_METHOD(java::io::FileOutputStream,0,"<init>","(Ljava/io/File;)V")
J2CPP_DEFINE_METHOD(java::io::FileOutputStream,1,"<init>","(Ljava/io/File;Z)V")
J2CPP_DEFINE_METHOD(java::io::FileOutputStream,2,"<init>","(Ljava/io/FileDescriptor;)V")
J2CPP_DEFINE_METHOD(java::io::FileOutputStream,3,"<init>","(Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(java::io::FileOutputStream,4,"<init>","(Ljava/lang/String;Z)V")
J2CPP_DEFINE_METHOD(java::io::FileOutputStream,5,"close","()V")
J2CPP_DEFINE_METHOD(java::io::FileOutputStream,6,"finalize","()V")
J2CPP_DEFINE_METHOD(java::io::FileOutputStream,7,"getChannel","()Ljava/nio/channels/FileChannel;")
J2CPP_DEFINE_METHOD(java::io::FileOutputStream,8,"getFD","()Ljava/io/FileDescriptor;")
J2CPP_DEFINE_METHOD(java::io::FileOutputStream,9,"write","([B)V")
J2CPP_DEFINE_METHOD(java::io::FileOutputStream,10,"write","([BII)V")
J2CPP_DEFINE_METHOD(java::io::FileOutputStream,11,"write","(I)V")

} //namespace j2cpp

#endif //J2CPP_JAVA_IO_FILEOUTPUTSTREAM_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
