/*================================================================================
  code generated by: java2cpp
  class: java.security.cert.Certificate
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_SECURITY_CERT_CERTIFICATE_HPP_DECL
#define J2CPP_JAVA_SECURITY_CERT_CERTIFICATE_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace security { class PublicKey; } } }


#include <java/lang/Object.hpp>
#include <java/lang/String.hpp>
#include <java/security/PublicKey.hpp>


namespace j2cpp {

namespace java { namespace security { namespace cert {

	class Certificate;
	namespace Certificate_ {

		class CertificateRep;
		class CertificateRep
			: public cpp_object<CertificateRep>
		{
		public:

			J2CPP_DECLARE_CLASS

			J2CPP_DECLARE_METHOD(0)
			J2CPP_DECLARE_METHOD(1)

			CertificateRep(jobject jobj)
			: cpp_object<CertificateRep>(jobj)
			{
			}

		}; //class CertificateRep

	} //namespace Certificate_

	class Certificate
		: public cpp_object<Certificate>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)

		typedef Certificate_::CertificateRep CertificateRep;

		Certificate(jobject jobj)
		: cpp_object<Certificate>(jobj)
		{
		}

		local_ref< java::lang::String > getType();
		cpp_boolean equals(local_ref< java::lang::Object > const&);
		cpp_int hashCode();
		local_ref< cpp_byte_array<1> > getEncoded();
		void verify(local_ref< java::security::PublicKey > const&);
		void verify(local_ref< java::security::PublicKey > const&, local_ref< java::lang::String > const&);
		local_ref< java::lang::String > toString();
		local_ref< java::security::PublicKey > getPublicKey();
	}; //class Certificate

} //namespace cert
} //namespace security
} //namespace java


} //namespace j2cpp

#endif //J2CPP_JAVA_SECURITY_CERT_CERTIFICATE_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_SECURITY_CERT_CERTIFICATE_HPP_IMPL
#define J2CPP_JAVA_SECURITY_CERT_CERTIFICATE_HPP_IMPL

namespace j2cpp {



template <>
local_ref< java::security::cert::Certificate_::CertificateRep > create< java::security::cert::Certificate_::CertificateRep>(local_ref< java::lang::String > const &a0, local_ref< cpp_byte_array<1> > const &a1)
{
	return local_ref< java::security::cert::Certificate_::CertificateRep >(
		environment::get().get_jenv()->NewObject(
			get_class<java::security::cert::Certificate_::CertificateRep::J2CPP_CLASS_NAME>(),
			get_method_id<java::security::cert::Certificate_::CertificateRep::J2CPP_CLASS_NAME, java::security::cert::Certificate_::CertificateRep::J2CPP_METHOD_NAME(0), java::security::cert::Certificate_::CertificateRep::J2CPP_METHOD_SIGNATURE(0), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}



J2CPP_DEFINE_CLASS(java::security::cert::Certificate_::CertificateRep,"java/security/cert/Certificate$CertificateRep")
J2CPP_DEFINE_METHOD(java::security::cert::Certificate_::CertificateRep,0,"<init>","(Ljava/lang/String;[B)V")
J2CPP_DEFINE_METHOD(java::security::cert::Certificate_::CertificateRep,1,"readResolve","()Ljava/lang/Object;")


template <>
local_ref< java::security::cert::Certificate > create< java::security::cert::Certificate>(local_ref< java::lang::String > const &a0)
{
	return local_ref< java::security::cert::Certificate >(
		environment::get().get_jenv()->NewObject(
			get_class<java::security::cert::Certificate::J2CPP_CLASS_NAME>(),
			get_method_id<java::security::cert::Certificate::J2CPP_CLASS_NAME, java::security::cert::Certificate::J2CPP_METHOD_NAME(0), java::security::cert::Certificate::J2CPP_METHOD_SIGNATURE(0), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::String > java::security::cert::Certificate::getType()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), false>()
		)
	);
}

cpp_boolean java::security::cert::Certificate::equals(local_ref< java::lang::Object > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int java::security::cert::Certificate::hashCode()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>()
		)
	);
}

local_ref< cpp_byte_array<1> > java::security::cert::Certificate::getEncoded()
{
	return local_ref< cpp_byte_array<1> >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>()
		)
	);
}

void java::security::cert::Certificate::verify(local_ref< java::security::PublicKey > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>(),
			a0.get_jtype()
		)
	);
}

void java::security::cert::Certificate::verify(local_ref< java::security::PublicKey > const &a0, local_ref< java::lang::String > const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< java::lang::String > java::security::cert::Certificate::toString()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(7), J2CPP_METHOD_SIGNATURE(7), false>()
		)
	);
}

local_ref< java::security::PublicKey > java::security::cert::Certificate::getPublicKey()
{
	return local_ref< java::security::PublicKey >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(8), J2CPP_METHOD_SIGNATURE(8), false>()
		)
	);
}



J2CPP_DEFINE_CLASS(java::security::cert::Certificate,"java/security/cert/Certificate")
J2CPP_DEFINE_METHOD(java::security::cert::Certificate,0,"<init>","(Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(java::security::cert::Certificate,1,"getType","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::security::cert::Certificate,2,"equals","(Ljava/lang/Object;)Z")
J2CPP_DEFINE_METHOD(java::security::cert::Certificate,3,"hashCode","()I")
J2CPP_DEFINE_METHOD(java::security::cert::Certificate,4,"getEncoded","()[B")
J2CPP_DEFINE_METHOD(java::security::cert::Certificate,5,"verify","(Ljava/security/PublicKey;)V")
J2CPP_DEFINE_METHOD(java::security::cert::Certificate,6,"verify","(Ljava/security/PublicKey;Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(java::security::cert::Certificate,7,"toString","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::security::cert::Certificate,8,"getPublicKey","()Ljava/security/PublicKey;")
J2CPP_DEFINE_METHOD(java::security::cert::Certificate,9,"writeReplace","()Ljava/lang/Object;")

} //namespace j2cpp

#endif //J2CPP_JAVA_SECURITY_CERT_CERTIFICATE_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
