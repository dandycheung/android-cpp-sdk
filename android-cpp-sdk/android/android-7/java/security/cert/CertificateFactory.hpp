/*================================================================================
  code generated by: java2cpp
  class: java.security.cert.CertificateFactory
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_SECURITY_CERT_CERTIFICATEFACTORY_HPP_DECL
#define J2CPP_JAVA_SECURITY_CERT_CERTIFICATEFACTORY_HPP_DECL


namespace j2cpp { namespace java { namespace io { class InputStream; } } }
namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace security { class Provider; } } }
namespace j2cpp { namespace java { namespace security { namespace cert { class CRL; } } } }
namespace j2cpp { namespace java { namespace security { namespace cert { class CertPath; } } } }
namespace j2cpp { namespace java { namespace security { namespace cert { class Certificate; } } } }
namespace j2cpp { namespace java { namespace util { class Iterator; } } }
namespace j2cpp { namespace java { namespace util { class Collection; } } }
namespace j2cpp { namespace java { namespace util { class List; } } }


#include <java/io/InputStream.hpp>
#include <java/lang/String.hpp>
#include <java/security/Provider.hpp>
#include <java/security/cert/CRL.hpp>
#include <java/security/cert/CertPath.hpp>
#include <java/security/cert/Certificate.hpp>
#include <java/util/Collection.hpp>
#include <java/util/Iterator.hpp>
#include <java/util/List.hpp>


namespace j2cpp {

namespace java { namespace security { namespace cert {

	class CertificateFactory;
	class CertificateFactory
		: public cpp_object<CertificateFactory>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_METHOD(12)
		J2CPP_DECLARE_METHOD(13)

		CertificateFactory(jobject jobj)
		: cpp_object<CertificateFactory>(jobj)
		{
		}

		static local_ref< java::security::cert::CertificateFactory > getInstance(local_ref< java::lang::String > const&);
		static local_ref< java::security::cert::CertificateFactory > getInstance(local_ref< java::lang::String > const&, local_ref< java::lang::String > const&);
		static local_ref< java::security::cert::CertificateFactory > getInstance(local_ref< java::lang::String > const&, local_ref< java::security::Provider > const&);
		local_ref< java::security::Provider > getProvider();
		local_ref< java::lang::String > getType();
		local_ref< java::security::cert::Certificate > generateCertificate(local_ref< java::io::InputStream > const&);
		local_ref< java::util::Iterator > getCertPathEncodings();
		local_ref< java::security::cert::CertPath > generateCertPath(local_ref< java::io::InputStream > const&);
		local_ref< java::security::cert::CertPath > generateCertPath(local_ref< java::io::InputStream > const&, local_ref< java::lang::String > const&);
		local_ref< java::security::cert::CertPath > generateCertPath(local_ref< java::util::List > const&);
		local_ref< java::util::Collection > generateCertificates(local_ref< java::io::InputStream > const&);
		local_ref< java::security::cert::CRL > generateCRL(local_ref< java::io::InputStream > const&);
		local_ref< java::util::Collection > generateCRLs(local_ref< java::io::InputStream > const&);
	}; //class CertificateFactory

} //namespace cert
} //namespace security
} //namespace java


} //namespace j2cpp

#endif //J2CPP_JAVA_SECURITY_CERT_CERTIFICATEFACTORY_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_SECURITY_CERT_CERTIFICATEFACTORY_HPP_IMPL
#define J2CPP_JAVA_SECURITY_CERT_CERTIFICATEFACTORY_HPP_IMPL

namespace j2cpp {


template <>
local_ref< java::security::cert::CertificateFactory > create< java::security::cert::CertificateFactory>(local_ref< java::security::cert::CertificateFactorySpi > const &a0, local_ref< java::security::Provider > const &a1, local_ref< java::lang::String > const &a2)
{
	return local_ref< java::security::cert::CertificateFactory >(
		environment::get().get_jenv()->NewObject(
			get_class<java::security::cert::CertificateFactory::J2CPP_CLASS_NAME>(),
			get_method_id<java::security::cert::CertificateFactory::J2CPP_CLASS_NAME, java::security::cert::CertificateFactory::J2CPP_METHOD_NAME(0), java::security::cert::CertificateFactory::J2CPP_METHOD_SIGNATURE(0), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

local_ref< java::security::cert::CertificateFactory > java::security::cert::CertificateFactory::getInstance(local_ref< java::lang::String > const &a0)
{
	return local_ref< java::security::cert::CertificateFactory >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), true>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::security::cert::CertificateFactory > java::security::cert::CertificateFactory::getInstance(local_ref< java::lang::String > const &a0, local_ref< java::lang::String > const &a1)
{
	return local_ref< java::security::cert::CertificateFactory >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), true>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< java::security::cert::CertificateFactory > java::security::cert::CertificateFactory::getInstance(local_ref< java::lang::String > const &a0, local_ref< java::security::Provider > const &a1)
{
	return local_ref< java::security::cert::CertificateFactory >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), true>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< java::security::Provider > java::security::cert::CertificateFactory::getProvider()
{
	return local_ref< java::security::Provider >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>()
		)
	);
}

local_ref< java::lang::String > java::security::cert::CertificateFactory::getType()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>()
		)
	);
}

local_ref< java::security::cert::Certificate > java::security::cert::CertificateFactory::generateCertificate(local_ref< java::io::InputStream > const &a0)
{
	return local_ref< java::security::cert::Certificate >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::util::Iterator > java::security::cert::CertificateFactory::getCertPathEncodings()
{
	return local_ref< java::util::Iterator >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(7), J2CPP_METHOD_SIGNATURE(7), false>()
		)
	);
}

local_ref< java::security::cert::CertPath > java::security::cert::CertificateFactory::generateCertPath(local_ref< java::io::InputStream > const &a0)
{
	return local_ref< java::security::cert::CertPath >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(8), J2CPP_METHOD_SIGNATURE(8), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::security::cert::CertPath > java::security::cert::CertificateFactory::generateCertPath(local_ref< java::io::InputStream > const &a0, local_ref< java::lang::String > const &a1)
{
	return local_ref< java::security::cert::CertPath >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(9), J2CPP_METHOD_SIGNATURE(9), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< java::security::cert::CertPath > java::security::cert::CertificateFactory::generateCertPath(local_ref< java::util::List > const &a0)
{
	return local_ref< java::security::cert::CertPath >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(10), J2CPP_METHOD_SIGNATURE(10), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::util::Collection > java::security::cert::CertificateFactory::generateCertificates(local_ref< java::io::InputStream > const &a0)
{
	return local_ref< java::util::Collection >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(11), J2CPP_METHOD_SIGNATURE(11), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::security::cert::CRL > java::security::cert::CertificateFactory::generateCRL(local_ref< java::io::InputStream > const &a0)
{
	return local_ref< java::security::cert::CRL >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(12), J2CPP_METHOD_SIGNATURE(12), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::util::Collection > java::security::cert::CertificateFactory::generateCRLs(local_ref< java::io::InputStream > const &a0)
{
	return local_ref< java::util::Collection >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(13), J2CPP_METHOD_SIGNATURE(13), false>(),
			a0.get_jtype()
		)
	);
}


J2CPP_DEFINE_CLASS(java::security::cert::CertificateFactory,"java/security/cert/CertificateFactory")
J2CPP_DEFINE_METHOD(java::security::cert::CertificateFactory,0,"<init>","(Ljava/security/cert/CertificateFactorySpi;Ljava/security/Provider;Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(java::security::cert::CertificateFactory,1,"getInstance","(Ljava/lang/String;)Ljava/security/cert/CertificateFactory;")
J2CPP_DEFINE_METHOD(java::security::cert::CertificateFactory,2,"getInstance","(Ljava/lang/String;Ljava/lang/String;)Ljava/security/cert/CertificateFactory;")
J2CPP_DEFINE_METHOD(java::security::cert::CertificateFactory,3,"getInstance","(Ljava/lang/String;Ljava/security/Provider;)Ljava/security/cert/CertificateFactory;")
J2CPP_DEFINE_METHOD(java::security::cert::CertificateFactory,4,"getProvider","()Ljava/security/Provider;")
J2CPP_DEFINE_METHOD(java::security::cert::CertificateFactory,5,"getType","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::security::cert::CertificateFactory,6,"generateCertificate","(Ljava/io/InputStream;)Ljava/security/cert/Certificate;")
J2CPP_DEFINE_METHOD(java::security::cert::CertificateFactory,7,"getCertPathEncodings","()Ljava/util/Iterator;")
J2CPP_DEFINE_METHOD(java::security::cert::CertificateFactory,8,"generateCertPath","(Ljava/io/InputStream;)Ljava/security/cert/CertPath;")
J2CPP_DEFINE_METHOD(java::security::cert::CertificateFactory,9,"generateCertPath","(Ljava/io/InputStream;Ljava/lang/String;)Ljava/security/cert/CertPath;")
J2CPP_DEFINE_METHOD(java::security::cert::CertificateFactory,10,"generateCertPath","(Ljava/util/List;)Ljava/security/cert/CertPath;")
J2CPP_DEFINE_METHOD(java::security::cert::CertificateFactory,11,"generateCertificates","(Ljava/io/InputStream;)Ljava/util/Collection;")
J2CPP_DEFINE_METHOD(java::security::cert::CertificateFactory,12,"generateCRL","(Ljava/io/InputStream;)Ljava/security/cert/CRL;")
J2CPP_DEFINE_METHOD(java::security::cert::CertificateFactory,13,"generateCRLs","(Ljava/io/InputStream;)Ljava/util/Collection;")

} //namespace j2cpp

#endif //J2CPP_JAVA_SECURITY_CERT_CERTIFICATEFACTORY_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
