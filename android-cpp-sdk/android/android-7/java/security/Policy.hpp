/*================================================================================
  code generated by: java2cpp
  class: java.security.Policy
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_SECURITY_POLICY_HPP_DECL
#define J2CPP_JAVA_SECURITY_POLICY_HPP_DECL


namespace j2cpp { namespace java { namespace security { class CodeSource; } } }
namespace j2cpp { namespace java { namespace security { class ProtectionDomain; } } }
namespace j2cpp { namespace java { namespace security { class Permission; } } }
namespace j2cpp { namespace java { namespace security { class PermissionCollection; } } }


#include <java/security/CodeSource.hpp>
#include <java/security/Permission.hpp>
#include <java/security/PermissionCollection.hpp>
#include <java/security/ProtectionDomain.hpp>


namespace j2cpp {

namespace java { namespace security {

	class Policy;
	class Policy
		: public cpp_object<Policy>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)

		Policy(jobject jobj)
		: cpp_object<Policy>(jobj)
		{
		}

		local_ref< java::security::PermissionCollection > getPermissions(local_ref< java::security::CodeSource > const&);
		void refresh();
		local_ref< java::security::PermissionCollection > getPermissions(local_ref< java::security::ProtectionDomain > const&);
		cpp_boolean implies(local_ref< java::security::ProtectionDomain > const&, local_ref< java::security::Permission > const&);
		static local_ref< java::security::Policy > getPolicy();
		static void setPolicy(local_ref< java::security::Policy > const&);
	}; //class Policy

} //namespace security
} //namespace java


} //namespace j2cpp

#endif //J2CPP_JAVA_SECURITY_POLICY_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_SECURITY_POLICY_HPP_IMPL
#define J2CPP_JAVA_SECURITY_POLICY_HPP_IMPL

namespace j2cpp {


template <>
local_ref< java::security::Policy > create< java::security::Policy>()
{
	return local_ref< java::security::Policy >(
		environment::get().get_jenv()->NewObject(
			get_class<java::security::Policy::J2CPP_CLASS_NAME>(),
			get_method_id<java::security::Policy::J2CPP_CLASS_NAME, java::security::Policy::J2CPP_METHOD_NAME(0), java::security::Policy::J2CPP_METHOD_SIGNATURE(0), false>()
		)
	);
}

local_ref< java::security::PermissionCollection > java::security::Policy::getPermissions(local_ref< java::security::CodeSource > const &a0)
{
	return local_ref< java::security::PermissionCollection >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), false>(),
			a0.get_jtype()
		)
	);
}

void java::security::Policy::refresh()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>()
		)
	);
}

local_ref< java::security::PermissionCollection > java::security::Policy::getPermissions(local_ref< java::security::ProtectionDomain > const &a0)
{
	return local_ref< java::security::PermissionCollection >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean java::security::Policy::implies(local_ref< java::security::ProtectionDomain > const &a0, local_ref< java::security::Permission > const &a1)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< java::security::Policy > java::security::Policy::getPolicy()
{
	return local_ref< java::security::Policy >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), true>()
		)
	);
}

void java::security::Policy::setPolicy(local_ref< java::security::Policy > const &a0)
{
	return void(
		environment::get().get_jenv()->CallStaticVoidMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), true>(),
			a0.get_jtype()
		)
	);
}


J2CPP_DEFINE_CLASS(java::security::Policy,"java/security/Policy")
J2CPP_DEFINE_METHOD(java::security::Policy,0,"<init>","()V")
J2CPP_DEFINE_METHOD(java::security::Policy,1,"getPermissions","(Ljava/security/CodeSource;)Ljava/security/PermissionCollection;")
J2CPP_DEFINE_METHOD(java::security::Policy,2,"refresh","()V")
J2CPP_DEFINE_METHOD(java::security::Policy,3,"getPermissions","(Ljava/security/ProtectionDomain;)Ljava/security/PermissionCollection;")
J2CPP_DEFINE_METHOD(java::security::Policy,4,"implies","(Ljava/security/ProtectionDomain;Ljava/security/Permission;)Z")
J2CPP_DEFINE_METHOD(java::security::Policy,5,"getPolicy","()Ljava/security/Policy;")
J2CPP_DEFINE_METHOD(java::security::Policy,6,"setPolicy","(Ljava/security/Policy;)V")

} //namespace j2cpp

#endif //J2CPP_JAVA_SECURITY_POLICY_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
