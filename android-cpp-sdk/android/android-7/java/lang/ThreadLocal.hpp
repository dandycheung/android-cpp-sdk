/*================================================================================
  code generated by: java2cpp
  class: java.lang.ThreadLocal
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_LANG_THREADLOCAL_HPP_DECL
#define J2CPP_JAVA_LANG_THREADLOCAL_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class Object; } } }


#include <java/lang/Object.hpp>


namespace j2cpp {

namespace java { namespace lang {

	class ThreadLocal;
	class ThreadLocal
		: public cpp_object<ThreadLocal>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)

		ThreadLocal(jobject jobj)
		: cpp_object<ThreadLocal>(jobj)
		{
		}

		local_ref< java::lang::Object > get();
		void set(local_ref< java::lang::Object > const&);
		void remove();
	}; //class ThreadLocal

} //namespace lang
} //namespace java


} //namespace j2cpp

#endif //J2CPP_JAVA_LANG_THREADLOCAL_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_LANG_THREADLOCAL_HPP_IMPL
#define J2CPP_JAVA_LANG_THREADLOCAL_HPP_IMPL

namespace j2cpp {


template <>
local_ref< java::lang::ThreadLocal > create< java::lang::ThreadLocal>()
{
	return local_ref< java::lang::ThreadLocal >(
		environment::get().get_jenv()->NewObject(
			get_class<java::lang::ThreadLocal::J2CPP_CLASS_NAME>(),
			get_method_id<java::lang::ThreadLocal::J2CPP_CLASS_NAME, java::lang::ThreadLocal::J2CPP_METHOD_NAME(0), java::lang::ThreadLocal::J2CPP_METHOD_SIGNATURE(0), false>()
		)
	);
}

local_ref< java::lang::Object > java::lang::ThreadLocal::get()
{
	return local_ref< java::lang::Object >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), false>()
		)
	);
}


void java::lang::ThreadLocal::set(local_ref< java::lang::Object > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>(),
			a0.get_jtype()
		)
	);
}

void java::lang::ThreadLocal::remove()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>()
		)
	);
}


J2CPP_DEFINE_CLASS(java::lang::ThreadLocal,"java/lang/ThreadLocal")
J2CPP_DEFINE_METHOD(java::lang::ThreadLocal,0,"<init>","()V")
J2CPP_DEFINE_METHOD(java::lang::ThreadLocal,1,"get","()Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(java::lang::ThreadLocal,2,"initialValue","()Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(java::lang::ThreadLocal,3,"set","(Ljava/lang/Object;)V")
J2CPP_DEFINE_METHOD(java::lang::ThreadLocal,4,"remove","()V")

} //namespace j2cpp

#endif //J2CPP_JAVA_LANG_THREADLOCAL_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
