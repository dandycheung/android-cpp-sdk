/*================================================================================
  code generated by: java2cpp
  class: java.lang.reflect.Array
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_LANG_REFLECT_ARRAY_HPP_DECL
#define J2CPP_JAVA_LANG_REFLECT_ARRAY_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace lang { class Class; } } }


#include <java/lang/Class.hpp>
#include <java/lang/Object.hpp>


namespace j2cpp {

namespace java { namespace lang { namespace reflect {

	class Array;
	class Array
		: public cpp_object<Array>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_METHOD(12)
		J2CPP_DECLARE_METHOD(13)
		J2CPP_DECLARE_METHOD(14)
		J2CPP_DECLARE_METHOD(15)
		J2CPP_DECLARE_METHOD(16)
		J2CPP_DECLARE_METHOD(17)
		J2CPP_DECLARE_METHOD(18)
		J2CPP_DECLARE_METHOD(19)
		J2CPP_DECLARE_METHOD(20)
		J2CPP_DECLARE_METHOD(21)

		Array(jobject jobj)
		: cpp_object<Array>(jobj)
		{
		}

		static local_ref< java::lang::Object > get(local_ref< java::lang::Object > const&, cpp_int const&);
		static cpp_boolean getBoolean(local_ref< java::lang::Object > const&, cpp_int const&);
		static cpp_byte getByte(local_ref< java::lang::Object > const&, cpp_int const&);
		static cpp_char getChar(local_ref< java::lang::Object > const&, cpp_int const&);
		static cpp_double getDouble(local_ref< java::lang::Object > const&, cpp_int const&);
		static cpp_float getFloat(local_ref< java::lang::Object > const&, cpp_int const&);
		static cpp_int getInt(local_ref< java::lang::Object > const&, cpp_int const&);
		static cpp_int getLength(local_ref< java::lang::Object > const&);
		static cpp_long getLong(local_ref< java::lang::Object > const&, cpp_int const&);
		static cpp_short getShort(local_ref< java::lang::Object > const&, cpp_int const&);
		static local_ref< java::lang::Object > newInstance(local_ref< java::lang::Class > const&, local_ref< cpp_int_array<1> > const&);
		static local_ref< java::lang::Object > newInstance(local_ref< java::lang::Class > const&, cpp_int const&);
		static void set(local_ref< java::lang::Object > const&, cpp_int const&, local_ref< java::lang::Object > const&);
		static void setBoolean(local_ref< java::lang::Object > const&, cpp_int const&, cpp_boolean const&);
		static void setByte(local_ref< java::lang::Object > const&, cpp_int const&, cpp_byte const&);
		static void setChar(local_ref< java::lang::Object > const&, cpp_int const&, cpp_char const&);
		static void setDouble(local_ref< java::lang::Object > const&, cpp_int const&, cpp_double const&);
		static void setFloat(local_ref< java::lang::Object > const&, cpp_int const&, cpp_float const&);
		static void setInt(local_ref< java::lang::Object > const&, cpp_int const&, cpp_int const&);
		static void setLong(local_ref< java::lang::Object > const&, cpp_int const&, cpp_long const&);
		static void setShort(local_ref< java::lang::Object > const&, cpp_int const&, cpp_short const&);
	}; //class Array

} //namespace reflect
} //namespace lang
} //namespace java


} //namespace j2cpp

#endif //J2CPP_JAVA_LANG_REFLECT_ARRAY_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_LANG_REFLECT_ARRAY_HPP_IMPL
#define J2CPP_JAVA_LANG_REFLECT_ARRAY_HPP_IMPL

namespace j2cpp {


template <>
local_ref< java::lang::reflect::Array > create< java::lang::reflect::Array>()
{
	return local_ref< java::lang::reflect::Array >(
		environment::get().get_jenv()->NewObject(
			get_class<java::lang::reflect::Array::J2CPP_CLASS_NAME>(),
			get_method_id<java::lang::reflect::Array::J2CPP_CLASS_NAME, java::lang::reflect::Array::J2CPP_METHOD_NAME(0), java::lang::reflect::Array::J2CPP_METHOD_SIGNATURE(0), false>()
		)
	);
}

local_ref< java::lang::Object > java::lang::reflect::Array::get(local_ref< java::lang::Object > const &a0, cpp_int const &a1)
{
	return local_ref< java::lang::Object >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), true>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_boolean java::lang::reflect::Array::getBoolean(local_ref< java::lang::Object > const &a0, cpp_int const &a1)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallStaticBooleanMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), true>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_byte java::lang::reflect::Array::getByte(local_ref< java::lang::Object > const &a0, cpp_int const &a1)
{
	return cpp_byte(
		environment::get().get_jenv()->CallStaticByteMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), true>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_char java::lang::reflect::Array::getChar(local_ref< java::lang::Object > const &a0, cpp_int const &a1)
{
	return cpp_char(
		environment::get().get_jenv()->CallStaticCharMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), true>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_double java::lang::reflect::Array::getDouble(local_ref< java::lang::Object > const &a0, cpp_int const &a1)
{
	return cpp_double(
		environment::get().get_jenv()->CallStaticDoubleMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), true>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_float java::lang::reflect::Array::getFloat(local_ref< java::lang::Object > const &a0, cpp_int const &a1)
{
	return cpp_float(
		environment::get().get_jenv()->CallStaticFloatMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), true>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_int java::lang::reflect::Array::getInt(local_ref< java::lang::Object > const &a0, cpp_int const &a1)
{
	return cpp_int(
		environment::get().get_jenv()->CallStaticIntMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(7), J2CPP_METHOD_SIGNATURE(7), true>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_int java::lang::reflect::Array::getLength(local_ref< java::lang::Object > const &a0)
{
	return cpp_int(
		environment::get().get_jenv()->CallStaticIntMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(8), J2CPP_METHOD_SIGNATURE(8), true>(),
			a0.get_jtype()
		)
	);
}

cpp_long java::lang::reflect::Array::getLong(local_ref< java::lang::Object > const &a0, cpp_int const &a1)
{
	return cpp_long(
		environment::get().get_jenv()->CallStaticLongMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(9), J2CPP_METHOD_SIGNATURE(9), true>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_short java::lang::reflect::Array::getShort(local_ref< java::lang::Object > const &a0, cpp_int const &a1)
{
	return cpp_short(
		environment::get().get_jenv()->CallStaticShortMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(10), J2CPP_METHOD_SIGNATURE(10), true>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< java::lang::Object > java::lang::reflect::Array::newInstance(local_ref< java::lang::Class > const &a0, local_ref< cpp_int_array<1> > const &a1)
{
	return local_ref< java::lang::Object >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(11), J2CPP_METHOD_SIGNATURE(11), true>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< java::lang::Object > java::lang::reflect::Array::newInstance(local_ref< java::lang::Class > const &a0, cpp_int const &a1)
{
	return local_ref< java::lang::Object >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(12), J2CPP_METHOD_SIGNATURE(12), true>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void java::lang::reflect::Array::set(local_ref< java::lang::Object > const &a0, cpp_int const &a1, local_ref< java::lang::Object > const &a2)
{
	return void(
		environment::get().get_jenv()->CallStaticVoidMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(13), J2CPP_METHOD_SIGNATURE(13), true>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

void java::lang::reflect::Array::setBoolean(local_ref< java::lang::Object > const &a0, cpp_int const &a1, cpp_boolean const &a2)
{
	return void(
		environment::get().get_jenv()->CallStaticVoidMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(14), J2CPP_METHOD_SIGNATURE(14), true>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

void java::lang::reflect::Array::setByte(local_ref< java::lang::Object > const &a0, cpp_int const &a1, cpp_byte const &a2)
{
	return void(
		environment::get().get_jenv()->CallStaticVoidMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(15), J2CPP_METHOD_SIGNATURE(15), true>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

void java::lang::reflect::Array::setChar(local_ref< java::lang::Object > const &a0, cpp_int const &a1, cpp_char const &a2)
{
	return void(
		environment::get().get_jenv()->CallStaticVoidMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(16), J2CPP_METHOD_SIGNATURE(16), true>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

void java::lang::reflect::Array::setDouble(local_ref< java::lang::Object > const &a0, cpp_int const &a1, cpp_double const &a2)
{
	return void(
		environment::get().get_jenv()->CallStaticVoidMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(17), J2CPP_METHOD_SIGNATURE(17), true>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

void java::lang::reflect::Array::setFloat(local_ref< java::lang::Object > const &a0, cpp_int const &a1, cpp_float const &a2)
{
	return void(
		environment::get().get_jenv()->CallStaticVoidMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(18), J2CPP_METHOD_SIGNATURE(18), true>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

void java::lang::reflect::Array::setInt(local_ref< java::lang::Object > const &a0, cpp_int const &a1, cpp_int const &a2)
{
	return void(
		environment::get().get_jenv()->CallStaticVoidMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(19), J2CPP_METHOD_SIGNATURE(19), true>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

void java::lang::reflect::Array::setLong(local_ref< java::lang::Object > const &a0, cpp_int const &a1, cpp_long const &a2)
{
	return void(
		environment::get().get_jenv()->CallStaticVoidMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(20), J2CPP_METHOD_SIGNATURE(20), true>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

void java::lang::reflect::Array::setShort(local_ref< java::lang::Object > const &a0, cpp_int const &a1, cpp_short const &a2)
{
	return void(
		environment::get().get_jenv()->CallStaticVoidMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(21), J2CPP_METHOD_SIGNATURE(21), true>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}


J2CPP_DEFINE_CLASS(java::lang::reflect::Array,"java/lang/reflect/Array")
J2CPP_DEFINE_METHOD(java::lang::reflect::Array,0,"<init>","()V")
J2CPP_DEFINE_METHOD(java::lang::reflect::Array,1,"get","(Ljava/lang/Object;I)Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(java::lang::reflect::Array,2,"getBoolean","(Ljava/lang/Object;I)Z")
J2CPP_DEFINE_METHOD(java::lang::reflect::Array,3,"getByte","(Ljava/lang/Object;I)B")
J2CPP_DEFINE_METHOD(java::lang::reflect::Array,4,"getChar","(Ljava/lang/Object;I)C")
J2CPP_DEFINE_METHOD(java::lang::reflect::Array,5,"getDouble","(Ljava/lang/Object;I)D")
J2CPP_DEFINE_METHOD(java::lang::reflect::Array,6,"getFloat","(Ljava/lang/Object;I)F")
J2CPP_DEFINE_METHOD(java::lang::reflect::Array,7,"getInt","(Ljava/lang/Object;I)I")
J2CPP_DEFINE_METHOD(java::lang::reflect::Array,8,"getLength","(Ljava/lang/Object;)I")
J2CPP_DEFINE_METHOD(java::lang::reflect::Array,9,"getLong","(Ljava/lang/Object;I)J")
J2CPP_DEFINE_METHOD(java::lang::reflect::Array,10,"getShort","(Ljava/lang/Object;I)S")
J2CPP_DEFINE_METHOD(java::lang::reflect::Array,11,"newInstance","(Ljava/lang/Class;[I)Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(java::lang::reflect::Array,12,"newInstance","(Ljava/lang/Class;I)Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(java::lang::reflect::Array,13,"set","(Ljava/lang/Object;ILjava/lang/Object;)V")
J2CPP_DEFINE_METHOD(java::lang::reflect::Array,14,"setBoolean","(Ljava/lang/Object;IZ)V")
J2CPP_DEFINE_METHOD(java::lang::reflect::Array,15,"setByte","(Ljava/lang/Object;IB)V")
J2CPP_DEFINE_METHOD(java::lang::reflect::Array,16,"setChar","(Ljava/lang/Object;IC)V")
J2CPP_DEFINE_METHOD(java::lang::reflect::Array,17,"setDouble","(Ljava/lang/Object;ID)V")
J2CPP_DEFINE_METHOD(java::lang::reflect::Array,18,"setFloat","(Ljava/lang/Object;IF)V")
J2CPP_DEFINE_METHOD(java::lang::reflect::Array,19,"setInt","(Ljava/lang/Object;II)V")
J2CPP_DEFINE_METHOD(java::lang::reflect::Array,20,"setLong","(Ljava/lang/Object;IJ)V")
J2CPP_DEFINE_METHOD(java::lang::reflect::Array,21,"setShort","(Ljava/lang/Object;IS)V")

} //namespace j2cpp

#endif //J2CPP_JAVA_LANG_REFLECT_ARRAY_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
