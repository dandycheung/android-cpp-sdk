/*================================================================================
  code generated by: java2cpp
  class: java.sql.SQLException
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_SQL_SQLEXCEPTION_HPP_DECL
#define J2CPP_JAVA_SQL_SQLEXCEPTION_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class String; } } }


#include <java/lang/String.hpp>


namespace j2cpp {

namespace java { namespace sql {

	class SQLException;
	class SQLException
		: public cpp_object<SQLException>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)

		SQLException(jobject jobj)
		: cpp_object<SQLException>(jobj)
		{
		}

		cpp_int getErrorCode();
		local_ref< java::sql::SQLException > getNextException();
		local_ref< java::lang::String > getSQLState();
		void setNextException(local_ref< java::sql::SQLException > const&);
	}; //class SQLException

} //namespace sql
} //namespace java


} //namespace j2cpp

#endif //J2CPP_JAVA_SQL_SQLEXCEPTION_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_SQL_SQLEXCEPTION_HPP_IMPL
#define J2CPP_JAVA_SQL_SQLEXCEPTION_HPP_IMPL

namespace j2cpp {


template <>
local_ref< java::sql::SQLException > create< java::sql::SQLException>()
{
	return local_ref< java::sql::SQLException >(
		environment::get().get_jenv()->NewObject(
			get_class<java::sql::SQLException::J2CPP_CLASS_NAME>(),
			get_method_id<java::sql::SQLException::J2CPP_CLASS_NAME, java::sql::SQLException::J2CPP_METHOD_NAME(0), java::sql::SQLException::J2CPP_METHOD_SIGNATURE(0), false>()
		)
	);
}

template <>
local_ref< java::sql::SQLException > create< java::sql::SQLException>(local_ref< java::lang::String > const &a0)
{
	return local_ref< java::sql::SQLException >(
		environment::get().get_jenv()->NewObject(
			get_class<java::sql::SQLException::J2CPP_CLASS_NAME>(),
			get_method_id<java::sql::SQLException::J2CPP_CLASS_NAME, java::sql::SQLException::J2CPP_METHOD_NAME(1), java::sql::SQLException::J2CPP_METHOD_SIGNATURE(1), false>(),
			a0.get_jtype()
		)
	);
}

template <>
local_ref< java::sql::SQLException > create< java::sql::SQLException>(local_ref< java::lang::String > const &a0, local_ref< java::lang::String > const &a1)
{
	return local_ref< java::sql::SQLException >(
		environment::get().get_jenv()->NewObject(
			get_class<java::sql::SQLException::J2CPP_CLASS_NAME>(),
			get_method_id<java::sql::SQLException::J2CPP_CLASS_NAME, java::sql::SQLException::J2CPP_METHOD_NAME(2), java::sql::SQLException::J2CPP_METHOD_SIGNATURE(2), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

template <>
local_ref< java::sql::SQLException > create< java::sql::SQLException>(local_ref< java::lang::String > const &a0, local_ref< java::lang::String > const &a1, cpp_int const &a2)
{
	return local_ref< java::sql::SQLException >(
		environment::get().get_jenv()->NewObject(
			get_class<java::sql::SQLException::J2CPP_CLASS_NAME>(),
			get_method_id<java::sql::SQLException::J2CPP_CLASS_NAME, java::sql::SQLException::J2CPP_METHOD_NAME(3), java::sql::SQLException::J2CPP_METHOD_SIGNATURE(3), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

cpp_int java::sql::SQLException::getErrorCode()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>()
		)
	);
}

local_ref< java::sql::SQLException > java::sql::SQLException::getNextException()
{
	return local_ref< java::sql::SQLException >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>()
		)
	);
}

local_ref< java::lang::String > java::sql::SQLException::getSQLState()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>()
		)
	);
}

void java::sql::SQLException::setNextException(local_ref< java::sql::SQLException > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(7), J2CPP_METHOD_SIGNATURE(7), false>(),
			a0.get_jtype()
		)
	);
}


J2CPP_DEFINE_CLASS(java::sql::SQLException,"java/sql/SQLException")
J2CPP_DEFINE_METHOD(java::sql::SQLException,0,"<init>","()V")
J2CPP_DEFINE_METHOD(java::sql::SQLException,1,"<init>","(Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(java::sql::SQLException,2,"<init>","(Ljava/lang/String;Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(java::sql::SQLException,3,"<init>","(Ljava/lang/String;Ljava/lang/String;I)V")
J2CPP_DEFINE_METHOD(java::sql::SQLException,4,"getErrorCode","()I")
J2CPP_DEFINE_METHOD(java::sql::SQLException,5,"getNextException","()Ljava/sql/SQLException;")
J2CPP_DEFINE_METHOD(java::sql::SQLException,6,"getSQLState","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::sql::SQLException,7,"setNextException","(Ljava/sql/SQLException;)V")

} //namespace j2cpp

#endif //J2CPP_JAVA_SQL_SQLEXCEPTION_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
