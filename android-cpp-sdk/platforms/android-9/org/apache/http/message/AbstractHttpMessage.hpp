/*================================================================================
  code generated by: java2cpp
  class: org.apache.http.message.AbstractHttpMessage
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ORG_APACHE_HTTP_MESSAGE_ABSTRACTHTTPMESSAGE_HPP_DECL
#define J2CPP_ORG_APACHE_HTTP_MESSAGE_ABSTRACTHTTPMESSAGE_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace org { namespace apache { namespace http { class Header; } } } }
namespace j2cpp { namespace org { namespace apache { namespace http { namespace params { class HttpParams; } } } } }
namespace j2cpp { namespace org { namespace apache { namespace http { class HeaderIterator; } } } }


#include <java/lang/String.hpp>
#include <org/apache/http/Header.hpp>
#include <org/apache/http/HeaderIterator.hpp>
#include <org/apache/http/params/HttpParams.hpp>


namespace j2cpp {

namespace org { namespace apache { namespace http { namespace message {

	class AbstractHttpMessage;
	class AbstractHttpMessage
		: public cpp_object<AbstractHttpMessage>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_METHOD(12)
		J2CPP_DECLARE_METHOD(13)
		J2CPP_DECLARE_METHOD(14)
		J2CPP_DECLARE_METHOD(15)
		J2CPP_DECLARE_METHOD(16)
		J2CPP_DECLARE_METHOD(17)
		J2CPP_DECLARE_FIELD(0)
		J2CPP_DECLARE_FIELD(1)

		AbstractHttpMessage(jobject jobj)
		: cpp_object<AbstractHttpMessage>(jobj)
		{
		}

		cpp_boolean containsHeader(local_ref< java::lang::String > const&);
		local_ref< cpp_object_array<org::apache::http::Header, 1> > getHeaders(local_ref< java::lang::String > const&);
		local_ref< org::apache::http::Header > getFirstHeader(local_ref< java::lang::String > const&);
		local_ref< org::apache::http::Header > getLastHeader(local_ref< java::lang::String > const&);
		local_ref< cpp_object_array<org::apache::http::Header, 1> > getAllHeaders();
		void addHeader(local_ref< org::apache::http::Header > const&);
		void addHeader(local_ref< java::lang::String > const&, local_ref< java::lang::String > const&);
		void setHeader(local_ref< org::apache::http::Header > const&);
		void setHeader(local_ref< java::lang::String > const&, local_ref< java::lang::String > const&);
		void setHeaders(local_ref< cpp_object_array<org::apache::http::Header, 1> > const&);
		void removeHeader(local_ref< org::apache::http::Header > const&);
		void removeHeaders(local_ref< java::lang::String > const&);
		local_ref< org::apache::http::HeaderIterator > headerIterator();
		local_ref< org::apache::http::HeaderIterator > headerIterator(local_ref< java::lang::String > const&);
		local_ref< org::apache::http::params::HttpParams > getParams();
		void setParams(local_ref< org::apache::http::params::HttpParams > const&);

	}; //class AbstractHttpMessage

} //namespace message
} //namespace http
} //namespace apache
} //namespace org


} //namespace j2cpp

#endif //J2CPP_ORG_APACHE_HTTP_MESSAGE_ABSTRACTHTTPMESSAGE_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ORG_APACHE_HTTP_MESSAGE_ABSTRACTHTTPMESSAGE_HPP_IMPL
#define J2CPP_ORG_APACHE_HTTP_MESSAGE_ABSTRACTHTTPMESSAGE_HPP_IMPL

namespace j2cpp {


template <>
local_ref< org::apache::http::message::AbstractHttpMessage > create< org::apache::http::message::AbstractHttpMessage>(local_ref< org::apache::http::params::HttpParams > const &a0)
{
	return local_ref< org::apache::http::message::AbstractHttpMessage >(
		environment::get().get_jenv()->NewObject(
			get_class<org::apache::http::message::AbstractHttpMessage::J2CPP_CLASS_NAME>(),
			get_method_id<org::apache::http::message::AbstractHttpMessage::J2CPP_CLASS_NAME, org::apache::http::message::AbstractHttpMessage::J2CPP_METHOD_NAME(0), org::apache::http::message::AbstractHttpMessage::J2CPP_METHOD_SIGNATURE(0), false>(),
			a0.get_jtype()
		)
	);
}

template <>
local_ref< org::apache::http::message::AbstractHttpMessage > create< org::apache::http::message::AbstractHttpMessage>()
{
	return local_ref< org::apache::http::message::AbstractHttpMessage >(
		environment::get().get_jenv()->NewObject(
			get_class<org::apache::http::message::AbstractHttpMessage::J2CPP_CLASS_NAME>(),
			get_method_id<org::apache::http::message::AbstractHttpMessage::J2CPP_CLASS_NAME, org::apache::http::message::AbstractHttpMessage::J2CPP_METHOD_NAME(1), org::apache::http::message::AbstractHttpMessage::J2CPP_METHOD_SIGNATURE(1), false>()
		)
	);
}

cpp_boolean org::apache::http::message::AbstractHttpMessage::containsHeader(local_ref< java::lang::String > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< cpp_object_array<org::apache::http::Header, 1> > org::apache::http::message::AbstractHttpMessage::getHeaders(local_ref< java::lang::String > const &a0)
{
	return local_ref< cpp_object_array<org::apache::http::Header, 1> >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< org::apache::http::Header > org::apache::http::message::AbstractHttpMessage::getFirstHeader(local_ref< java::lang::String > const &a0)
{
	return local_ref< org::apache::http::Header >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< org::apache::http::Header > org::apache::http::message::AbstractHttpMessage::getLastHeader(local_ref< java::lang::String > const &a0)
{
	return local_ref< org::apache::http::Header >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< cpp_object_array<org::apache::http::Header, 1> > org::apache::http::message::AbstractHttpMessage::getAllHeaders()
{
	return local_ref< cpp_object_array<org::apache::http::Header, 1> >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>()
		)
	);
}

void org::apache::http::message::AbstractHttpMessage::addHeader(local_ref< org::apache::http::Header > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(7), J2CPP_METHOD_SIGNATURE(7), false>(),
			a0.get_jtype()
		)
	);
}

void org::apache::http::message::AbstractHttpMessage::addHeader(local_ref< java::lang::String > const &a0, local_ref< java::lang::String > const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(8), J2CPP_METHOD_SIGNATURE(8), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void org::apache::http::message::AbstractHttpMessage::setHeader(local_ref< org::apache::http::Header > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(9), J2CPP_METHOD_SIGNATURE(9), false>(),
			a0.get_jtype()
		)
	);
}

void org::apache::http::message::AbstractHttpMessage::setHeader(local_ref< java::lang::String > const &a0, local_ref< java::lang::String > const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(10), J2CPP_METHOD_SIGNATURE(10), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void org::apache::http::message::AbstractHttpMessage::setHeaders(local_ref< cpp_object_array<org::apache::http::Header, 1> > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(11), J2CPP_METHOD_SIGNATURE(11), false>(),
			a0.get_jtype()
		)
	);
}

void org::apache::http::message::AbstractHttpMessage::removeHeader(local_ref< org::apache::http::Header > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(12), J2CPP_METHOD_SIGNATURE(12), false>(),
			a0.get_jtype()
		)
	);
}

void org::apache::http::message::AbstractHttpMessage::removeHeaders(local_ref< java::lang::String > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(13), J2CPP_METHOD_SIGNATURE(13), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< org::apache::http::HeaderIterator > org::apache::http::message::AbstractHttpMessage::headerIterator()
{
	return local_ref< org::apache::http::HeaderIterator >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(14), J2CPP_METHOD_SIGNATURE(14), false>()
		)
	);
}

local_ref< org::apache::http::HeaderIterator > org::apache::http::message::AbstractHttpMessage::headerIterator(local_ref< java::lang::String > const &a0)
{
	return local_ref< org::apache::http::HeaderIterator >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(15), J2CPP_METHOD_SIGNATURE(15), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< org::apache::http::params::HttpParams > org::apache::http::message::AbstractHttpMessage::getParams()
{
	return local_ref< org::apache::http::params::HttpParams >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(16), J2CPP_METHOD_SIGNATURE(16), false>()
		)
	);
}

void org::apache::http::message::AbstractHttpMessage::setParams(local_ref< org::apache::http::params::HttpParams > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(17), J2CPP_METHOD_SIGNATURE(17), false>(),
			a0.get_jtype()
		)
	);
}



J2CPP_DEFINE_CLASS(org::apache::http::message::AbstractHttpMessage,"org/apache/http/message/AbstractHttpMessage")
J2CPP_DEFINE_METHOD(org::apache::http::message::AbstractHttpMessage,0,"<init>","(Lorg/apache/http/params/HttpParams;)V")
J2CPP_DEFINE_METHOD(org::apache::http::message::AbstractHttpMessage,1,"<init>","()V")
J2CPP_DEFINE_METHOD(org::apache::http::message::AbstractHttpMessage,2,"containsHeader","(Ljava/lang/String;)Z")
J2CPP_DEFINE_METHOD(org::apache::http::message::AbstractHttpMessage,3,"getHeaders","(Ljava/lang/String;)[org.apache.http.Header")
J2CPP_DEFINE_METHOD(org::apache::http::message::AbstractHttpMessage,4,"getFirstHeader","(Ljava/lang/String;)Lorg/apache/http/Header;")
J2CPP_DEFINE_METHOD(org::apache::http::message::AbstractHttpMessage,5,"getLastHeader","(Ljava/lang/String;)Lorg/apache/http/Header;")
J2CPP_DEFINE_METHOD(org::apache::http::message::AbstractHttpMessage,6,"getAllHeaders","()[org.apache.http.Header")
J2CPP_DEFINE_METHOD(org::apache::http::message::AbstractHttpMessage,7,"addHeader","(Lorg/apache/http/Header;)V")
J2CPP_DEFINE_METHOD(org::apache::http::message::AbstractHttpMessage,8,"addHeader","(Ljava/lang/String;Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(org::apache::http::message::AbstractHttpMessage,9,"setHeader","(Lorg/apache/http/Header;)V")
J2CPP_DEFINE_METHOD(org::apache::http::message::AbstractHttpMessage,10,"setHeader","(Ljava/lang/String;Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(org::apache::http::message::AbstractHttpMessage,11,"setHeaders","([org.apache.http.Header)V")
J2CPP_DEFINE_METHOD(org::apache::http::message::AbstractHttpMessage,12,"removeHeader","(Lorg/apache/http/Header;)V")
J2CPP_DEFINE_METHOD(org::apache::http::message::AbstractHttpMessage,13,"removeHeaders","(Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(org::apache::http::message::AbstractHttpMessage,14,"headerIterator","()Lorg/apache/http/HeaderIterator;")
J2CPP_DEFINE_METHOD(org::apache::http::message::AbstractHttpMessage,15,"headerIterator","(Ljava/lang/String;)Lorg/apache/http/HeaderIterator;")
J2CPP_DEFINE_METHOD(org::apache::http::message::AbstractHttpMessage,16,"getParams","()Lorg/apache/http/params/HttpParams;")
J2CPP_DEFINE_METHOD(org::apache::http::message::AbstractHttpMessage,17,"setParams","(Lorg/apache/http/params/HttpParams;)V")
J2CPP_DEFINE_FIELD(org::apache::http::message::AbstractHttpMessage,0,"headergroup","Lorg/apache/http/message/HeaderGroup;")
J2CPP_DEFINE_FIELD(org::apache::http::message::AbstractHttpMessage,1,"params","Lorg/apache/http/params/HttpParams;")

} //namespace j2cpp

#endif //J2CPP_ORG_APACHE_HTTP_MESSAGE_ABSTRACTHTTPMESSAGE_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
