/*================================================================================
  code generated by: java2cpp
  class: org.apache.http.impl.io.AbstractMessageParser
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ORG_APACHE_HTTP_IMPL_IO_ABSTRACTMESSAGEPARSER_HPP_DECL
#define J2CPP_ORG_APACHE_HTTP_IMPL_IO_ABSTRACTMESSAGEPARSER_HPP_DECL


namespace j2cpp { namespace org { namespace apache { namespace http { class Header; } } } }
namespace j2cpp { namespace org { namespace apache { namespace http { namespace io { class SessionInputBuffer; } } } } }
namespace j2cpp { namespace org { namespace apache { namespace http { namespace params { class HttpParams; } } } } }
namespace j2cpp { namespace org { namespace apache { namespace http { class HttpMessage; } } } }
namespace j2cpp { namespace org { namespace apache { namespace http { namespace message { class LineParser; } } } } }


#include <org/apache/http/Header.hpp>
#include <org/apache/http/HttpMessage.hpp>
#include <org/apache/http/io/SessionInputBuffer.hpp>
#include <org/apache/http/message/LineParser.hpp>
#include <org/apache/http/params/HttpParams.hpp>


namespace j2cpp {

namespace org { namespace apache { namespace http { namespace impl { namespace io {

	class AbstractMessageParser;
	class AbstractMessageParser
		: public cpp_object<AbstractMessageParser>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_FIELD(0)

		AbstractMessageParser(jobject jobj)
		: cpp_object<AbstractMessageParser>(jobj)
		{
		}

		static local_ref< cpp_object_array<org::apache::http::Header, 1> > parseHeaders(local_ref< org::apache::http::io::SessionInputBuffer > const&, cpp_int const&, cpp_int const&, local_ref< org::apache::http::message::LineParser > const&);
		local_ref< org::apache::http::HttpMessage > parse();

	}; //class AbstractMessageParser

} //namespace io
} //namespace impl
} //namespace http
} //namespace apache
} //namespace org


} //namespace j2cpp

#endif //J2CPP_ORG_APACHE_HTTP_IMPL_IO_ABSTRACTMESSAGEPARSER_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ORG_APACHE_HTTP_IMPL_IO_ABSTRACTMESSAGEPARSER_HPP_IMPL
#define J2CPP_ORG_APACHE_HTTP_IMPL_IO_ABSTRACTMESSAGEPARSER_HPP_IMPL

namespace j2cpp {


template <>
local_ref< org::apache::http::impl::io::AbstractMessageParser > create< org::apache::http::impl::io::AbstractMessageParser>(local_ref< org::apache::http::io::SessionInputBuffer > const &a0, local_ref< org::apache::http::message::LineParser > const &a1, local_ref< org::apache::http::params::HttpParams > const &a2)
{
	return local_ref< org::apache::http::impl::io::AbstractMessageParser >(
		environment::get().get_jenv()->NewObject(
			get_class<org::apache::http::impl::io::AbstractMessageParser::J2CPP_CLASS_NAME>(),
			get_method_id<org::apache::http::impl::io::AbstractMessageParser::J2CPP_CLASS_NAME, org::apache::http::impl::io::AbstractMessageParser::J2CPP_METHOD_NAME(0), org::apache::http::impl::io::AbstractMessageParser::J2CPP_METHOD_SIGNATURE(0), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

local_ref< cpp_object_array<org::apache::http::Header, 1> > org::apache::http::impl::io::AbstractMessageParser::parseHeaders(local_ref< org::apache::http::io::SessionInputBuffer > const &a0, cpp_int const &a1, cpp_int const &a2, local_ref< org::apache::http::message::LineParser > const &a3)
{
	return local_ref< cpp_object_array<org::apache::http::Header, 1> >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), true>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype(), a3.get_jtype()
		)
	);
}


local_ref< org::apache::http::HttpMessage > org::apache::http::impl::io::AbstractMessageParser::parse()
{
	return local_ref< org::apache::http::HttpMessage >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>()
		)
	);
}



J2CPP_DEFINE_CLASS(org::apache::http::impl::io::AbstractMessageParser,"org/apache/http/impl/io/AbstractMessageParser")
J2CPP_DEFINE_METHOD(org::apache::http::impl::io::AbstractMessageParser,0,"<init>","(Lorg/apache/http/io/SessionInputBuffer;Lorg/apache/http/message/LineParser;Lorg/apache/http/params/HttpParams;)V")
J2CPP_DEFINE_METHOD(org::apache::http::impl::io::AbstractMessageParser,1,"parseHeaders","(Lorg/apache/http/io/SessionInputBuffer;IILorg/apache/http/message/LineParser;)[org.apache.http.Header")
J2CPP_DEFINE_METHOD(org::apache::http::impl::io::AbstractMessageParser,2,"parseHead","(Lorg/apache/http/io/SessionInputBuffer;)Lorg/apache/http/HttpMessage;")
J2CPP_DEFINE_METHOD(org::apache::http::impl::io::AbstractMessageParser,3,"parse","()Lorg/apache/http/HttpMessage;")
J2CPP_DEFINE_FIELD(org::apache::http::impl::io::AbstractMessageParser,0,"lineParser","Lorg/apache/http/message/LineParser;")

} //namespace j2cpp

#endif //J2CPP_ORG_APACHE_HTTP_IMPL_IO_ABSTRACTMESSAGEPARSER_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
