/*================================================================================
  code generated by: java2cpp
  class: org.apache.http.conn.ssl.SSLSocketFactory
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ORG_APACHE_HTTP_CONN_SSL_SSLSOCKETFACTORY_HPP_DECL
#define J2CPP_ORG_APACHE_HTTP_CONN_SSL_SSLSOCKETFACTORY_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace security { class SecureRandom; } } }
namespace j2cpp { namespace java { namespace security { class KeyStore; } } }
namespace j2cpp { namespace java { namespace net { class InetAddress; } } }
namespace j2cpp { namespace java { namespace net { class Socket; } } }
namespace j2cpp { namespace org { namespace apache { namespace http { namespace conn { namespace scheme { class HostNameResolver; } } } } } }
namespace j2cpp { namespace org { namespace apache { namespace http { namespace conn { namespace ssl { class X509HostnameVerifier; } } } } } }
namespace j2cpp { namespace org { namespace apache { namespace http { namespace params { class HttpParams; } } } } }


#include <java/lang/String.hpp>
#include <java/net/InetAddress.hpp>
#include <java/net/Socket.hpp>
#include <java/security/KeyStore.hpp>
#include <java/security/SecureRandom.hpp>
#include <org/apache/http/conn/scheme/HostNameResolver.hpp>
#include <org/apache/http/conn/ssl/X509HostnameVerifier.hpp>
#include <org/apache/http/params/HttpParams.hpp>


namespace j2cpp {

namespace org { namespace apache { namespace http { namespace conn { namespace ssl {

	class SSLSocketFactory;
	class SSLSocketFactory
		: public cpp_object<SSLSocketFactory>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_FIELD(0)
		J2CPP_DECLARE_FIELD(1)
		J2CPP_DECLARE_FIELD(2)
		J2CPP_DECLARE_FIELD(3)
		J2CPP_DECLARE_FIELD(4)
		J2CPP_DECLARE_FIELD(5)

		SSLSocketFactory(jobject jobj)
		: cpp_object<SSLSocketFactory>(jobj)
		{
		}

		static local_ref< org::apache::http::conn::ssl::SSLSocketFactory > getSocketFactory();
		local_ref< java::net::Socket > createSocket();
		local_ref< java::net::Socket > connectSocket(local_ref< java::net::Socket > const&, local_ref< java::lang::String > const&, cpp_int const&, local_ref< java::net::InetAddress > const&, cpp_int const&, local_ref< org::apache::http::params::HttpParams > const&);
		cpp_boolean isSecure(local_ref< java::net::Socket > const&);
		local_ref< java::net::Socket > createSocket(local_ref< java::net::Socket > const&, local_ref< java::lang::String > const&, cpp_int const&, cpp_boolean const&);
		void setHostnameVerifier(local_ref< org::apache::http::conn::ssl::X509HostnameVerifier > const&);
		local_ref< org::apache::http::conn::ssl::X509HostnameVerifier > getHostnameVerifier();

		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(0), J2CPP_FIELD_SIGNATURE(0), local_ref< java::lang::String > > TLS;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(1), J2CPP_FIELD_SIGNATURE(1), local_ref< java::lang::String > > SSL;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(2), J2CPP_FIELD_SIGNATURE(2), local_ref< java::lang::String > > SSLV2;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(3), J2CPP_FIELD_SIGNATURE(3), local_ref< org::apache::http::conn::ssl::X509HostnameVerifier > > ALLOW_ALL_HOSTNAME_VERIFIER;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(4), J2CPP_FIELD_SIGNATURE(4), local_ref< org::apache::http::conn::ssl::X509HostnameVerifier > > BROWSER_COMPATIBLE_HOSTNAME_VERIFIER;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(5), J2CPP_FIELD_SIGNATURE(5), local_ref< org::apache::http::conn::ssl::X509HostnameVerifier > > STRICT_HOSTNAME_VERIFIER;
	}; //class SSLSocketFactory

} //namespace ssl
} //namespace conn
} //namespace http
} //namespace apache
} //namespace org


} //namespace j2cpp

#endif //J2CPP_ORG_APACHE_HTTP_CONN_SSL_SSLSOCKETFACTORY_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ORG_APACHE_HTTP_CONN_SSL_SSLSOCKETFACTORY_HPP_IMPL
#define J2CPP_ORG_APACHE_HTTP_CONN_SSL_SSLSOCKETFACTORY_HPP_IMPL

namespace j2cpp {


template <>
local_ref< org::apache::http::conn::ssl::SSLSocketFactory > create< org::apache::http::conn::ssl::SSLSocketFactory>(local_ref< java::lang::String > const &a0, local_ref< java::security::KeyStore > const &a1, local_ref< java::lang::String > const &a2, local_ref< java::security::KeyStore > const &a3, local_ref< java::security::SecureRandom > const &a4, local_ref< org::apache::http::conn::scheme::HostNameResolver > const &a5)
{
	return local_ref< org::apache::http::conn::ssl::SSLSocketFactory >(
		environment::get().get_jenv()->NewObject(
			get_class<org::apache::http::conn::ssl::SSLSocketFactory::J2CPP_CLASS_NAME>(),
			get_method_id<org::apache::http::conn::ssl::SSLSocketFactory::J2CPP_CLASS_NAME, org::apache::http::conn::ssl::SSLSocketFactory::J2CPP_METHOD_NAME(0), org::apache::http::conn::ssl::SSLSocketFactory::J2CPP_METHOD_SIGNATURE(0), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype(), a3.get_jtype(), a4.get_jtype(), a5.get_jtype()
		)
	);
}

template <>
local_ref< org::apache::http::conn::ssl::SSLSocketFactory > create< org::apache::http::conn::ssl::SSLSocketFactory>(local_ref< java::security::KeyStore > const &a0, local_ref< java::lang::String > const &a1, local_ref< java::security::KeyStore > const &a2)
{
	return local_ref< org::apache::http::conn::ssl::SSLSocketFactory >(
		environment::get().get_jenv()->NewObject(
			get_class<org::apache::http::conn::ssl::SSLSocketFactory::J2CPP_CLASS_NAME>(),
			get_method_id<org::apache::http::conn::ssl::SSLSocketFactory::J2CPP_CLASS_NAME, org::apache::http::conn::ssl::SSLSocketFactory::J2CPP_METHOD_NAME(1), org::apache::http::conn::ssl::SSLSocketFactory::J2CPP_METHOD_SIGNATURE(1), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

template <>
local_ref< org::apache::http::conn::ssl::SSLSocketFactory > create< org::apache::http::conn::ssl::SSLSocketFactory>(local_ref< java::security::KeyStore > const &a0, local_ref< java::lang::String > const &a1)
{
	return local_ref< org::apache::http::conn::ssl::SSLSocketFactory >(
		environment::get().get_jenv()->NewObject(
			get_class<org::apache::http::conn::ssl::SSLSocketFactory::J2CPP_CLASS_NAME>(),
			get_method_id<org::apache::http::conn::ssl::SSLSocketFactory::J2CPP_CLASS_NAME, org::apache::http::conn::ssl::SSLSocketFactory::J2CPP_METHOD_NAME(2), org::apache::http::conn::ssl::SSLSocketFactory::J2CPP_METHOD_SIGNATURE(2), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

template <>
local_ref< org::apache::http::conn::ssl::SSLSocketFactory > create< org::apache::http::conn::ssl::SSLSocketFactory>(local_ref< java::security::KeyStore > const &a0)
{
	return local_ref< org::apache::http::conn::ssl::SSLSocketFactory >(
		environment::get().get_jenv()->NewObject(
			get_class<org::apache::http::conn::ssl::SSLSocketFactory::J2CPP_CLASS_NAME>(),
			get_method_id<org::apache::http::conn::ssl::SSLSocketFactory::J2CPP_CLASS_NAME, org::apache::http::conn::ssl::SSLSocketFactory::J2CPP_METHOD_NAME(3), org::apache::http::conn::ssl::SSLSocketFactory::J2CPP_METHOD_SIGNATURE(3), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< org::apache::http::conn::ssl::SSLSocketFactory > org::apache::http::conn::ssl::SSLSocketFactory::getSocketFactory()
{
	return local_ref< org::apache::http::conn::ssl::SSLSocketFactory >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), true>()
		)
	);
}

local_ref< java::net::Socket > org::apache::http::conn::ssl::SSLSocketFactory::createSocket()
{
	return local_ref< java::net::Socket >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>()
		)
	);
}

local_ref< java::net::Socket > org::apache::http::conn::ssl::SSLSocketFactory::connectSocket(local_ref< java::net::Socket > const &a0, local_ref< java::lang::String > const &a1, cpp_int const &a2, local_ref< java::net::InetAddress > const &a3, cpp_int const &a4, local_ref< org::apache::http::params::HttpParams > const &a5)
{
	return local_ref< java::net::Socket >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype(), a3.get_jtype(), a4.get_jtype(), a5.get_jtype()
		)
	);
}

cpp_boolean org::apache::http::conn::ssl::SSLSocketFactory::isSecure(local_ref< java::net::Socket > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(7), J2CPP_METHOD_SIGNATURE(7), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::net::Socket > org::apache::http::conn::ssl::SSLSocketFactory::createSocket(local_ref< java::net::Socket > const &a0, local_ref< java::lang::String > const &a1, cpp_int const &a2, cpp_boolean const &a3)
{
	return local_ref< java::net::Socket >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(8), J2CPP_METHOD_SIGNATURE(8), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype(), a3.get_jtype()
		)
	);
}

void org::apache::http::conn::ssl::SSLSocketFactory::setHostnameVerifier(local_ref< org::apache::http::conn::ssl::X509HostnameVerifier > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(9), J2CPP_METHOD_SIGNATURE(9), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< org::apache::http::conn::ssl::X509HostnameVerifier > org::apache::http::conn::ssl::SSLSocketFactory::getHostnameVerifier()
{
	return local_ref< org::apache::http::conn::ssl::X509HostnameVerifier >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(10), J2CPP_METHOD_SIGNATURE(10), false>()
		)
	);
}


static_field<
	org::apache::http::conn::ssl::SSLSocketFactory::J2CPP_CLASS_NAME,
	org::apache::http::conn::ssl::SSLSocketFactory::J2CPP_FIELD_NAME(0),
	org::apache::http::conn::ssl::SSLSocketFactory::J2CPP_FIELD_SIGNATURE(0),
	local_ref< java::lang::String >
> org::apache::http::conn::ssl::SSLSocketFactory::TLS;

static_field<
	org::apache::http::conn::ssl::SSLSocketFactory::J2CPP_CLASS_NAME,
	org::apache::http::conn::ssl::SSLSocketFactory::J2CPP_FIELD_NAME(1),
	org::apache::http::conn::ssl::SSLSocketFactory::J2CPP_FIELD_SIGNATURE(1),
	local_ref< java::lang::String >
> org::apache::http::conn::ssl::SSLSocketFactory::SSL;

static_field<
	org::apache::http::conn::ssl::SSLSocketFactory::J2CPP_CLASS_NAME,
	org::apache::http::conn::ssl::SSLSocketFactory::J2CPP_FIELD_NAME(2),
	org::apache::http::conn::ssl::SSLSocketFactory::J2CPP_FIELD_SIGNATURE(2),
	local_ref< java::lang::String >
> org::apache::http::conn::ssl::SSLSocketFactory::SSLV2;

static_field<
	org::apache::http::conn::ssl::SSLSocketFactory::J2CPP_CLASS_NAME,
	org::apache::http::conn::ssl::SSLSocketFactory::J2CPP_FIELD_NAME(3),
	org::apache::http::conn::ssl::SSLSocketFactory::J2CPP_FIELD_SIGNATURE(3),
	local_ref< org::apache::http::conn::ssl::X509HostnameVerifier >
> org::apache::http::conn::ssl::SSLSocketFactory::ALLOW_ALL_HOSTNAME_VERIFIER;

static_field<
	org::apache::http::conn::ssl::SSLSocketFactory::J2CPP_CLASS_NAME,
	org::apache::http::conn::ssl::SSLSocketFactory::J2CPP_FIELD_NAME(4),
	org::apache::http::conn::ssl::SSLSocketFactory::J2CPP_FIELD_SIGNATURE(4),
	local_ref< org::apache::http::conn::ssl::X509HostnameVerifier >
> org::apache::http::conn::ssl::SSLSocketFactory::BROWSER_COMPATIBLE_HOSTNAME_VERIFIER;

static_field<
	org::apache::http::conn::ssl::SSLSocketFactory::J2CPP_CLASS_NAME,
	org::apache::http::conn::ssl::SSLSocketFactory::J2CPP_FIELD_NAME(5),
	org::apache::http::conn::ssl::SSLSocketFactory::J2CPP_FIELD_SIGNATURE(5),
	local_ref< org::apache::http::conn::ssl::X509HostnameVerifier >
> org::apache::http::conn::ssl::SSLSocketFactory::STRICT_HOSTNAME_VERIFIER;


J2CPP_DEFINE_CLASS(org::apache::http::conn::ssl::SSLSocketFactory,"org/apache/http/conn/ssl/SSLSocketFactory")
J2CPP_DEFINE_METHOD(org::apache::http::conn::ssl::SSLSocketFactory,0,"<init>","(Ljava/lang/String;Ljava/security/KeyStore;Ljava/lang/String;Ljava/security/KeyStore;Ljava/security/SecureRandom;Lorg/apache/http/conn/scheme/HostNameResolver;)V")
J2CPP_DEFINE_METHOD(org::apache::http::conn::ssl::SSLSocketFactory,1,"<init>","(Ljava/security/KeyStore;Ljava/lang/String;Ljava/security/KeyStore;)V")
J2CPP_DEFINE_METHOD(org::apache::http::conn::ssl::SSLSocketFactory,2,"<init>","(Ljava/security/KeyStore;Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(org::apache::http::conn::ssl::SSLSocketFactory,3,"<init>","(Ljava/security/KeyStore;)V")
J2CPP_DEFINE_METHOD(org::apache::http::conn::ssl::SSLSocketFactory,4,"getSocketFactory","()Lorg/apache/http/conn/ssl/SSLSocketFactory;")
J2CPP_DEFINE_METHOD(org::apache::http::conn::ssl::SSLSocketFactory,5,"createSocket","()Ljava/net/Socket;")
J2CPP_DEFINE_METHOD(org::apache::http::conn::ssl::SSLSocketFactory,6,"connectSocket","(Ljava/net/Socket;Ljava/lang/String;ILjava/net/InetAddress;ILorg/apache/http/params/HttpParams;)Ljava/net/Socket;")
J2CPP_DEFINE_METHOD(org::apache::http::conn::ssl::SSLSocketFactory,7,"isSecure","(Ljava/net/Socket;)Z")
J2CPP_DEFINE_METHOD(org::apache::http::conn::ssl::SSLSocketFactory,8,"createSocket","(Ljava/net/Socket;Ljava/lang/String;IZ)Ljava/net/Socket;")
J2CPP_DEFINE_METHOD(org::apache::http::conn::ssl::SSLSocketFactory,9,"setHostnameVerifier","(Lorg/apache/http/conn/ssl/X509HostnameVerifier;)V")
J2CPP_DEFINE_METHOD(org::apache::http::conn::ssl::SSLSocketFactory,10,"getHostnameVerifier","()Lorg/apache/http/conn/ssl/X509HostnameVerifier;")
J2CPP_DEFINE_METHOD(org::apache::http::conn::ssl::SSLSocketFactory,11,"<clinit>","()V")
J2CPP_DEFINE_FIELD(org::apache::http::conn::ssl::SSLSocketFactory,0,"TLS","Ljava/lang/String;")
J2CPP_DEFINE_FIELD(org::apache::http::conn::ssl::SSLSocketFactory,1,"SSL","Ljava/lang/String;")
J2CPP_DEFINE_FIELD(org::apache::http::conn::ssl::SSLSocketFactory,2,"SSLV2","Ljava/lang/String;")
J2CPP_DEFINE_FIELD(org::apache::http::conn::ssl::SSLSocketFactory,3,"ALLOW_ALL_HOSTNAME_VERIFIER","Lorg/apache/http/conn/ssl/X509HostnameVerifier;")
J2CPP_DEFINE_FIELD(org::apache::http::conn::ssl::SSLSocketFactory,4,"BROWSER_COMPATIBLE_HOSTNAME_VERIFIER","Lorg/apache/http/conn/ssl/X509HostnameVerifier;")
J2CPP_DEFINE_FIELD(org::apache::http::conn::ssl::SSLSocketFactory,5,"STRICT_HOSTNAME_VERIFIER","Lorg/apache/http/conn/ssl/X509HostnameVerifier;")

} //namespace j2cpp

#endif //J2CPP_ORG_APACHE_HTTP_CONN_SSL_SSLSOCKETFACTORY_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
