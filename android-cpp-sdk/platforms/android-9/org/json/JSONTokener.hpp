/*================================================================================
  code generated by: java2cpp
  class: org.json.JSONTokener
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ORG_JSON_JSONTOKENER_HPP_DECL
#define J2CPP_ORG_JSON_JSONTOKENER_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace org { namespace json { class JSONException; } } }


#include <java/lang/Object.hpp>
#include <java/lang/String.hpp>
#include <org/json/JSONException.hpp>


namespace j2cpp {

namespace org { namespace json {

	class JSONTokener;
	class JSONTokener
		: public cpp_object<JSONTokener>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_METHOD(12)
		J2CPP_DECLARE_METHOD(13)
		J2CPP_DECLARE_METHOD(14)
		J2CPP_DECLARE_METHOD(15)

		JSONTokener(jobject jobj)
		: cpp_object<JSONTokener>(jobj)
		{
		}

		local_ref< java::lang::Object > nextValue();
		local_ref< java::lang::String > nextString(cpp_char const&);
		local_ref< org::json::JSONException > syntaxError(local_ref< java::lang::String > const&);
		local_ref< java::lang::String > toString();
		cpp_boolean more();
		cpp_char next();
		cpp_char next(cpp_char const&);
		cpp_char nextClean();
		local_ref< java::lang::String > next(cpp_int const&);
		local_ref< java::lang::String > nextTo(local_ref< java::lang::String > const&);
		local_ref< java::lang::String > nextTo(cpp_char const&);
		void skipPast(local_ref< java::lang::String > const&);
		cpp_char skipTo(cpp_char const&);
		void back();
		static cpp_int dehexchar(cpp_char const&);
	}; //class JSONTokener

} //namespace json
} //namespace org


} //namespace j2cpp

#endif //J2CPP_ORG_JSON_JSONTOKENER_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ORG_JSON_JSONTOKENER_HPP_IMPL
#define J2CPP_ORG_JSON_JSONTOKENER_HPP_IMPL

namespace j2cpp {


template <>
local_ref< org::json::JSONTokener > create< org::json::JSONTokener>(local_ref< java::lang::String > const &a0)
{
	return local_ref< org::json::JSONTokener >(
		environment::get().get_jenv()->NewObject(
			get_class<org::json::JSONTokener::J2CPP_CLASS_NAME>(),
			get_method_id<org::json::JSONTokener::J2CPP_CLASS_NAME, org::json::JSONTokener::J2CPP_METHOD_NAME(0), org::json::JSONTokener::J2CPP_METHOD_SIGNATURE(0), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::Object > org::json::JSONTokener::nextValue()
{
	return local_ref< java::lang::Object >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), false>()
		)
	);
}

local_ref< java::lang::String > org::json::JSONTokener::nextString(cpp_char const &a0)
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< org::json::JSONException > org::json::JSONTokener::syntaxError(local_ref< java::lang::String > const &a0)
{
	return local_ref< org::json::JSONException >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::String > org::json::JSONTokener::toString()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>()
		)
	);
}

cpp_boolean org::json::JSONTokener::more()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>()
		)
	);
}

cpp_char org::json::JSONTokener::next()
{
	return cpp_char(
		environment::get().get_jenv()->CallCharMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>()
		)
	);
}

cpp_char org::json::JSONTokener::next(cpp_char const &a0)
{
	return cpp_char(
		environment::get().get_jenv()->CallCharMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(7), J2CPP_METHOD_SIGNATURE(7), false>(),
			a0.get_jtype()
		)
	);
}

cpp_char org::json::JSONTokener::nextClean()
{
	return cpp_char(
		environment::get().get_jenv()->CallCharMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(8), J2CPP_METHOD_SIGNATURE(8), false>()
		)
	);
}

local_ref< java::lang::String > org::json::JSONTokener::next(cpp_int const &a0)
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(9), J2CPP_METHOD_SIGNATURE(9), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::String > org::json::JSONTokener::nextTo(local_ref< java::lang::String > const &a0)
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(10), J2CPP_METHOD_SIGNATURE(10), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::String > org::json::JSONTokener::nextTo(cpp_char const &a0)
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(11), J2CPP_METHOD_SIGNATURE(11), false>(),
			a0.get_jtype()
		)
	);
}

void org::json::JSONTokener::skipPast(local_ref< java::lang::String > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(12), J2CPP_METHOD_SIGNATURE(12), false>(),
			a0.get_jtype()
		)
	);
}

cpp_char org::json::JSONTokener::skipTo(cpp_char const &a0)
{
	return cpp_char(
		environment::get().get_jenv()->CallCharMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(13), J2CPP_METHOD_SIGNATURE(13), false>(),
			a0.get_jtype()
		)
	);
}

void org::json::JSONTokener::back()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(14), J2CPP_METHOD_SIGNATURE(14), false>()
		)
	);
}

cpp_int org::json::JSONTokener::dehexchar(cpp_char const &a0)
{
	return cpp_int(
		environment::get().get_jenv()->CallStaticIntMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(15), J2CPP_METHOD_SIGNATURE(15), true>(),
			a0.get_jtype()
		)
	);
}


J2CPP_DEFINE_CLASS(org::json::JSONTokener,"org/json/JSONTokener")
J2CPP_DEFINE_METHOD(org::json::JSONTokener,0,"<init>","(Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(org::json::JSONTokener,1,"nextValue","()Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(org::json::JSONTokener,2,"nextString","(C)Ljava/lang/String;")
J2CPP_DEFINE_METHOD(org::json::JSONTokener,3,"syntaxError","(Ljava/lang/String;)Lorg/json/JSONException;")
J2CPP_DEFINE_METHOD(org::json::JSONTokener,4,"toString","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(org::json::JSONTokener,5,"more","()Z")
J2CPP_DEFINE_METHOD(org::json::JSONTokener,6,"next","()C")
J2CPP_DEFINE_METHOD(org::json::JSONTokener,7,"next","(C)C")
J2CPP_DEFINE_METHOD(org::json::JSONTokener,8,"nextClean","()C")
J2CPP_DEFINE_METHOD(org::json::JSONTokener,9,"next","(I)Ljava/lang/String;")
J2CPP_DEFINE_METHOD(org::json::JSONTokener,10,"nextTo","(Ljava/lang/String;)Ljava/lang/String;")
J2CPP_DEFINE_METHOD(org::json::JSONTokener,11,"nextTo","(C)Ljava/lang/String;")
J2CPP_DEFINE_METHOD(org::json::JSONTokener,12,"skipPast","(Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(org::json::JSONTokener,13,"skipTo","(C)C")
J2CPP_DEFINE_METHOD(org::json::JSONTokener,14,"back","()V")
J2CPP_DEFINE_METHOD(org::json::JSONTokener,15,"dehexchar","(C)I")

} //namespace j2cpp

#endif //J2CPP_ORG_JSON_JSONTOKENER_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
