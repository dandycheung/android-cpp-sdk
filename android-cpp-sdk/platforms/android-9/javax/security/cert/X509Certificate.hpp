/*================================================================================
  code generated by: java2cpp
  class: javax.security.cert.X509Certificate
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVAX_SECURITY_CERT_X509CERTIFICATE_HPP_DECL
#define J2CPP_JAVAX_SECURITY_CERT_X509CERTIFICATE_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace security { class Principal; } } }
namespace j2cpp { namespace java { namespace util { class Date; } } }
namespace j2cpp { namespace java { namespace io { class InputStream; } } }
namespace j2cpp { namespace java { namespace math { class BigInteger; } } }


#include <java/io/InputStream.hpp>
#include <java/lang/String.hpp>
#include <java/math/BigInteger.hpp>
#include <java/security/Principal.hpp>
#include <java/util/Date.hpp>


namespace j2cpp {

namespace javax { namespace security { namespace cert {

	class X509Certificate;
	class X509Certificate
		: public cpp_object<X509Certificate>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_METHOD(12)
		J2CPP_DECLARE_METHOD(13)

		X509Certificate(jobject jobj)
		: cpp_object<X509Certificate>(jobj)
		{
		}

		static local_ref< javax::security::cert::X509Certificate > getInstance(local_ref< java::io::InputStream > const&);
		static local_ref< javax::security::cert::X509Certificate > getInstance(local_ref< cpp_byte_array<1> > const&);
		void checkValidity();
		void checkValidity(local_ref< java::util::Date > const&);
		cpp_int getVersion();
		local_ref< java::math::BigInteger > getSerialNumber();
		local_ref< java::security::Principal > getIssuerDN();
		local_ref< java::security::Principal > getSubjectDN();
		local_ref< java::util::Date > getNotBefore();
		local_ref< java::util::Date > getNotAfter();
		local_ref< java::lang::String > getSigAlgName();
		local_ref< java::lang::String > getSigAlgOID();
		local_ref< cpp_byte_array<1> > getSigAlgParams();
	}; //class X509Certificate

} //namespace cert
} //namespace security
} //namespace javax


} //namespace j2cpp

#endif //J2CPP_JAVAX_SECURITY_CERT_X509CERTIFICATE_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVAX_SECURITY_CERT_X509CERTIFICATE_HPP_IMPL
#define J2CPP_JAVAX_SECURITY_CERT_X509CERTIFICATE_HPP_IMPL

namespace j2cpp {


template <>
local_ref< javax::security::cert::X509Certificate > create< javax::security::cert::X509Certificate>()
{
	return local_ref< javax::security::cert::X509Certificate >(
		environment::get().get_jenv()->NewObject(
			get_class<javax::security::cert::X509Certificate::J2CPP_CLASS_NAME>(),
			get_method_id<javax::security::cert::X509Certificate::J2CPP_CLASS_NAME, javax::security::cert::X509Certificate::J2CPP_METHOD_NAME(0), javax::security::cert::X509Certificate::J2CPP_METHOD_SIGNATURE(0), false>()
		)
	);
}

local_ref< javax::security::cert::X509Certificate > javax::security::cert::X509Certificate::getInstance(local_ref< java::io::InputStream > const &a0)
{
	return local_ref< javax::security::cert::X509Certificate >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), true>(),
			a0.get_jtype()
		)
	);
}

local_ref< javax::security::cert::X509Certificate > javax::security::cert::X509Certificate::getInstance(local_ref< cpp_byte_array<1> > const &a0)
{
	return local_ref< javax::security::cert::X509Certificate >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), true>(),
			a0.get_jtype()
		)
	);
}

void javax::security::cert::X509Certificate::checkValidity()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>()
		)
	);
}

void javax::security::cert::X509Certificate::checkValidity(local_ref< java::util::Date > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int javax::security::cert::X509Certificate::getVersion()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>()
		)
	);
}

local_ref< java::math::BigInteger > javax::security::cert::X509Certificate::getSerialNumber()
{
	return local_ref< java::math::BigInteger >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>()
		)
	);
}

local_ref< java::security::Principal > javax::security::cert::X509Certificate::getIssuerDN()
{
	return local_ref< java::security::Principal >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(7), J2CPP_METHOD_SIGNATURE(7), false>()
		)
	);
}

local_ref< java::security::Principal > javax::security::cert::X509Certificate::getSubjectDN()
{
	return local_ref< java::security::Principal >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(8), J2CPP_METHOD_SIGNATURE(8), false>()
		)
	);
}

local_ref< java::util::Date > javax::security::cert::X509Certificate::getNotBefore()
{
	return local_ref< java::util::Date >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(9), J2CPP_METHOD_SIGNATURE(9), false>()
		)
	);
}

local_ref< java::util::Date > javax::security::cert::X509Certificate::getNotAfter()
{
	return local_ref< java::util::Date >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(10), J2CPP_METHOD_SIGNATURE(10), false>()
		)
	);
}

local_ref< java::lang::String > javax::security::cert::X509Certificate::getSigAlgName()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(11), J2CPP_METHOD_SIGNATURE(11), false>()
		)
	);
}

local_ref< java::lang::String > javax::security::cert::X509Certificate::getSigAlgOID()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(12), J2CPP_METHOD_SIGNATURE(12), false>()
		)
	);
}

local_ref< cpp_byte_array<1> > javax::security::cert::X509Certificate::getSigAlgParams()
{
	return local_ref< cpp_byte_array<1> >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(13), J2CPP_METHOD_SIGNATURE(13), false>()
		)
	);
}


J2CPP_DEFINE_CLASS(javax::security::cert::X509Certificate,"javax/security/cert/X509Certificate")
J2CPP_DEFINE_METHOD(javax::security::cert::X509Certificate,0,"<init>","()V")
J2CPP_DEFINE_METHOD(javax::security::cert::X509Certificate,1,"getInstance","(Ljava/io/InputStream;)Ljavax/security/cert/X509Certificate;")
J2CPP_DEFINE_METHOD(javax::security::cert::X509Certificate,2,"getInstance","([B)Ljavax/security/cert/X509Certificate;")
J2CPP_DEFINE_METHOD(javax::security::cert::X509Certificate,3,"checkValidity","()V")
J2CPP_DEFINE_METHOD(javax::security::cert::X509Certificate,4,"checkValidity","(Ljava/util/Date;)V")
J2CPP_DEFINE_METHOD(javax::security::cert::X509Certificate,5,"getVersion","()I")
J2CPP_DEFINE_METHOD(javax::security::cert::X509Certificate,6,"getSerialNumber","()Ljava/math/BigInteger;")
J2CPP_DEFINE_METHOD(javax::security::cert::X509Certificate,7,"getIssuerDN","()Ljava/security/Principal;")
J2CPP_DEFINE_METHOD(javax::security::cert::X509Certificate,8,"getSubjectDN","()Ljava/security/Principal;")
J2CPP_DEFINE_METHOD(javax::security::cert::X509Certificate,9,"getNotBefore","()Ljava/util/Date;")
J2CPP_DEFINE_METHOD(javax::security::cert::X509Certificate,10,"getNotAfter","()Ljava/util/Date;")
J2CPP_DEFINE_METHOD(javax::security::cert::X509Certificate,11,"getSigAlgName","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(javax::security::cert::X509Certificate,12,"getSigAlgOID","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(javax::security::cert::X509Certificate,13,"getSigAlgParams","()[B")

} //namespace j2cpp

#endif //J2CPP_JAVAX_SECURITY_CERT_X509CERTIFICATE_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
