/*================================================================================
  code generated by: java2cpp
  class: javax.xml.transform.TransformerException
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVAX_XML_TRANSFORM_TRANSFORMEREXCEPTION_HPP_DECL
#define J2CPP_JAVAX_XML_TRANSFORM_TRANSFORMEREXCEPTION_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace lang { class Throwable; } } }
namespace j2cpp { namespace javax { namespace xml { namespace transform { class SourceLocator; } } } }
namespace j2cpp { namespace java { namespace io { class PrintWriter; } } }
namespace j2cpp { namespace java { namespace io { class PrintStream; } } }


#include <java/io/PrintStream.hpp>
#include <java/io/PrintWriter.hpp>
#include <java/lang/String.hpp>
#include <java/lang/Throwable.hpp>
#include <javax/xml/transform/SourceLocator.hpp>


namespace j2cpp {

namespace javax { namespace xml { namespace transform {

	class TransformerException;
	class TransformerException
		: public cpp_object<TransformerException>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_METHOD(12)
		J2CPP_DECLARE_METHOD(13)
		J2CPP_DECLARE_METHOD(14)

		TransformerException(jobject jobj)
		: cpp_object<TransformerException>(jobj)
		{
		}

		local_ref< javax::xml::transform::SourceLocator > getLocator();
		void setLocator(local_ref< javax::xml::transform::SourceLocator > const&);
		local_ref< java::lang::Throwable > getException();
		local_ref< java::lang::Throwable > getCause();
		local_ref< java::lang::Throwable > initCause(local_ref< java::lang::Throwable > const&);
		local_ref< java::lang::String > getMessageAndLocation();
		local_ref< java::lang::String > getLocationAsString();
		void printStackTrace();
		void printStackTrace(local_ref< java::io::PrintStream > const&);
		void printStackTrace(local_ref< java::io::PrintWriter > const&);
	}; //class TransformerException

} //namespace transform
} //namespace xml
} //namespace javax


} //namespace j2cpp

#endif //J2CPP_JAVAX_XML_TRANSFORM_TRANSFORMEREXCEPTION_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVAX_XML_TRANSFORM_TRANSFORMEREXCEPTION_HPP_IMPL
#define J2CPP_JAVAX_XML_TRANSFORM_TRANSFORMEREXCEPTION_HPP_IMPL

namespace j2cpp {


template <>
local_ref< javax::xml::transform::TransformerException > create< javax::xml::transform::TransformerException>(local_ref< java::lang::String > const &a0)
{
	return local_ref< javax::xml::transform::TransformerException >(
		environment::get().get_jenv()->NewObject(
			get_class<javax::xml::transform::TransformerException::J2CPP_CLASS_NAME>(),
			get_method_id<javax::xml::transform::TransformerException::J2CPP_CLASS_NAME, javax::xml::transform::TransformerException::J2CPP_METHOD_NAME(0), javax::xml::transform::TransformerException::J2CPP_METHOD_SIGNATURE(0), false>(),
			a0.get_jtype()
		)
	);
}

template <>
local_ref< javax::xml::transform::TransformerException > create< javax::xml::transform::TransformerException>(local_ref< java::lang::Throwable > const &a0)
{
	return local_ref< javax::xml::transform::TransformerException >(
		environment::get().get_jenv()->NewObject(
			get_class<javax::xml::transform::TransformerException::J2CPP_CLASS_NAME>(),
			get_method_id<javax::xml::transform::TransformerException::J2CPP_CLASS_NAME, javax::xml::transform::TransformerException::J2CPP_METHOD_NAME(1), javax::xml::transform::TransformerException::J2CPP_METHOD_SIGNATURE(1), false>(),
			a0.get_jtype()
		)
	);
}

template <>
local_ref< javax::xml::transform::TransformerException > create< javax::xml::transform::TransformerException>(local_ref< java::lang::String > const &a0, local_ref< java::lang::Throwable > const &a1)
{
	return local_ref< javax::xml::transform::TransformerException >(
		environment::get().get_jenv()->NewObject(
			get_class<javax::xml::transform::TransformerException::J2CPP_CLASS_NAME>(),
			get_method_id<javax::xml::transform::TransformerException::J2CPP_CLASS_NAME, javax::xml::transform::TransformerException::J2CPP_METHOD_NAME(2), javax::xml::transform::TransformerException::J2CPP_METHOD_SIGNATURE(2), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

template <>
local_ref< javax::xml::transform::TransformerException > create< javax::xml::transform::TransformerException>(local_ref< java::lang::String > const &a0, local_ref< javax::xml::transform::SourceLocator > const &a1)
{
	return local_ref< javax::xml::transform::TransformerException >(
		environment::get().get_jenv()->NewObject(
			get_class<javax::xml::transform::TransformerException::J2CPP_CLASS_NAME>(),
			get_method_id<javax::xml::transform::TransformerException::J2CPP_CLASS_NAME, javax::xml::transform::TransformerException::J2CPP_METHOD_NAME(3), javax::xml::transform::TransformerException::J2CPP_METHOD_SIGNATURE(3), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

template <>
local_ref< javax::xml::transform::TransformerException > create< javax::xml::transform::TransformerException>(local_ref< java::lang::String > const &a0, local_ref< javax::xml::transform::SourceLocator > const &a1, local_ref< java::lang::Throwable > const &a2)
{
	return local_ref< javax::xml::transform::TransformerException >(
		environment::get().get_jenv()->NewObject(
			get_class<javax::xml::transform::TransformerException::J2CPP_CLASS_NAME>(),
			get_method_id<javax::xml::transform::TransformerException::J2CPP_CLASS_NAME, javax::xml::transform::TransformerException::J2CPP_METHOD_NAME(4), javax::xml::transform::TransformerException::J2CPP_METHOD_SIGNATURE(4), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

local_ref< javax::xml::transform::SourceLocator > javax::xml::transform::TransformerException::getLocator()
{
	return local_ref< javax::xml::transform::SourceLocator >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>()
		)
	);
}

void javax::xml::transform::TransformerException::setLocator(local_ref< javax::xml::transform::SourceLocator > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::Throwable > javax::xml::transform::TransformerException::getException()
{
	return local_ref< java::lang::Throwable >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(7), J2CPP_METHOD_SIGNATURE(7), false>()
		)
	);
}

local_ref< java::lang::Throwable > javax::xml::transform::TransformerException::getCause()
{
	return local_ref< java::lang::Throwable >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(8), J2CPP_METHOD_SIGNATURE(8), false>()
		)
	);
}

local_ref< java::lang::Throwable > javax::xml::transform::TransformerException::initCause(local_ref< java::lang::Throwable > const &a0)
{
	return local_ref< java::lang::Throwable >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(9), J2CPP_METHOD_SIGNATURE(9), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::String > javax::xml::transform::TransformerException::getMessageAndLocation()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(10), J2CPP_METHOD_SIGNATURE(10), false>()
		)
	);
}

local_ref< java::lang::String > javax::xml::transform::TransformerException::getLocationAsString()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(11), J2CPP_METHOD_SIGNATURE(11), false>()
		)
	);
}

void javax::xml::transform::TransformerException::printStackTrace()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(12), J2CPP_METHOD_SIGNATURE(12), false>()
		)
	);
}

void javax::xml::transform::TransformerException::printStackTrace(local_ref< java::io::PrintStream > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(13), J2CPP_METHOD_SIGNATURE(13), false>(),
			a0.get_jtype()
		)
	);
}

void javax::xml::transform::TransformerException::printStackTrace(local_ref< java::io::PrintWriter > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(14), J2CPP_METHOD_SIGNATURE(14), false>(),
			a0.get_jtype()
		)
	);
}


J2CPP_DEFINE_CLASS(javax::xml::transform::TransformerException,"javax/xml/transform/TransformerException")
J2CPP_DEFINE_METHOD(javax::xml::transform::TransformerException,0,"<init>","(Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(javax::xml::transform::TransformerException,1,"<init>","(Ljava/lang/Throwable;)V")
J2CPP_DEFINE_METHOD(javax::xml::transform::TransformerException,2,"<init>","(Ljava/lang/String;Ljava/lang/Throwable;)V")
J2CPP_DEFINE_METHOD(javax::xml::transform::TransformerException,3,"<init>","(Ljava/lang/String;Ljavax/xml/transform/SourceLocator;)V")
J2CPP_DEFINE_METHOD(javax::xml::transform::TransformerException,4,"<init>","(Ljava/lang/String;Ljavax/xml/transform/SourceLocator;Ljava/lang/Throwable;)V")
J2CPP_DEFINE_METHOD(javax::xml::transform::TransformerException,5,"getLocator","()Ljavax/xml/transform/SourceLocator;")
J2CPP_DEFINE_METHOD(javax::xml::transform::TransformerException,6,"setLocator","(Ljavax/xml/transform/SourceLocator;)V")
J2CPP_DEFINE_METHOD(javax::xml::transform::TransformerException,7,"getException","()Ljava/lang/Throwable;")
J2CPP_DEFINE_METHOD(javax::xml::transform::TransformerException,8,"getCause","()Ljava/lang/Throwable;")
J2CPP_DEFINE_METHOD(javax::xml::transform::TransformerException,9,"initCause","(Ljava/lang/Throwable;)Ljava/lang/Throwable;")
J2CPP_DEFINE_METHOD(javax::xml::transform::TransformerException,10,"getMessageAndLocation","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(javax::xml::transform::TransformerException,11,"getLocationAsString","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(javax::xml::transform::TransformerException,12,"printStackTrace","()V")
J2CPP_DEFINE_METHOD(javax::xml::transform::TransformerException,13,"printStackTrace","(Ljava/io/PrintStream;)V")
J2CPP_DEFINE_METHOD(javax::xml::transform::TransformerException,14,"printStackTrace","(Ljava/io/PrintWriter;)V")

} //namespace j2cpp

#endif //J2CPP_JAVAX_XML_TRANSFORM_TRANSFORMEREXCEPTION_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
