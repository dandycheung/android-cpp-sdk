/*================================================================================
  code generated by: java2cpp
  class: javax.net.ssl.SSLParameters
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVAX_NET_SSL_SSLPARAMETERS_HPP_DECL
#define J2CPP_JAVAX_NET_SSL_SSLPARAMETERS_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class String; } } }


#include <java/lang/String.hpp>


namespace j2cpp {

namespace javax { namespace net { namespace ssl {

	class SSLParameters;
	class SSLParameters
		: public cpp_object<SSLParameters>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)

		SSLParameters(jobject jobj)
		: cpp_object<SSLParameters>(jobj)
		{
		}

		local_ref< cpp_object_array<java::lang::String, 1> > getCipherSuites();
		void setCipherSuites(local_ref< cpp_object_array<java::lang::String, 1> > const&);
		local_ref< cpp_object_array<java::lang::String, 1> > getProtocols();
		void setProtocols(local_ref< cpp_object_array<java::lang::String, 1> > const&);
		cpp_boolean getNeedClientAuth();
		void setNeedClientAuth(cpp_boolean const&);
		cpp_boolean getWantClientAuth();
		void setWantClientAuth(cpp_boolean const&);
	}; //class SSLParameters

} //namespace ssl
} //namespace net
} //namespace javax


} //namespace j2cpp

#endif //J2CPP_JAVAX_NET_SSL_SSLPARAMETERS_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVAX_NET_SSL_SSLPARAMETERS_HPP_IMPL
#define J2CPP_JAVAX_NET_SSL_SSLPARAMETERS_HPP_IMPL

namespace j2cpp {


template <>
local_ref< javax::net::ssl::SSLParameters > create< javax::net::ssl::SSLParameters>()
{
	return local_ref< javax::net::ssl::SSLParameters >(
		environment::get().get_jenv()->NewObject(
			get_class<javax::net::ssl::SSLParameters::J2CPP_CLASS_NAME>(),
			get_method_id<javax::net::ssl::SSLParameters::J2CPP_CLASS_NAME, javax::net::ssl::SSLParameters::J2CPP_METHOD_NAME(0), javax::net::ssl::SSLParameters::J2CPP_METHOD_SIGNATURE(0), false>()
		)
	);
}

template <>
local_ref< javax::net::ssl::SSLParameters > create< javax::net::ssl::SSLParameters>(local_ref< cpp_object_array<java::lang::String, 1> > const &a0)
{
	return local_ref< javax::net::ssl::SSLParameters >(
		environment::get().get_jenv()->NewObject(
			get_class<javax::net::ssl::SSLParameters::J2CPP_CLASS_NAME>(),
			get_method_id<javax::net::ssl::SSLParameters::J2CPP_CLASS_NAME, javax::net::ssl::SSLParameters::J2CPP_METHOD_NAME(1), javax::net::ssl::SSLParameters::J2CPP_METHOD_SIGNATURE(1), false>(),
			a0.get_jtype()
		)
	);
}

template <>
local_ref< javax::net::ssl::SSLParameters > create< javax::net::ssl::SSLParameters>(local_ref< cpp_object_array<java::lang::String, 1> > const &a0, local_ref< cpp_object_array<java::lang::String, 1> > const &a1)
{
	return local_ref< javax::net::ssl::SSLParameters >(
		environment::get().get_jenv()->NewObject(
			get_class<javax::net::ssl::SSLParameters::J2CPP_CLASS_NAME>(),
			get_method_id<javax::net::ssl::SSLParameters::J2CPP_CLASS_NAME, javax::net::ssl::SSLParameters::J2CPP_METHOD_NAME(2), javax::net::ssl::SSLParameters::J2CPP_METHOD_SIGNATURE(2), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< cpp_object_array<java::lang::String, 1> > javax::net::ssl::SSLParameters::getCipherSuites()
{
	return local_ref< cpp_object_array<java::lang::String, 1> >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>()
		)
	);
}

void javax::net::ssl::SSLParameters::setCipherSuites(local_ref< cpp_object_array<java::lang::String, 1> > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< cpp_object_array<java::lang::String, 1> > javax::net::ssl::SSLParameters::getProtocols()
{
	return local_ref< cpp_object_array<java::lang::String, 1> >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>()
		)
	);
}

void javax::net::ssl::SSLParameters::setProtocols(local_ref< cpp_object_array<java::lang::String, 1> > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean javax::net::ssl::SSLParameters::getNeedClientAuth()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(7), J2CPP_METHOD_SIGNATURE(7), false>()
		)
	);
}

void javax::net::ssl::SSLParameters::setNeedClientAuth(cpp_boolean const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(8), J2CPP_METHOD_SIGNATURE(8), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean javax::net::ssl::SSLParameters::getWantClientAuth()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(9), J2CPP_METHOD_SIGNATURE(9), false>()
		)
	);
}

void javax::net::ssl::SSLParameters::setWantClientAuth(cpp_boolean const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(10), J2CPP_METHOD_SIGNATURE(10), false>(),
			a0.get_jtype()
		)
	);
}


J2CPP_DEFINE_CLASS(javax::net::ssl::SSLParameters,"javax/net/ssl/SSLParameters")
J2CPP_DEFINE_METHOD(javax::net::ssl::SSLParameters,0,"<init>","()V")
J2CPP_DEFINE_METHOD(javax::net::ssl::SSLParameters,1,"<init>","([java.lang.String)V")
J2CPP_DEFINE_METHOD(javax::net::ssl::SSLParameters,2,"<init>","([java.lang.String[java.lang.String)V")
J2CPP_DEFINE_METHOD(javax::net::ssl::SSLParameters,3,"getCipherSuites","()[java.lang.String")
J2CPP_DEFINE_METHOD(javax::net::ssl::SSLParameters,4,"setCipherSuites","([java.lang.String)V")
J2CPP_DEFINE_METHOD(javax::net::ssl::SSLParameters,5,"getProtocols","()[java.lang.String")
J2CPP_DEFINE_METHOD(javax::net::ssl::SSLParameters,6,"setProtocols","([java.lang.String)V")
J2CPP_DEFINE_METHOD(javax::net::ssl::SSLParameters,7,"getNeedClientAuth","()Z")
J2CPP_DEFINE_METHOD(javax::net::ssl::SSLParameters,8,"setNeedClientAuth","(Z)V")
J2CPP_DEFINE_METHOD(javax::net::ssl::SSLParameters,9,"getWantClientAuth","()Z")
J2CPP_DEFINE_METHOD(javax::net::ssl::SSLParameters,10,"setWantClientAuth","(Z)V")

} //namespace j2cpp

#endif //J2CPP_JAVAX_NET_SSL_SSLPARAMETERS_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
