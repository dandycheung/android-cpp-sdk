/*================================================================================
  code generated by: java2cpp
  class: javax.crypto.spec.OAEPParameterSpec
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVAX_CRYPTO_SPEC_OAEPPARAMETERSPEC_HPP_DECL
#define J2CPP_JAVAX_CRYPTO_SPEC_OAEPPARAMETERSPEC_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace javax { namespace crypto { namespace spec { class PSource; } } } }
namespace j2cpp { namespace java { namespace security { namespace spec { class AlgorithmParameterSpec; } } } }


#include <java/lang/String.hpp>
#include <java/security/spec/AlgorithmParameterSpec.hpp>
#include <javax/crypto/spec/PSource.hpp>


namespace j2cpp {

namespace javax { namespace crypto { namespace spec {

	class OAEPParameterSpec;
	class OAEPParameterSpec
		: public cpp_object<OAEPParameterSpec>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_FIELD(0)

		OAEPParameterSpec(jobject jobj)
		: cpp_object<OAEPParameterSpec>(jobj)
		{
		}

		local_ref< java::lang::String > getDigestAlgorithm();
		local_ref< java::lang::String > getMGFAlgorithm();
		local_ref< java::security::spec::AlgorithmParameterSpec > getMGFParameters();
		local_ref< javax::crypto::spec::PSource > getPSource();

		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(0), J2CPP_FIELD_SIGNATURE(0), local_ref< javax::crypto::spec::OAEPParameterSpec > > DEFAULT;
	}; //class OAEPParameterSpec

} //namespace spec
} //namespace crypto
} //namespace javax


} //namespace j2cpp

#endif //J2CPP_JAVAX_CRYPTO_SPEC_OAEPPARAMETERSPEC_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVAX_CRYPTO_SPEC_OAEPPARAMETERSPEC_HPP_IMPL
#define J2CPP_JAVAX_CRYPTO_SPEC_OAEPPARAMETERSPEC_HPP_IMPL

namespace j2cpp {


template <>
local_ref< javax::crypto::spec::OAEPParameterSpec > create< javax::crypto::spec::OAEPParameterSpec>(local_ref< java::lang::String > const &a0, local_ref< java::lang::String > const &a1, local_ref< java::security::spec::AlgorithmParameterSpec > const &a2, local_ref< javax::crypto::spec::PSource > const &a3)
{
	return local_ref< javax::crypto::spec::OAEPParameterSpec >(
		environment::get().get_jenv()->NewObject(
			get_class<javax::crypto::spec::OAEPParameterSpec::J2CPP_CLASS_NAME>(),
			get_method_id<javax::crypto::spec::OAEPParameterSpec::J2CPP_CLASS_NAME, javax::crypto::spec::OAEPParameterSpec::J2CPP_METHOD_NAME(0), javax::crypto::spec::OAEPParameterSpec::J2CPP_METHOD_SIGNATURE(0), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype(), a3.get_jtype()
		)
	);
}

local_ref< java::lang::String > javax::crypto::spec::OAEPParameterSpec::getDigestAlgorithm()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), false>()
		)
	);
}

local_ref< java::lang::String > javax::crypto::spec::OAEPParameterSpec::getMGFAlgorithm()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>()
		)
	);
}

local_ref< java::security::spec::AlgorithmParameterSpec > javax::crypto::spec::OAEPParameterSpec::getMGFParameters()
{
	return local_ref< java::security::spec::AlgorithmParameterSpec >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>()
		)
	);
}

local_ref< javax::crypto::spec::PSource > javax::crypto::spec::OAEPParameterSpec::getPSource()
{
	return local_ref< javax::crypto::spec::PSource >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>()
		)
	);
}


static_field<
	javax::crypto::spec::OAEPParameterSpec::J2CPP_CLASS_NAME,
	javax::crypto::spec::OAEPParameterSpec::J2CPP_FIELD_NAME(0),
	javax::crypto::spec::OAEPParameterSpec::J2CPP_FIELD_SIGNATURE(0),
	local_ref< javax::crypto::spec::OAEPParameterSpec >
> javax::crypto::spec::OAEPParameterSpec::DEFAULT;


J2CPP_DEFINE_CLASS(javax::crypto::spec::OAEPParameterSpec,"javax/crypto/spec/OAEPParameterSpec")
J2CPP_DEFINE_METHOD(javax::crypto::spec::OAEPParameterSpec,0,"<init>","(Ljava/lang/String;Ljava/lang/String;Ljava/security/spec/AlgorithmParameterSpec;Ljavax/crypto/spec/PSource;)V")
J2CPP_DEFINE_METHOD(javax::crypto::spec::OAEPParameterSpec,1,"getDigestAlgorithm","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(javax::crypto::spec::OAEPParameterSpec,2,"getMGFAlgorithm","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(javax::crypto::spec::OAEPParameterSpec,3,"getMGFParameters","()Ljava/security/spec/AlgorithmParameterSpec;")
J2CPP_DEFINE_METHOD(javax::crypto::spec::OAEPParameterSpec,4,"getPSource","()Ljavax/crypto/spec/PSource;")
J2CPP_DEFINE_METHOD(javax::crypto::spec::OAEPParameterSpec,5,"<clinit>","()V")
J2CPP_DEFINE_FIELD(javax::crypto::spec::OAEPParameterSpec,0,"DEFAULT","Ljavax/crypto/spec/OAEPParameterSpec;")

} //namespace j2cpp

#endif //J2CPP_JAVAX_CRYPTO_SPEC_OAEPPARAMETERSPEC_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
