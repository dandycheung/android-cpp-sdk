/*================================================================================
  code generated by: java2cpp
  class: javax.crypto.CipherInputStream
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVAX_CRYPTO_CIPHERINPUTSTREAM_HPP_DECL
#define J2CPP_JAVAX_CRYPTO_CIPHERINPUTSTREAM_HPP_DECL


namespace j2cpp { namespace javax { namespace crypto { class Cipher; } } }
namespace j2cpp { namespace java { namespace io { class InputStream; } } }


#include <java/io/InputStream.hpp>
#include <javax/crypto/Cipher.hpp>


namespace j2cpp {

namespace javax { namespace crypto {

	class CipherInputStream;
	class CipherInputStream
		: public cpp_object<CipherInputStream>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)

		CipherInputStream(jobject jobj)
		: cpp_object<CipherInputStream>(jobj)
		{
		}

		cpp_int read();
		cpp_int read(local_ref< cpp_byte_array<1> > const&);
		cpp_int read(local_ref< cpp_byte_array<1> > const&, cpp_int const&, cpp_int const&);
		cpp_long skip(cpp_long const&);
		cpp_int available();
		void close();
		cpp_boolean markSupported();
	}; //class CipherInputStream

} //namespace crypto
} //namespace javax


} //namespace j2cpp

#endif //J2CPP_JAVAX_CRYPTO_CIPHERINPUTSTREAM_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVAX_CRYPTO_CIPHERINPUTSTREAM_HPP_IMPL
#define J2CPP_JAVAX_CRYPTO_CIPHERINPUTSTREAM_HPP_IMPL

namespace j2cpp {


template <>
local_ref< javax::crypto::CipherInputStream > create< javax::crypto::CipherInputStream>(local_ref< java::io::InputStream > const &a0, local_ref< javax::crypto::Cipher > const &a1)
{
	return local_ref< javax::crypto::CipherInputStream >(
		environment::get().get_jenv()->NewObject(
			get_class<javax::crypto::CipherInputStream::J2CPP_CLASS_NAME>(),
			get_method_id<javax::crypto::CipherInputStream::J2CPP_CLASS_NAME, javax::crypto::CipherInputStream::J2CPP_METHOD_NAME(0), javax::crypto::CipherInputStream::J2CPP_METHOD_SIGNATURE(0), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

template <>
local_ref< javax::crypto::CipherInputStream > create< javax::crypto::CipherInputStream>(local_ref< java::io::InputStream > const &a0)
{
	return local_ref< javax::crypto::CipherInputStream >(
		environment::get().get_jenv()->NewObject(
			get_class<javax::crypto::CipherInputStream::J2CPP_CLASS_NAME>(),
			get_method_id<javax::crypto::CipherInputStream::J2CPP_CLASS_NAME, javax::crypto::CipherInputStream::J2CPP_METHOD_NAME(1), javax::crypto::CipherInputStream::J2CPP_METHOD_SIGNATURE(1), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int javax::crypto::CipherInputStream::read()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>()
		)
	);
}

cpp_int javax::crypto::CipherInputStream::read(local_ref< cpp_byte_array<1> > const &a0)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int javax::crypto::CipherInputStream::read(local_ref< cpp_byte_array<1> > const &a0, cpp_int const &a1, cpp_int const &a2)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

cpp_long javax::crypto::CipherInputStream::skip(cpp_long const &a0)
{
	return cpp_long(
		environment::get().get_jenv()->CallLongMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int javax::crypto::CipherInputStream::available()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>()
		)
	);
}

void javax::crypto::CipherInputStream::close()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(7), J2CPP_METHOD_SIGNATURE(7), false>()
		)
	);
}

cpp_boolean javax::crypto::CipherInputStream::markSupported()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(8), J2CPP_METHOD_SIGNATURE(8), false>()
		)
	);
}


J2CPP_DEFINE_CLASS(javax::crypto::CipherInputStream,"javax/crypto/CipherInputStream")
J2CPP_DEFINE_METHOD(javax::crypto::CipherInputStream,0,"<init>","(Ljava/io/InputStream;Ljavax/crypto/Cipher;)V")
J2CPP_DEFINE_METHOD(javax::crypto::CipherInputStream,1,"<init>","(Ljava/io/InputStream;)V")
J2CPP_DEFINE_METHOD(javax::crypto::CipherInputStream,2,"read","()I")
J2CPP_DEFINE_METHOD(javax::crypto::CipherInputStream,3,"read","([B)I")
J2CPP_DEFINE_METHOD(javax::crypto::CipherInputStream,4,"read","([BII)I")
J2CPP_DEFINE_METHOD(javax::crypto::CipherInputStream,5,"skip","(J)J")
J2CPP_DEFINE_METHOD(javax::crypto::CipherInputStream,6,"available","()I")
J2CPP_DEFINE_METHOD(javax::crypto::CipherInputStream,7,"close","()V")
J2CPP_DEFINE_METHOD(javax::crypto::CipherInputStream,8,"markSupported","()Z")

} //namespace j2cpp

#endif //J2CPP_JAVAX_CRYPTO_CIPHERINPUTSTREAM_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
