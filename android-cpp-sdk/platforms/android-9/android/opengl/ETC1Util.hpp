/*================================================================================
  code generated by: java2cpp
  class: android.opengl.ETC1Util
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_OPENGL_ETC1UTIL_HPP_DECL
#define J2CPP_ANDROID_OPENGL_ETC1UTIL_HPP_DECL


namespace j2cpp { namespace java { namespace nio { class Buffer; } } }
namespace j2cpp { namespace java { namespace nio { class ByteBuffer; } } }
namespace j2cpp { namespace java { namespace io { class InputStream; } } }
namespace j2cpp { namespace java { namespace io { class OutputStream; } } }
namespace j2cpp { namespace android { namespace opengl { namespace ETC1Util_ { class ETC1Texture; } } } }


#include <android/opengl/ETC1Util.hpp>
#include <java/io/InputStream.hpp>
#include <java/io/OutputStream.hpp>
#include <java/nio/Buffer.hpp>
#include <java/nio/ByteBuffer.hpp>


namespace j2cpp {

namespace android { namespace opengl {

	class ETC1Util;
	namespace ETC1Util_ {

		class ETC1Texture;
		class ETC1Texture
			: public cpp_object<ETC1Texture>
		{
		public:

			J2CPP_DECLARE_CLASS

			J2CPP_DECLARE_METHOD(0)
			J2CPP_DECLARE_METHOD(1)
			J2CPP_DECLARE_METHOD(2)
			J2CPP_DECLARE_METHOD(3)

			ETC1Texture(jobject jobj)
			: cpp_object<ETC1Texture>(jobj)
			{
			}

			cpp_int getWidth();
			cpp_int getHeight();
			local_ref< java::nio::ByteBuffer > getData();
		}; //class ETC1Texture

	} //namespace ETC1Util_

	class ETC1Util
		: public cpp_object<ETC1Util>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)

		typedef ETC1Util_::ETC1Texture ETC1Texture;

		ETC1Util(jobject jobj)
		: cpp_object<ETC1Util>(jobj)
		{
		}

		static void loadTexture(cpp_int const&, cpp_int const&, cpp_int const&, cpp_int const&, cpp_int const&, local_ref< java::io::InputStream > const&);
		static void loadTexture(cpp_int const&, cpp_int const&, cpp_int const&, cpp_int const&, cpp_int const&, local_ref< android::opengl::ETC1Util_::ETC1Texture > const&);
		static cpp_boolean isETC1Supported();
		static local_ref< android::opengl::ETC1Util_::ETC1Texture > createTexture(local_ref< java::io::InputStream > const&);
		static local_ref< android::opengl::ETC1Util_::ETC1Texture > compressTexture(local_ref< java::nio::Buffer > const&, cpp_int const&, cpp_int const&, cpp_int const&, cpp_int const&);
		static void writeTexture(local_ref< android::opengl::ETC1Util_::ETC1Texture > const&, local_ref< java::io::OutputStream > const&);
	}; //class ETC1Util

} //namespace opengl
} //namespace android


} //namespace j2cpp

#endif //J2CPP_ANDROID_OPENGL_ETC1UTIL_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_OPENGL_ETC1UTIL_HPP_IMPL
#define J2CPP_ANDROID_OPENGL_ETC1UTIL_HPP_IMPL

namespace j2cpp {



template <>
local_ref< android::opengl::ETC1Util_::ETC1Texture > create< android::opengl::ETC1Util_::ETC1Texture>(cpp_int const &a0, cpp_int const &a1, local_ref< java::nio::ByteBuffer > const &a2)
{
	return local_ref< android::opengl::ETC1Util_::ETC1Texture >(
		environment::get().get_jenv()->NewObject(
			get_class<android::opengl::ETC1Util_::ETC1Texture::J2CPP_CLASS_NAME>(),
			get_method_id<android::opengl::ETC1Util_::ETC1Texture::J2CPP_CLASS_NAME, android::opengl::ETC1Util_::ETC1Texture::J2CPP_METHOD_NAME(0), android::opengl::ETC1Util_::ETC1Texture::J2CPP_METHOD_SIGNATURE(0), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

cpp_int android::opengl::ETC1Util_::ETC1Texture::getWidth()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), false>()
		)
	);
}

cpp_int android::opengl::ETC1Util_::ETC1Texture::getHeight()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>()
		)
	);
}

local_ref< java::nio::ByteBuffer > android::opengl::ETC1Util_::ETC1Texture::getData()
{
	return local_ref< java::nio::ByteBuffer >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>()
		)
	);
}


J2CPP_DEFINE_CLASS(android::opengl::ETC1Util_::ETC1Texture,"android/opengl/ETC1Util$ETC1Texture")
J2CPP_DEFINE_METHOD(android::opengl::ETC1Util_::ETC1Texture,0,"<init>","(IILjava/nio/ByteBuffer;)V")
J2CPP_DEFINE_METHOD(android::opengl::ETC1Util_::ETC1Texture,1,"getWidth","()I")
J2CPP_DEFINE_METHOD(android::opengl::ETC1Util_::ETC1Texture,2,"getHeight","()I")
J2CPP_DEFINE_METHOD(android::opengl::ETC1Util_::ETC1Texture,3,"getData","()Ljava/nio/ByteBuffer;")


template <>
local_ref< android::opengl::ETC1Util > create< android::opengl::ETC1Util>()
{
	return local_ref< android::opengl::ETC1Util >(
		environment::get().get_jenv()->NewObject(
			get_class<android::opengl::ETC1Util::J2CPP_CLASS_NAME>(),
			get_method_id<android::opengl::ETC1Util::J2CPP_CLASS_NAME, android::opengl::ETC1Util::J2CPP_METHOD_NAME(0), android::opengl::ETC1Util::J2CPP_METHOD_SIGNATURE(0), false>()
		)
	);
}

void android::opengl::ETC1Util::loadTexture(cpp_int const &a0, cpp_int const &a1, cpp_int const &a2, cpp_int const &a3, cpp_int const &a4, local_ref< java::io::InputStream > const &a5)
{
	return void(
		environment::get().get_jenv()->CallStaticVoidMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), true>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype(), a3.get_jtype(), a4.get_jtype(), a5.get_jtype()
		)
	);
}

void android::opengl::ETC1Util::loadTexture(cpp_int const &a0, cpp_int const &a1, cpp_int const &a2, cpp_int const &a3, cpp_int const &a4, local_ref< android::opengl::ETC1Util_::ETC1Texture > const &a5)
{
	return void(
		environment::get().get_jenv()->CallStaticVoidMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), true>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype(), a3.get_jtype(), a4.get_jtype(), a5.get_jtype()
		)
	);
}

cpp_boolean android::opengl::ETC1Util::isETC1Supported()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallStaticBooleanMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), true>()
		)
	);
}

local_ref< android::opengl::ETC1Util_::ETC1Texture > android::opengl::ETC1Util::createTexture(local_ref< java::io::InputStream > const &a0)
{
	return local_ref< android::opengl::ETC1Util_::ETC1Texture >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), true>(),
			a0.get_jtype()
		)
	);
}

local_ref< android::opengl::ETC1Util_::ETC1Texture > android::opengl::ETC1Util::compressTexture(local_ref< java::nio::Buffer > const &a0, cpp_int const &a1, cpp_int const &a2, cpp_int const &a3, cpp_int const &a4)
{
	return local_ref< android::opengl::ETC1Util_::ETC1Texture >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), true>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype(), a3.get_jtype(), a4.get_jtype()
		)
	);
}

void android::opengl::ETC1Util::writeTexture(local_ref< android::opengl::ETC1Util_::ETC1Texture > const &a0, local_ref< java::io::OutputStream > const &a1)
{
	return void(
		environment::get().get_jenv()->CallStaticVoidMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), true>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}


J2CPP_DEFINE_CLASS(android::opengl::ETC1Util,"android/opengl/ETC1Util")
J2CPP_DEFINE_METHOD(android::opengl::ETC1Util,0,"<init>","()V")
J2CPP_DEFINE_METHOD(android::opengl::ETC1Util,1,"loadTexture","(IIIIILjava/io/InputStream;)V")
J2CPP_DEFINE_METHOD(android::opengl::ETC1Util,2,"loadTexture","(IIIIILandroid/opengl/ETC1Util$ETC1Texture;)V")
J2CPP_DEFINE_METHOD(android::opengl::ETC1Util,3,"isETC1Supported","()Z")
J2CPP_DEFINE_METHOD(android::opengl::ETC1Util,4,"createTexture","(Ljava/io/InputStream;)Landroid/opengl/ETC1Util$ETC1Texture;")
J2CPP_DEFINE_METHOD(android::opengl::ETC1Util,5,"compressTexture","(Ljava/nio/Buffer;IIII)Landroid/opengl/ETC1Util$ETC1Texture;")
J2CPP_DEFINE_METHOD(android::opengl::ETC1Util,6,"writeTexture","(Landroid/opengl/ETC1Util$ETC1Texture;Ljava/io/OutputStream;)V")

} //namespace j2cpp

#endif //J2CPP_ANDROID_OPENGL_ETC1UTIL_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
