/*================================================================================
  code generated by: java2cpp
  class: android.media.audiofx.Visualizer
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_MEDIA_AUDIOFX_VISUALIZER_HPP_DECL
#define J2CPP_ANDROID_MEDIA_AUDIOFX_VISUALIZER_HPP_DECL


namespace j2cpp { namespace android { namespace media { namespace audiofx { namespace Visualizer_ { class OnDataCaptureListener; } } } } }


#include <android/media/audiofx/Visualizer.hpp>


namespace j2cpp {

namespace android { namespace media { namespace audiofx {

	class Visualizer;
	namespace Visualizer_ {

		class OnDataCaptureListener;
		class OnDataCaptureListener
			: public cpp_object<OnDataCaptureListener>
		{
		public:

			J2CPP_DECLARE_CLASS

			J2CPP_DECLARE_METHOD(0)
			J2CPP_DECLARE_METHOD(1)

			OnDataCaptureListener(jobject jobj)
			: cpp_object<OnDataCaptureListener>(jobj)
			{
			}

			void onWaveFormDataCapture(local_ref< android::media::audiofx::Visualizer > const&, local_ref< cpp_byte_array<1> > const&, cpp_int const&);
			void onFftDataCapture(local_ref< android::media::audiofx::Visualizer > const&, local_ref< cpp_byte_array<1> > const&, cpp_int const&);
		}; //class OnDataCaptureListener

	} //namespace Visualizer_

	class Visualizer
		: public cpp_object<Visualizer>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_METHOD(12)
		J2CPP_DECLARE_FIELD(0)
		J2CPP_DECLARE_FIELD(1)
		J2CPP_DECLARE_FIELD(2)
		J2CPP_DECLARE_FIELD(3)
		J2CPP_DECLARE_FIELD(4)
		J2CPP_DECLARE_FIELD(5)
		J2CPP_DECLARE_FIELD(6)
		J2CPP_DECLARE_FIELD(7)
		J2CPP_DECLARE_FIELD(8)
		J2CPP_DECLARE_FIELD(9)
		J2CPP_DECLARE_FIELD(10)

		typedef Visualizer_::OnDataCaptureListener OnDataCaptureListener;

		Visualizer(jobject jobj)
		: cpp_object<Visualizer>(jobj)
		{
		}

		void release();
		cpp_int setEnabled(cpp_boolean const&);
		cpp_boolean getEnabled();
		static local_ref< cpp_int_array<1> > getCaptureSizeRange();
		static cpp_int getMaxCaptureRate();
		cpp_int setCaptureSize(cpp_int const&);
		cpp_int getCaptureSize();
		cpp_int getSamplingRate();
		cpp_int getWaveForm(local_ref< cpp_byte_array<1> > const&);
		cpp_int getFft(local_ref< cpp_byte_array<1> > const&);
		cpp_int setDataCaptureListener(local_ref< android::media::audiofx::Visualizer_::OnDataCaptureListener > const&, cpp_int const&, cpp_boolean const&, cpp_boolean const&);

		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(0), J2CPP_FIELD_SIGNATURE(0), cpp_int > STATE_UNINITIALIZED;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(1), J2CPP_FIELD_SIGNATURE(1), cpp_int > STATE_INITIALIZED;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(2), J2CPP_FIELD_SIGNATURE(2), cpp_int > STATE_ENABLED;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(3), J2CPP_FIELD_SIGNATURE(3), cpp_int > SUCCESS;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(4), J2CPP_FIELD_SIGNATURE(4), cpp_int > ERROR;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(5), J2CPP_FIELD_SIGNATURE(5), cpp_int > ALREADY_EXISTS;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(6), J2CPP_FIELD_SIGNATURE(6), cpp_int > ERROR_NO_INIT;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(7), J2CPP_FIELD_SIGNATURE(7), cpp_int > ERROR_BAD_VALUE;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(8), J2CPP_FIELD_SIGNATURE(8), cpp_int > ERROR_INVALID_OPERATION;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(9), J2CPP_FIELD_SIGNATURE(9), cpp_int > ERROR_NO_MEMORY;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(10), J2CPP_FIELD_SIGNATURE(10), cpp_int > ERROR_DEAD_OBJECT;
	}; //class Visualizer

} //namespace audiofx
} //namespace media
} //namespace android


} //namespace j2cpp

#endif //J2CPP_ANDROID_MEDIA_AUDIOFX_VISUALIZER_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_MEDIA_AUDIOFX_VISUALIZER_HPP_IMPL
#define J2CPP_ANDROID_MEDIA_AUDIOFX_VISUALIZER_HPP_IMPL

namespace j2cpp {



void android::media::audiofx::Visualizer_::OnDataCaptureListener::onWaveFormDataCapture(local_ref< android::media::audiofx::Visualizer > const &a0, local_ref< cpp_byte_array<1> > const &a1, cpp_int const &a2)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(0), J2CPP_METHOD_SIGNATURE(0), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

void android::media::audiofx::Visualizer_::OnDataCaptureListener::onFftDataCapture(local_ref< android::media::audiofx::Visualizer > const &a0, local_ref< cpp_byte_array<1> > const &a1, cpp_int const &a2)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}


J2CPP_DEFINE_CLASS(android::media::audiofx::Visualizer_::OnDataCaptureListener,"android/media/audiofx/Visualizer$OnDataCaptureListener")
J2CPP_DEFINE_METHOD(android::media::audiofx::Visualizer_::OnDataCaptureListener,0,"onWaveFormDataCapture","(Landroid/media/audiofx/Visualizer;[BI)V")
J2CPP_DEFINE_METHOD(android::media::audiofx::Visualizer_::OnDataCaptureListener,1,"onFftDataCapture","(Landroid/media/audiofx/Visualizer;[BI)V")


template <>
local_ref< android::media::audiofx::Visualizer > create< android::media::audiofx::Visualizer>(cpp_int const &a0)
{
	return local_ref< android::media::audiofx::Visualizer >(
		environment::get().get_jenv()->NewObject(
			get_class<android::media::audiofx::Visualizer::J2CPP_CLASS_NAME>(),
			get_method_id<android::media::audiofx::Visualizer::J2CPP_CLASS_NAME, android::media::audiofx::Visualizer::J2CPP_METHOD_NAME(0), android::media::audiofx::Visualizer::J2CPP_METHOD_SIGNATURE(0), false>(),
			a0.get_jtype()
		)
	);
}

void android::media::audiofx::Visualizer::release()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), false>()
		)
	);
}


cpp_int android::media::audiofx::Visualizer::setEnabled(cpp_boolean const &a0)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean android::media::audiofx::Visualizer::getEnabled()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>()
		)
	);
}

local_ref< cpp_int_array<1> > android::media::audiofx::Visualizer::getCaptureSizeRange()
{
	return local_ref< cpp_int_array<1> >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), true>()
		)
	);
}

cpp_int android::media::audiofx::Visualizer::getMaxCaptureRate()
{
	return cpp_int(
		environment::get().get_jenv()->CallStaticIntMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), true>()
		)
	);
}

cpp_int android::media::audiofx::Visualizer::setCaptureSize(cpp_int const &a0)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(7), J2CPP_METHOD_SIGNATURE(7), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int android::media::audiofx::Visualizer::getCaptureSize()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(8), J2CPP_METHOD_SIGNATURE(8), false>()
		)
	);
}

cpp_int android::media::audiofx::Visualizer::getSamplingRate()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(9), J2CPP_METHOD_SIGNATURE(9), false>()
		)
	);
}

cpp_int android::media::audiofx::Visualizer::getWaveForm(local_ref< cpp_byte_array<1> > const &a0)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(10), J2CPP_METHOD_SIGNATURE(10), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int android::media::audiofx::Visualizer::getFft(local_ref< cpp_byte_array<1> > const &a0)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(11), J2CPP_METHOD_SIGNATURE(11), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int android::media::audiofx::Visualizer::setDataCaptureListener(local_ref< android::media::audiofx::Visualizer_::OnDataCaptureListener > const &a0, cpp_int const &a1, cpp_boolean const &a2, cpp_boolean const &a3)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(12), J2CPP_METHOD_SIGNATURE(12), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype(), a3.get_jtype()
		)
	);
}


static_field<
	android::media::audiofx::Visualizer::J2CPP_CLASS_NAME,
	android::media::audiofx::Visualizer::J2CPP_FIELD_NAME(0),
	android::media::audiofx::Visualizer::J2CPP_FIELD_SIGNATURE(0),
	cpp_int
> android::media::audiofx::Visualizer::STATE_UNINITIALIZED;

static_field<
	android::media::audiofx::Visualizer::J2CPP_CLASS_NAME,
	android::media::audiofx::Visualizer::J2CPP_FIELD_NAME(1),
	android::media::audiofx::Visualizer::J2CPP_FIELD_SIGNATURE(1),
	cpp_int
> android::media::audiofx::Visualizer::STATE_INITIALIZED;

static_field<
	android::media::audiofx::Visualizer::J2CPP_CLASS_NAME,
	android::media::audiofx::Visualizer::J2CPP_FIELD_NAME(2),
	android::media::audiofx::Visualizer::J2CPP_FIELD_SIGNATURE(2),
	cpp_int
> android::media::audiofx::Visualizer::STATE_ENABLED;

static_field<
	android::media::audiofx::Visualizer::J2CPP_CLASS_NAME,
	android::media::audiofx::Visualizer::J2CPP_FIELD_NAME(3),
	android::media::audiofx::Visualizer::J2CPP_FIELD_SIGNATURE(3),
	cpp_int
> android::media::audiofx::Visualizer::SUCCESS;

static_field<
	android::media::audiofx::Visualizer::J2CPP_CLASS_NAME,
	android::media::audiofx::Visualizer::J2CPP_FIELD_NAME(4),
	android::media::audiofx::Visualizer::J2CPP_FIELD_SIGNATURE(4),
	cpp_int
> android::media::audiofx::Visualizer::ERROR;

static_field<
	android::media::audiofx::Visualizer::J2CPP_CLASS_NAME,
	android::media::audiofx::Visualizer::J2CPP_FIELD_NAME(5),
	android::media::audiofx::Visualizer::J2CPP_FIELD_SIGNATURE(5),
	cpp_int
> android::media::audiofx::Visualizer::ALREADY_EXISTS;

static_field<
	android::media::audiofx::Visualizer::J2CPP_CLASS_NAME,
	android::media::audiofx::Visualizer::J2CPP_FIELD_NAME(6),
	android::media::audiofx::Visualizer::J2CPP_FIELD_SIGNATURE(6),
	cpp_int
> android::media::audiofx::Visualizer::ERROR_NO_INIT;

static_field<
	android::media::audiofx::Visualizer::J2CPP_CLASS_NAME,
	android::media::audiofx::Visualizer::J2CPP_FIELD_NAME(7),
	android::media::audiofx::Visualizer::J2CPP_FIELD_SIGNATURE(7),
	cpp_int
> android::media::audiofx::Visualizer::ERROR_BAD_VALUE;

static_field<
	android::media::audiofx::Visualizer::J2CPP_CLASS_NAME,
	android::media::audiofx::Visualizer::J2CPP_FIELD_NAME(8),
	android::media::audiofx::Visualizer::J2CPP_FIELD_SIGNATURE(8),
	cpp_int
> android::media::audiofx::Visualizer::ERROR_INVALID_OPERATION;

static_field<
	android::media::audiofx::Visualizer::J2CPP_CLASS_NAME,
	android::media::audiofx::Visualizer::J2CPP_FIELD_NAME(9),
	android::media::audiofx::Visualizer::J2CPP_FIELD_SIGNATURE(9),
	cpp_int
> android::media::audiofx::Visualizer::ERROR_NO_MEMORY;

static_field<
	android::media::audiofx::Visualizer::J2CPP_CLASS_NAME,
	android::media::audiofx::Visualizer::J2CPP_FIELD_NAME(10),
	android::media::audiofx::Visualizer::J2CPP_FIELD_SIGNATURE(10),
	cpp_int
> android::media::audiofx::Visualizer::ERROR_DEAD_OBJECT;


J2CPP_DEFINE_CLASS(android::media::audiofx::Visualizer,"android/media/audiofx/Visualizer")
J2CPP_DEFINE_METHOD(android::media::audiofx::Visualizer,0,"<init>","(I)V")
J2CPP_DEFINE_METHOD(android::media::audiofx::Visualizer,1,"release","()V")
J2CPP_DEFINE_METHOD(android::media::audiofx::Visualizer,2,"finalize","()V")
J2CPP_DEFINE_METHOD(android::media::audiofx::Visualizer,3,"setEnabled","(Z)I")
J2CPP_DEFINE_METHOD(android::media::audiofx::Visualizer,4,"getEnabled","()Z")
J2CPP_DEFINE_METHOD(android::media::audiofx::Visualizer,5,"getCaptureSizeRange","()[I")
J2CPP_DEFINE_METHOD(android::media::audiofx::Visualizer,6,"getMaxCaptureRate","()I")
J2CPP_DEFINE_METHOD(android::media::audiofx::Visualizer,7,"setCaptureSize","(I)I")
J2CPP_DEFINE_METHOD(android::media::audiofx::Visualizer,8,"getCaptureSize","()I")
J2CPP_DEFINE_METHOD(android::media::audiofx::Visualizer,9,"getSamplingRate","()I")
J2CPP_DEFINE_METHOD(android::media::audiofx::Visualizer,10,"getWaveForm","([B)I")
J2CPP_DEFINE_METHOD(android::media::audiofx::Visualizer,11,"getFft","([B)I")
J2CPP_DEFINE_METHOD(android::media::audiofx::Visualizer,12,"setDataCaptureListener","(Landroid/media/audiofx/Visualizer$OnDataCaptureListener;IZZ)I")
J2CPP_DEFINE_FIELD(android::media::audiofx::Visualizer,0,"STATE_UNINITIALIZED","I")
J2CPP_DEFINE_FIELD(android::media::audiofx::Visualizer,1,"STATE_INITIALIZED","I")
J2CPP_DEFINE_FIELD(android::media::audiofx::Visualizer,2,"STATE_ENABLED","I")
J2CPP_DEFINE_FIELD(android::media::audiofx::Visualizer,3,"SUCCESS","I")
J2CPP_DEFINE_FIELD(android::media::audiofx::Visualizer,4,"ERROR","I")
J2CPP_DEFINE_FIELD(android::media::audiofx::Visualizer,5,"ALREADY_EXISTS","I")
J2CPP_DEFINE_FIELD(android::media::audiofx::Visualizer,6,"ERROR_NO_INIT","I")
J2CPP_DEFINE_FIELD(android::media::audiofx::Visualizer,7,"ERROR_BAD_VALUE","I")
J2CPP_DEFINE_FIELD(android::media::audiofx::Visualizer,8,"ERROR_INVALID_OPERATION","I")
J2CPP_DEFINE_FIELD(android::media::audiofx::Visualizer,9,"ERROR_NO_MEMORY","I")
J2CPP_DEFINE_FIELD(android::media::audiofx::Visualizer,10,"ERROR_DEAD_OBJECT","I")

} //namespace j2cpp

#endif //J2CPP_ANDROID_MEDIA_AUDIOFX_VISUALIZER_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
