/*================================================================================
  code generated by: java2cpp
  class: android.media.SoundPool
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_MEDIA_SOUNDPOOL_HPP_DECL
#define J2CPP_ANDROID_MEDIA_SOUNDPOOL_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace io { class FileDescriptor; } } }
namespace j2cpp { namespace android { namespace content { class Context; } } }
namespace j2cpp { namespace android { namespace content { namespace res { class AssetFileDescriptor; } } } }
namespace j2cpp { namespace android { namespace media { namespace SoundPool_ { class OnLoadCompleteListener; } } } }


#include <android/content/Context.hpp>
#include <android/content/res/AssetFileDescriptor.hpp>
#include <android/media/SoundPool.hpp>
#include <java/io/FileDescriptor.hpp>
#include <java/lang/String.hpp>


namespace j2cpp {

namespace android { namespace media {

	class SoundPool;
	namespace SoundPool_ {

		class OnLoadCompleteListener;
		class OnLoadCompleteListener
			: public cpp_object<OnLoadCompleteListener>
		{
		public:

			J2CPP_DECLARE_CLASS

			J2CPP_DECLARE_METHOD(0)

			OnLoadCompleteListener(jobject jobj)
			: cpp_object<OnLoadCompleteListener>(jobj)
			{
			}

			void onLoadComplete(local_ref< android::media::SoundPool > const&, cpp_int const&, cpp_int const&);
		}; //class OnLoadCompleteListener

	} //namespace SoundPool_

	class SoundPool
		: public cpp_object<SoundPool>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_METHOD(12)
		J2CPP_DECLARE_METHOD(13)
		J2CPP_DECLARE_METHOD(14)
		J2CPP_DECLARE_METHOD(15)
		J2CPP_DECLARE_METHOD(16)
		J2CPP_DECLARE_METHOD(17)
		J2CPP_DECLARE_METHOD(18)

		typedef SoundPool_::OnLoadCompleteListener OnLoadCompleteListener;

		SoundPool(jobject jobj)
		: cpp_object<SoundPool>(jobj)
		{
		}

		cpp_int load(local_ref< java::lang::String > const&, cpp_int const&);
		cpp_int load(local_ref< android::content::Context > const&, cpp_int const&, cpp_int const&);
		cpp_int load(local_ref< android::content::res::AssetFileDescriptor > const&, cpp_int const&);
		cpp_int load(local_ref< java::io::FileDescriptor > const&, cpp_long const&, cpp_long const&, cpp_int const&);
		cpp_boolean unload(cpp_int const&);
		cpp_int play(cpp_int const&, cpp_float const&, cpp_float const&, cpp_int const&, cpp_int const&, cpp_float const&);
		void pause(cpp_int const&);
		void resume(cpp_int const&);
		void autoPause();
		void autoResume();
		void stop(cpp_int const&);
		void setVolume(cpp_int const&, cpp_float const&, cpp_float const&);
		void setPriority(cpp_int const&, cpp_int const&);
		void setLoop(cpp_int const&, cpp_int const&);
		void setRate(cpp_int const&, cpp_float const&);
		void setOnLoadCompleteListener(local_ref< android::media::SoundPool_::OnLoadCompleteListener > const&);
		void release();
	}; //class SoundPool

} //namespace media
} //namespace android


} //namespace j2cpp

#endif //J2CPP_ANDROID_MEDIA_SOUNDPOOL_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_MEDIA_SOUNDPOOL_HPP_IMPL
#define J2CPP_ANDROID_MEDIA_SOUNDPOOL_HPP_IMPL

namespace j2cpp {



void android::media::SoundPool_::OnLoadCompleteListener::onLoadComplete(local_ref< android::media::SoundPool > const &a0, cpp_int const &a1, cpp_int const &a2)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(0), J2CPP_METHOD_SIGNATURE(0), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}


J2CPP_DEFINE_CLASS(android::media::SoundPool_::OnLoadCompleteListener,"android/media/SoundPool$OnLoadCompleteListener")
J2CPP_DEFINE_METHOD(android::media::SoundPool_::OnLoadCompleteListener,0,"onLoadComplete","(Landroid/media/SoundPool;II)V")


template <>
local_ref< android::media::SoundPool > create< android::media::SoundPool>(cpp_int const &a0, cpp_int const &a1, cpp_int const &a2)
{
	return local_ref< android::media::SoundPool >(
		environment::get().get_jenv()->NewObject(
			get_class<android::media::SoundPool::J2CPP_CLASS_NAME>(),
			get_method_id<android::media::SoundPool::J2CPP_CLASS_NAME, android::media::SoundPool::J2CPP_METHOD_NAME(0), android::media::SoundPool::J2CPP_METHOD_SIGNATURE(0), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

cpp_int android::media::SoundPool::load(local_ref< java::lang::String > const &a0, cpp_int const &a1)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_int android::media::SoundPool::load(local_ref< android::content::Context > const &a0, cpp_int const &a1, cpp_int const &a2)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

cpp_int android::media::SoundPool::load(local_ref< android::content::res::AssetFileDescriptor > const &a0, cpp_int const &a1)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_int android::media::SoundPool::load(local_ref< java::io::FileDescriptor > const &a0, cpp_long const &a1, cpp_long const &a2, cpp_int const &a3)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype(), a3.get_jtype()
		)
	);
}

cpp_boolean android::media::SoundPool::unload(cpp_int const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int android::media::SoundPool::play(cpp_int const &a0, cpp_float const &a1, cpp_float const &a2, cpp_int const &a3, cpp_int const &a4, cpp_float const &a5)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype(), a3.get_jtype(), a4.get_jtype(), a5.get_jtype()
		)
	);
}

void android::media::SoundPool::pause(cpp_int const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(7), J2CPP_METHOD_SIGNATURE(7), false>(),
			a0.get_jtype()
		)
	);
}

void android::media::SoundPool::resume(cpp_int const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(8), J2CPP_METHOD_SIGNATURE(8), false>(),
			a0.get_jtype()
		)
	);
}

void android::media::SoundPool::autoPause()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(9), J2CPP_METHOD_SIGNATURE(9), false>()
		)
	);
}

void android::media::SoundPool::autoResume()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(10), J2CPP_METHOD_SIGNATURE(10), false>()
		)
	);
}

void android::media::SoundPool::stop(cpp_int const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(11), J2CPP_METHOD_SIGNATURE(11), false>(),
			a0.get_jtype()
		)
	);
}

void android::media::SoundPool::setVolume(cpp_int const &a0, cpp_float const &a1, cpp_float const &a2)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(12), J2CPP_METHOD_SIGNATURE(12), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

void android::media::SoundPool::setPriority(cpp_int const &a0, cpp_int const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(13), J2CPP_METHOD_SIGNATURE(13), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void android::media::SoundPool::setLoop(cpp_int const &a0, cpp_int const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(14), J2CPP_METHOD_SIGNATURE(14), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void android::media::SoundPool::setRate(cpp_int const &a0, cpp_float const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(15), J2CPP_METHOD_SIGNATURE(15), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void android::media::SoundPool::setOnLoadCompleteListener(local_ref< android::media::SoundPool_::OnLoadCompleteListener > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(16), J2CPP_METHOD_SIGNATURE(16), false>(),
			a0.get_jtype()
		)
	);
}

void android::media::SoundPool::release()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(17), J2CPP_METHOD_SIGNATURE(17), false>()
		)
	);
}



J2CPP_DEFINE_CLASS(android::media::SoundPool,"android/media/SoundPool")
J2CPP_DEFINE_METHOD(android::media::SoundPool,0,"<init>","(III)V")
J2CPP_DEFINE_METHOD(android::media::SoundPool,1,"load","(Ljava/lang/String;I)I")
J2CPP_DEFINE_METHOD(android::media::SoundPool,2,"load","(Landroid/content/Context;II)I")
J2CPP_DEFINE_METHOD(android::media::SoundPool,3,"load","(Landroid/content/res/AssetFileDescriptor;I)I")
J2CPP_DEFINE_METHOD(android::media::SoundPool,4,"load","(Ljava/io/FileDescriptor;JJI)I")
J2CPP_DEFINE_METHOD(android::media::SoundPool,5,"unload","(I)Z")
J2CPP_DEFINE_METHOD(android::media::SoundPool,6,"play","(IFFIIF)I")
J2CPP_DEFINE_METHOD(android::media::SoundPool,7,"pause","(I)V")
J2CPP_DEFINE_METHOD(android::media::SoundPool,8,"resume","(I)V")
J2CPP_DEFINE_METHOD(android::media::SoundPool,9,"autoPause","()V")
J2CPP_DEFINE_METHOD(android::media::SoundPool,10,"autoResume","()V")
J2CPP_DEFINE_METHOD(android::media::SoundPool,11,"stop","(I)V")
J2CPP_DEFINE_METHOD(android::media::SoundPool,12,"setVolume","(IFF)V")
J2CPP_DEFINE_METHOD(android::media::SoundPool,13,"setPriority","(II)V")
J2CPP_DEFINE_METHOD(android::media::SoundPool,14,"setLoop","(II)V")
J2CPP_DEFINE_METHOD(android::media::SoundPool,15,"setRate","(IF)V")
J2CPP_DEFINE_METHOD(android::media::SoundPool,16,"setOnLoadCompleteListener","(Landroid/media/SoundPool$OnLoadCompleteListener;)V")
J2CPP_DEFINE_METHOD(android::media::SoundPool,17,"release","()V")
J2CPP_DEFINE_METHOD(android::media::SoundPool,18,"finalize","()V")

} //namespace j2cpp

#endif //J2CPP_ANDROID_MEDIA_SOUNDPOOL_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
