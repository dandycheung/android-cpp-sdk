/*================================================================================
  code generated by: java2cpp
  class: android.net.sip.SipException
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_NET_SIP_SIPEXCEPTION_HPP_DECL
#define J2CPP_ANDROID_NET_SIP_SIPEXCEPTION_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace lang { class Throwable; } } }


#include <java/lang/String.hpp>
#include <java/lang/Throwable.hpp>


namespace j2cpp {

namespace android { namespace net { namespace sip {

	class SipException;
	class SipException
		: public cpp_object<SipException>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)

		SipException(jobject jobj)
		: cpp_object<SipException>(jobj)
		{
		}

	}; //class SipException

} //namespace sip
} //namespace net
} //namespace android


} //namespace j2cpp

#endif //J2CPP_ANDROID_NET_SIP_SIPEXCEPTION_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_NET_SIP_SIPEXCEPTION_HPP_IMPL
#define J2CPP_ANDROID_NET_SIP_SIPEXCEPTION_HPP_IMPL

namespace j2cpp {


template <>
local_ref< android::net::sip::SipException > create< android::net::sip::SipException>()
{
	return local_ref< android::net::sip::SipException >(
		environment::get().get_jenv()->NewObject(
			get_class<android::net::sip::SipException::J2CPP_CLASS_NAME>(),
			get_method_id<android::net::sip::SipException::J2CPP_CLASS_NAME, android::net::sip::SipException::J2CPP_METHOD_NAME(0), android::net::sip::SipException::J2CPP_METHOD_SIGNATURE(0), false>()
		)
	);
}

template <>
local_ref< android::net::sip::SipException > create< android::net::sip::SipException>(local_ref< java::lang::String > const &a0)
{
	return local_ref< android::net::sip::SipException >(
		environment::get().get_jenv()->NewObject(
			get_class<android::net::sip::SipException::J2CPP_CLASS_NAME>(),
			get_method_id<android::net::sip::SipException::J2CPP_CLASS_NAME, android::net::sip::SipException::J2CPP_METHOD_NAME(1), android::net::sip::SipException::J2CPP_METHOD_SIGNATURE(1), false>(),
			a0.get_jtype()
		)
	);
}

template <>
local_ref< android::net::sip::SipException > create< android::net::sip::SipException>(local_ref< java::lang::String > const &a0, local_ref< java::lang::Throwable > const &a1)
{
	return local_ref< android::net::sip::SipException >(
		environment::get().get_jenv()->NewObject(
			get_class<android::net::sip::SipException::J2CPP_CLASS_NAME>(),
			get_method_id<android::net::sip::SipException::J2CPP_CLASS_NAME, android::net::sip::SipException::J2CPP_METHOD_NAME(2), android::net::sip::SipException::J2CPP_METHOD_SIGNATURE(2), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}


J2CPP_DEFINE_CLASS(android::net::sip::SipException,"android/net/sip/SipException")
J2CPP_DEFINE_METHOD(android::net::sip::SipException,0,"<init>","()V")
J2CPP_DEFINE_METHOD(android::net::sip::SipException,1,"<init>","(Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(android::net::sip::SipException,2,"<init>","(Ljava/lang/String;Ljava/lang/Throwable;)V")

} //namespace j2cpp

#endif //J2CPP_ANDROID_NET_SIP_SIPEXCEPTION_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
