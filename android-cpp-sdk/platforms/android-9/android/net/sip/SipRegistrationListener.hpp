/*================================================================================
  code generated by: java2cpp
  class: android.net.sip.SipRegistrationListener
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_NET_SIP_SIPREGISTRATIONLISTENER_HPP_DECL
#define J2CPP_ANDROID_NET_SIP_SIPREGISTRATIONLISTENER_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class String; } } }


#include <java/lang/String.hpp>


namespace j2cpp {

namespace android { namespace net { namespace sip {

	class SipRegistrationListener;
	class SipRegistrationListener
		: public cpp_object<SipRegistrationListener>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)

		SipRegistrationListener(jobject jobj)
		: cpp_object<SipRegistrationListener>(jobj)
		{
		}

		void onRegistering(local_ref< java::lang::String > const&);
		void onRegistrationDone(local_ref< java::lang::String > const&, cpp_long const&);
		void onRegistrationFailed(local_ref< java::lang::String > const&, cpp_int const&, local_ref< java::lang::String > const&);
	}; //class SipRegistrationListener

} //namespace sip
} //namespace net
} //namespace android


} //namespace j2cpp

#endif //J2CPP_ANDROID_NET_SIP_SIPREGISTRATIONLISTENER_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_NET_SIP_SIPREGISTRATIONLISTENER_HPP_IMPL
#define J2CPP_ANDROID_NET_SIP_SIPREGISTRATIONLISTENER_HPP_IMPL

namespace j2cpp {


void android::net::sip::SipRegistrationListener::onRegistering(local_ref< java::lang::String > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(0), J2CPP_METHOD_SIGNATURE(0), false>(),
			a0.get_jtype()
		)
	);
}

void android::net::sip::SipRegistrationListener::onRegistrationDone(local_ref< java::lang::String > const &a0, cpp_long const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void android::net::sip::SipRegistrationListener::onRegistrationFailed(local_ref< java::lang::String > const &a0, cpp_int const &a1, local_ref< java::lang::String > const &a2)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}


J2CPP_DEFINE_CLASS(android::net::sip::SipRegistrationListener,"android/net/sip/SipRegistrationListener")
J2CPP_DEFINE_METHOD(android::net::sip::SipRegistrationListener,0,"onRegistering","(Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(android::net::sip::SipRegistrationListener,1,"onRegistrationDone","(Ljava/lang/String;J)V")
J2CPP_DEFINE_METHOD(android::net::sip::SipRegistrationListener,2,"onRegistrationFailed","(Ljava/lang/String;ILjava/lang/String;)V")

} //namespace j2cpp

#endif //J2CPP_ANDROID_NET_SIP_SIPREGISTRATIONLISTENER_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
