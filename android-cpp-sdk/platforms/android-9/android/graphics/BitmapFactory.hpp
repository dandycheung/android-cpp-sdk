/*================================================================================
  code generated by: java2cpp
  class: android.graphics.BitmapFactory
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_GRAPHICS_BITMAPFACTORY_HPP_DECL
#define J2CPP_ANDROID_GRAPHICS_BITMAPFACTORY_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace io { class FileDescriptor; } } }
namespace j2cpp { namespace java { namespace io { class InputStream; } } }
namespace j2cpp { namespace android { namespace content { namespace res { class Resources; } } } }
namespace j2cpp { namespace android { namespace util { class TypedValue; } } }
namespace j2cpp { namespace android { namespace graphics { class Rect; } } }
namespace j2cpp { namespace android { namespace graphics { class Bitmap; } } }
namespace j2cpp { namespace android { namespace graphics { namespace BitmapFactory_ { class Options; } } } }
namespace j2cpp { namespace android { namespace graphics { namespace Bitmap_ { class Config; } } } }


#include <android/content/res/Resources.hpp>
#include <android/graphics/Bitmap.hpp>
#include <android/graphics/BitmapFactory.hpp>
#include <android/graphics/Rect.hpp>
#include <android/util/TypedValue.hpp>
#include <java/io/FileDescriptor.hpp>
#include <java/io/InputStream.hpp>
#include <java/lang/String.hpp>


namespace j2cpp {

namespace android { namespace graphics {

	class BitmapFactory;
	namespace BitmapFactory_ {

		class Options;
		class Options
			: public cpp_object<Options>
		{
		public:

			J2CPP_DECLARE_CLASS

			J2CPP_DECLARE_METHOD(0)
			J2CPP_DECLARE_METHOD(1)
			J2CPP_DECLARE_FIELD(0)
			J2CPP_DECLARE_FIELD(1)
			J2CPP_DECLARE_FIELD(2)
			J2CPP_DECLARE_FIELD(3)
			J2CPP_DECLARE_FIELD(4)
			J2CPP_DECLARE_FIELD(5)
			J2CPP_DECLARE_FIELD(6)
			J2CPP_DECLARE_FIELD(7)
			J2CPP_DECLARE_FIELD(8)
			J2CPP_DECLARE_FIELD(9)
			J2CPP_DECLARE_FIELD(10)
			J2CPP_DECLARE_FIELD(11)
			J2CPP_DECLARE_FIELD(12)
			J2CPP_DECLARE_FIELD(13)
			J2CPP_DECLARE_FIELD(14)

			Options(jobject jobj)
			: cpp_object<Options>(jobj)
			, inJustDecodeBounds(jobj)
			, inSampleSize(jobj)
			, inPreferredConfig(jobj)
			, inDither(jobj)
			, inDensity(jobj)
			, inTargetDensity(jobj)
			, inScreenDensity(jobj)
			, inScaled(jobj)
			, inPurgeable(jobj)
			, inInputShareable(jobj)
			, outWidth(jobj)
			, outHeight(jobj)
			, outMimeType(jobj)
			, inTempStorage(jobj)
			, mCancel(jobj)
			{
			}

			void requestCancelDecode();

			field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(0), J2CPP_FIELD_SIGNATURE(0), cpp_boolean > inJustDecodeBounds;
			field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(1), J2CPP_FIELD_SIGNATURE(1), cpp_int > inSampleSize;
			field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(2), J2CPP_FIELD_SIGNATURE(2), local_ref< android::graphics::Bitmap_::Config > > inPreferredConfig;
			field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(3), J2CPP_FIELD_SIGNATURE(3), cpp_boolean > inDither;
			field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(4), J2CPP_FIELD_SIGNATURE(4), cpp_int > inDensity;
			field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(5), J2CPP_FIELD_SIGNATURE(5), cpp_int > inTargetDensity;
			field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(6), J2CPP_FIELD_SIGNATURE(6), cpp_int > inScreenDensity;
			field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(7), J2CPP_FIELD_SIGNATURE(7), cpp_boolean > inScaled;
			field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(8), J2CPP_FIELD_SIGNATURE(8), cpp_boolean > inPurgeable;
			field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(9), J2CPP_FIELD_SIGNATURE(9), cpp_boolean > inInputShareable;
			field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(10), J2CPP_FIELD_SIGNATURE(10), cpp_int > outWidth;
			field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(11), J2CPP_FIELD_SIGNATURE(11), cpp_int > outHeight;
			field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(12), J2CPP_FIELD_SIGNATURE(12), local_ref< java::lang::String > > outMimeType;
			field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(13), J2CPP_FIELD_SIGNATURE(13), local_ref< cpp_byte_array<1> > > inTempStorage;
			field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(14), J2CPP_FIELD_SIGNATURE(14), cpp_boolean > mCancel;
		}; //class Options

	} //namespace BitmapFactory_

	class BitmapFactory
		: public cpp_object<BitmapFactory>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)

		typedef BitmapFactory_::Options Options;

		BitmapFactory(jobject jobj)
		: cpp_object<BitmapFactory>(jobj)
		{
		}

		static local_ref< android::graphics::Bitmap > decodeFile(local_ref< java::lang::String > const&, local_ref< android::graphics::BitmapFactory_::Options > const&);
		static local_ref< android::graphics::Bitmap > decodeFile(local_ref< java::lang::String > const&);
		static local_ref< android::graphics::Bitmap > decodeResourceStream(local_ref< android::content::res::Resources > const&, local_ref< android::util::TypedValue > const&, local_ref< java::io::InputStream > const&, local_ref< android::graphics::Rect > const&, local_ref< android::graphics::BitmapFactory_::Options > const&);
		static local_ref< android::graphics::Bitmap > decodeResource(local_ref< android::content::res::Resources > const&, cpp_int const&, local_ref< android::graphics::BitmapFactory_::Options > const&);
		static local_ref< android::graphics::Bitmap > decodeResource(local_ref< android::content::res::Resources > const&, cpp_int const&);
		static local_ref< android::graphics::Bitmap > decodeByteArray(local_ref< cpp_byte_array<1> > const&, cpp_int const&, cpp_int const&, local_ref< android::graphics::BitmapFactory_::Options > const&);
		static local_ref< android::graphics::Bitmap > decodeByteArray(local_ref< cpp_byte_array<1> > const&, cpp_int const&, cpp_int const&);
		static local_ref< android::graphics::Bitmap > decodeStream(local_ref< java::io::InputStream > const&, local_ref< android::graphics::Rect > const&, local_ref< android::graphics::BitmapFactory_::Options > const&);
		static local_ref< android::graphics::Bitmap > decodeStream(local_ref< java::io::InputStream > const&);
		static local_ref< android::graphics::Bitmap > decodeFileDescriptor(local_ref< java::io::FileDescriptor > const&, local_ref< android::graphics::Rect > const&, local_ref< android::graphics::BitmapFactory_::Options > const&);
		static local_ref< android::graphics::Bitmap > decodeFileDescriptor(local_ref< java::io::FileDescriptor > const&);
	}; //class BitmapFactory

} //namespace graphics
} //namespace android


} //namespace j2cpp

#endif //J2CPP_ANDROID_GRAPHICS_BITMAPFACTORY_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_GRAPHICS_BITMAPFACTORY_HPP_IMPL
#define J2CPP_ANDROID_GRAPHICS_BITMAPFACTORY_HPP_IMPL

namespace j2cpp {



template <>
local_ref< android::graphics::BitmapFactory_::Options > create< android::graphics::BitmapFactory_::Options>()
{
	return local_ref< android::graphics::BitmapFactory_::Options >(
		environment::get().get_jenv()->NewObject(
			get_class<android::graphics::BitmapFactory_::Options::J2CPP_CLASS_NAME>(),
			get_method_id<android::graphics::BitmapFactory_::Options::J2CPP_CLASS_NAME, android::graphics::BitmapFactory_::Options::J2CPP_METHOD_NAME(0), android::graphics::BitmapFactory_::Options::J2CPP_METHOD_SIGNATURE(0), false>()
		)
	);
}

void android::graphics::BitmapFactory_::Options::requestCancelDecode()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), false>()
		)
	);
}



J2CPP_DEFINE_CLASS(android::graphics::BitmapFactory_::Options,"android/graphics/BitmapFactory$Options")
J2CPP_DEFINE_METHOD(android::graphics::BitmapFactory_::Options,0,"<init>","()V")
J2CPP_DEFINE_METHOD(android::graphics::BitmapFactory_::Options,1,"requestCancelDecode","()V")
J2CPP_DEFINE_FIELD(android::graphics::BitmapFactory_::Options,0,"inJustDecodeBounds","Z")
J2CPP_DEFINE_FIELD(android::graphics::BitmapFactory_::Options,1,"inSampleSize","I")
J2CPP_DEFINE_FIELD(android::graphics::BitmapFactory_::Options,2,"inPreferredConfig","Landroid/graphics/Bitmap$Config;")
J2CPP_DEFINE_FIELD(android::graphics::BitmapFactory_::Options,3,"inDither","Z")
J2CPP_DEFINE_FIELD(android::graphics::BitmapFactory_::Options,4,"inDensity","I")
J2CPP_DEFINE_FIELD(android::graphics::BitmapFactory_::Options,5,"inTargetDensity","I")
J2CPP_DEFINE_FIELD(android::graphics::BitmapFactory_::Options,6,"inScreenDensity","I")
J2CPP_DEFINE_FIELD(android::graphics::BitmapFactory_::Options,7,"inScaled","Z")
J2CPP_DEFINE_FIELD(android::graphics::BitmapFactory_::Options,8,"inPurgeable","Z")
J2CPP_DEFINE_FIELD(android::graphics::BitmapFactory_::Options,9,"inInputShareable","Z")
J2CPP_DEFINE_FIELD(android::graphics::BitmapFactory_::Options,10,"outWidth","I")
J2CPP_DEFINE_FIELD(android::graphics::BitmapFactory_::Options,11,"outHeight","I")
J2CPP_DEFINE_FIELD(android::graphics::BitmapFactory_::Options,12,"outMimeType","Ljava/lang/String;")
J2CPP_DEFINE_FIELD(android::graphics::BitmapFactory_::Options,13,"inTempStorage","[B")
J2CPP_DEFINE_FIELD(android::graphics::BitmapFactory_::Options,14,"mCancel","Z")


template <>
local_ref< android::graphics::BitmapFactory > create< android::graphics::BitmapFactory>()
{
	return local_ref< android::graphics::BitmapFactory >(
		environment::get().get_jenv()->NewObject(
			get_class<android::graphics::BitmapFactory::J2CPP_CLASS_NAME>(),
			get_method_id<android::graphics::BitmapFactory::J2CPP_CLASS_NAME, android::graphics::BitmapFactory::J2CPP_METHOD_NAME(0), android::graphics::BitmapFactory::J2CPP_METHOD_SIGNATURE(0), false>()
		)
	);
}

local_ref< android::graphics::Bitmap > android::graphics::BitmapFactory::decodeFile(local_ref< java::lang::String > const &a0, local_ref< android::graphics::BitmapFactory_::Options > const &a1)
{
	return local_ref< android::graphics::Bitmap >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), true>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< android::graphics::Bitmap > android::graphics::BitmapFactory::decodeFile(local_ref< java::lang::String > const &a0)
{
	return local_ref< android::graphics::Bitmap >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), true>(),
			a0.get_jtype()
		)
	);
}

local_ref< android::graphics::Bitmap > android::graphics::BitmapFactory::decodeResourceStream(local_ref< android::content::res::Resources > const &a0, local_ref< android::util::TypedValue > const &a1, local_ref< java::io::InputStream > const &a2, local_ref< android::graphics::Rect > const &a3, local_ref< android::graphics::BitmapFactory_::Options > const &a4)
{
	return local_ref< android::graphics::Bitmap >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), true>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype(), a3.get_jtype(), a4.get_jtype()
		)
	);
}

local_ref< android::graphics::Bitmap > android::graphics::BitmapFactory::decodeResource(local_ref< android::content::res::Resources > const &a0, cpp_int const &a1, local_ref< android::graphics::BitmapFactory_::Options > const &a2)
{
	return local_ref< android::graphics::Bitmap >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), true>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

local_ref< android::graphics::Bitmap > android::graphics::BitmapFactory::decodeResource(local_ref< android::content::res::Resources > const &a0, cpp_int const &a1)
{
	return local_ref< android::graphics::Bitmap >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), true>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< android::graphics::Bitmap > android::graphics::BitmapFactory::decodeByteArray(local_ref< cpp_byte_array<1> > const &a0, cpp_int const &a1, cpp_int const &a2, local_ref< android::graphics::BitmapFactory_::Options > const &a3)
{
	return local_ref< android::graphics::Bitmap >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), true>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype(), a3.get_jtype()
		)
	);
}

local_ref< android::graphics::Bitmap > android::graphics::BitmapFactory::decodeByteArray(local_ref< cpp_byte_array<1> > const &a0, cpp_int const &a1, cpp_int const &a2)
{
	return local_ref< android::graphics::Bitmap >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(7), J2CPP_METHOD_SIGNATURE(7), true>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

local_ref< android::graphics::Bitmap > android::graphics::BitmapFactory::decodeStream(local_ref< java::io::InputStream > const &a0, local_ref< android::graphics::Rect > const &a1, local_ref< android::graphics::BitmapFactory_::Options > const &a2)
{
	return local_ref< android::graphics::Bitmap >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(8), J2CPP_METHOD_SIGNATURE(8), true>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

local_ref< android::graphics::Bitmap > android::graphics::BitmapFactory::decodeStream(local_ref< java::io::InputStream > const &a0)
{
	return local_ref< android::graphics::Bitmap >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(9), J2CPP_METHOD_SIGNATURE(9), true>(),
			a0.get_jtype()
		)
	);
}

local_ref< android::graphics::Bitmap > android::graphics::BitmapFactory::decodeFileDescriptor(local_ref< java::io::FileDescriptor > const &a0, local_ref< android::graphics::Rect > const &a1, local_ref< android::graphics::BitmapFactory_::Options > const &a2)
{
	return local_ref< android::graphics::Bitmap >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(10), J2CPP_METHOD_SIGNATURE(10), true>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

local_ref< android::graphics::Bitmap > android::graphics::BitmapFactory::decodeFileDescriptor(local_ref< java::io::FileDescriptor > const &a0)
{
	return local_ref< android::graphics::Bitmap >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(11), J2CPP_METHOD_SIGNATURE(11), true>(),
			a0.get_jtype()
		)
	);
}


J2CPP_DEFINE_CLASS(android::graphics::BitmapFactory,"android/graphics/BitmapFactory")
J2CPP_DEFINE_METHOD(android::graphics::BitmapFactory,0,"<init>","()V")
J2CPP_DEFINE_METHOD(android::graphics::BitmapFactory,1,"decodeFile","(Ljava/lang/String;Landroid/graphics/BitmapFactory$Options;)Landroid/graphics/Bitmap;")
J2CPP_DEFINE_METHOD(android::graphics::BitmapFactory,2,"decodeFile","(Ljava/lang/String;)Landroid/graphics/Bitmap;")
J2CPP_DEFINE_METHOD(android::graphics::BitmapFactory,3,"decodeResourceStream","(Landroid/content/res/Resources;Landroid/util/TypedValue;Ljava/io/InputStream;Landroid/graphics/Rect;Landroid/graphics/BitmapFactory$Options;)Landroid/graphics/Bitmap;")
J2CPP_DEFINE_METHOD(android::graphics::BitmapFactory,4,"decodeResource","(Landroid/content/res/Resources;ILandroid/graphics/BitmapFactory$Options;)Landroid/graphics/Bitmap;")
J2CPP_DEFINE_METHOD(android::graphics::BitmapFactory,5,"decodeResource","(Landroid/content/res/Resources;I)Landroid/graphics/Bitmap;")
J2CPP_DEFINE_METHOD(android::graphics::BitmapFactory,6,"decodeByteArray","([BIILandroid/graphics/BitmapFactory$Options;)Landroid/graphics/Bitmap;")
J2CPP_DEFINE_METHOD(android::graphics::BitmapFactory,7,"decodeByteArray","([BII)Landroid/graphics/Bitmap;")
J2CPP_DEFINE_METHOD(android::graphics::BitmapFactory,8,"decodeStream","(Ljava/io/InputStream;Landroid/graphics/Rect;Landroid/graphics/BitmapFactory$Options;)Landroid/graphics/Bitmap;")
J2CPP_DEFINE_METHOD(android::graphics::BitmapFactory,9,"decodeStream","(Ljava/io/InputStream;)Landroid/graphics/Bitmap;")
J2CPP_DEFINE_METHOD(android::graphics::BitmapFactory,10,"decodeFileDescriptor","(Ljava/io/FileDescriptor;Landroid/graphics/Rect;Landroid/graphics/BitmapFactory$Options;)Landroid/graphics/Bitmap;")
J2CPP_DEFINE_METHOD(android::graphics::BitmapFactory,11,"decodeFileDescriptor","(Ljava/io/FileDescriptor;)Landroid/graphics/Bitmap;")

} //namespace j2cpp

#endif //J2CPP_ANDROID_GRAPHICS_BITMAPFACTORY_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
