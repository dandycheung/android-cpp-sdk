/*================================================================================
  code generated by: java2cpp
  class: android.graphics.drawable.Drawable
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_GRAPHICS_DRAWABLE_DRAWABLE_HPP_DECL
#define J2CPP_ANDROID_GRAPHICS_DRAWABLE_DRAWABLE_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace lang { class Runnable; } } }
namespace j2cpp { namespace java { namespace io { class InputStream; } } }
namespace j2cpp { namespace android { namespace content { namespace res { class Resources; } } } }
namespace j2cpp { namespace android { namespace util { class TypedValue; } } }
namespace j2cpp { namespace android { namespace util { class AttributeSet; } } }
namespace j2cpp { namespace android { namespace graphics { class Canvas; } } }
namespace j2cpp { namespace android { namespace graphics { class ColorFilter; } } }
namespace j2cpp { namespace android { namespace graphics { class Rect; } } }
namespace j2cpp { namespace android { namespace graphics { class Region; } } }
namespace j2cpp { namespace android { namespace graphics { namespace drawable { namespace Drawable_ { class Callback; } } } } }
namespace j2cpp { namespace android { namespace graphics { namespace drawable { namespace Drawable_ { class ConstantState; } } } } }
namespace j2cpp { namespace android { namespace graphics { namespace PorterDuff_ { class Mode; } } } }
namespace j2cpp { namespace android { namespace graphics { namespace BitmapFactory_ { class Options; } } } }
namespace j2cpp { namespace org { namespace xmlpull { namespace v1 { class XmlPullParser; } } } }


#include <android/content/res/Resources.hpp>
#include <android/graphics/BitmapFactory.hpp>
#include <android/graphics/Canvas.hpp>
#include <android/graphics/ColorFilter.hpp>
#include <android/graphics/PorterDuff.hpp>
#include <android/graphics/Rect.hpp>
#include <android/graphics/Region.hpp>
#include <android/graphics/drawable/Drawable.hpp>
#include <android/util/AttributeSet.hpp>
#include <android/util/TypedValue.hpp>
#include <java/io/InputStream.hpp>
#include <java/lang/Runnable.hpp>
#include <java/lang/String.hpp>
#include <org/xmlpull/v1/XmlPullParser.hpp>


namespace j2cpp {

namespace android { namespace graphics { namespace drawable {

	class Drawable;
	namespace Drawable_ {

		class Callback;
		class Callback
			: public cpp_object<Callback>
		{
		public:

			J2CPP_DECLARE_CLASS

			J2CPP_DECLARE_METHOD(0)
			J2CPP_DECLARE_METHOD(1)
			J2CPP_DECLARE_METHOD(2)

			Callback(jobject jobj)
			: cpp_object<Callback>(jobj)
			{
			}

			void invalidateDrawable(local_ref< android::graphics::drawable::Drawable > const&);
			void scheduleDrawable(local_ref< android::graphics::drawable::Drawable > const&, local_ref< java::lang::Runnable > const&, cpp_long const&);
			void unscheduleDrawable(local_ref< android::graphics::drawable::Drawable > const&, local_ref< java::lang::Runnable > const&);
		}; //class Callback

		class ConstantState;
		class ConstantState
			: public cpp_object<ConstantState>
		{
		public:

			J2CPP_DECLARE_CLASS

			J2CPP_DECLARE_METHOD(0)
			J2CPP_DECLARE_METHOD(1)
			J2CPP_DECLARE_METHOD(2)
			J2CPP_DECLARE_METHOD(3)

			ConstantState(jobject jobj)
			: cpp_object<ConstantState>(jobj)
			{
			}

			local_ref< android::graphics::drawable::Drawable > newDrawable();
			local_ref< android::graphics::drawable::Drawable > newDrawable(local_ref< android::content::res::Resources > const&);
			cpp_int getChangingConfigurations();
		}; //class ConstantState

	} //namespace Drawable_

	class Drawable
		: public cpp_object<Drawable>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_METHOD(12)
		J2CPP_DECLARE_METHOD(13)
		J2CPP_DECLARE_METHOD(14)
		J2CPP_DECLARE_METHOD(15)
		J2CPP_DECLARE_METHOD(16)
		J2CPP_DECLARE_METHOD(17)
		J2CPP_DECLARE_METHOD(18)
		J2CPP_DECLARE_METHOD(19)
		J2CPP_DECLARE_METHOD(20)
		J2CPP_DECLARE_METHOD(21)
		J2CPP_DECLARE_METHOD(22)
		J2CPP_DECLARE_METHOD(23)
		J2CPP_DECLARE_METHOD(24)
		J2CPP_DECLARE_METHOD(25)
		J2CPP_DECLARE_METHOD(26)
		J2CPP_DECLARE_METHOD(27)
		J2CPP_DECLARE_METHOD(28)
		J2CPP_DECLARE_METHOD(29)
		J2CPP_DECLARE_METHOD(30)
		J2CPP_DECLARE_METHOD(31)
		J2CPP_DECLARE_METHOD(32)
		J2CPP_DECLARE_METHOD(33)
		J2CPP_DECLARE_METHOD(34)
		J2CPP_DECLARE_METHOD(35)
		J2CPP_DECLARE_METHOD(36)
		J2CPP_DECLARE_METHOD(37)
		J2CPP_DECLARE_METHOD(38)
		J2CPP_DECLARE_METHOD(39)
		J2CPP_DECLARE_METHOD(40)
		J2CPP_DECLARE_METHOD(41)
		J2CPP_DECLARE_METHOD(42)
		J2CPP_DECLARE_METHOD(43)
		J2CPP_DECLARE_METHOD(44)
		J2CPP_DECLARE_METHOD(45)
		J2CPP_DECLARE_METHOD(46)

		typedef Drawable_::Callback Callback;
		typedef Drawable_::ConstantState ConstantState;

		Drawable(jobject jobj)
		: cpp_object<Drawable>(jobj)
		{
		}

		void draw(local_ref< android::graphics::Canvas > const&);
		void setBounds(cpp_int const&, cpp_int const&, cpp_int const&, cpp_int const&);
		void setBounds(local_ref< android::graphics::Rect > const&);
		void copyBounds(local_ref< android::graphics::Rect > const&);
		local_ref< android::graphics::Rect > copyBounds();
		local_ref< android::graphics::Rect > getBounds();
		void setChangingConfigurations(cpp_int const&);
		cpp_int getChangingConfigurations();
		void setDither(cpp_boolean const&);
		void setFilterBitmap(cpp_boolean const&);
		void setCallback(local_ref< android::graphics::drawable::Drawable_::Callback > const&);
		void invalidateSelf();
		void scheduleSelf(local_ref< java::lang::Runnable > const&, cpp_long const&);
		void unscheduleSelf(local_ref< java::lang::Runnable > const&);
		void setAlpha(cpp_int const&);
		void setColorFilter(local_ref< android::graphics::ColorFilter > const&);
		void setColorFilter(cpp_int const&, local_ref< android::graphics::PorterDuff_::Mode > const&);
		void clearColorFilter();
		cpp_boolean isStateful();
		cpp_boolean setState(local_ref< cpp_int_array<1> > const&);
		local_ref< cpp_int_array<1> > getState();
		local_ref< android::graphics::drawable::Drawable > getCurrent();
		cpp_boolean setLevel(cpp_int const&);
		cpp_int getLevel();
		cpp_boolean setVisible(cpp_boolean const&, cpp_boolean const&);
		cpp_boolean isVisible();
		cpp_int getOpacity();
		static cpp_int resolveOpacity(cpp_int const&, cpp_int const&);
		local_ref< android::graphics::Region > getTransparentRegion();
		cpp_int getIntrinsicWidth();
		cpp_int getIntrinsicHeight();
		cpp_int getMinimumWidth();
		cpp_int getMinimumHeight();
		cpp_boolean getPadding(local_ref< android::graphics::Rect > const&);
		local_ref< android::graphics::drawable::Drawable > mutate();
		static local_ref< android::graphics::drawable::Drawable > createFromStream(local_ref< java::io::InputStream > const&, local_ref< java::lang::String > const&);
		static local_ref< android::graphics::drawable::Drawable > createFromResourceStream(local_ref< android::content::res::Resources > const&, local_ref< android::util::TypedValue > const&, local_ref< java::io::InputStream > const&, local_ref< java::lang::String > const&);
		static local_ref< android::graphics::drawable::Drawable > createFromResourceStream(local_ref< android::content::res::Resources > const&, local_ref< android::util::TypedValue > const&, local_ref< java::io::InputStream > const&, local_ref< java::lang::String > const&, local_ref< android::graphics::BitmapFactory_::Options > const&);
		static local_ref< android::graphics::drawable::Drawable > createFromXml(local_ref< android::content::res::Resources > const&, local_ref< org::xmlpull::v1::XmlPullParser > const&);
		static local_ref< android::graphics::drawable::Drawable > createFromXmlInner(local_ref< android::content::res::Resources > const&, local_ref< org::xmlpull::v1::XmlPullParser > const&, local_ref< android::util::AttributeSet > const&);
		static local_ref< android::graphics::drawable::Drawable > createFromPath(local_ref< java::lang::String > const&);
		void inflate(local_ref< android::content::res::Resources > const&, local_ref< org::xmlpull::v1::XmlPullParser > const&, local_ref< android::util::AttributeSet > const&);
		local_ref< android::graphics::drawable::Drawable_::ConstantState > getConstantState();
	}; //class Drawable

} //namespace drawable
} //namespace graphics
} //namespace android


} //namespace j2cpp

#endif //J2CPP_ANDROID_GRAPHICS_DRAWABLE_DRAWABLE_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_GRAPHICS_DRAWABLE_DRAWABLE_HPP_IMPL
#define J2CPP_ANDROID_GRAPHICS_DRAWABLE_DRAWABLE_HPP_IMPL

namespace j2cpp {



void android::graphics::drawable::Drawable_::Callback::invalidateDrawable(local_ref< android::graphics::drawable::Drawable > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(0), J2CPP_METHOD_SIGNATURE(0), false>(),
			a0.get_jtype()
		)
	);
}

void android::graphics::drawable::Drawable_::Callback::scheduleDrawable(local_ref< android::graphics::drawable::Drawable > const &a0, local_ref< java::lang::Runnable > const &a1, cpp_long const &a2)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

void android::graphics::drawable::Drawable_::Callback::unscheduleDrawable(local_ref< android::graphics::drawable::Drawable > const &a0, local_ref< java::lang::Runnable > const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}


J2CPP_DEFINE_CLASS(android::graphics::drawable::Drawable_::Callback,"android/graphics/drawable/Drawable$Callback")
J2CPP_DEFINE_METHOD(android::graphics::drawable::Drawable_::Callback,0,"invalidateDrawable","(Landroid/graphics/drawable/Drawable;)V")
J2CPP_DEFINE_METHOD(android::graphics::drawable::Drawable_::Callback,1,"scheduleDrawable","(Landroid/graphics/drawable/Drawable;Ljava/lang/Runnable;J)V")
J2CPP_DEFINE_METHOD(android::graphics::drawable::Drawable_::Callback,2,"unscheduleDrawable","(Landroid/graphics/drawable/Drawable;Ljava/lang/Runnable;)V")

template <>
local_ref< android::graphics::drawable::Drawable_::ConstantState > create< android::graphics::drawable::Drawable_::ConstantState>()
{
	return local_ref< android::graphics::drawable::Drawable_::ConstantState >(
		environment::get().get_jenv()->NewObject(
			get_class<android::graphics::drawable::Drawable_::ConstantState::J2CPP_CLASS_NAME>(),
			get_method_id<android::graphics::drawable::Drawable_::ConstantState::J2CPP_CLASS_NAME, android::graphics::drawable::Drawable_::ConstantState::J2CPP_METHOD_NAME(0), android::graphics::drawable::Drawable_::ConstantState::J2CPP_METHOD_SIGNATURE(0), false>()
		)
	);
}

local_ref< android::graphics::drawable::Drawable > android::graphics::drawable::Drawable_::ConstantState::newDrawable()
{
	return local_ref< android::graphics::drawable::Drawable >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), false>()
		)
	);
}

local_ref< android::graphics::drawable::Drawable > android::graphics::drawable::Drawable_::ConstantState::newDrawable(local_ref< android::content::res::Resources > const &a0)
{
	return local_ref< android::graphics::drawable::Drawable >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int android::graphics::drawable::Drawable_::ConstantState::getChangingConfigurations()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>()
		)
	);
}


J2CPP_DEFINE_CLASS(android::graphics::drawable::Drawable_::ConstantState,"android/graphics/drawable/Drawable$ConstantState")
J2CPP_DEFINE_METHOD(android::graphics::drawable::Drawable_::ConstantState,0,"<init>","()V")
J2CPP_DEFINE_METHOD(android::graphics::drawable::Drawable_::ConstantState,1,"newDrawable","()Landroid/graphics/drawable/Drawable;")
J2CPP_DEFINE_METHOD(android::graphics::drawable::Drawable_::ConstantState,2,"newDrawable","(Landroid/content/res/Resources;)Landroid/graphics/drawable/Drawable;")
J2CPP_DEFINE_METHOD(android::graphics::drawable::Drawable_::ConstantState,3,"getChangingConfigurations","()I")


template <>
local_ref< android::graphics::drawable::Drawable > create< android::graphics::drawable::Drawable>()
{
	return local_ref< android::graphics::drawable::Drawable >(
		environment::get().get_jenv()->NewObject(
			get_class<android::graphics::drawable::Drawable::J2CPP_CLASS_NAME>(),
			get_method_id<android::graphics::drawable::Drawable::J2CPP_CLASS_NAME, android::graphics::drawable::Drawable::J2CPP_METHOD_NAME(0), android::graphics::drawable::Drawable::J2CPP_METHOD_SIGNATURE(0), false>()
		)
	);
}

void android::graphics::drawable::Drawable::draw(local_ref< android::graphics::Canvas > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), false>(),
			a0.get_jtype()
		)
	);
}

void android::graphics::drawable::Drawable::setBounds(cpp_int const &a0, cpp_int const &a1, cpp_int const &a2, cpp_int const &a3)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype(), a3.get_jtype()
		)
	);
}

void android::graphics::drawable::Drawable::setBounds(local_ref< android::graphics::Rect > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>(),
			a0.get_jtype()
		)
	);
}

void android::graphics::drawable::Drawable::copyBounds(local_ref< android::graphics::Rect > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< android::graphics::Rect > android::graphics::drawable::Drawable::copyBounds()
{
	return local_ref< android::graphics::Rect >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>()
		)
	);
}

local_ref< android::graphics::Rect > android::graphics::drawable::Drawable::getBounds()
{
	return local_ref< android::graphics::Rect >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>()
		)
	);
}

void android::graphics::drawable::Drawable::setChangingConfigurations(cpp_int const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(7), J2CPP_METHOD_SIGNATURE(7), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int android::graphics::drawable::Drawable::getChangingConfigurations()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(8), J2CPP_METHOD_SIGNATURE(8), false>()
		)
	);
}

void android::graphics::drawable::Drawable::setDither(cpp_boolean const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(9), J2CPP_METHOD_SIGNATURE(9), false>(),
			a0.get_jtype()
		)
	);
}

void android::graphics::drawable::Drawable::setFilterBitmap(cpp_boolean const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(10), J2CPP_METHOD_SIGNATURE(10), false>(),
			a0.get_jtype()
		)
	);
}

void android::graphics::drawable::Drawable::setCallback(local_ref< android::graphics::drawable::Drawable_::Callback > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(11), J2CPP_METHOD_SIGNATURE(11), false>(),
			a0.get_jtype()
		)
	);
}

void android::graphics::drawable::Drawable::invalidateSelf()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(12), J2CPP_METHOD_SIGNATURE(12), false>()
		)
	);
}

void android::graphics::drawable::Drawable::scheduleSelf(local_ref< java::lang::Runnable > const &a0, cpp_long const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(13), J2CPP_METHOD_SIGNATURE(13), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void android::graphics::drawable::Drawable::unscheduleSelf(local_ref< java::lang::Runnable > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(14), J2CPP_METHOD_SIGNATURE(14), false>(),
			a0.get_jtype()
		)
	);
}

void android::graphics::drawable::Drawable::setAlpha(cpp_int const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(15), J2CPP_METHOD_SIGNATURE(15), false>(),
			a0.get_jtype()
		)
	);
}

void android::graphics::drawable::Drawable::setColorFilter(local_ref< android::graphics::ColorFilter > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(16), J2CPP_METHOD_SIGNATURE(16), false>(),
			a0.get_jtype()
		)
	);
}

void android::graphics::drawable::Drawable::setColorFilter(cpp_int const &a0, local_ref< android::graphics::PorterDuff_::Mode > const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(17), J2CPP_METHOD_SIGNATURE(17), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void android::graphics::drawable::Drawable::clearColorFilter()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(18), J2CPP_METHOD_SIGNATURE(18), false>()
		)
	);
}

cpp_boolean android::graphics::drawable::Drawable::isStateful()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(19), J2CPP_METHOD_SIGNATURE(19), false>()
		)
	);
}

cpp_boolean android::graphics::drawable::Drawable::setState(local_ref< cpp_int_array<1> > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(20), J2CPP_METHOD_SIGNATURE(20), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< cpp_int_array<1> > android::graphics::drawable::Drawable::getState()
{
	return local_ref< cpp_int_array<1> >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(21), J2CPP_METHOD_SIGNATURE(21), false>()
		)
	);
}

local_ref< android::graphics::drawable::Drawable > android::graphics::drawable::Drawable::getCurrent()
{
	return local_ref< android::graphics::drawable::Drawable >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(22), J2CPP_METHOD_SIGNATURE(22), false>()
		)
	);
}

cpp_boolean android::graphics::drawable::Drawable::setLevel(cpp_int const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(23), J2CPP_METHOD_SIGNATURE(23), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int android::graphics::drawable::Drawable::getLevel()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(24), J2CPP_METHOD_SIGNATURE(24), false>()
		)
	);
}

cpp_boolean android::graphics::drawable::Drawable::setVisible(cpp_boolean const &a0, cpp_boolean const &a1)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(25), J2CPP_METHOD_SIGNATURE(25), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_boolean android::graphics::drawable::Drawable::isVisible()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(26), J2CPP_METHOD_SIGNATURE(26), false>()
		)
	);
}

cpp_int android::graphics::drawable::Drawable::getOpacity()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(27), J2CPP_METHOD_SIGNATURE(27), false>()
		)
	);
}

cpp_int android::graphics::drawable::Drawable::resolveOpacity(cpp_int const &a0, cpp_int const &a1)
{
	return cpp_int(
		environment::get().get_jenv()->CallStaticIntMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(28), J2CPP_METHOD_SIGNATURE(28), true>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< android::graphics::Region > android::graphics::drawable::Drawable::getTransparentRegion()
{
	return local_ref< android::graphics::Region >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(29), J2CPP_METHOD_SIGNATURE(29), false>()
		)
	);
}




cpp_int android::graphics::drawable::Drawable::getIntrinsicWidth()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(33), J2CPP_METHOD_SIGNATURE(33), false>()
		)
	);
}

cpp_int android::graphics::drawable::Drawable::getIntrinsicHeight()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(34), J2CPP_METHOD_SIGNATURE(34), false>()
		)
	);
}

cpp_int android::graphics::drawable::Drawable::getMinimumWidth()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(35), J2CPP_METHOD_SIGNATURE(35), false>()
		)
	);
}

cpp_int android::graphics::drawable::Drawable::getMinimumHeight()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(36), J2CPP_METHOD_SIGNATURE(36), false>()
		)
	);
}

cpp_boolean android::graphics::drawable::Drawable::getPadding(local_ref< android::graphics::Rect > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(37), J2CPP_METHOD_SIGNATURE(37), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< android::graphics::drawable::Drawable > android::graphics::drawable::Drawable::mutate()
{
	return local_ref< android::graphics::drawable::Drawable >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(38), J2CPP_METHOD_SIGNATURE(38), false>()
		)
	);
}

local_ref< android::graphics::drawable::Drawable > android::graphics::drawable::Drawable::createFromStream(local_ref< java::io::InputStream > const &a0, local_ref< java::lang::String > const &a1)
{
	return local_ref< android::graphics::drawable::Drawable >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(39), J2CPP_METHOD_SIGNATURE(39), true>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< android::graphics::drawable::Drawable > android::graphics::drawable::Drawable::createFromResourceStream(local_ref< android::content::res::Resources > const &a0, local_ref< android::util::TypedValue > const &a1, local_ref< java::io::InputStream > const &a2, local_ref< java::lang::String > const &a3)
{
	return local_ref< android::graphics::drawable::Drawable >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(40), J2CPP_METHOD_SIGNATURE(40), true>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype(), a3.get_jtype()
		)
	);
}

local_ref< android::graphics::drawable::Drawable > android::graphics::drawable::Drawable::createFromResourceStream(local_ref< android::content::res::Resources > const &a0, local_ref< android::util::TypedValue > const &a1, local_ref< java::io::InputStream > const &a2, local_ref< java::lang::String > const &a3, local_ref< android::graphics::BitmapFactory_::Options > const &a4)
{
	return local_ref< android::graphics::drawable::Drawable >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(41), J2CPP_METHOD_SIGNATURE(41), true>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype(), a3.get_jtype(), a4.get_jtype()
		)
	);
}

local_ref< android::graphics::drawable::Drawable > android::graphics::drawable::Drawable::createFromXml(local_ref< android::content::res::Resources > const &a0, local_ref< org::xmlpull::v1::XmlPullParser > const &a1)
{
	return local_ref< android::graphics::drawable::Drawable >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(42), J2CPP_METHOD_SIGNATURE(42), true>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< android::graphics::drawable::Drawable > android::graphics::drawable::Drawable::createFromXmlInner(local_ref< android::content::res::Resources > const &a0, local_ref< org::xmlpull::v1::XmlPullParser > const &a1, local_ref< android::util::AttributeSet > const &a2)
{
	return local_ref< android::graphics::drawable::Drawable >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(43), J2CPP_METHOD_SIGNATURE(43), true>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

local_ref< android::graphics::drawable::Drawable > android::graphics::drawable::Drawable::createFromPath(local_ref< java::lang::String > const &a0)
{
	return local_ref< android::graphics::drawable::Drawable >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(44), J2CPP_METHOD_SIGNATURE(44), true>(),
			a0.get_jtype()
		)
	);
}

void android::graphics::drawable::Drawable::inflate(local_ref< android::content::res::Resources > const &a0, local_ref< org::xmlpull::v1::XmlPullParser > const &a1, local_ref< android::util::AttributeSet > const &a2)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(45), J2CPP_METHOD_SIGNATURE(45), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

local_ref< android::graphics::drawable::Drawable_::ConstantState > android::graphics::drawable::Drawable::getConstantState()
{
	return local_ref< android::graphics::drawable::Drawable_::ConstantState >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(46), J2CPP_METHOD_SIGNATURE(46), false>()
		)
	);
}


J2CPP_DEFINE_CLASS(android::graphics::drawable::Drawable,"android/graphics/drawable/Drawable")
J2CPP_DEFINE_METHOD(android::graphics::drawable::Drawable,0,"<init>","()V")
J2CPP_DEFINE_METHOD(android::graphics::drawable::Drawable,1,"draw","(Landroid/graphics/Canvas;)V")
J2CPP_DEFINE_METHOD(android::graphics::drawable::Drawable,2,"setBounds","(IIII)V")
J2CPP_DEFINE_METHOD(android::graphics::drawable::Drawable,3,"setBounds","(Landroid/graphics/Rect;)V")
J2CPP_DEFINE_METHOD(android::graphics::drawable::Drawable,4,"copyBounds","(Landroid/graphics/Rect;)V")
J2CPP_DEFINE_METHOD(android::graphics::drawable::Drawable,5,"copyBounds","()Landroid/graphics/Rect;")
J2CPP_DEFINE_METHOD(android::graphics::drawable::Drawable,6,"getBounds","()Landroid/graphics/Rect;")
J2CPP_DEFINE_METHOD(android::graphics::drawable::Drawable,7,"setChangingConfigurations","(I)V")
J2CPP_DEFINE_METHOD(android::graphics::drawable::Drawable,8,"getChangingConfigurations","()I")
J2CPP_DEFINE_METHOD(android::graphics::drawable::Drawable,9,"setDither","(Z)V")
J2CPP_DEFINE_METHOD(android::graphics::drawable::Drawable,10,"setFilterBitmap","(Z)V")
J2CPP_DEFINE_METHOD(android::graphics::drawable::Drawable,11,"setCallback","(Landroid/graphics/drawable/Drawable$Callback;)V")
J2CPP_DEFINE_METHOD(android::graphics::drawable::Drawable,12,"invalidateSelf","()V")
J2CPP_DEFINE_METHOD(android::graphics::drawable::Drawable,13,"scheduleSelf","(Ljava/lang/Runnable;J)V")
J2CPP_DEFINE_METHOD(android::graphics::drawable::Drawable,14,"unscheduleSelf","(Ljava/lang/Runnable;)V")
J2CPP_DEFINE_METHOD(android::graphics::drawable::Drawable,15,"setAlpha","(I)V")
J2CPP_DEFINE_METHOD(android::graphics::drawable::Drawable,16,"setColorFilter","(Landroid/graphics/ColorFilter;)V")
J2CPP_DEFINE_METHOD(android::graphics::drawable::Drawable,17,"setColorFilter","(ILandroid/graphics/PorterDuff$Mode;)V")
J2CPP_DEFINE_METHOD(android::graphics::drawable::Drawable,18,"clearColorFilter","()V")
J2CPP_DEFINE_METHOD(android::graphics::drawable::Drawable,19,"isStateful","()Z")
J2CPP_DEFINE_METHOD(android::graphics::drawable::Drawable,20,"setState","([I)Z")
J2CPP_DEFINE_METHOD(android::graphics::drawable::Drawable,21,"getState","()[I")
J2CPP_DEFINE_METHOD(android::graphics::drawable::Drawable,22,"getCurrent","()Landroid/graphics/drawable/Drawable;")
J2CPP_DEFINE_METHOD(android::graphics::drawable::Drawable,23,"setLevel","(I)Z")
J2CPP_DEFINE_METHOD(android::graphics::drawable::Drawable,24,"getLevel","()I")
J2CPP_DEFINE_METHOD(android::graphics::drawable::Drawable,25,"setVisible","(ZZ)Z")
J2CPP_DEFINE_METHOD(android::graphics::drawable::Drawable,26,"isVisible","()Z")
J2CPP_DEFINE_METHOD(android::graphics::drawable::Drawable,27,"getOpacity","()I")
J2CPP_DEFINE_METHOD(android::graphics::drawable::Drawable,28,"resolveOpacity","(II)I")
J2CPP_DEFINE_METHOD(android::graphics::drawable::Drawable,29,"getTransparentRegion","()Landroid/graphics/Region;")
J2CPP_DEFINE_METHOD(android::graphics::drawable::Drawable,30,"onStateChange","([I)Z")
J2CPP_DEFINE_METHOD(android::graphics::drawable::Drawable,31,"onLevelChange","(I)Z")
J2CPP_DEFINE_METHOD(android::graphics::drawable::Drawable,32,"onBoundsChange","(Landroid/graphics/Rect;)V")
J2CPP_DEFINE_METHOD(android::graphics::drawable::Drawable,33,"getIntrinsicWidth","()I")
J2CPP_DEFINE_METHOD(android::graphics::drawable::Drawable,34,"getIntrinsicHeight","()I")
J2CPP_DEFINE_METHOD(android::graphics::drawable::Drawable,35,"getMinimumWidth","()I")
J2CPP_DEFINE_METHOD(android::graphics::drawable::Drawable,36,"getMinimumHeight","()I")
J2CPP_DEFINE_METHOD(android::graphics::drawable::Drawable,37,"getPadding","(Landroid/graphics/Rect;)Z")
J2CPP_DEFINE_METHOD(android::graphics::drawable::Drawable,38,"mutate","()Landroid/graphics/drawable/Drawable;")
J2CPP_DEFINE_METHOD(android::graphics::drawable::Drawable,39,"createFromStream","(Ljava/io/InputStream;Ljava/lang/String;)Landroid/graphics/drawable/Drawable;")
J2CPP_DEFINE_METHOD(android::graphics::drawable::Drawable,40,"createFromResourceStream","(Landroid/content/res/Resources;Landroid/util/TypedValue;Ljava/io/InputStream;Ljava/lang/String;)Landroid/graphics/drawable/Drawable;")
J2CPP_DEFINE_METHOD(android::graphics::drawable::Drawable,41,"createFromResourceStream","(Landroid/content/res/Resources;Landroid/util/TypedValue;Ljava/io/InputStream;Ljava/lang/String;Landroid/graphics/BitmapFactory$Options;)Landroid/graphics/drawable/Drawable;")
J2CPP_DEFINE_METHOD(android::graphics::drawable::Drawable,42,"createFromXml","(Landroid/content/res/Resources;Lorg/xmlpull/v1/XmlPullParser;)Landroid/graphics/drawable/Drawable;")
J2CPP_DEFINE_METHOD(android::graphics::drawable::Drawable,43,"createFromXmlInner","(Landroid/content/res/Resources;Lorg/xmlpull/v1/XmlPullParser;Landroid/util/AttributeSet;)Landroid/graphics/drawable/Drawable;")
J2CPP_DEFINE_METHOD(android::graphics::drawable::Drawable,44,"createFromPath","(Ljava/lang/String;)Landroid/graphics/drawable/Drawable;")
J2CPP_DEFINE_METHOD(android::graphics::drawable::Drawable,45,"inflate","(Landroid/content/res/Resources;Lorg/xmlpull/v1/XmlPullParser;Landroid/util/AttributeSet;)V")
J2CPP_DEFINE_METHOD(android::graphics::drawable::Drawable,46,"getConstantState","()Landroid/graphics/drawable/Drawable$ConstantState;")

} //namespace j2cpp

#endif //J2CPP_ANDROID_GRAPHICS_DRAWABLE_DRAWABLE_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
