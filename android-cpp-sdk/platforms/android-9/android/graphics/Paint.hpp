/*================================================================================
  code generated by: java2cpp
  class: android.graphics.Paint
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_GRAPHICS_PAINT_HPP_DECL
#define J2CPP_ANDROID_GRAPHICS_PAINT_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace lang { class CharSequence; } } }
namespace j2cpp { namespace android { namespace graphics { class ColorFilter; } } }
namespace j2cpp { namespace android { namespace graphics { class Path; } } }
namespace j2cpp { namespace android { namespace graphics { namespace Paint_ { class Style; } } } }
namespace j2cpp { namespace android { namespace graphics { class Rect; } } }
namespace j2cpp { namespace android { namespace graphics { class PathEffect; } } }
namespace j2cpp { namespace android { namespace graphics { class Shader; } } }
namespace j2cpp { namespace android { namespace graphics { namespace Paint_ { class Align; } } } }
namespace j2cpp { namespace android { namespace graphics { class MaskFilter; } } }
namespace j2cpp { namespace android { namespace graphics { namespace Paint_ { class Cap; } } } }
namespace j2cpp { namespace android { namespace graphics { namespace Paint_ { class Join; } } } }
namespace j2cpp { namespace android { namespace graphics { class Typeface; } } }
namespace j2cpp { namespace android { namespace graphics { class Rasterizer; } } }
namespace j2cpp { namespace android { namespace graphics { namespace Paint_ { class FontMetricsInt; } } } }
namespace j2cpp { namespace android { namespace graphics { namespace Paint_ { class FontMetrics; } } } }
namespace j2cpp { namespace android { namespace graphics { class Xfermode; } } }


#include <android/graphics/ColorFilter.hpp>
#include <android/graphics/MaskFilter.hpp>
#include <android/graphics/Paint.hpp>
#include <android/graphics/Path.hpp>
#include <android/graphics/PathEffect.hpp>
#include <android/graphics/Rasterizer.hpp>
#include <android/graphics/Rect.hpp>
#include <android/graphics/Shader.hpp>
#include <android/graphics/Typeface.hpp>
#include <android/graphics/Xfermode.hpp>
#include <java/lang/CharSequence.hpp>
#include <java/lang/String.hpp>


namespace j2cpp {

namespace android { namespace graphics {

	class Paint;
	namespace Paint_ {

		class Style;
		class Style
			: public cpp_object<Style>
		{
		public:

			J2CPP_DECLARE_CLASS

			J2CPP_DECLARE_METHOD(0)
			J2CPP_DECLARE_METHOD(1)
			J2CPP_DECLARE_METHOD(2)
			J2CPP_DECLARE_METHOD(3)
			J2CPP_DECLARE_FIELD(0)
			J2CPP_DECLARE_FIELD(1)
			J2CPP_DECLARE_FIELD(2)
			J2CPP_DECLARE_FIELD(3)

			Style(jobject jobj)
			: cpp_object<Style>(jobj)
			{
			}

			static local_ref< cpp_object_array<android::graphics::Paint_::Style, 1> > values();
			static local_ref< android::graphics::Paint_::Style > valueOf(local_ref< java::lang::String > const&);

			static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(0), J2CPP_FIELD_SIGNATURE(0), local_ref< android::graphics::Paint_::Style > > FILL;
			static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(1), J2CPP_FIELD_SIGNATURE(1), local_ref< android::graphics::Paint_::Style > > FILL_AND_STROKE;
			static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(2), J2CPP_FIELD_SIGNATURE(2), local_ref< android::graphics::Paint_::Style > > STROKE;
		}; //class Style

		class Align;
		class Align
			: public cpp_object<Align>
		{
		public:

			J2CPP_DECLARE_CLASS

			J2CPP_DECLARE_METHOD(0)
			J2CPP_DECLARE_METHOD(1)
			J2CPP_DECLARE_METHOD(2)
			J2CPP_DECLARE_METHOD(3)
			J2CPP_DECLARE_FIELD(0)
			J2CPP_DECLARE_FIELD(1)
			J2CPP_DECLARE_FIELD(2)
			J2CPP_DECLARE_FIELD(3)

			Align(jobject jobj)
			: cpp_object<Align>(jobj)
			{
			}

			static local_ref< cpp_object_array<android::graphics::Paint_::Align, 1> > values();
			static local_ref< android::graphics::Paint_::Align > valueOf(local_ref< java::lang::String > const&);

			static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(0), J2CPP_FIELD_SIGNATURE(0), local_ref< android::graphics::Paint_::Align > > CENTER;
			static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(1), J2CPP_FIELD_SIGNATURE(1), local_ref< android::graphics::Paint_::Align > > LEFT;
			static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(2), J2CPP_FIELD_SIGNATURE(2), local_ref< android::graphics::Paint_::Align > > RIGHT;
		}; //class Align

		class Cap;
		class Cap
			: public cpp_object<Cap>
		{
		public:

			J2CPP_DECLARE_CLASS

			J2CPP_DECLARE_METHOD(0)
			J2CPP_DECLARE_METHOD(1)
			J2CPP_DECLARE_METHOD(2)
			J2CPP_DECLARE_METHOD(3)
			J2CPP_DECLARE_FIELD(0)
			J2CPP_DECLARE_FIELD(1)
			J2CPP_DECLARE_FIELD(2)
			J2CPP_DECLARE_FIELD(3)

			Cap(jobject jobj)
			: cpp_object<Cap>(jobj)
			{
			}

			static local_ref< cpp_object_array<android::graphics::Paint_::Cap, 1> > values();
			static local_ref< android::graphics::Paint_::Cap > valueOf(local_ref< java::lang::String > const&);

			static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(0), J2CPP_FIELD_SIGNATURE(0), local_ref< android::graphics::Paint_::Cap > > BUTT;
			static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(1), J2CPP_FIELD_SIGNATURE(1), local_ref< android::graphics::Paint_::Cap > > ROUND;
			static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(2), J2CPP_FIELD_SIGNATURE(2), local_ref< android::graphics::Paint_::Cap > > SQUARE;
		}; //class Cap

		class Join;
		class Join
			: public cpp_object<Join>
		{
		public:

			J2CPP_DECLARE_CLASS

			J2CPP_DECLARE_METHOD(0)
			J2CPP_DECLARE_METHOD(1)
			J2CPP_DECLARE_METHOD(2)
			J2CPP_DECLARE_METHOD(3)
			J2CPP_DECLARE_FIELD(0)
			J2CPP_DECLARE_FIELD(1)
			J2CPP_DECLARE_FIELD(2)
			J2CPP_DECLARE_FIELD(3)

			Join(jobject jobj)
			: cpp_object<Join>(jobj)
			{
			}

			static local_ref< cpp_object_array<android::graphics::Paint_::Join, 1> > values();
			static local_ref< android::graphics::Paint_::Join > valueOf(local_ref< java::lang::String > const&);

			static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(0), J2CPP_FIELD_SIGNATURE(0), local_ref< android::graphics::Paint_::Join > > BEVEL;
			static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(1), J2CPP_FIELD_SIGNATURE(1), local_ref< android::graphics::Paint_::Join > > MITER;
			static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(2), J2CPP_FIELD_SIGNATURE(2), local_ref< android::graphics::Paint_::Join > > ROUND;
		}; //class Join

		class FontMetricsInt;
		class FontMetricsInt
			: public cpp_object<FontMetricsInt>
		{
		public:

			J2CPP_DECLARE_CLASS

			J2CPP_DECLARE_METHOD(0)
			J2CPP_DECLARE_METHOD(1)
			J2CPP_DECLARE_FIELD(0)
			J2CPP_DECLARE_FIELD(1)
			J2CPP_DECLARE_FIELD(2)
			J2CPP_DECLARE_FIELD(3)
			J2CPP_DECLARE_FIELD(4)

			FontMetricsInt(jobject jobj)
			: cpp_object<FontMetricsInt>(jobj)
			, top(jobj)
			, ascent(jobj)
			, descent(jobj)
			, bottom(jobj)
			, leading(jobj)
			{
			}

			local_ref< java::lang::String > toString();

			field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(0), J2CPP_FIELD_SIGNATURE(0), cpp_int > top;
			field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(1), J2CPP_FIELD_SIGNATURE(1), cpp_int > ascent;
			field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(2), J2CPP_FIELD_SIGNATURE(2), cpp_int > descent;
			field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(3), J2CPP_FIELD_SIGNATURE(3), cpp_int > bottom;
			field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(4), J2CPP_FIELD_SIGNATURE(4), cpp_int > leading;
		}; //class FontMetricsInt

		class FontMetrics;
		class FontMetrics
			: public cpp_object<FontMetrics>
		{
		public:

			J2CPP_DECLARE_CLASS

			J2CPP_DECLARE_METHOD(0)
			J2CPP_DECLARE_FIELD(0)
			J2CPP_DECLARE_FIELD(1)
			J2CPP_DECLARE_FIELD(2)
			J2CPP_DECLARE_FIELD(3)
			J2CPP_DECLARE_FIELD(4)

			FontMetrics(jobject jobj)
			: cpp_object<FontMetrics>(jobj)
			, top(jobj)
			, ascent(jobj)
			, descent(jobj)
			, bottom(jobj)
			, leading(jobj)
			{
			}


			field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(0), J2CPP_FIELD_SIGNATURE(0), cpp_float > top;
			field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(1), J2CPP_FIELD_SIGNATURE(1), cpp_float > ascent;
			field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(2), J2CPP_FIELD_SIGNATURE(2), cpp_float > descent;
			field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(3), J2CPP_FIELD_SIGNATURE(3), cpp_float > bottom;
			field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(4), J2CPP_FIELD_SIGNATURE(4), cpp_float > leading;
		}; //class FontMetrics

	} //namespace Paint_

	class Paint
		: public cpp_object<Paint>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_METHOD(12)
		J2CPP_DECLARE_METHOD(13)
		J2CPP_DECLARE_METHOD(14)
		J2CPP_DECLARE_METHOD(15)
		J2CPP_DECLARE_METHOD(16)
		J2CPP_DECLARE_METHOD(17)
		J2CPP_DECLARE_METHOD(18)
		J2CPP_DECLARE_METHOD(19)
		J2CPP_DECLARE_METHOD(20)
		J2CPP_DECLARE_METHOD(21)
		J2CPP_DECLARE_METHOD(22)
		J2CPP_DECLARE_METHOD(23)
		J2CPP_DECLARE_METHOD(24)
		J2CPP_DECLARE_METHOD(25)
		J2CPP_DECLARE_METHOD(26)
		J2CPP_DECLARE_METHOD(27)
		J2CPP_DECLARE_METHOD(28)
		J2CPP_DECLARE_METHOD(29)
		J2CPP_DECLARE_METHOD(30)
		J2CPP_DECLARE_METHOD(31)
		J2CPP_DECLARE_METHOD(32)
		J2CPP_DECLARE_METHOD(33)
		J2CPP_DECLARE_METHOD(34)
		J2CPP_DECLARE_METHOD(35)
		J2CPP_DECLARE_METHOD(36)
		J2CPP_DECLARE_METHOD(37)
		J2CPP_DECLARE_METHOD(38)
		J2CPP_DECLARE_METHOD(39)
		J2CPP_DECLARE_METHOD(40)
		J2CPP_DECLARE_METHOD(41)
		J2CPP_DECLARE_METHOD(42)
		J2CPP_DECLARE_METHOD(43)
		J2CPP_DECLARE_METHOD(44)
		J2CPP_DECLARE_METHOD(45)
		J2CPP_DECLARE_METHOD(46)
		J2CPP_DECLARE_METHOD(47)
		J2CPP_DECLARE_METHOD(48)
		J2CPP_DECLARE_METHOD(49)
		J2CPP_DECLARE_METHOD(50)
		J2CPP_DECLARE_METHOD(51)
		J2CPP_DECLARE_METHOD(52)
		J2CPP_DECLARE_METHOD(53)
		J2CPP_DECLARE_METHOD(54)
		J2CPP_DECLARE_METHOD(55)
		J2CPP_DECLARE_METHOD(56)
		J2CPP_DECLARE_METHOD(57)
		J2CPP_DECLARE_METHOD(58)
		J2CPP_DECLARE_METHOD(59)
		J2CPP_DECLARE_METHOD(60)
		J2CPP_DECLARE_METHOD(61)
		J2CPP_DECLARE_METHOD(62)
		J2CPP_DECLARE_METHOD(63)
		J2CPP_DECLARE_METHOD(64)
		J2CPP_DECLARE_METHOD(65)
		J2CPP_DECLARE_METHOD(66)
		J2CPP_DECLARE_METHOD(67)
		J2CPP_DECLARE_METHOD(68)
		J2CPP_DECLARE_METHOD(69)
		J2CPP_DECLARE_METHOD(70)
		J2CPP_DECLARE_METHOD(71)
		J2CPP_DECLARE_METHOD(72)
		J2CPP_DECLARE_METHOD(73)
		J2CPP_DECLARE_METHOD(74)
		J2CPP_DECLARE_METHOD(75)
		J2CPP_DECLARE_METHOD(76)
		J2CPP_DECLARE_METHOD(77)
		J2CPP_DECLARE_METHOD(78)
		J2CPP_DECLARE_METHOD(79)
		J2CPP_DECLARE_METHOD(80)
		J2CPP_DECLARE_METHOD(81)
		J2CPP_DECLARE_METHOD(82)
		J2CPP_DECLARE_METHOD(83)
		J2CPP_DECLARE_METHOD(84)
		J2CPP_DECLARE_METHOD(85)
		J2CPP_DECLARE_FIELD(0)
		J2CPP_DECLARE_FIELD(1)
		J2CPP_DECLARE_FIELD(2)
		J2CPP_DECLARE_FIELD(3)
		J2CPP_DECLARE_FIELD(4)
		J2CPP_DECLARE_FIELD(5)
		J2CPP_DECLARE_FIELD(6)
		J2CPP_DECLARE_FIELD(7)
		J2CPP_DECLARE_FIELD(8)

		typedef Paint_::Style Style;
		typedef Paint_::Align Align;
		typedef Paint_::Cap Cap;
		typedef Paint_::Join Join;
		typedef Paint_::FontMetricsInt FontMetricsInt;
		typedef Paint_::FontMetrics FontMetrics;

		Paint(jobject jobj)
		: cpp_object<Paint>(jobj)
		{
		}

		void reset();
		void set(local_ref< android::graphics::Paint > const&);
		cpp_int getFlags();
		void setFlags(cpp_int const&);
		cpp_boolean isAntiAlias();
		void setAntiAlias(cpp_boolean const&);
		cpp_boolean isDither();
		void setDither(cpp_boolean const&);
		cpp_boolean isLinearText();
		void setLinearText(cpp_boolean const&);
		cpp_boolean isSubpixelText();
		void setSubpixelText(cpp_boolean const&);
		cpp_boolean isUnderlineText();
		void setUnderlineText(cpp_boolean const&);
		cpp_boolean isStrikeThruText();
		void setStrikeThruText(cpp_boolean const&);
		cpp_boolean isFakeBoldText();
		void setFakeBoldText(cpp_boolean const&);
		cpp_boolean isFilterBitmap();
		void setFilterBitmap(cpp_boolean const&);
		local_ref< android::graphics::Paint_::Style > getStyle();
		void setStyle(local_ref< android::graphics::Paint_::Style > const&);
		cpp_int getColor();
		void setColor(cpp_int const&);
		cpp_int getAlpha();
		void setAlpha(cpp_int const&);
		void setARGB(cpp_int const&, cpp_int const&, cpp_int const&, cpp_int const&);
		cpp_float getStrokeWidth();
		void setStrokeWidth(cpp_float const&);
		cpp_float getStrokeMiter();
		void setStrokeMiter(cpp_float const&);
		local_ref< android::graphics::Paint_::Cap > getStrokeCap();
		void setStrokeCap(local_ref< android::graphics::Paint_::Cap > const&);
		local_ref< android::graphics::Paint_::Join > getStrokeJoin();
		void setStrokeJoin(local_ref< android::graphics::Paint_::Join > const&);
		cpp_boolean getFillPath(local_ref< android::graphics::Path > const&, local_ref< android::graphics::Path > const&);
		local_ref< android::graphics::Shader > getShader();
		local_ref< android::graphics::Shader > setShader(local_ref< android::graphics::Shader > const&);
		local_ref< android::graphics::ColorFilter > getColorFilter();
		local_ref< android::graphics::ColorFilter > setColorFilter(local_ref< android::graphics::ColorFilter > const&);
		local_ref< android::graphics::Xfermode > getXfermode();
		local_ref< android::graphics::Xfermode > setXfermode(local_ref< android::graphics::Xfermode > const&);
		local_ref< android::graphics::PathEffect > getPathEffect();
		local_ref< android::graphics::PathEffect > setPathEffect(local_ref< android::graphics::PathEffect > const&);
		local_ref< android::graphics::MaskFilter > getMaskFilter();
		local_ref< android::graphics::MaskFilter > setMaskFilter(local_ref< android::graphics::MaskFilter > const&);
		local_ref< android::graphics::Typeface > getTypeface();
		local_ref< android::graphics::Typeface > setTypeface(local_ref< android::graphics::Typeface > const&);
		local_ref< android::graphics::Rasterizer > getRasterizer();
		local_ref< android::graphics::Rasterizer > setRasterizer(local_ref< android::graphics::Rasterizer > const&);
		void setShadowLayer(cpp_float const&, cpp_float const&, cpp_float const&, cpp_int const&);
		void clearShadowLayer();
		local_ref< android::graphics::Paint_::Align > getTextAlign();
		void setTextAlign(local_ref< android::graphics::Paint_::Align > const&);
		cpp_float getTextSize();
		void setTextSize(cpp_float const&);
		cpp_float getTextScaleX();
		void setTextScaleX(cpp_float const&);
		cpp_float getTextSkewX();
		void setTextSkewX(cpp_float const&);
		cpp_float ascent();
		cpp_float descent();
		cpp_float getFontMetrics(local_ref< android::graphics::Paint_::FontMetrics > const&);
		local_ref< android::graphics::Paint_::FontMetrics > getFontMetrics();
		cpp_int getFontMetricsInt(local_ref< android::graphics::Paint_::FontMetricsInt > const&);
		local_ref< android::graphics::Paint_::FontMetricsInt > getFontMetricsInt();
		cpp_float getFontSpacing();
		cpp_float measureText(local_ref< cpp_char_array<1> > const&, cpp_int const&, cpp_int const&);
		cpp_float measureText(local_ref< java::lang::String > const&, cpp_int const&, cpp_int const&);
		cpp_float measureText(local_ref< java::lang::String > const&);
		cpp_float measureText(local_ref< java::lang::CharSequence > const&, cpp_int const&, cpp_int const&);
		cpp_int breakText(local_ref< cpp_char_array<1> > const&, cpp_int const&, cpp_int const&, cpp_float const&, local_ref< cpp_float_array<1> > const&);
		cpp_int breakText(local_ref< java::lang::CharSequence > const&, cpp_int const&, cpp_int const&, cpp_boolean const&, cpp_float const&, local_ref< cpp_float_array<1> > const&);
		cpp_int breakText(local_ref< java::lang::String > const&, cpp_boolean const&, cpp_float const&, local_ref< cpp_float_array<1> > const&);
		cpp_int getTextWidths(local_ref< cpp_char_array<1> > const&, cpp_int const&, cpp_int const&, local_ref< cpp_float_array<1> > const&);
		cpp_int getTextWidths(local_ref< java::lang::CharSequence > const&, cpp_int const&, cpp_int const&, local_ref< cpp_float_array<1> > const&);
		cpp_int getTextWidths(local_ref< java::lang::String > const&, cpp_int const&, cpp_int const&, local_ref< cpp_float_array<1> > const&);
		cpp_int getTextWidths(local_ref< java::lang::String > const&, local_ref< cpp_float_array<1> > const&);
		void getTextPath(local_ref< cpp_char_array<1> > const&, cpp_int const&, cpp_int const&, cpp_float const&, cpp_float const&, local_ref< android::graphics::Path > const&);
		void getTextPath(local_ref< java::lang::String > const&, cpp_int const&, cpp_int const&, cpp_float const&, cpp_float const&, local_ref< android::graphics::Path > const&);
		void getTextBounds(local_ref< java::lang::String > const&, cpp_int const&, cpp_int const&, local_ref< android::graphics::Rect > const&);
		void getTextBounds(local_ref< cpp_char_array<1> > const&, cpp_int const&, cpp_int const&, local_ref< android::graphics::Rect > const&);

		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(0), J2CPP_FIELD_SIGNATURE(0), cpp_int > ANTI_ALIAS_FLAG;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(1), J2CPP_FIELD_SIGNATURE(1), cpp_int > FILTER_BITMAP_FLAG;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(2), J2CPP_FIELD_SIGNATURE(2), cpp_int > DITHER_FLAG;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(3), J2CPP_FIELD_SIGNATURE(3), cpp_int > UNDERLINE_TEXT_FLAG;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(4), J2CPP_FIELD_SIGNATURE(4), cpp_int > STRIKE_THRU_TEXT_FLAG;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(5), J2CPP_FIELD_SIGNATURE(5), cpp_int > FAKE_BOLD_TEXT_FLAG;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(6), J2CPP_FIELD_SIGNATURE(6), cpp_int > LINEAR_TEXT_FLAG;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(7), J2CPP_FIELD_SIGNATURE(7), cpp_int > SUBPIXEL_TEXT_FLAG;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(8), J2CPP_FIELD_SIGNATURE(8), cpp_int > DEV_KERN_TEXT_FLAG;
	}; //class Paint

} //namespace graphics
} //namespace android


} //namespace j2cpp

#endif //J2CPP_ANDROID_GRAPHICS_PAINT_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_GRAPHICS_PAINT_HPP_IMPL
#define J2CPP_ANDROID_GRAPHICS_PAINT_HPP_IMPL

namespace j2cpp {



local_ref< cpp_object_array<android::graphics::Paint_::Style, 1> > android::graphics::Paint_::Style::values()
{
	return local_ref< cpp_object_array<android::graphics::Paint_::Style, 1> >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(0), J2CPP_METHOD_SIGNATURE(0), true>()
		)
	);
}

local_ref< android::graphics::Paint_::Style > android::graphics::Paint_::Style::valueOf(local_ref< java::lang::String > const &a0)
{
	return local_ref< android::graphics::Paint_::Style >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), true>(),
			a0.get_jtype()
		)
	);
}

template <>
local_ref< android::graphics::Paint_::Style > create< android::graphics::Paint_::Style>(local_ref< java::lang::String > const &a0, cpp_int const &a1)
{
	return local_ref< android::graphics::Paint_::Style >(
		environment::get().get_jenv()->NewObject(
			get_class<android::graphics::Paint_::Style::J2CPP_CLASS_NAME>(),
			get_method_id<android::graphics::Paint_::Style::J2CPP_CLASS_NAME, android::graphics::Paint_::Style::J2CPP_METHOD_NAME(2), android::graphics::Paint_::Style::J2CPP_METHOD_SIGNATURE(2), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}


static_field<
	android::graphics::Paint_::Style::J2CPP_CLASS_NAME,
	android::graphics::Paint_::Style::J2CPP_FIELD_NAME(0),
	android::graphics::Paint_::Style::J2CPP_FIELD_SIGNATURE(0),
	local_ref< android::graphics::Paint_::Style >
> android::graphics::Paint_::Style::FILL;

static_field<
	android::graphics::Paint_::Style::J2CPP_CLASS_NAME,
	android::graphics::Paint_::Style::J2CPP_FIELD_NAME(1),
	android::graphics::Paint_::Style::J2CPP_FIELD_SIGNATURE(1),
	local_ref< android::graphics::Paint_::Style >
> android::graphics::Paint_::Style::FILL_AND_STROKE;

static_field<
	android::graphics::Paint_::Style::J2CPP_CLASS_NAME,
	android::graphics::Paint_::Style::J2CPP_FIELD_NAME(2),
	android::graphics::Paint_::Style::J2CPP_FIELD_SIGNATURE(2),
	local_ref< android::graphics::Paint_::Style >
> android::graphics::Paint_::Style::STROKE;


J2CPP_DEFINE_CLASS(android::graphics::Paint_::Style,"android/graphics/Paint$Style")
J2CPP_DEFINE_METHOD(android::graphics::Paint_::Style,0,"values","()[android.graphics.Paint.Style")
J2CPP_DEFINE_METHOD(android::graphics::Paint_::Style,1,"valueOf","(Ljava/lang/String;)Landroid/graphics/Paint$Style;")
J2CPP_DEFINE_METHOD(android::graphics::Paint_::Style,2,"<init>","(Ljava/lang/String;I)V")
J2CPP_DEFINE_METHOD(android::graphics::Paint_::Style,3,"<clinit>","()V")
J2CPP_DEFINE_FIELD(android::graphics::Paint_::Style,0,"FILL","Landroid/graphics/Paint$Style;")
J2CPP_DEFINE_FIELD(android::graphics::Paint_::Style,1,"FILL_AND_STROKE","Landroid/graphics/Paint$Style;")
J2CPP_DEFINE_FIELD(android::graphics::Paint_::Style,2,"STROKE","Landroid/graphics/Paint$Style;")
J2CPP_DEFINE_FIELD(android::graphics::Paint_::Style,3,"$VALUES","[android.graphics.Paint.Style")

local_ref< cpp_object_array<android::graphics::Paint_::Align, 1> > android::graphics::Paint_::Align::values()
{
	return local_ref< cpp_object_array<android::graphics::Paint_::Align, 1> >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(0), J2CPP_METHOD_SIGNATURE(0), true>()
		)
	);
}

local_ref< android::graphics::Paint_::Align > android::graphics::Paint_::Align::valueOf(local_ref< java::lang::String > const &a0)
{
	return local_ref< android::graphics::Paint_::Align >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), true>(),
			a0.get_jtype()
		)
	);
}

template <>
local_ref< android::graphics::Paint_::Align > create< android::graphics::Paint_::Align>(local_ref< java::lang::String > const &a0, cpp_int const &a1)
{
	return local_ref< android::graphics::Paint_::Align >(
		environment::get().get_jenv()->NewObject(
			get_class<android::graphics::Paint_::Align::J2CPP_CLASS_NAME>(),
			get_method_id<android::graphics::Paint_::Align::J2CPP_CLASS_NAME, android::graphics::Paint_::Align::J2CPP_METHOD_NAME(2), android::graphics::Paint_::Align::J2CPP_METHOD_SIGNATURE(2), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}


static_field<
	android::graphics::Paint_::Align::J2CPP_CLASS_NAME,
	android::graphics::Paint_::Align::J2CPP_FIELD_NAME(0),
	android::graphics::Paint_::Align::J2CPP_FIELD_SIGNATURE(0),
	local_ref< android::graphics::Paint_::Align >
> android::graphics::Paint_::Align::CENTER;

static_field<
	android::graphics::Paint_::Align::J2CPP_CLASS_NAME,
	android::graphics::Paint_::Align::J2CPP_FIELD_NAME(1),
	android::graphics::Paint_::Align::J2CPP_FIELD_SIGNATURE(1),
	local_ref< android::graphics::Paint_::Align >
> android::graphics::Paint_::Align::LEFT;

static_field<
	android::graphics::Paint_::Align::J2CPP_CLASS_NAME,
	android::graphics::Paint_::Align::J2CPP_FIELD_NAME(2),
	android::graphics::Paint_::Align::J2CPP_FIELD_SIGNATURE(2),
	local_ref< android::graphics::Paint_::Align >
> android::graphics::Paint_::Align::RIGHT;


J2CPP_DEFINE_CLASS(android::graphics::Paint_::Align,"android/graphics/Paint$Align")
J2CPP_DEFINE_METHOD(android::graphics::Paint_::Align,0,"values","()[android.graphics.Paint.Align")
J2CPP_DEFINE_METHOD(android::graphics::Paint_::Align,1,"valueOf","(Ljava/lang/String;)Landroid/graphics/Paint$Align;")
J2CPP_DEFINE_METHOD(android::graphics::Paint_::Align,2,"<init>","(Ljava/lang/String;I)V")
J2CPP_DEFINE_METHOD(android::graphics::Paint_::Align,3,"<clinit>","()V")
J2CPP_DEFINE_FIELD(android::graphics::Paint_::Align,0,"CENTER","Landroid/graphics/Paint$Align;")
J2CPP_DEFINE_FIELD(android::graphics::Paint_::Align,1,"LEFT","Landroid/graphics/Paint$Align;")
J2CPP_DEFINE_FIELD(android::graphics::Paint_::Align,2,"RIGHT","Landroid/graphics/Paint$Align;")
J2CPP_DEFINE_FIELD(android::graphics::Paint_::Align,3,"$VALUES","[android.graphics.Paint.Align")

local_ref< cpp_object_array<android::graphics::Paint_::Cap, 1> > android::graphics::Paint_::Cap::values()
{
	return local_ref< cpp_object_array<android::graphics::Paint_::Cap, 1> >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(0), J2CPP_METHOD_SIGNATURE(0), true>()
		)
	);
}

local_ref< android::graphics::Paint_::Cap > android::graphics::Paint_::Cap::valueOf(local_ref< java::lang::String > const &a0)
{
	return local_ref< android::graphics::Paint_::Cap >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), true>(),
			a0.get_jtype()
		)
	);
}

template <>
local_ref< android::graphics::Paint_::Cap > create< android::graphics::Paint_::Cap>(local_ref< java::lang::String > const &a0, cpp_int const &a1)
{
	return local_ref< android::graphics::Paint_::Cap >(
		environment::get().get_jenv()->NewObject(
			get_class<android::graphics::Paint_::Cap::J2CPP_CLASS_NAME>(),
			get_method_id<android::graphics::Paint_::Cap::J2CPP_CLASS_NAME, android::graphics::Paint_::Cap::J2CPP_METHOD_NAME(2), android::graphics::Paint_::Cap::J2CPP_METHOD_SIGNATURE(2), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}


static_field<
	android::graphics::Paint_::Cap::J2CPP_CLASS_NAME,
	android::graphics::Paint_::Cap::J2CPP_FIELD_NAME(0),
	android::graphics::Paint_::Cap::J2CPP_FIELD_SIGNATURE(0),
	local_ref< android::graphics::Paint_::Cap >
> android::graphics::Paint_::Cap::BUTT;

static_field<
	android::graphics::Paint_::Cap::J2CPP_CLASS_NAME,
	android::graphics::Paint_::Cap::J2CPP_FIELD_NAME(1),
	android::graphics::Paint_::Cap::J2CPP_FIELD_SIGNATURE(1),
	local_ref< android::graphics::Paint_::Cap >
> android::graphics::Paint_::Cap::ROUND;

static_field<
	android::graphics::Paint_::Cap::J2CPP_CLASS_NAME,
	android::graphics::Paint_::Cap::J2CPP_FIELD_NAME(2),
	android::graphics::Paint_::Cap::J2CPP_FIELD_SIGNATURE(2),
	local_ref< android::graphics::Paint_::Cap >
> android::graphics::Paint_::Cap::SQUARE;


J2CPP_DEFINE_CLASS(android::graphics::Paint_::Cap,"android/graphics/Paint$Cap")
J2CPP_DEFINE_METHOD(android::graphics::Paint_::Cap,0,"values","()[android.graphics.Paint.Cap")
J2CPP_DEFINE_METHOD(android::graphics::Paint_::Cap,1,"valueOf","(Ljava/lang/String;)Landroid/graphics/Paint$Cap;")
J2CPP_DEFINE_METHOD(android::graphics::Paint_::Cap,2,"<init>","(Ljava/lang/String;I)V")
J2CPP_DEFINE_METHOD(android::graphics::Paint_::Cap,3,"<clinit>","()V")
J2CPP_DEFINE_FIELD(android::graphics::Paint_::Cap,0,"BUTT","Landroid/graphics/Paint$Cap;")
J2CPP_DEFINE_FIELD(android::graphics::Paint_::Cap,1,"ROUND","Landroid/graphics/Paint$Cap;")
J2CPP_DEFINE_FIELD(android::graphics::Paint_::Cap,2,"SQUARE","Landroid/graphics/Paint$Cap;")
J2CPP_DEFINE_FIELD(android::graphics::Paint_::Cap,3,"$VALUES","[android.graphics.Paint.Cap")

local_ref< cpp_object_array<android::graphics::Paint_::Join, 1> > android::graphics::Paint_::Join::values()
{
	return local_ref< cpp_object_array<android::graphics::Paint_::Join, 1> >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(0), J2CPP_METHOD_SIGNATURE(0), true>()
		)
	);
}

local_ref< android::graphics::Paint_::Join > android::graphics::Paint_::Join::valueOf(local_ref< java::lang::String > const &a0)
{
	return local_ref< android::graphics::Paint_::Join >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), true>(),
			a0.get_jtype()
		)
	);
}

template <>
local_ref< android::graphics::Paint_::Join > create< android::graphics::Paint_::Join>(local_ref< java::lang::String > const &a0, cpp_int const &a1)
{
	return local_ref< android::graphics::Paint_::Join >(
		environment::get().get_jenv()->NewObject(
			get_class<android::graphics::Paint_::Join::J2CPP_CLASS_NAME>(),
			get_method_id<android::graphics::Paint_::Join::J2CPP_CLASS_NAME, android::graphics::Paint_::Join::J2CPP_METHOD_NAME(2), android::graphics::Paint_::Join::J2CPP_METHOD_SIGNATURE(2), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}


static_field<
	android::graphics::Paint_::Join::J2CPP_CLASS_NAME,
	android::graphics::Paint_::Join::J2CPP_FIELD_NAME(0),
	android::graphics::Paint_::Join::J2CPP_FIELD_SIGNATURE(0),
	local_ref< android::graphics::Paint_::Join >
> android::graphics::Paint_::Join::BEVEL;

static_field<
	android::graphics::Paint_::Join::J2CPP_CLASS_NAME,
	android::graphics::Paint_::Join::J2CPP_FIELD_NAME(1),
	android::graphics::Paint_::Join::J2CPP_FIELD_SIGNATURE(1),
	local_ref< android::graphics::Paint_::Join >
> android::graphics::Paint_::Join::MITER;

static_field<
	android::graphics::Paint_::Join::J2CPP_CLASS_NAME,
	android::graphics::Paint_::Join::J2CPP_FIELD_NAME(2),
	android::graphics::Paint_::Join::J2CPP_FIELD_SIGNATURE(2),
	local_ref< android::graphics::Paint_::Join >
> android::graphics::Paint_::Join::ROUND;


J2CPP_DEFINE_CLASS(android::graphics::Paint_::Join,"android/graphics/Paint$Join")
J2CPP_DEFINE_METHOD(android::graphics::Paint_::Join,0,"values","()[android.graphics.Paint.Join")
J2CPP_DEFINE_METHOD(android::graphics::Paint_::Join,1,"valueOf","(Ljava/lang/String;)Landroid/graphics/Paint$Join;")
J2CPP_DEFINE_METHOD(android::graphics::Paint_::Join,2,"<init>","(Ljava/lang/String;I)V")
J2CPP_DEFINE_METHOD(android::graphics::Paint_::Join,3,"<clinit>","()V")
J2CPP_DEFINE_FIELD(android::graphics::Paint_::Join,0,"BEVEL","Landroid/graphics/Paint$Join;")
J2CPP_DEFINE_FIELD(android::graphics::Paint_::Join,1,"MITER","Landroid/graphics/Paint$Join;")
J2CPP_DEFINE_FIELD(android::graphics::Paint_::Join,2,"ROUND","Landroid/graphics/Paint$Join;")
J2CPP_DEFINE_FIELD(android::graphics::Paint_::Join,3,"$VALUES","[android.graphics.Paint.Join")

template <>
local_ref< android::graphics::Paint_::FontMetricsInt > create< android::graphics::Paint_::FontMetricsInt>()
{
	return local_ref< android::graphics::Paint_::FontMetricsInt >(
		environment::get().get_jenv()->NewObject(
			get_class<android::graphics::Paint_::FontMetricsInt::J2CPP_CLASS_NAME>(),
			get_method_id<android::graphics::Paint_::FontMetricsInt::J2CPP_CLASS_NAME, android::graphics::Paint_::FontMetricsInt::J2CPP_METHOD_NAME(0), android::graphics::Paint_::FontMetricsInt::J2CPP_METHOD_SIGNATURE(0), false>()
		)
	);
}

local_ref< java::lang::String > android::graphics::Paint_::FontMetricsInt::toString()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), false>()
		)
	);
}



J2CPP_DEFINE_CLASS(android::graphics::Paint_::FontMetricsInt,"android/graphics/Paint$FontMetricsInt")
J2CPP_DEFINE_METHOD(android::graphics::Paint_::FontMetricsInt,0,"<init>","()V")
J2CPP_DEFINE_METHOD(android::graphics::Paint_::FontMetricsInt,1,"toString","()Ljava/lang/String;")
J2CPP_DEFINE_FIELD(android::graphics::Paint_::FontMetricsInt,0,"top","I")
J2CPP_DEFINE_FIELD(android::graphics::Paint_::FontMetricsInt,1,"ascent","I")
J2CPP_DEFINE_FIELD(android::graphics::Paint_::FontMetricsInt,2,"descent","I")
J2CPP_DEFINE_FIELD(android::graphics::Paint_::FontMetricsInt,3,"bottom","I")
J2CPP_DEFINE_FIELD(android::graphics::Paint_::FontMetricsInt,4,"leading","I")

template <>
local_ref< android::graphics::Paint_::FontMetrics > create< android::graphics::Paint_::FontMetrics>()
{
	return local_ref< android::graphics::Paint_::FontMetrics >(
		environment::get().get_jenv()->NewObject(
			get_class<android::graphics::Paint_::FontMetrics::J2CPP_CLASS_NAME>(),
			get_method_id<android::graphics::Paint_::FontMetrics::J2CPP_CLASS_NAME, android::graphics::Paint_::FontMetrics::J2CPP_METHOD_NAME(0), android::graphics::Paint_::FontMetrics::J2CPP_METHOD_SIGNATURE(0), false>()
		)
	);
}



J2CPP_DEFINE_CLASS(android::graphics::Paint_::FontMetrics,"android/graphics/Paint$FontMetrics")
J2CPP_DEFINE_METHOD(android::graphics::Paint_::FontMetrics,0,"<init>","()V")
J2CPP_DEFINE_FIELD(android::graphics::Paint_::FontMetrics,0,"top","F")
J2CPP_DEFINE_FIELD(android::graphics::Paint_::FontMetrics,1,"ascent","F")
J2CPP_DEFINE_FIELD(android::graphics::Paint_::FontMetrics,2,"descent","F")
J2CPP_DEFINE_FIELD(android::graphics::Paint_::FontMetrics,3,"bottom","F")
J2CPP_DEFINE_FIELD(android::graphics::Paint_::FontMetrics,4,"leading","F")


template <>
local_ref< android::graphics::Paint > create< android::graphics::Paint>()
{
	return local_ref< android::graphics::Paint >(
		environment::get().get_jenv()->NewObject(
			get_class<android::graphics::Paint::J2CPP_CLASS_NAME>(),
			get_method_id<android::graphics::Paint::J2CPP_CLASS_NAME, android::graphics::Paint::J2CPP_METHOD_NAME(0), android::graphics::Paint::J2CPP_METHOD_SIGNATURE(0), false>()
		)
	);
}

template <>
local_ref< android::graphics::Paint > create< android::graphics::Paint>(cpp_int const &a0)
{
	return local_ref< android::graphics::Paint >(
		environment::get().get_jenv()->NewObject(
			get_class<android::graphics::Paint::J2CPP_CLASS_NAME>(),
			get_method_id<android::graphics::Paint::J2CPP_CLASS_NAME, android::graphics::Paint::J2CPP_METHOD_NAME(1), android::graphics::Paint::J2CPP_METHOD_SIGNATURE(1), false>(),
			a0.get_jtype()
		)
	);
}

template <>
local_ref< android::graphics::Paint > create< android::graphics::Paint>(local_ref< android::graphics::Paint > const &a0)
{
	return local_ref< android::graphics::Paint >(
		environment::get().get_jenv()->NewObject(
			get_class<android::graphics::Paint::J2CPP_CLASS_NAME>(),
			get_method_id<android::graphics::Paint::J2CPP_CLASS_NAME, android::graphics::Paint::J2CPP_METHOD_NAME(2), android::graphics::Paint::J2CPP_METHOD_SIGNATURE(2), false>(),
			a0.get_jtype()
		)
	);
}

void android::graphics::Paint::reset()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>()
		)
	);
}

void android::graphics::Paint::set(local_ref< android::graphics::Paint > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int android::graphics::Paint::getFlags()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>()
		)
	);
}

void android::graphics::Paint::setFlags(cpp_int const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean android::graphics::Paint::isAntiAlias()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(7), J2CPP_METHOD_SIGNATURE(7), false>()
		)
	);
}

void android::graphics::Paint::setAntiAlias(cpp_boolean const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(8), J2CPP_METHOD_SIGNATURE(8), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean android::graphics::Paint::isDither()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(9), J2CPP_METHOD_SIGNATURE(9), false>()
		)
	);
}

void android::graphics::Paint::setDither(cpp_boolean const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(10), J2CPP_METHOD_SIGNATURE(10), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean android::graphics::Paint::isLinearText()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(11), J2CPP_METHOD_SIGNATURE(11), false>()
		)
	);
}

void android::graphics::Paint::setLinearText(cpp_boolean const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(12), J2CPP_METHOD_SIGNATURE(12), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean android::graphics::Paint::isSubpixelText()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(13), J2CPP_METHOD_SIGNATURE(13), false>()
		)
	);
}

void android::graphics::Paint::setSubpixelText(cpp_boolean const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(14), J2CPP_METHOD_SIGNATURE(14), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean android::graphics::Paint::isUnderlineText()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(15), J2CPP_METHOD_SIGNATURE(15), false>()
		)
	);
}

void android::graphics::Paint::setUnderlineText(cpp_boolean const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(16), J2CPP_METHOD_SIGNATURE(16), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean android::graphics::Paint::isStrikeThruText()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(17), J2CPP_METHOD_SIGNATURE(17), false>()
		)
	);
}

void android::graphics::Paint::setStrikeThruText(cpp_boolean const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(18), J2CPP_METHOD_SIGNATURE(18), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean android::graphics::Paint::isFakeBoldText()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(19), J2CPP_METHOD_SIGNATURE(19), false>()
		)
	);
}

void android::graphics::Paint::setFakeBoldText(cpp_boolean const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(20), J2CPP_METHOD_SIGNATURE(20), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean android::graphics::Paint::isFilterBitmap()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(21), J2CPP_METHOD_SIGNATURE(21), false>()
		)
	);
}

void android::graphics::Paint::setFilterBitmap(cpp_boolean const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(22), J2CPP_METHOD_SIGNATURE(22), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< android::graphics::Paint_::Style > android::graphics::Paint::getStyle()
{
	return local_ref< android::graphics::Paint_::Style >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(23), J2CPP_METHOD_SIGNATURE(23), false>()
		)
	);
}

void android::graphics::Paint::setStyle(local_ref< android::graphics::Paint_::Style > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(24), J2CPP_METHOD_SIGNATURE(24), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int android::graphics::Paint::getColor()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(25), J2CPP_METHOD_SIGNATURE(25), false>()
		)
	);
}

void android::graphics::Paint::setColor(cpp_int const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(26), J2CPP_METHOD_SIGNATURE(26), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int android::graphics::Paint::getAlpha()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(27), J2CPP_METHOD_SIGNATURE(27), false>()
		)
	);
}

void android::graphics::Paint::setAlpha(cpp_int const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(28), J2CPP_METHOD_SIGNATURE(28), false>(),
			a0.get_jtype()
		)
	);
}

void android::graphics::Paint::setARGB(cpp_int const &a0, cpp_int const &a1, cpp_int const &a2, cpp_int const &a3)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(29), J2CPP_METHOD_SIGNATURE(29), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype(), a3.get_jtype()
		)
	);
}

cpp_float android::graphics::Paint::getStrokeWidth()
{
	return cpp_float(
		environment::get().get_jenv()->CallFloatMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(30), J2CPP_METHOD_SIGNATURE(30), false>()
		)
	);
}

void android::graphics::Paint::setStrokeWidth(cpp_float const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(31), J2CPP_METHOD_SIGNATURE(31), false>(),
			a0.get_jtype()
		)
	);
}

cpp_float android::graphics::Paint::getStrokeMiter()
{
	return cpp_float(
		environment::get().get_jenv()->CallFloatMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(32), J2CPP_METHOD_SIGNATURE(32), false>()
		)
	);
}

void android::graphics::Paint::setStrokeMiter(cpp_float const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(33), J2CPP_METHOD_SIGNATURE(33), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< android::graphics::Paint_::Cap > android::graphics::Paint::getStrokeCap()
{
	return local_ref< android::graphics::Paint_::Cap >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(34), J2CPP_METHOD_SIGNATURE(34), false>()
		)
	);
}

void android::graphics::Paint::setStrokeCap(local_ref< android::graphics::Paint_::Cap > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(35), J2CPP_METHOD_SIGNATURE(35), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< android::graphics::Paint_::Join > android::graphics::Paint::getStrokeJoin()
{
	return local_ref< android::graphics::Paint_::Join >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(36), J2CPP_METHOD_SIGNATURE(36), false>()
		)
	);
}

void android::graphics::Paint::setStrokeJoin(local_ref< android::graphics::Paint_::Join > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(37), J2CPP_METHOD_SIGNATURE(37), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean android::graphics::Paint::getFillPath(local_ref< android::graphics::Path > const &a0, local_ref< android::graphics::Path > const &a1)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(38), J2CPP_METHOD_SIGNATURE(38), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< android::graphics::Shader > android::graphics::Paint::getShader()
{
	return local_ref< android::graphics::Shader >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(39), J2CPP_METHOD_SIGNATURE(39), false>()
		)
	);
}

local_ref< android::graphics::Shader > android::graphics::Paint::setShader(local_ref< android::graphics::Shader > const &a0)
{
	return local_ref< android::graphics::Shader >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(40), J2CPP_METHOD_SIGNATURE(40), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< android::graphics::ColorFilter > android::graphics::Paint::getColorFilter()
{
	return local_ref< android::graphics::ColorFilter >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(41), J2CPP_METHOD_SIGNATURE(41), false>()
		)
	);
}

local_ref< android::graphics::ColorFilter > android::graphics::Paint::setColorFilter(local_ref< android::graphics::ColorFilter > const &a0)
{
	return local_ref< android::graphics::ColorFilter >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(42), J2CPP_METHOD_SIGNATURE(42), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< android::graphics::Xfermode > android::graphics::Paint::getXfermode()
{
	return local_ref< android::graphics::Xfermode >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(43), J2CPP_METHOD_SIGNATURE(43), false>()
		)
	);
}

local_ref< android::graphics::Xfermode > android::graphics::Paint::setXfermode(local_ref< android::graphics::Xfermode > const &a0)
{
	return local_ref< android::graphics::Xfermode >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(44), J2CPP_METHOD_SIGNATURE(44), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< android::graphics::PathEffect > android::graphics::Paint::getPathEffect()
{
	return local_ref< android::graphics::PathEffect >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(45), J2CPP_METHOD_SIGNATURE(45), false>()
		)
	);
}

local_ref< android::graphics::PathEffect > android::graphics::Paint::setPathEffect(local_ref< android::graphics::PathEffect > const &a0)
{
	return local_ref< android::graphics::PathEffect >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(46), J2CPP_METHOD_SIGNATURE(46), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< android::graphics::MaskFilter > android::graphics::Paint::getMaskFilter()
{
	return local_ref< android::graphics::MaskFilter >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(47), J2CPP_METHOD_SIGNATURE(47), false>()
		)
	);
}

local_ref< android::graphics::MaskFilter > android::graphics::Paint::setMaskFilter(local_ref< android::graphics::MaskFilter > const &a0)
{
	return local_ref< android::graphics::MaskFilter >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(48), J2CPP_METHOD_SIGNATURE(48), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< android::graphics::Typeface > android::graphics::Paint::getTypeface()
{
	return local_ref< android::graphics::Typeface >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(49), J2CPP_METHOD_SIGNATURE(49), false>()
		)
	);
}

local_ref< android::graphics::Typeface > android::graphics::Paint::setTypeface(local_ref< android::graphics::Typeface > const &a0)
{
	return local_ref< android::graphics::Typeface >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(50), J2CPP_METHOD_SIGNATURE(50), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< android::graphics::Rasterizer > android::graphics::Paint::getRasterizer()
{
	return local_ref< android::graphics::Rasterizer >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(51), J2CPP_METHOD_SIGNATURE(51), false>()
		)
	);
}

local_ref< android::graphics::Rasterizer > android::graphics::Paint::setRasterizer(local_ref< android::graphics::Rasterizer > const &a0)
{
	return local_ref< android::graphics::Rasterizer >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(52), J2CPP_METHOD_SIGNATURE(52), false>(),
			a0.get_jtype()
		)
	);
}

void android::graphics::Paint::setShadowLayer(cpp_float const &a0, cpp_float const &a1, cpp_float const &a2, cpp_int const &a3)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(53), J2CPP_METHOD_SIGNATURE(53), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype(), a3.get_jtype()
		)
	);
}

void android::graphics::Paint::clearShadowLayer()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(54), J2CPP_METHOD_SIGNATURE(54), false>()
		)
	);
}

local_ref< android::graphics::Paint_::Align > android::graphics::Paint::getTextAlign()
{
	return local_ref< android::graphics::Paint_::Align >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(55), J2CPP_METHOD_SIGNATURE(55), false>()
		)
	);
}

void android::graphics::Paint::setTextAlign(local_ref< android::graphics::Paint_::Align > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(56), J2CPP_METHOD_SIGNATURE(56), false>(),
			a0.get_jtype()
		)
	);
}

cpp_float android::graphics::Paint::getTextSize()
{
	return cpp_float(
		environment::get().get_jenv()->CallFloatMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(57), J2CPP_METHOD_SIGNATURE(57), false>()
		)
	);
}

void android::graphics::Paint::setTextSize(cpp_float const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(58), J2CPP_METHOD_SIGNATURE(58), false>(),
			a0.get_jtype()
		)
	);
}

cpp_float android::graphics::Paint::getTextScaleX()
{
	return cpp_float(
		environment::get().get_jenv()->CallFloatMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(59), J2CPP_METHOD_SIGNATURE(59), false>()
		)
	);
}

void android::graphics::Paint::setTextScaleX(cpp_float const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(60), J2CPP_METHOD_SIGNATURE(60), false>(),
			a0.get_jtype()
		)
	);
}

cpp_float android::graphics::Paint::getTextSkewX()
{
	return cpp_float(
		environment::get().get_jenv()->CallFloatMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(61), J2CPP_METHOD_SIGNATURE(61), false>()
		)
	);
}

void android::graphics::Paint::setTextSkewX(cpp_float const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(62), J2CPP_METHOD_SIGNATURE(62), false>(),
			a0.get_jtype()
		)
	);
}

cpp_float android::graphics::Paint::ascent()
{
	return cpp_float(
		environment::get().get_jenv()->CallFloatMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(63), J2CPP_METHOD_SIGNATURE(63), false>()
		)
	);
}

cpp_float android::graphics::Paint::descent()
{
	return cpp_float(
		environment::get().get_jenv()->CallFloatMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(64), J2CPP_METHOD_SIGNATURE(64), false>()
		)
	);
}

cpp_float android::graphics::Paint::getFontMetrics(local_ref< android::graphics::Paint_::FontMetrics > const &a0)
{
	return cpp_float(
		environment::get().get_jenv()->CallFloatMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(65), J2CPP_METHOD_SIGNATURE(65), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< android::graphics::Paint_::FontMetrics > android::graphics::Paint::getFontMetrics()
{
	return local_ref< android::graphics::Paint_::FontMetrics >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(66), J2CPP_METHOD_SIGNATURE(66), false>()
		)
	);
}

cpp_int android::graphics::Paint::getFontMetricsInt(local_ref< android::graphics::Paint_::FontMetricsInt > const &a0)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(67), J2CPP_METHOD_SIGNATURE(67), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< android::graphics::Paint_::FontMetricsInt > android::graphics::Paint::getFontMetricsInt()
{
	return local_ref< android::graphics::Paint_::FontMetricsInt >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(68), J2CPP_METHOD_SIGNATURE(68), false>()
		)
	);
}

cpp_float android::graphics::Paint::getFontSpacing()
{
	return cpp_float(
		environment::get().get_jenv()->CallFloatMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(69), J2CPP_METHOD_SIGNATURE(69), false>()
		)
	);
}

cpp_float android::graphics::Paint::measureText(local_ref< cpp_char_array<1> > const &a0, cpp_int const &a1, cpp_int const &a2)
{
	return cpp_float(
		environment::get().get_jenv()->CallFloatMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(70), J2CPP_METHOD_SIGNATURE(70), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

cpp_float android::graphics::Paint::measureText(local_ref< java::lang::String > const &a0, cpp_int const &a1, cpp_int const &a2)
{
	return cpp_float(
		environment::get().get_jenv()->CallFloatMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(71), J2CPP_METHOD_SIGNATURE(71), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

cpp_float android::graphics::Paint::measureText(local_ref< java::lang::String > const &a0)
{
	return cpp_float(
		environment::get().get_jenv()->CallFloatMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(72), J2CPP_METHOD_SIGNATURE(72), false>(),
			a0.get_jtype()
		)
	);
}

cpp_float android::graphics::Paint::measureText(local_ref< java::lang::CharSequence > const &a0, cpp_int const &a1, cpp_int const &a2)
{
	return cpp_float(
		environment::get().get_jenv()->CallFloatMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(73), J2CPP_METHOD_SIGNATURE(73), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

cpp_int android::graphics::Paint::breakText(local_ref< cpp_char_array<1> > const &a0, cpp_int const &a1, cpp_int const &a2, cpp_float const &a3, local_ref< cpp_float_array<1> > const &a4)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(74), J2CPP_METHOD_SIGNATURE(74), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype(), a3.get_jtype(), a4.get_jtype()
		)
	);
}

cpp_int android::graphics::Paint::breakText(local_ref< java::lang::CharSequence > const &a0, cpp_int const &a1, cpp_int const &a2, cpp_boolean const &a3, cpp_float const &a4, local_ref< cpp_float_array<1> > const &a5)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(75), J2CPP_METHOD_SIGNATURE(75), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype(), a3.get_jtype(), a4.get_jtype(), a5.get_jtype()
		)
	);
}

cpp_int android::graphics::Paint::breakText(local_ref< java::lang::String > const &a0, cpp_boolean const &a1, cpp_float const &a2, local_ref< cpp_float_array<1> > const &a3)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(76), J2CPP_METHOD_SIGNATURE(76), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype(), a3.get_jtype()
		)
	);
}

cpp_int android::graphics::Paint::getTextWidths(local_ref< cpp_char_array<1> > const &a0, cpp_int const &a1, cpp_int const &a2, local_ref< cpp_float_array<1> > const &a3)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(77), J2CPP_METHOD_SIGNATURE(77), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype(), a3.get_jtype()
		)
	);
}

cpp_int android::graphics::Paint::getTextWidths(local_ref< java::lang::CharSequence > const &a0, cpp_int const &a1, cpp_int const &a2, local_ref< cpp_float_array<1> > const &a3)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(78), J2CPP_METHOD_SIGNATURE(78), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype(), a3.get_jtype()
		)
	);
}

cpp_int android::graphics::Paint::getTextWidths(local_ref< java::lang::String > const &a0, cpp_int const &a1, cpp_int const &a2, local_ref< cpp_float_array<1> > const &a3)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(79), J2CPP_METHOD_SIGNATURE(79), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype(), a3.get_jtype()
		)
	);
}

cpp_int android::graphics::Paint::getTextWidths(local_ref< java::lang::String > const &a0, local_ref< cpp_float_array<1> > const &a1)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(80), J2CPP_METHOD_SIGNATURE(80), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void android::graphics::Paint::getTextPath(local_ref< cpp_char_array<1> > const &a0, cpp_int const &a1, cpp_int const &a2, cpp_float const &a3, cpp_float const &a4, local_ref< android::graphics::Path > const &a5)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(81), J2CPP_METHOD_SIGNATURE(81), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype(), a3.get_jtype(), a4.get_jtype(), a5.get_jtype()
		)
	);
}

void android::graphics::Paint::getTextPath(local_ref< java::lang::String > const &a0, cpp_int const &a1, cpp_int const &a2, cpp_float const &a3, cpp_float const &a4, local_ref< android::graphics::Path > const &a5)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(82), J2CPP_METHOD_SIGNATURE(82), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype(), a3.get_jtype(), a4.get_jtype(), a5.get_jtype()
		)
	);
}

void android::graphics::Paint::getTextBounds(local_ref< java::lang::String > const &a0, cpp_int const &a1, cpp_int const &a2, local_ref< android::graphics::Rect > const &a3)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(83), J2CPP_METHOD_SIGNATURE(83), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype(), a3.get_jtype()
		)
	);
}

void android::graphics::Paint::getTextBounds(local_ref< cpp_char_array<1> > const &a0, cpp_int const &a1, cpp_int const &a2, local_ref< android::graphics::Rect > const &a3)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(84), J2CPP_METHOD_SIGNATURE(84), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype(), a3.get_jtype()
		)
	);
}



static_field<
	android::graphics::Paint::J2CPP_CLASS_NAME,
	android::graphics::Paint::J2CPP_FIELD_NAME(0),
	android::graphics::Paint::J2CPP_FIELD_SIGNATURE(0),
	cpp_int
> android::graphics::Paint::ANTI_ALIAS_FLAG;

static_field<
	android::graphics::Paint::J2CPP_CLASS_NAME,
	android::graphics::Paint::J2CPP_FIELD_NAME(1),
	android::graphics::Paint::J2CPP_FIELD_SIGNATURE(1),
	cpp_int
> android::graphics::Paint::FILTER_BITMAP_FLAG;

static_field<
	android::graphics::Paint::J2CPP_CLASS_NAME,
	android::graphics::Paint::J2CPP_FIELD_NAME(2),
	android::graphics::Paint::J2CPP_FIELD_SIGNATURE(2),
	cpp_int
> android::graphics::Paint::DITHER_FLAG;

static_field<
	android::graphics::Paint::J2CPP_CLASS_NAME,
	android::graphics::Paint::J2CPP_FIELD_NAME(3),
	android::graphics::Paint::J2CPP_FIELD_SIGNATURE(3),
	cpp_int
> android::graphics::Paint::UNDERLINE_TEXT_FLAG;

static_field<
	android::graphics::Paint::J2CPP_CLASS_NAME,
	android::graphics::Paint::J2CPP_FIELD_NAME(4),
	android::graphics::Paint::J2CPP_FIELD_SIGNATURE(4),
	cpp_int
> android::graphics::Paint::STRIKE_THRU_TEXT_FLAG;

static_field<
	android::graphics::Paint::J2CPP_CLASS_NAME,
	android::graphics::Paint::J2CPP_FIELD_NAME(5),
	android::graphics::Paint::J2CPP_FIELD_SIGNATURE(5),
	cpp_int
> android::graphics::Paint::FAKE_BOLD_TEXT_FLAG;

static_field<
	android::graphics::Paint::J2CPP_CLASS_NAME,
	android::graphics::Paint::J2CPP_FIELD_NAME(6),
	android::graphics::Paint::J2CPP_FIELD_SIGNATURE(6),
	cpp_int
> android::graphics::Paint::LINEAR_TEXT_FLAG;

static_field<
	android::graphics::Paint::J2CPP_CLASS_NAME,
	android::graphics::Paint::J2CPP_FIELD_NAME(7),
	android::graphics::Paint::J2CPP_FIELD_SIGNATURE(7),
	cpp_int
> android::graphics::Paint::SUBPIXEL_TEXT_FLAG;

static_field<
	android::graphics::Paint::J2CPP_CLASS_NAME,
	android::graphics::Paint::J2CPP_FIELD_NAME(8),
	android::graphics::Paint::J2CPP_FIELD_SIGNATURE(8),
	cpp_int
> android::graphics::Paint::DEV_KERN_TEXT_FLAG;


J2CPP_DEFINE_CLASS(android::graphics::Paint,"android/graphics/Paint")
J2CPP_DEFINE_METHOD(android::graphics::Paint,0,"<init>","()V")
J2CPP_DEFINE_METHOD(android::graphics::Paint,1,"<init>","(I)V")
J2CPP_DEFINE_METHOD(android::graphics::Paint,2,"<init>","(Landroid/graphics/Paint;)V")
J2CPP_DEFINE_METHOD(android::graphics::Paint,3,"reset","()V")
J2CPP_DEFINE_METHOD(android::graphics::Paint,4,"set","(Landroid/graphics/Paint;)V")
J2CPP_DEFINE_METHOD(android::graphics::Paint,5,"getFlags","()I")
J2CPP_DEFINE_METHOD(android::graphics::Paint,6,"setFlags","(I)V")
J2CPP_DEFINE_METHOD(android::graphics::Paint,7,"isAntiAlias","()Z")
J2CPP_DEFINE_METHOD(android::graphics::Paint,8,"setAntiAlias","(Z)V")
J2CPP_DEFINE_METHOD(android::graphics::Paint,9,"isDither","()Z")
J2CPP_DEFINE_METHOD(android::graphics::Paint,10,"setDither","(Z)V")
J2CPP_DEFINE_METHOD(android::graphics::Paint,11,"isLinearText","()Z")
J2CPP_DEFINE_METHOD(android::graphics::Paint,12,"setLinearText","(Z)V")
J2CPP_DEFINE_METHOD(android::graphics::Paint,13,"isSubpixelText","()Z")
J2CPP_DEFINE_METHOD(android::graphics::Paint,14,"setSubpixelText","(Z)V")
J2CPP_DEFINE_METHOD(android::graphics::Paint,15,"isUnderlineText","()Z")
J2CPP_DEFINE_METHOD(android::graphics::Paint,16,"setUnderlineText","(Z)V")
J2CPP_DEFINE_METHOD(android::graphics::Paint,17,"isStrikeThruText","()Z")
J2CPP_DEFINE_METHOD(android::graphics::Paint,18,"setStrikeThruText","(Z)V")
J2CPP_DEFINE_METHOD(android::graphics::Paint,19,"isFakeBoldText","()Z")
J2CPP_DEFINE_METHOD(android::graphics::Paint,20,"setFakeBoldText","(Z)V")
J2CPP_DEFINE_METHOD(android::graphics::Paint,21,"isFilterBitmap","()Z")
J2CPP_DEFINE_METHOD(android::graphics::Paint,22,"setFilterBitmap","(Z)V")
J2CPP_DEFINE_METHOD(android::graphics::Paint,23,"getStyle","()Landroid/graphics/Paint$Style;")
J2CPP_DEFINE_METHOD(android::graphics::Paint,24,"setStyle","(Landroid/graphics/Paint$Style;)V")
J2CPP_DEFINE_METHOD(android::graphics::Paint,25,"getColor","()I")
J2CPP_DEFINE_METHOD(android::graphics::Paint,26,"setColor","(I)V")
J2CPP_DEFINE_METHOD(android::graphics::Paint,27,"getAlpha","()I")
J2CPP_DEFINE_METHOD(android::graphics::Paint,28,"setAlpha","(I)V")
J2CPP_DEFINE_METHOD(android::graphics::Paint,29,"setARGB","(IIII)V")
J2CPP_DEFINE_METHOD(android::graphics::Paint,30,"getStrokeWidth","()F")
J2CPP_DEFINE_METHOD(android::graphics::Paint,31,"setStrokeWidth","(F)V")
J2CPP_DEFINE_METHOD(android::graphics::Paint,32,"getStrokeMiter","()F")
J2CPP_DEFINE_METHOD(android::graphics::Paint,33,"setStrokeMiter","(F)V")
J2CPP_DEFINE_METHOD(android::graphics::Paint,34,"getStrokeCap","()Landroid/graphics/Paint$Cap;")
J2CPP_DEFINE_METHOD(android::graphics::Paint,35,"setStrokeCap","(Landroid/graphics/Paint$Cap;)V")
J2CPP_DEFINE_METHOD(android::graphics::Paint,36,"getStrokeJoin","()Landroid/graphics/Paint$Join;")
J2CPP_DEFINE_METHOD(android::graphics::Paint,37,"setStrokeJoin","(Landroid/graphics/Paint$Join;)V")
J2CPP_DEFINE_METHOD(android::graphics::Paint,38,"getFillPath","(Landroid/graphics/Path;Landroid/graphics/Path;)Z")
J2CPP_DEFINE_METHOD(android::graphics::Paint,39,"getShader","()Landroid/graphics/Shader;")
J2CPP_DEFINE_METHOD(android::graphics::Paint,40,"setShader","(Landroid/graphics/Shader;)Landroid/graphics/Shader;")
J2CPP_DEFINE_METHOD(android::graphics::Paint,41,"getColorFilter","()Landroid/graphics/ColorFilter;")
J2CPP_DEFINE_METHOD(android::graphics::Paint,42,"setColorFilter","(Landroid/graphics/ColorFilter;)Landroid/graphics/ColorFilter;")
J2CPP_DEFINE_METHOD(android::graphics::Paint,43,"getXfermode","()Landroid/graphics/Xfermode;")
J2CPP_DEFINE_METHOD(android::graphics::Paint,44,"setXfermode","(Landroid/graphics/Xfermode;)Landroid/graphics/Xfermode;")
J2CPP_DEFINE_METHOD(android::graphics::Paint,45,"getPathEffect","()Landroid/graphics/PathEffect;")
J2CPP_DEFINE_METHOD(android::graphics::Paint,46,"setPathEffect","(Landroid/graphics/PathEffect;)Landroid/graphics/PathEffect;")
J2CPP_DEFINE_METHOD(android::graphics::Paint,47,"getMaskFilter","()Landroid/graphics/MaskFilter;")
J2CPP_DEFINE_METHOD(android::graphics::Paint,48,"setMaskFilter","(Landroid/graphics/MaskFilter;)Landroid/graphics/MaskFilter;")
J2CPP_DEFINE_METHOD(android::graphics::Paint,49,"getTypeface","()Landroid/graphics/Typeface;")
J2CPP_DEFINE_METHOD(android::graphics::Paint,50,"setTypeface","(Landroid/graphics/Typeface;)Landroid/graphics/Typeface;")
J2CPP_DEFINE_METHOD(android::graphics::Paint,51,"getRasterizer","()Landroid/graphics/Rasterizer;")
J2CPP_DEFINE_METHOD(android::graphics::Paint,52,"setRasterizer","(Landroid/graphics/Rasterizer;)Landroid/graphics/Rasterizer;")
J2CPP_DEFINE_METHOD(android::graphics::Paint,53,"setShadowLayer","(FFFI)V")
J2CPP_DEFINE_METHOD(android::graphics::Paint,54,"clearShadowLayer","()V")
J2CPP_DEFINE_METHOD(android::graphics::Paint,55,"getTextAlign","()Landroid/graphics/Paint$Align;")
J2CPP_DEFINE_METHOD(android::graphics::Paint,56,"setTextAlign","(Landroid/graphics/Paint$Align;)V")
J2CPP_DEFINE_METHOD(android::graphics::Paint,57,"getTextSize","()F")
J2CPP_DEFINE_METHOD(android::graphics::Paint,58,"setTextSize","(F)V")
J2CPP_DEFINE_METHOD(android::graphics::Paint,59,"getTextScaleX","()F")
J2CPP_DEFINE_METHOD(android::graphics::Paint,60,"setTextScaleX","(F)V")
J2CPP_DEFINE_METHOD(android::graphics::Paint,61,"getTextSkewX","()F")
J2CPP_DEFINE_METHOD(android::graphics::Paint,62,"setTextSkewX","(F)V")
J2CPP_DEFINE_METHOD(android::graphics::Paint,63,"ascent","()F")
J2CPP_DEFINE_METHOD(android::graphics::Paint,64,"descent","()F")
J2CPP_DEFINE_METHOD(android::graphics::Paint,65,"getFontMetrics","(Landroid/graphics/Paint$FontMetrics;)F")
J2CPP_DEFINE_METHOD(android::graphics::Paint,66,"getFontMetrics","()Landroid/graphics/Paint$FontMetrics;")
J2CPP_DEFINE_METHOD(android::graphics::Paint,67,"getFontMetricsInt","(Landroid/graphics/Paint$FontMetricsInt;)I")
J2CPP_DEFINE_METHOD(android::graphics::Paint,68,"getFontMetricsInt","()Landroid/graphics/Paint$FontMetricsInt;")
J2CPP_DEFINE_METHOD(android::graphics::Paint,69,"getFontSpacing","()F")
J2CPP_DEFINE_METHOD(android::graphics::Paint,70,"measureText","([CII)F")
J2CPP_DEFINE_METHOD(android::graphics::Paint,71,"measureText","(Ljava/lang/String;II)F")
J2CPP_DEFINE_METHOD(android::graphics::Paint,72,"measureText","(Ljava/lang/String;)F")
J2CPP_DEFINE_METHOD(android::graphics::Paint,73,"measureText","(Ljava/lang/CharSequence;II)F")
J2CPP_DEFINE_METHOD(android::graphics::Paint,74,"breakText","([CIIF[F)I")
J2CPP_DEFINE_METHOD(android::graphics::Paint,75,"breakText","(Ljava/lang/CharSequence;IIZF[F)I")
J2CPP_DEFINE_METHOD(android::graphics::Paint,76,"breakText","(Ljava/lang/String;ZF[F)I")
J2CPP_DEFINE_METHOD(android::graphics::Paint,77,"getTextWidths","([CII[F)I")
J2CPP_DEFINE_METHOD(android::graphics::Paint,78,"getTextWidths","(Ljava/lang/CharSequence;II[F)I")
J2CPP_DEFINE_METHOD(android::graphics::Paint,79,"getTextWidths","(Ljava/lang/String;II[F)I")
J2CPP_DEFINE_METHOD(android::graphics::Paint,80,"getTextWidths","(Ljava/lang/String;[F)I")
J2CPP_DEFINE_METHOD(android::graphics::Paint,81,"getTextPath","([CIIFFLandroid/graphics/Path;)V")
J2CPP_DEFINE_METHOD(android::graphics::Paint,82,"getTextPath","(Ljava/lang/String;IIFFLandroid/graphics/Path;)V")
J2CPP_DEFINE_METHOD(android::graphics::Paint,83,"getTextBounds","(Ljava/lang/String;IILandroid/graphics/Rect;)V")
J2CPP_DEFINE_METHOD(android::graphics::Paint,84,"getTextBounds","([CIILandroid/graphics/Rect;)V")
J2CPP_DEFINE_METHOD(android::graphics::Paint,85,"finalize","()V")
J2CPP_DEFINE_FIELD(android::graphics::Paint,0,"ANTI_ALIAS_FLAG","I")
J2CPP_DEFINE_FIELD(android::graphics::Paint,1,"FILTER_BITMAP_FLAG","I")
J2CPP_DEFINE_FIELD(android::graphics::Paint,2,"DITHER_FLAG","I")
J2CPP_DEFINE_FIELD(android::graphics::Paint,3,"UNDERLINE_TEXT_FLAG","I")
J2CPP_DEFINE_FIELD(android::graphics::Paint,4,"STRIKE_THRU_TEXT_FLAG","I")
J2CPP_DEFINE_FIELD(android::graphics::Paint,5,"FAKE_BOLD_TEXT_FLAG","I")
J2CPP_DEFINE_FIELD(android::graphics::Paint,6,"LINEAR_TEXT_FLAG","I")
J2CPP_DEFINE_FIELD(android::graphics::Paint,7,"SUBPIXEL_TEXT_FLAG","I")
J2CPP_DEFINE_FIELD(android::graphics::Paint,8,"DEV_KERN_TEXT_FLAG","I")

} //namespace j2cpp

#endif //J2CPP_ANDROID_GRAPHICS_PAINT_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
