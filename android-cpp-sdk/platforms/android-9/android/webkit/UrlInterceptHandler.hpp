/*================================================================================
  code generated by: java2cpp
  class: android.webkit.UrlInterceptHandler
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_WEBKIT_URLINTERCEPTHANDLER_HPP_DECL
#define J2CPP_ANDROID_WEBKIT_URLINTERCEPTHANDLER_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace util { class Map; } } }
namespace j2cpp { namespace android { namespace webkit { class PluginData; } } }
namespace j2cpp { namespace android { namespace webkit { namespace CacheManager_ { class CacheResult; } } } }


#include <android/webkit/CacheManager.hpp>
#include <android/webkit/PluginData.hpp>
#include <java/lang/String.hpp>
#include <java/util/Map.hpp>


namespace j2cpp {

namespace android { namespace webkit {

	class UrlInterceptHandler;
	class UrlInterceptHandler
		: public cpp_object<UrlInterceptHandler>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)

		UrlInterceptHandler(jobject jobj)
		: cpp_object<UrlInterceptHandler>(jobj)
		{
		}

		local_ref< android::webkit::CacheManager_::CacheResult > service(local_ref< java::lang::String > const&, local_ref< java::util::Map > const&);
		local_ref< android::webkit::PluginData > getPluginData(local_ref< java::lang::String > const&, local_ref< java::util::Map > const&);
	}; //class UrlInterceptHandler

} //namespace webkit
} //namespace android


} //namespace j2cpp

#endif //J2CPP_ANDROID_WEBKIT_URLINTERCEPTHANDLER_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_WEBKIT_URLINTERCEPTHANDLER_HPP_IMPL
#define J2CPP_ANDROID_WEBKIT_URLINTERCEPTHANDLER_HPP_IMPL

namespace j2cpp {


local_ref< android::webkit::CacheManager_::CacheResult > android::webkit::UrlInterceptHandler::service(local_ref< java::lang::String > const &a0, local_ref< java::util::Map > const &a1)
{
	return local_ref< android::webkit::CacheManager_::CacheResult >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(0), J2CPP_METHOD_SIGNATURE(0), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< android::webkit::PluginData > android::webkit::UrlInterceptHandler::getPluginData(local_ref< java::lang::String > const &a0, local_ref< java::util::Map > const &a1)
{
	return local_ref< android::webkit::PluginData >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}


J2CPP_DEFINE_CLASS(android::webkit::UrlInterceptHandler,"android/webkit/UrlInterceptHandler")
J2CPP_DEFINE_METHOD(android::webkit::UrlInterceptHandler,0,"service","(Ljava/lang/String;Ljava/util/Map;)Landroid/webkit/CacheManager$CacheResult;")
J2CPP_DEFINE_METHOD(android::webkit::UrlInterceptHandler,1,"getPluginData","(Ljava/lang/String;Ljava/util/Map;)Landroid/webkit/PluginData;")

} //namespace j2cpp

#endif //J2CPP_ANDROID_WEBKIT_URLINTERCEPTHANDLER_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
