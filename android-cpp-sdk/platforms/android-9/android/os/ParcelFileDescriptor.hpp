/*================================================================================
  code generated by: java2cpp
  class: android.os.ParcelFileDescriptor
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_OS_PARCELFILEDESCRIPTOR_HPP_DECL
#define J2CPP_ANDROID_OS_PARCELFILEDESCRIPTOR_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace net { class Socket; } } }
namespace j2cpp { namespace java { namespace io { class File; } } }
namespace j2cpp { namespace java { namespace io { class FileDescriptor; } } }
namespace j2cpp { namespace android { namespace os { class Parcel; } } }
namespace j2cpp { namespace android { namespace os { namespace Parcelable_ { class Creator; } } } }


#include <android/os/Parcel.hpp>
#include <android/os/Parcelable.hpp>
#include <java/io/File.hpp>
#include <java/io/FileDescriptor.hpp>
#include <java/lang/String.hpp>
#include <java/net/Socket.hpp>


namespace j2cpp {

namespace android { namespace os {

	class ParcelFileDescriptor;
	namespace ParcelFileDescriptor_ {

		class AutoCloseOutputStream;
		class AutoCloseOutputStream
			: public cpp_object<AutoCloseOutputStream>
		{
		public:

			J2CPP_DECLARE_CLASS

			J2CPP_DECLARE_METHOD(0)
			J2CPP_DECLARE_METHOD(1)

			AutoCloseOutputStream(jobject jobj)
			: cpp_object<AutoCloseOutputStream>(jobj)
			{
			}

			void close();
		}; //class AutoCloseOutputStream

		class AutoCloseInputStream;
		class AutoCloseInputStream
			: public cpp_object<AutoCloseInputStream>
		{
		public:

			J2CPP_DECLARE_CLASS

			J2CPP_DECLARE_METHOD(0)
			J2CPP_DECLARE_METHOD(1)

			AutoCloseInputStream(jobject jobj)
			: cpp_object<AutoCloseInputStream>(jobj)
			{
			}

			void close();
		}; //class AutoCloseInputStream

	} //namespace ParcelFileDescriptor_

	class ParcelFileDescriptor
		: public cpp_object<ParcelFileDescriptor>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_FIELD(0)
		J2CPP_DECLARE_FIELD(1)
		J2CPP_DECLARE_FIELD(2)
		J2CPP_DECLARE_FIELD(3)
		J2CPP_DECLARE_FIELD(4)
		J2CPP_DECLARE_FIELD(5)
		J2CPP_DECLARE_FIELD(6)
		J2CPP_DECLARE_FIELD(7)
		J2CPP_DECLARE_FIELD(8)

		typedef ParcelFileDescriptor_::AutoCloseOutputStream AutoCloseOutputStream;
		typedef ParcelFileDescriptor_::AutoCloseInputStream AutoCloseInputStream;

		ParcelFileDescriptor(jobject jobj)
		: cpp_object<ParcelFileDescriptor>(jobj)
		{
		}

		static local_ref< android::os::ParcelFileDescriptor > open(local_ref< java::io::File > const&, cpp_int const&);
		static local_ref< android::os::ParcelFileDescriptor > fromSocket(local_ref< java::net::Socket > const&);
		static local_ref< cpp_object_array<android::os::ParcelFileDescriptor, 1> > createPipe();
		local_ref< java::io::FileDescriptor > getFileDescriptor();
		cpp_long getStatSize();
		void close();
		local_ref< java::lang::String > toString();
		cpp_int describeContents();
		void writeToParcel(local_ref< android::os::Parcel > const&, cpp_int const&);

		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(0), J2CPP_FIELD_SIGNATURE(0), cpp_int > MODE_WORLD_READABLE;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(1), J2CPP_FIELD_SIGNATURE(1), cpp_int > MODE_WORLD_WRITEABLE;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(2), J2CPP_FIELD_SIGNATURE(2), cpp_int > MODE_READ_ONLY;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(3), J2CPP_FIELD_SIGNATURE(3), cpp_int > MODE_WRITE_ONLY;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(4), J2CPP_FIELD_SIGNATURE(4), cpp_int > MODE_READ_WRITE;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(5), J2CPP_FIELD_SIGNATURE(5), cpp_int > MODE_CREATE;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(6), J2CPP_FIELD_SIGNATURE(6), cpp_int > MODE_TRUNCATE;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(7), J2CPP_FIELD_SIGNATURE(7), cpp_int > MODE_APPEND;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(8), J2CPP_FIELD_SIGNATURE(8), local_ref< android::os::Parcelable_::Creator > > CREATOR;
	}; //class ParcelFileDescriptor

} //namespace os
} //namespace android


} //namespace j2cpp

#endif //J2CPP_ANDROID_OS_PARCELFILEDESCRIPTOR_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_OS_PARCELFILEDESCRIPTOR_HPP_IMPL
#define J2CPP_ANDROID_OS_PARCELFILEDESCRIPTOR_HPP_IMPL

namespace j2cpp {



template <>
local_ref< android::os::ParcelFileDescriptor_::AutoCloseOutputStream > create< android::os::ParcelFileDescriptor_::AutoCloseOutputStream>(local_ref< android::os::ParcelFileDescriptor > const &a0)
{
	return local_ref< android::os::ParcelFileDescriptor_::AutoCloseOutputStream >(
		environment::get().get_jenv()->NewObject(
			get_class<android::os::ParcelFileDescriptor_::AutoCloseOutputStream::J2CPP_CLASS_NAME>(),
			get_method_id<android::os::ParcelFileDescriptor_::AutoCloseOutputStream::J2CPP_CLASS_NAME, android::os::ParcelFileDescriptor_::AutoCloseOutputStream::J2CPP_METHOD_NAME(0), android::os::ParcelFileDescriptor_::AutoCloseOutputStream::J2CPP_METHOD_SIGNATURE(0), false>(),
			a0.get_jtype()
		)
	);
}

void android::os::ParcelFileDescriptor_::AutoCloseOutputStream::close()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), false>()
		)
	);
}


J2CPP_DEFINE_CLASS(android::os::ParcelFileDescriptor_::AutoCloseOutputStream,"android/os/ParcelFileDescriptor$AutoCloseOutputStream")
J2CPP_DEFINE_METHOD(android::os::ParcelFileDescriptor_::AutoCloseOutputStream,0,"<init>","(Landroid/os/ParcelFileDescriptor;)V")
J2CPP_DEFINE_METHOD(android::os::ParcelFileDescriptor_::AutoCloseOutputStream,1,"close","()V")

template <>
local_ref< android::os::ParcelFileDescriptor_::AutoCloseInputStream > create< android::os::ParcelFileDescriptor_::AutoCloseInputStream>(local_ref< android::os::ParcelFileDescriptor > const &a0)
{
	return local_ref< android::os::ParcelFileDescriptor_::AutoCloseInputStream >(
		environment::get().get_jenv()->NewObject(
			get_class<android::os::ParcelFileDescriptor_::AutoCloseInputStream::J2CPP_CLASS_NAME>(),
			get_method_id<android::os::ParcelFileDescriptor_::AutoCloseInputStream::J2CPP_CLASS_NAME, android::os::ParcelFileDescriptor_::AutoCloseInputStream::J2CPP_METHOD_NAME(0), android::os::ParcelFileDescriptor_::AutoCloseInputStream::J2CPP_METHOD_SIGNATURE(0), false>(),
			a0.get_jtype()
		)
	);
}

void android::os::ParcelFileDescriptor_::AutoCloseInputStream::close()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), false>()
		)
	);
}


J2CPP_DEFINE_CLASS(android::os::ParcelFileDescriptor_::AutoCloseInputStream,"android/os/ParcelFileDescriptor$AutoCloseInputStream")
J2CPP_DEFINE_METHOD(android::os::ParcelFileDescriptor_::AutoCloseInputStream,0,"<init>","(Landroid/os/ParcelFileDescriptor;)V")
J2CPP_DEFINE_METHOD(android::os::ParcelFileDescriptor_::AutoCloseInputStream,1,"close","()V")


template <>
local_ref< android::os::ParcelFileDescriptor > create< android::os::ParcelFileDescriptor>(local_ref< android::os::ParcelFileDescriptor > const &a0)
{
	return local_ref< android::os::ParcelFileDescriptor >(
		environment::get().get_jenv()->NewObject(
			get_class<android::os::ParcelFileDescriptor::J2CPP_CLASS_NAME>(),
			get_method_id<android::os::ParcelFileDescriptor::J2CPP_CLASS_NAME, android::os::ParcelFileDescriptor::J2CPP_METHOD_NAME(0), android::os::ParcelFileDescriptor::J2CPP_METHOD_SIGNATURE(0), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< android::os::ParcelFileDescriptor > android::os::ParcelFileDescriptor::open(local_ref< java::io::File > const &a0, cpp_int const &a1)
{
	return local_ref< android::os::ParcelFileDescriptor >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), true>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< android::os::ParcelFileDescriptor > android::os::ParcelFileDescriptor::fromSocket(local_ref< java::net::Socket > const &a0)
{
	return local_ref< android::os::ParcelFileDescriptor >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), true>(),
			a0.get_jtype()
		)
	);
}

local_ref< cpp_object_array<android::os::ParcelFileDescriptor, 1> > android::os::ParcelFileDescriptor::createPipe()
{
	return local_ref< cpp_object_array<android::os::ParcelFileDescriptor, 1> >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), true>()
		)
	);
}

local_ref< java::io::FileDescriptor > android::os::ParcelFileDescriptor::getFileDescriptor()
{
	return local_ref< java::io::FileDescriptor >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>()
		)
	);
}

cpp_long android::os::ParcelFileDescriptor::getStatSize()
{
	return cpp_long(
		environment::get().get_jenv()->CallLongMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>()
		)
	);
}

void android::os::ParcelFileDescriptor::close()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>()
		)
	);
}

local_ref< java::lang::String > android::os::ParcelFileDescriptor::toString()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(7), J2CPP_METHOD_SIGNATURE(7), false>()
		)
	);
}


cpp_int android::os::ParcelFileDescriptor::describeContents()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(9), J2CPP_METHOD_SIGNATURE(9), false>()
		)
	);
}

void android::os::ParcelFileDescriptor::writeToParcel(local_ref< android::os::Parcel > const &a0, cpp_int const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(10), J2CPP_METHOD_SIGNATURE(10), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}


static_field<
	android::os::ParcelFileDescriptor::J2CPP_CLASS_NAME,
	android::os::ParcelFileDescriptor::J2CPP_FIELD_NAME(0),
	android::os::ParcelFileDescriptor::J2CPP_FIELD_SIGNATURE(0),
	cpp_int
> android::os::ParcelFileDescriptor::MODE_WORLD_READABLE;

static_field<
	android::os::ParcelFileDescriptor::J2CPP_CLASS_NAME,
	android::os::ParcelFileDescriptor::J2CPP_FIELD_NAME(1),
	android::os::ParcelFileDescriptor::J2CPP_FIELD_SIGNATURE(1),
	cpp_int
> android::os::ParcelFileDescriptor::MODE_WORLD_WRITEABLE;

static_field<
	android::os::ParcelFileDescriptor::J2CPP_CLASS_NAME,
	android::os::ParcelFileDescriptor::J2CPP_FIELD_NAME(2),
	android::os::ParcelFileDescriptor::J2CPP_FIELD_SIGNATURE(2),
	cpp_int
> android::os::ParcelFileDescriptor::MODE_READ_ONLY;

static_field<
	android::os::ParcelFileDescriptor::J2CPP_CLASS_NAME,
	android::os::ParcelFileDescriptor::J2CPP_FIELD_NAME(3),
	android::os::ParcelFileDescriptor::J2CPP_FIELD_SIGNATURE(3),
	cpp_int
> android::os::ParcelFileDescriptor::MODE_WRITE_ONLY;

static_field<
	android::os::ParcelFileDescriptor::J2CPP_CLASS_NAME,
	android::os::ParcelFileDescriptor::J2CPP_FIELD_NAME(4),
	android::os::ParcelFileDescriptor::J2CPP_FIELD_SIGNATURE(4),
	cpp_int
> android::os::ParcelFileDescriptor::MODE_READ_WRITE;

static_field<
	android::os::ParcelFileDescriptor::J2CPP_CLASS_NAME,
	android::os::ParcelFileDescriptor::J2CPP_FIELD_NAME(5),
	android::os::ParcelFileDescriptor::J2CPP_FIELD_SIGNATURE(5),
	cpp_int
> android::os::ParcelFileDescriptor::MODE_CREATE;

static_field<
	android::os::ParcelFileDescriptor::J2CPP_CLASS_NAME,
	android::os::ParcelFileDescriptor::J2CPP_FIELD_NAME(6),
	android::os::ParcelFileDescriptor::J2CPP_FIELD_SIGNATURE(6),
	cpp_int
> android::os::ParcelFileDescriptor::MODE_TRUNCATE;

static_field<
	android::os::ParcelFileDescriptor::J2CPP_CLASS_NAME,
	android::os::ParcelFileDescriptor::J2CPP_FIELD_NAME(7),
	android::os::ParcelFileDescriptor::J2CPP_FIELD_SIGNATURE(7),
	cpp_int
> android::os::ParcelFileDescriptor::MODE_APPEND;

static_field<
	android::os::ParcelFileDescriptor::J2CPP_CLASS_NAME,
	android::os::ParcelFileDescriptor::J2CPP_FIELD_NAME(8),
	android::os::ParcelFileDescriptor::J2CPP_FIELD_SIGNATURE(8),
	local_ref< android::os::Parcelable_::Creator >
> android::os::ParcelFileDescriptor::CREATOR;


J2CPP_DEFINE_CLASS(android::os::ParcelFileDescriptor,"android/os/ParcelFileDescriptor")
J2CPP_DEFINE_METHOD(android::os::ParcelFileDescriptor,0,"<init>","(Landroid/os/ParcelFileDescriptor;)V")
J2CPP_DEFINE_METHOD(android::os::ParcelFileDescriptor,1,"open","(Ljava/io/File;I)Landroid/os/ParcelFileDescriptor;")
J2CPP_DEFINE_METHOD(android::os::ParcelFileDescriptor,2,"fromSocket","(Ljava/net/Socket;)Landroid/os/ParcelFileDescriptor;")
J2CPP_DEFINE_METHOD(android::os::ParcelFileDescriptor,3,"createPipe","()[android.os.ParcelFileDescriptor")
J2CPP_DEFINE_METHOD(android::os::ParcelFileDescriptor,4,"getFileDescriptor","()Ljava/io/FileDescriptor;")
J2CPP_DEFINE_METHOD(android::os::ParcelFileDescriptor,5,"getStatSize","()J")
J2CPP_DEFINE_METHOD(android::os::ParcelFileDescriptor,6,"close","()V")
J2CPP_DEFINE_METHOD(android::os::ParcelFileDescriptor,7,"toString","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(android::os::ParcelFileDescriptor,8,"finalize","()V")
J2CPP_DEFINE_METHOD(android::os::ParcelFileDescriptor,9,"describeContents","()I")
J2CPP_DEFINE_METHOD(android::os::ParcelFileDescriptor,10,"writeToParcel","(Landroid/os/Parcel;I)V")
J2CPP_DEFINE_METHOD(android::os::ParcelFileDescriptor,11,"<clinit>","()V")
J2CPP_DEFINE_FIELD(android::os::ParcelFileDescriptor,0,"MODE_WORLD_READABLE","I")
J2CPP_DEFINE_FIELD(android::os::ParcelFileDescriptor,1,"MODE_WORLD_WRITEABLE","I")
J2CPP_DEFINE_FIELD(android::os::ParcelFileDescriptor,2,"MODE_READ_ONLY","I")
J2CPP_DEFINE_FIELD(android::os::ParcelFileDescriptor,3,"MODE_WRITE_ONLY","I")
J2CPP_DEFINE_FIELD(android::os::ParcelFileDescriptor,4,"MODE_READ_WRITE","I")
J2CPP_DEFINE_FIELD(android::os::ParcelFileDescriptor,5,"MODE_CREATE","I")
J2CPP_DEFINE_FIELD(android::os::ParcelFileDescriptor,6,"MODE_TRUNCATE","I")
J2CPP_DEFINE_FIELD(android::os::ParcelFileDescriptor,7,"MODE_APPEND","I")
J2CPP_DEFINE_FIELD(android::os::ParcelFileDescriptor,8,"CREATOR","Landroid/os/Parcelable$Creator;")

} //namespace j2cpp

#endif //J2CPP_ANDROID_OS_PARCELFILEDESCRIPTOR_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
