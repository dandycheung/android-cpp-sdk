/*================================================================================
  code generated by: java2cpp
  class: android.os.WorkSource
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_OS_WORKSOURCE_HPP_DECL
#define J2CPP_ANDROID_OS_WORKSOURCE_HPP_DECL


namespace j2cpp { namespace android { namespace os { class Parcel; } } }
namespace j2cpp { namespace android { namespace os { namespace Parcelable_ { class Creator; } } } }


#include <android/os/Parcel.hpp>
#include <android/os/Parcelable.hpp>


namespace j2cpp {

namespace android { namespace os {

	class WorkSource;
	class WorkSource
		: public cpp_object<WorkSource>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_FIELD(0)

		WorkSource(jobject jobj)
		: cpp_object<WorkSource>(jobj)
		{
		}

		void clear();
		cpp_boolean diff(local_ref< android::os::WorkSource > const&);
		void set(local_ref< android::os::WorkSource > const&);
		cpp_boolean add(local_ref< android::os::WorkSource > const&);
		cpp_boolean remove(local_ref< android::os::WorkSource > const&);
		cpp_int describeContents();
		void writeToParcel(local_ref< android::os::Parcel > const&, cpp_int const&);

		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(0), J2CPP_FIELD_SIGNATURE(0), local_ref< android::os::Parcelable_::Creator > > CREATOR;
	}; //class WorkSource

} //namespace os
} //namespace android


} //namespace j2cpp

#endif //J2CPP_ANDROID_OS_WORKSOURCE_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_OS_WORKSOURCE_HPP_IMPL
#define J2CPP_ANDROID_OS_WORKSOURCE_HPP_IMPL

namespace j2cpp {


template <>
local_ref< android::os::WorkSource > create< android::os::WorkSource>()
{
	return local_ref< android::os::WorkSource >(
		environment::get().get_jenv()->NewObject(
			get_class<android::os::WorkSource::J2CPP_CLASS_NAME>(),
			get_method_id<android::os::WorkSource::J2CPP_CLASS_NAME, android::os::WorkSource::J2CPP_METHOD_NAME(0), android::os::WorkSource::J2CPP_METHOD_SIGNATURE(0), false>()
		)
	);
}

template <>
local_ref< android::os::WorkSource > create< android::os::WorkSource>(local_ref< android::os::WorkSource > const &a0)
{
	return local_ref< android::os::WorkSource >(
		environment::get().get_jenv()->NewObject(
			get_class<android::os::WorkSource::J2CPP_CLASS_NAME>(),
			get_method_id<android::os::WorkSource::J2CPP_CLASS_NAME, android::os::WorkSource::J2CPP_METHOD_NAME(1), android::os::WorkSource::J2CPP_METHOD_SIGNATURE(1), false>(),
			a0.get_jtype()
		)
	);
}

void android::os::WorkSource::clear()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>()
		)
	);
}

cpp_boolean android::os::WorkSource::diff(local_ref< android::os::WorkSource > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>(),
			a0.get_jtype()
		)
	);
}

void android::os::WorkSource::set(local_ref< android::os::WorkSource > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean android::os::WorkSource::add(local_ref< android::os::WorkSource > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean android::os::WorkSource::remove(local_ref< android::os::WorkSource > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int android::os::WorkSource::describeContents()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(7), J2CPP_METHOD_SIGNATURE(7), false>()
		)
	);
}

void android::os::WorkSource::writeToParcel(local_ref< android::os::Parcel > const &a0, cpp_int const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(8), J2CPP_METHOD_SIGNATURE(8), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}


static_field<
	android::os::WorkSource::J2CPP_CLASS_NAME,
	android::os::WorkSource::J2CPP_FIELD_NAME(0),
	android::os::WorkSource::J2CPP_FIELD_SIGNATURE(0),
	local_ref< android::os::Parcelable_::Creator >
> android::os::WorkSource::CREATOR;


J2CPP_DEFINE_CLASS(android::os::WorkSource,"android/os/WorkSource")
J2CPP_DEFINE_METHOD(android::os::WorkSource,0,"<init>","()V")
J2CPP_DEFINE_METHOD(android::os::WorkSource,1,"<init>","(Landroid/os/WorkSource;)V")
J2CPP_DEFINE_METHOD(android::os::WorkSource,2,"clear","()V")
J2CPP_DEFINE_METHOD(android::os::WorkSource,3,"diff","(Landroid/os/WorkSource;)Z")
J2CPP_DEFINE_METHOD(android::os::WorkSource,4,"set","(Landroid/os/WorkSource;)V")
J2CPP_DEFINE_METHOD(android::os::WorkSource,5,"add","(Landroid/os/WorkSource;)Z")
J2CPP_DEFINE_METHOD(android::os::WorkSource,6,"remove","(Landroid/os/WorkSource;)Z")
J2CPP_DEFINE_METHOD(android::os::WorkSource,7,"describeContents","()I")
J2CPP_DEFINE_METHOD(android::os::WorkSource,8,"writeToParcel","(Landroid/os/Parcel;I)V")
J2CPP_DEFINE_METHOD(android::os::WorkSource,9,"<clinit>","()V")
J2CPP_DEFINE_FIELD(android::os::WorkSource,0,"CREATOR","Landroid/os/Parcelable$Creator;")

} //namespace j2cpp

#endif //J2CPP_ANDROID_OS_WORKSOURCE_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
