/*================================================================================
  code generated by: java2cpp
  class: android.os.PowerManager
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_OS_POWERMANAGER_HPP_DECL
#define J2CPP_ANDROID_OS_POWERMANAGER_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace android { namespace os { class WorkSource; } } }
namespace j2cpp { namespace android { namespace os { namespace PowerManager_ { class WakeLock; } } } }


#include <android/os/PowerManager.hpp>
#include <android/os/WorkSource.hpp>
#include <java/lang/String.hpp>


namespace j2cpp {

namespace android { namespace os {

	class PowerManager;
	namespace PowerManager_ {

		class WakeLock;
		class WakeLock
			: public cpp_object<WakeLock>
		{
		public:

			J2CPP_DECLARE_CLASS

			J2CPP_DECLARE_METHOD(0)
			J2CPP_DECLARE_METHOD(1)
			J2CPP_DECLARE_METHOD(2)
			J2CPP_DECLARE_METHOD(3)
			J2CPP_DECLARE_METHOD(4)
			J2CPP_DECLARE_METHOD(5)
			J2CPP_DECLARE_METHOD(6)
			J2CPP_DECLARE_METHOD(7)
			J2CPP_DECLARE_METHOD(8)
			J2CPP_DECLARE_FIELD(0)

			WakeLock(jobject jobj)
			: cpp_object<WakeLock>(jobj)
			{
			}

			void setReferenceCounted(cpp_boolean const&);
			void acquire();
			void acquire(cpp_long const&);
			void release();
			cpp_boolean isHeld();
			void setWorkSource(local_ref< android::os::WorkSource > const&);
			local_ref< java::lang::String > toString();

		}; //class WakeLock

	} //namespace PowerManager_

	class PowerManager
		: public cpp_object<PowerManager>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_FIELD(0)
		J2CPP_DECLARE_FIELD(1)
		J2CPP_DECLARE_FIELD(2)
		J2CPP_DECLARE_FIELD(3)
		J2CPP_DECLARE_FIELD(4)
		J2CPP_DECLARE_FIELD(5)

		typedef PowerManager_::WakeLock WakeLock;

		PowerManager(jobject jobj)
		: cpp_object<PowerManager>(jobj)
		{
		}

		local_ref< android::os::PowerManager_::WakeLock > newWakeLock(cpp_int const&, local_ref< java::lang::String > const&);
		void userActivity(cpp_long const&, cpp_boolean const&);
		void goToSleep(cpp_long const&);
		cpp_boolean isScreenOn();
		void reboot(local_ref< java::lang::String > const&);

		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(0), J2CPP_FIELD_SIGNATURE(0), cpp_int > PARTIAL_WAKE_LOCK;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(1), J2CPP_FIELD_SIGNATURE(1), cpp_int > FULL_WAKE_LOCK;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(2), J2CPP_FIELD_SIGNATURE(2), cpp_int > SCREEN_BRIGHT_WAKE_LOCK;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(3), J2CPP_FIELD_SIGNATURE(3), cpp_int > SCREEN_DIM_WAKE_LOCK;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(4), J2CPP_FIELD_SIGNATURE(4), cpp_int > ACQUIRE_CAUSES_WAKEUP;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(5), J2CPP_FIELD_SIGNATURE(5), cpp_int > ON_AFTER_RELEASE;
	}; //class PowerManager

} //namespace os
} //namespace android


} //namespace j2cpp

#endif //J2CPP_ANDROID_OS_POWERMANAGER_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_OS_POWERMANAGER_HPP_IMPL
#define J2CPP_ANDROID_OS_POWERMANAGER_HPP_IMPL

namespace j2cpp {



template <>
local_ref< android::os::PowerManager_::WakeLock > create< android::os::PowerManager_::WakeLock>(local_ref< android::os::PowerManager > const &a0)
{
	return local_ref< android::os::PowerManager_::WakeLock >(
		environment::get().get_jenv()->NewObject(
			get_class<android::os::PowerManager_::WakeLock::J2CPP_CLASS_NAME>(),
			get_method_id<android::os::PowerManager_::WakeLock::J2CPP_CLASS_NAME, android::os::PowerManager_::WakeLock::J2CPP_METHOD_NAME(0), android::os::PowerManager_::WakeLock::J2CPP_METHOD_SIGNATURE(0), false>(),
			a0.get_jtype()
		)
	);
}

void android::os::PowerManager_::WakeLock::setReferenceCounted(cpp_boolean const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), false>(),
			a0.get_jtype()
		)
	);
}

void android::os::PowerManager_::WakeLock::acquire()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>()
		)
	);
}

void android::os::PowerManager_::WakeLock::acquire(cpp_long const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>(),
			a0.get_jtype()
		)
	);
}

void android::os::PowerManager_::WakeLock::release()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>()
		)
	);
}

cpp_boolean android::os::PowerManager_::WakeLock::isHeld()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>()
		)
	);
}

void android::os::PowerManager_::WakeLock::setWorkSource(local_ref< android::os::WorkSource > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::String > android::os::PowerManager_::WakeLock::toString()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(7), J2CPP_METHOD_SIGNATURE(7), false>()
		)
	);
}




J2CPP_DEFINE_CLASS(android::os::PowerManager_::WakeLock,"android/os/PowerManager$WakeLock")
J2CPP_DEFINE_METHOD(android::os::PowerManager_::WakeLock,0,"<init>","(Landroid/os/PowerManager;)V")
J2CPP_DEFINE_METHOD(android::os::PowerManager_::WakeLock,1,"setReferenceCounted","(Z)V")
J2CPP_DEFINE_METHOD(android::os::PowerManager_::WakeLock,2,"acquire","()V")
J2CPP_DEFINE_METHOD(android::os::PowerManager_::WakeLock,3,"acquire","(J)V")
J2CPP_DEFINE_METHOD(android::os::PowerManager_::WakeLock,4,"release","()V")
J2CPP_DEFINE_METHOD(android::os::PowerManager_::WakeLock,5,"isHeld","()Z")
J2CPP_DEFINE_METHOD(android::os::PowerManager_::WakeLock,6,"setWorkSource","(Landroid/os/WorkSource;)V")
J2CPP_DEFINE_METHOD(android::os::PowerManager_::WakeLock,7,"toString","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(android::os::PowerManager_::WakeLock,8,"finalize","()V")
J2CPP_DEFINE_FIELD(android::os::PowerManager_::WakeLock,0,"this$0","Landroid/os/PowerManager;")


template <>
local_ref< android::os::PowerManager > create< android::os::PowerManager>()
{
	return local_ref< android::os::PowerManager >(
		environment::get().get_jenv()->NewObject(
			get_class<android::os::PowerManager::J2CPP_CLASS_NAME>(),
			get_method_id<android::os::PowerManager::J2CPP_CLASS_NAME, android::os::PowerManager::J2CPP_METHOD_NAME(0), android::os::PowerManager::J2CPP_METHOD_SIGNATURE(0), false>()
		)
	);
}

local_ref< android::os::PowerManager_::WakeLock > android::os::PowerManager::newWakeLock(cpp_int const &a0, local_ref< java::lang::String > const &a1)
{
	return local_ref< android::os::PowerManager_::WakeLock >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void android::os::PowerManager::userActivity(cpp_long const &a0, cpp_boolean const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void android::os::PowerManager::goToSleep(cpp_long const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean android::os::PowerManager::isScreenOn()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>()
		)
	);
}

void android::os::PowerManager::reboot(local_ref< java::lang::String > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>(),
			a0.get_jtype()
		)
	);
}


static_field<
	android::os::PowerManager::J2CPP_CLASS_NAME,
	android::os::PowerManager::J2CPP_FIELD_NAME(0),
	android::os::PowerManager::J2CPP_FIELD_SIGNATURE(0),
	cpp_int
> android::os::PowerManager::PARTIAL_WAKE_LOCK;

static_field<
	android::os::PowerManager::J2CPP_CLASS_NAME,
	android::os::PowerManager::J2CPP_FIELD_NAME(1),
	android::os::PowerManager::J2CPP_FIELD_SIGNATURE(1),
	cpp_int
> android::os::PowerManager::FULL_WAKE_LOCK;

static_field<
	android::os::PowerManager::J2CPP_CLASS_NAME,
	android::os::PowerManager::J2CPP_FIELD_NAME(2),
	android::os::PowerManager::J2CPP_FIELD_SIGNATURE(2),
	cpp_int
> android::os::PowerManager::SCREEN_BRIGHT_WAKE_LOCK;

static_field<
	android::os::PowerManager::J2CPP_CLASS_NAME,
	android::os::PowerManager::J2CPP_FIELD_NAME(3),
	android::os::PowerManager::J2CPP_FIELD_SIGNATURE(3),
	cpp_int
> android::os::PowerManager::SCREEN_DIM_WAKE_LOCK;

static_field<
	android::os::PowerManager::J2CPP_CLASS_NAME,
	android::os::PowerManager::J2CPP_FIELD_NAME(4),
	android::os::PowerManager::J2CPP_FIELD_SIGNATURE(4),
	cpp_int
> android::os::PowerManager::ACQUIRE_CAUSES_WAKEUP;

static_field<
	android::os::PowerManager::J2CPP_CLASS_NAME,
	android::os::PowerManager::J2CPP_FIELD_NAME(5),
	android::os::PowerManager::J2CPP_FIELD_SIGNATURE(5),
	cpp_int
> android::os::PowerManager::ON_AFTER_RELEASE;


J2CPP_DEFINE_CLASS(android::os::PowerManager,"android/os/PowerManager")
J2CPP_DEFINE_METHOD(android::os::PowerManager,0,"<init>","()V")
J2CPP_DEFINE_METHOD(android::os::PowerManager,1,"newWakeLock","(ILjava/lang/String;)Landroid/os/PowerManager$WakeLock;")
J2CPP_DEFINE_METHOD(android::os::PowerManager,2,"userActivity","(JZ)V")
J2CPP_DEFINE_METHOD(android::os::PowerManager,3,"goToSleep","(J)V")
J2CPP_DEFINE_METHOD(android::os::PowerManager,4,"isScreenOn","()Z")
J2CPP_DEFINE_METHOD(android::os::PowerManager,5,"reboot","(Ljava/lang/String;)V")
J2CPP_DEFINE_FIELD(android::os::PowerManager,0,"PARTIAL_WAKE_LOCK","I")
J2CPP_DEFINE_FIELD(android::os::PowerManager,1,"FULL_WAKE_LOCK","I")
J2CPP_DEFINE_FIELD(android::os::PowerManager,2,"SCREEN_BRIGHT_WAKE_LOCK","I")
J2CPP_DEFINE_FIELD(android::os::PowerManager,3,"SCREEN_DIM_WAKE_LOCK","I")
J2CPP_DEFINE_FIELD(android::os::PowerManager,4,"ACQUIRE_CAUSES_WAKEUP","I")
J2CPP_DEFINE_FIELD(android::os::PowerManager,5,"ON_AFTER_RELEASE","I")

} //namespace j2cpp

#endif //J2CPP_ANDROID_OS_POWERMANAGER_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
