/*================================================================================
  code generated by: java2cpp
  class: android.text.InputFilter
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_TEXT_INPUTFILTER_HPP_DECL
#define J2CPP_ANDROID_TEXT_INPUTFILTER_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class CharSequence; } } }
namespace j2cpp { namespace android { namespace text { class Spanned; } } }


#include <android/text/Spanned.hpp>
#include <java/lang/CharSequence.hpp>


namespace j2cpp {

namespace android { namespace text {

	class InputFilter;
	namespace InputFilter_ {

		class AllCaps;
		class AllCaps
			: public cpp_object<AllCaps>
		{
		public:

			J2CPP_DECLARE_CLASS

			J2CPP_DECLARE_METHOD(0)
			J2CPP_DECLARE_METHOD(1)

			AllCaps(jobject jobj)
			: cpp_object<AllCaps>(jobj)
			{
			}

			local_ref< java::lang::CharSequence > filter(local_ref< java::lang::CharSequence > const&, cpp_int const&, cpp_int const&, local_ref< android::text::Spanned > const&, cpp_int const&, cpp_int const&);
		}; //class AllCaps

		class LengthFilter;
		class LengthFilter
			: public cpp_object<LengthFilter>
		{
		public:

			J2CPP_DECLARE_CLASS

			J2CPP_DECLARE_METHOD(0)
			J2CPP_DECLARE_METHOD(1)

			LengthFilter(jobject jobj)
			: cpp_object<LengthFilter>(jobj)
			{
			}

			local_ref< java::lang::CharSequence > filter(local_ref< java::lang::CharSequence > const&, cpp_int const&, cpp_int const&, local_ref< android::text::Spanned > const&, cpp_int const&, cpp_int const&);
		}; //class LengthFilter

	} //namespace InputFilter_

	class InputFilter
		: public cpp_object<InputFilter>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)

		typedef InputFilter_::AllCaps AllCaps;
		typedef InputFilter_::LengthFilter LengthFilter;

		InputFilter(jobject jobj)
		: cpp_object<InputFilter>(jobj)
		{
		}

		local_ref< java::lang::CharSequence > filter(local_ref< java::lang::CharSequence > const&, cpp_int const&, cpp_int const&, local_ref< android::text::Spanned > const&, cpp_int const&, cpp_int const&);
	}; //class InputFilter

} //namespace text
} //namespace android


} //namespace j2cpp

#endif //J2CPP_ANDROID_TEXT_INPUTFILTER_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_TEXT_INPUTFILTER_HPP_IMPL
#define J2CPP_ANDROID_TEXT_INPUTFILTER_HPP_IMPL

namespace j2cpp {



template <>
local_ref< android::text::InputFilter_::AllCaps > create< android::text::InputFilter_::AllCaps>()
{
	return local_ref< android::text::InputFilter_::AllCaps >(
		environment::get().get_jenv()->NewObject(
			get_class<android::text::InputFilter_::AllCaps::J2CPP_CLASS_NAME>(),
			get_method_id<android::text::InputFilter_::AllCaps::J2CPP_CLASS_NAME, android::text::InputFilter_::AllCaps::J2CPP_METHOD_NAME(0), android::text::InputFilter_::AllCaps::J2CPP_METHOD_SIGNATURE(0), false>()
		)
	);
}

local_ref< java::lang::CharSequence > android::text::InputFilter_::AllCaps::filter(local_ref< java::lang::CharSequence > const &a0, cpp_int const &a1, cpp_int const &a2, local_ref< android::text::Spanned > const &a3, cpp_int const &a4, cpp_int const &a5)
{
	return local_ref< java::lang::CharSequence >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype(), a3.get_jtype(), a4.get_jtype(), a5.get_jtype()
		)
	);
}


J2CPP_DEFINE_CLASS(android::text::InputFilter_::AllCaps,"android/text/InputFilter$AllCaps")
J2CPP_DEFINE_METHOD(android::text::InputFilter_::AllCaps,0,"<init>","()V")
J2CPP_DEFINE_METHOD(android::text::InputFilter_::AllCaps,1,"filter","(Ljava/lang/CharSequence;IILandroid/text/Spanned;II)Ljava/lang/CharSequence;")

template <>
local_ref< android::text::InputFilter_::LengthFilter > create< android::text::InputFilter_::LengthFilter>(cpp_int const &a0)
{
	return local_ref< android::text::InputFilter_::LengthFilter >(
		environment::get().get_jenv()->NewObject(
			get_class<android::text::InputFilter_::LengthFilter::J2CPP_CLASS_NAME>(),
			get_method_id<android::text::InputFilter_::LengthFilter::J2CPP_CLASS_NAME, android::text::InputFilter_::LengthFilter::J2CPP_METHOD_NAME(0), android::text::InputFilter_::LengthFilter::J2CPP_METHOD_SIGNATURE(0), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::CharSequence > android::text::InputFilter_::LengthFilter::filter(local_ref< java::lang::CharSequence > const &a0, cpp_int const &a1, cpp_int const &a2, local_ref< android::text::Spanned > const &a3, cpp_int const &a4, cpp_int const &a5)
{
	return local_ref< java::lang::CharSequence >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype(), a3.get_jtype(), a4.get_jtype(), a5.get_jtype()
		)
	);
}


J2CPP_DEFINE_CLASS(android::text::InputFilter_::LengthFilter,"android/text/InputFilter$LengthFilter")
J2CPP_DEFINE_METHOD(android::text::InputFilter_::LengthFilter,0,"<init>","(I)V")
J2CPP_DEFINE_METHOD(android::text::InputFilter_::LengthFilter,1,"filter","(Ljava/lang/CharSequence;IILandroid/text/Spanned;II)Ljava/lang/CharSequence;")


local_ref< java::lang::CharSequence > android::text::InputFilter::filter(local_ref< java::lang::CharSequence > const &a0, cpp_int const &a1, cpp_int const &a2, local_ref< android::text::Spanned > const &a3, cpp_int const &a4, cpp_int const &a5)
{
	return local_ref< java::lang::CharSequence >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(0), J2CPP_METHOD_SIGNATURE(0), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype(), a3.get_jtype(), a4.get_jtype(), a5.get_jtype()
		)
	);
}


J2CPP_DEFINE_CLASS(android::text::InputFilter,"android/text/InputFilter")
J2CPP_DEFINE_METHOD(android::text::InputFilter,0,"filter","(Ljava/lang/CharSequence;IILandroid/text/Spanned;II)Ljava/lang/CharSequence;")

} //namespace j2cpp

#endif //J2CPP_ANDROID_TEXT_INPUTFILTER_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
