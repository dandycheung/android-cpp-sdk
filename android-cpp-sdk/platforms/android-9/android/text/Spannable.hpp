/*================================================================================
  code generated by: java2cpp
  class: android.text.Spannable
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_TEXT_SPANNABLE_HPP_DECL
#define J2CPP_ANDROID_TEXT_SPANNABLE_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class CharSequence; } } }
namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace android { namespace text { namespace Spannable_ { class Factory; } } } }


#include <android/text/Spannable.hpp>
#include <java/lang/CharSequence.hpp>
#include <java/lang/Object.hpp>


namespace j2cpp {

namespace android { namespace text {

	class Spannable;
	namespace Spannable_ {

		class Factory;
		class Factory
			: public cpp_object<Factory>
		{
		public:

			J2CPP_DECLARE_CLASS

			J2CPP_DECLARE_METHOD(0)
			J2CPP_DECLARE_METHOD(1)
			J2CPP_DECLARE_METHOD(2)

			Factory(jobject jobj)
			: cpp_object<Factory>(jobj)
			{
			}

			static local_ref< android::text::Spannable_::Factory > getInstance();
			local_ref< android::text::Spannable > newSpannable(local_ref< java::lang::CharSequence > const&);
		}; //class Factory

	} //namespace Spannable_

	class Spannable
		: public cpp_object<Spannable>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)

		typedef Spannable_::Factory Factory;

		Spannable(jobject jobj)
		: cpp_object<Spannable>(jobj)
		{
		}

		void setSpan(local_ref< java::lang::Object > const&, cpp_int const&, cpp_int const&, cpp_int const&);
		void removeSpan(local_ref< java::lang::Object > const&);
	}; //class Spannable

} //namespace text
} //namespace android


} //namespace j2cpp

#endif //J2CPP_ANDROID_TEXT_SPANNABLE_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_TEXT_SPANNABLE_HPP_IMPL
#define J2CPP_ANDROID_TEXT_SPANNABLE_HPP_IMPL

namespace j2cpp {



template <>
local_ref< android::text::Spannable_::Factory > create< android::text::Spannable_::Factory>()
{
	return local_ref< android::text::Spannable_::Factory >(
		environment::get().get_jenv()->NewObject(
			get_class<android::text::Spannable_::Factory::J2CPP_CLASS_NAME>(),
			get_method_id<android::text::Spannable_::Factory::J2CPP_CLASS_NAME, android::text::Spannable_::Factory::J2CPP_METHOD_NAME(0), android::text::Spannable_::Factory::J2CPP_METHOD_SIGNATURE(0), false>()
		)
	);
}

local_ref< android::text::Spannable_::Factory > android::text::Spannable_::Factory::getInstance()
{
	return local_ref< android::text::Spannable_::Factory >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), true>()
		)
	);
}

local_ref< android::text::Spannable > android::text::Spannable_::Factory::newSpannable(local_ref< java::lang::CharSequence > const &a0)
{
	return local_ref< android::text::Spannable >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>(),
			a0.get_jtype()
		)
	);
}


J2CPP_DEFINE_CLASS(android::text::Spannable_::Factory,"android/text/Spannable$Factory")
J2CPP_DEFINE_METHOD(android::text::Spannable_::Factory,0,"<init>","()V")
J2CPP_DEFINE_METHOD(android::text::Spannable_::Factory,1,"getInstance","()Landroid/text/Spannable$Factory;")
J2CPP_DEFINE_METHOD(android::text::Spannable_::Factory,2,"newSpannable","(Ljava/lang/CharSequence;)Landroid/text/Spannable;")


void android::text::Spannable::setSpan(local_ref< java::lang::Object > const &a0, cpp_int const &a1, cpp_int const &a2, cpp_int const &a3)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(0), J2CPP_METHOD_SIGNATURE(0), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype(), a3.get_jtype()
		)
	);
}

void android::text::Spannable::removeSpan(local_ref< java::lang::Object > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), false>(),
			a0.get_jtype()
		)
	);
}


J2CPP_DEFINE_CLASS(android::text::Spannable,"android/text/Spannable")
J2CPP_DEFINE_METHOD(android::text::Spannable,0,"setSpan","(Ljava/lang/Object;III)V")
J2CPP_DEFINE_METHOD(android::text::Spannable,1,"removeSpan","(Ljava/lang/Object;)V")

} //namespace j2cpp

#endif //J2CPP_ANDROID_TEXT_SPANNABLE_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
