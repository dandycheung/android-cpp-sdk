/*================================================================================
  code generated by: java2cpp
  class: android.text.style.ReplacementSpan
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_TEXT_STYLE_REPLACEMENTSPAN_HPP_DECL
#define J2CPP_ANDROID_TEXT_STYLE_REPLACEMENTSPAN_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class CharSequence; } } }
namespace j2cpp { namespace android { namespace text { class TextPaint; } } }
namespace j2cpp { namespace android { namespace graphics { class Canvas; } } }
namespace j2cpp { namespace android { namespace graphics { class Paint; } } }
namespace j2cpp { namespace android { namespace graphics { namespace Paint_ { class FontMetricsInt; } } } }


#include <android/graphics/Canvas.hpp>
#include <android/graphics/Paint.hpp>
#include <android/text/TextPaint.hpp>
#include <java/lang/CharSequence.hpp>


namespace j2cpp {

namespace android { namespace text { namespace style {

	class ReplacementSpan;
	class ReplacementSpan
		: public cpp_object<ReplacementSpan>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)

		ReplacementSpan(jobject jobj)
		: cpp_object<ReplacementSpan>(jobj)
		{
		}

		cpp_int getSize(local_ref< android::graphics::Paint > const&, local_ref< java::lang::CharSequence > const&, cpp_int const&, cpp_int const&, local_ref< android::graphics::Paint_::FontMetricsInt > const&);
		void draw(local_ref< android::graphics::Canvas > const&, local_ref< java::lang::CharSequence > const&, cpp_int const&, cpp_int const&, cpp_float const&, cpp_int const&, cpp_int const&, cpp_int const&, local_ref< android::graphics::Paint > const&);
		void updateMeasureState(local_ref< android::text::TextPaint > const&);
		void updateDrawState(local_ref< android::text::TextPaint > const&);
	}; //class ReplacementSpan

} //namespace style
} //namespace text
} //namespace android


} //namespace j2cpp

#endif //J2CPP_ANDROID_TEXT_STYLE_REPLACEMENTSPAN_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_TEXT_STYLE_REPLACEMENTSPAN_HPP_IMPL
#define J2CPP_ANDROID_TEXT_STYLE_REPLACEMENTSPAN_HPP_IMPL

namespace j2cpp {


template <>
local_ref< android::text::style::ReplacementSpan > create< android::text::style::ReplacementSpan>()
{
	return local_ref< android::text::style::ReplacementSpan >(
		environment::get().get_jenv()->NewObject(
			get_class<android::text::style::ReplacementSpan::J2CPP_CLASS_NAME>(),
			get_method_id<android::text::style::ReplacementSpan::J2CPP_CLASS_NAME, android::text::style::ReplacementSpan::J2CPP_METHOD_NAME(0), android::text::style::ReplacementSpan::J2CPP_METHOD_SIGNATURE(0), false>()
		)
	);
}

cpp_int android::text::style::ReplacementSpan::getSize(local_ref< android::graphics::Paint > const &a0, local_ref< java::lang::CharSequence > const &a1, cpp_int const &a2, cpp_int const &a3, local_ref< android::graphics::Paint_::FontMetricsInt > const &a4)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype(), a3.get_jtype(), a4.get_jtype()
		)
	);
}

void android::text::style::ReplacementSpan::draw(local_ref< android::graphics::Canvas > const &a0, local_ref< java::lang::CharSequence > const &a1, cpp_int const &a2, cpp_int const &a3, cpp_float const &a4, cpp_int const &a5, cpp_int const &a6, cpp_int const &a7, local_ref< android::graphics::Paint > const &a8)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype(), a3.get_jtype(), a4.get_jtype(), a5.get_jtype(), a6.get_jtype(), a7.get_jtype(), a8.get_jtype()
		)
	);
}

void android::text::style::ReplacementSpan::updateMeasureState(local_ref< android::text::TextPaint > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>(),
			a0.get_jtype()
		)
	);
}

void android::text::style::ReplacementSpan::updateDrawState(local_ref< android::text::TextPaint > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>(),
			a0.get_jtype()
		)
	);
}


J2CPP_DEFINE_CLASS(android::text::style::ReplacementSpan,"android/text/style/ReplacementSpan")
J2CPP_DEFINE_METHOD(android::text::style::ReplacementSpan,0,"<init>","()V")
J2CPP_DEFINE_METHOD(android::text::style::ReplacementSpan,1,"getSize","(Landroid/graphics/Paint;Ljava/lang/CharSequence;IILandroid/graphics/Paint$FontMetricsInt;)I")
J2CPP_DEFINE_METHOD(android::text::style::ReplacementSpan,2,"draw","(Landroid/graphics/Canvas;Ljava/lang/CharSequence;IIFIIILandroid/graphics/Paint;)V")
J2CPP_DEFINE_METHOD(android::text::style::ReplacementSpan,3,"updateMeasureState","(Landroid/text/TextPaint;)V")
J2CPP_DEFINE_METHOD(android::text::style::ReplacementSpan,4,"updateDrawState","(Landroid/text/TextPaint;)V")

} //namespace j2cpp

#endif //J2CPP_ANDROID_TEXT_STYLE_REPLACEMENTSPAN_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
