/*================================================================================
  code generated by: java2cpp
  class: android.text.Layout
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_TEXT_LAYOUT_HPP_DECL
#define J2CPP_ANDROID_TEXT_LAYOUT_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace lang { class CharSequence; } } }
namespace j2cpp { namespace android { namespace text { namespace Layout_ { class Directions; } } } }
namespace j2cpp { namespace android { namespace text { class TextPaint; } } }
namespace j2cpp { namespace android { namespace text { namespace Layout_ { class Alignment; } } } }
namespace j2cpp { namespace android { namespace graphics { class Canvas; } } }
namespace j2cpp { namespace android { namespace graphics { class Path; } } }
namespace j2cpp { namespace android { namespace graphics { class Paint; } } }
namespace j2cpp { namespace android { namespace graphics { class Rect; } } }


#include <android/graphics/Canvas.hpp>
#include <android/graphics/Paint.hpp>
#include <android/graphics/Path.hpp>
#include <android/graphics/Rect.hpp>
#include <android/text/Layout.hpp>
#include <android/text/TextPaint.hpp>
#include <java/lang/CharSequence.hpp>
#include <java/lang/String.hpp>


namespace j2cpp {

namespace android { namespace text {

	class Layout;
	namespace Layout_ {

		class Directions;
		class Directions
			: public cpp_object<Directions>
		{
		public:

			J2CPP_DECLARE_CLASS

			J2CPP_DECLARE_METHOD(0)

			Directions(jobject jobj)
			: cpp_object<Directions>(jobj)
			{
			}

		}; //class Directions

		class Alignment;
		class Alignment
			: public cpp_object<Alignment>
		{
		public:

			J2CPP_DECLARE_CLASS

			J2CPP_DECLARE_METHOD(0)
			J2CPP_DECLARE_METHOD(1)
			J2CPP_DECLARE_METHOD(2)
			J2CPP_DECLARE_METHOD(3)
			J2CPP_DECLARE_FIELD(0)
			J2CPP_DECLARE_FIELD(1)
			J2CPP_DECLARE_FIELD(2)
			J2CPP_DECLARE_FIELD(3)

			Alignment(jobject jobj)
			: cpp_object<Alignment>(jobj)
			{
			}

			static local_ref< cpp_object_array<android::text::Layout_::Alignment, 1> > values();
			static local_ref< android::text::Layout_::Alignment > valueOf(local_ref< java::lang::String > const&);

			static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(0), J2CPP_FIELD_SIGNATURE(0), local_ref< android::text::Layout_::Alignment > > ALIGN_CENTER;
			static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(1), J2CPP_FIELD_SIGNATURE(1), local_ref< android::text::Layout_::Alignment > > ALIGN_NORMAL;
			static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(2), J2CPP_FIELD_SIGNATURE(2), local_ref< android::text::Layout_::Alignment > > ALIGN_OPPOSITE;
		}; //class Alignment

	} //namespace Layout_

	class Layout
		: public cpp_object<Layout>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_METHOD(12)
		J2CPP_DECLARE_METHOD(13)
		J2CPP_DECLARE_METHOD(14)
		J2CPP_DECLARE_METHOD(15)
		J2CPP_DECLARE_METHOD(16)
		J2CPP_DECLARE_METHOD(17)
		J2CPP_DECLARE_METHOD(18)
		J2CPP_DECLARE_METHOD(19)
		J2CPP_DECLARE_METHOD(20)
		J2CPP_DECLARE_METHOD(21)
		J2CPP_DECLARE_METHOD(22)
		J2CPP_DECLARE_METHOD(23)
		J2CPP_DECLARE_METHOD(24)
		J2CPP_DECLARE_METHOD(25)
		J2CPP_DECLARE_METHOD(26)
		J2CPP_DECLARE_METHOD(27)
		J2CPP_DECLARE_METHOD(28)
		J2CPP_DECLARE_METHOD(29)
		J2CPP_DECLARE_METHOD(30)
		J2CPP_DECLARE_METHOD(31)
		J2CPP_DECLARE_METHOD(32)
		J2CPP_DECLARE_METHOD(33)
		J2CPP_DECLARE_METHOD(34)
		J2CPP_DECLARE_METHOD(35)
		J2CPP_DECLARE_METHOD(36)
		J2CPP_DECLARE_METHOD(37)
		J2CPP_DECLARE_METHOD(38)
		J2CPP_DECLARE_METHOD(39)
		J2CPP_DECLARE_METHOD(40)
		J2CPP_DECLARE_METHOD(41)
		J2CPP_DECLARE_METHOD(42)
		J2CPP_DECLARE_METHOD(43)
		J2CPP_DECLARE_METHOD(44)
		J2CPP_DECLARE_METHOD(45)
		J2CPP_DECLARE_METHOD(46)
		J2CPP_DECLARE_METHOD(47)
		J2CPP_DECLARE_FIELD(0)
		J2CPP_DECLARE_FIELD(1)

		typedef Layout_::Directions Directions;
		typedef Layout_::Alignment Alignment;

		Layout(jobject jobj)
		: cpp_object<Layout>(jobj)
		{
		}

		static cpp_float getDesiredWidth(local_ref< java::lang::CharSequence > const&, local_ref< android::text::TextPaint > const&);
		static cpp_float getDesiredWidth(local_ref< java::lang::CharSequence > const&, cpp_int const&, cpp_int const&, local_ref< android::text::TextPaint > const&);
		void draw(local_ref< android::graphics::Canvas > const&);
		void draw(local_ref< android::graphics::Canvas > const&, local_ref< android::graphics::Path > const&, local_ref< android::graphics::Paint > const&, cpp_int const&);
		local_ref< java::lang::CharSequence > getText();
		local_ref< android::text::TextPaint > getPaint();
		cpp_int getWidth();
		cpp_int getEllipsizedWidth();
		void increaseWidthTo(cpp_int const&);
		cpp_int getHeight();
		local_ref< android::text::Layout_::Alignment > getAlignment();
		cpp_float getSpacingMultiplier();
		cpp_float getSpacingAdd();
		cpp_int getLineCount();
		cpp_int getLineBounds(cpp_int const&, local_ref< android::graphics::Rect > const&);
		cpp_int getLineTop(cpp_int const&);
		cpp_int getLineDescent(cpp_int const&);
		cpp_int getLineStart(cpp_int const&);
		cpp_int getParagraphDirection(cpp_int const&);
		cpp_boolean getLineContainsTab(cpp_int const&);
		local_ref< android::text::Layout_::Directions > getLineDirections(cpp_int const&);
		cpp_int getTopPadding();
		cpp_int getBottomPadding();
		cpp_float getPrimaryHorizontal(cpp_int const&);
		cpp_float getSecondaryHorizontal(cpp_int const&);
		cpp_float getLineLeft(cpp_int const&);
		cpp_float getLineRight(cpp_int const&);
		cpp_float getLineMax(cpp_int const&);
		cpp_float getLineWidth(cpp_int const&);
		cpp_int getLineForVertical(cpp_int const&);
		cpp_int getLineForOffset(cpp_int const&);
		cpp_int getOffsetForHorizontal(cpp_int const&, cpp_float const&);
		cpp_int getLineEnd(cpp_int const&);
		cpp_int getLineVisibleEnd(cpp_int const&);
		cpp_int getLineBottom(cpp_int const&);
		cpp_int getLineBaseline(cpp_int const&);
		cpp_int getLineAscent(cpp_int const&);
		cpp_int getOffsetToLeftOf(cpp_int const&);
		cpp_int getOffsetToRightOf(cpp_int const&);
		void getCursorPath(cpp_int const&, local_ref< android::graphics::Path > const&, local_ref< java::lang::CharSequence > const&);
		void getSelectionPath(cpp_int const&, cpp_int const&, local_ref< android::graphics::Path > const&);
		local_ref< android::text::Layout_::Alignment > getParagraphAlignment(cpp_int const&);
		cpp_int getParagraphLeft(cpp_int const&);
		cpp_int getParagraphRight(cpp_int const&);
		cpp_int getEllipsisStart(cpp_int const&);
		cpp_int getEllipsisCount(cpp_int const&);

		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(0), J2CPP_FIELD_SIGNATURE(0), cpp_int > DIR_LEFT_TO_RIGHT;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(1), J2CPP_FIELD_SIGNATURE(1), cpp_int > DIR_RIGHT_TO_LEFT;
	}; //class Layout

} //namespace text
} //namespace android


} //namespace j2cpp

#endif //J2CPP_ANDROID_TEXT_LAYOUT_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_TEXT_LAYOUT_HPP_IMPL
#define J2CPP_ANDROID_TEXT_LAYOUT_HPP_IMPL

namespace j2cpp {



template <>
local_ref< android::text::Layout_::Directions > create< android::text::Layout_::Directions>()
{
	return local_ref< android::text::Layout_::Directions >(
		environment::get().get_jenv()->NewObject(
			get_class<android::text::Layout_::Directions::J2CPP_CLASS_NAME>(),
			get_method_id<android::text::Layout_::Directions::J2CPP_CLASS_NAME, android::text::Layout_::Directions::J2CPP_METHOD_NAME(0), android::text::Layout_::Directions::J2CPP_METHOD_SIGNATURE(0), false>()
		)
	);
}


J2CPP_DEFINE_CLASS(android::text::Layout_::Directions,"android/text/Layout$Directions")
J2CPP_DEFINE_METHOD(android::text::Layout_::Directions,0,"<init>","()V")

local_ref< cpp_object_array<android::text::Layout_::Alignment, 1> > android::text::Layout_::Alignment::values()
{
	return local_ref< cpp_object_array<android::text::Layout_::Alignment, 1> >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(0), J2CPP_METHOD_SIGNATURE(0), true>()
		)
	);
}

local_ref< android::text::Layout_::Alignment > android::text::Layout_::Alignment::valueOf(local_ref< java::lang::String > const &a0)
{
	return local_ref< android::text::Layout_::Alignment >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), true>(),
			a0.get_jtype()
		)
	);
}

template <>
local_ref< android::text::Layout_::Alignment > create< android::text::Layout_::Alignment>(local_ref< java::lang::String > const &a0, cpp_int const &a1)
{
	return local_ref< android::text::Layout_::Alignment >(
		environment::get().get_jenv()->NewObject(
			get_class<android::text::Layout_::Alignment::J2CPP_CLASS_NAME>(),
			get_method_id<android::text::Layout_::Alignment::J2CPP_CLASS_NAME, android::text::Layout_::Alignment::J2CPP_METHOD_NAME(2), android::text::Layout_::Alignment::J2CPP_METHOD_SIGNATURE(2), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}


static_field<
	android::text::Layout_::Alignment::J2CPP_CLASS_NAME,
	android::text::Layout_::Alignment::J2CPP_FIELD_NAME(0),
	android::text::Layout_::Alignment::J2CPP_FIELD_SIGNATURE(0),
	local_ref< android::text::Layout_::Alignment >
> android::text::Layout_::Alignment::ALIGN_CENTER;

static_field<
	android::text::Layout_::Alignment::J2CPP_CLASS_NAME,
	android::text::Layout_::Alignment::J2CPP_FIELD_NAME(1),
	android::text::Layout_::Alignment::J2CPP_FIELD_SIGNATURE(1),
	local_ref< android::text::Layout_::Alignment >
> android::text::Layout_::Alignment::ALIGN_NORMAL;

static_field<
	android::text::Layout_::Alignment::J2CPP_CLASS_NAME,
	android::text::Layout_::Alignment::J2CPP_FIELD_NAME(2),
	android::text::Layout_::Alignment::J2CPP_FIELD_SIGNATURE(2),
	local_ref< android::text::Layout_::Alignment >
> android::text::Layout_::Alignment::ALIGN_OPPOSITE;


J2CPP_DEFINE_CLASS(android::text::Layout_::Alignment,"android/text/Layout$Alignment")
J2CPP_DEFINE_METHOD(android::text::Layout_::Alignment,0,"values","()[android.text.Layout.Alignment")
J2CPP_DEFINE_METHOD(android::text::Layout_::Alignment,1,"valueOf","(Ljava/lang/String;)Landroid/text/Layout$Alignment;")
J2CPP_DEFINE_METHOD(android::text::Layout_::Alignment,2,"<init>","(Ljava/lang/String;I)V")
J2CPP_DEFINE_METHOD(android::text::Layout_::Alignment,3,"<clinit>","()V")
J2CPP_DEFINE_FIELD(android::text::Layout_::Alignment,0,"ALIGN_CENTER","Landroid/text/Layout$Alignment;")
J2CPP_DEFINE_FIELD(android::text::Layout_::Alignment,1,"ALIGN_NORMAL","Landroid/text/Layout$Alignment;")
J2CPP_DEFINE_FIELD(android::text::Layout_::Alignment,2,"ALIGN_OPPOSITE","Landroid/text/Layout$Alignment;")
J2CPP_DEFINE_FIELD(android::text::Layout_::Alignment,3,"$VALUES","[android.text.Layout.Alignment")


template <>
local_ref< android::text::Layout > create< android::text::Layout>(local_ref< java::lang::CharSequence > const &a0, local_ref< android::text::TextPaint > const &a1, cpp_int const &a2, local_ref< android::text::Layout_::Alignment > const &a3, cpp_float const &a4, cpp_float const &a5)
{
	return local_ref< android::text::Layout >(
		environment::get().get_jenv()->NewObject(
			get_class<android::text::Layout::J2CPP_CLASS_NAME>(),
			get_method_id<android::text::Layout::J2CPP_CLASS_NAME, android::text::Layout::J2CPP_METHOD_NAME(0), android::text::Layout::J2CPP_METHOD_SIGNATURE(0), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype(), a3.get_jtype(), a4.get_jtype(), a5.get_jtype()
		)
	);
}

cpp_float android::text::Layout::getDesiredWidth(local_ref< java::lang::CharSequence > const &a0, local_ref< android::text::TextPaint > const &a1)
{
	return cpp_float(
		environment::get().get_jenv()->CallStaticFloatMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), true>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_float android::text::Layout::getDesiredWidth(local_ref< java::lang::CharSequence > const &a0, cpp_int const &a1, cpp_int const &a2, local_ref< android::text::TextPaint > const &a3)
{
	return cpp_float(
		environment::get().get_jenv()->CallStaticFloatMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), true>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype(), a3.get_jtype()
		)
	);
}

void android::text::Layout::draw(local_ref< android::graphics::Canvas > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>(),
			a0.get_jtype()
		)
	);
}

void android::text::Layout::draw(local_ref< android::graphics::Canvas > const &a0, local_ref< android::graphics::Path > const &a1, local_ref< android::graphics::Paint > const &a2, cpp_int const &a3)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype(), a3.get_jtype()
		)
	);
}

local_ref< java::lang::CharSequence > android::text::Layout::getText()
{
	return local_ref< java::lang::CharSequence >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>()
		)
	);
}

local_ref< android::text::TextPaint > android::text::Layout::getPaint()
{
	return local_ref< android::text::TextPaint >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>()
		)
	);
}

cpp_int android::text::Layout::getWidth()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(7), J2CPP_METHOD_SIGNATURE(7), false>()
		)
	);
}

cpp_int android::text::Layout::getEllipsizedWidth()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(8), J2CPP_METHOD_SIGNATURE(8), false>()
		)
	);
}

void android::text::Layout::increaseWidthTo(cpp_int const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(9), J2CPP_METHOD_SIGNATURE(9), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int android::text::Layout::getHeight()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(10), J2CPP_METHOD_SIGNATURE(10), false>()
		)
	);
}

local_ref< android::text::Layout_::Alignment > android::text::Layout::getAlignment()
{
	return local_ref< android::text::Layout_::Alignment >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(11), J2CPP_METHOD_SIGNATURE(11), false>()
		)
	);
}

cpp_float android::text::Layout::getSpacingMultiplier()
{
	return cpp_float(
		environment::get().get_jenv()->CallFloatMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(12), J2CPP_METHOD_SIGNATURE(12), false>()
		)
	);
}

cpp_float android::text::Layout::getSpacingAdd()
{
	return cpp_float(
		environment::get().get_jenv()->CallFloatMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(13), J2CPP_METHOD_SIGNATURE(13), false>()
		)
	);
}

cpp_int android::text::Layout::getLineCount()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(14), J2CPP_METHOD_SIGNATURE(14), false>()
		)
	);
}

cpp_int android::text::Layout::getLineBounds(cpp_int const &a0, local_ref< android::graphics::Rect > const &a1)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(15), J2CPP_METHOD_SIGNATURE(15), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_int android::text::Layout::getLineTop(cpp_int const &a0)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(16), J2CPP_METHOD_SIGNATURE(16), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int android::text::Layout::getLineDescent(cpp_int const &a0)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(17), J2CPP_METHOD_SIGNATURE(17), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int android::text::Layout::getLineStart(cpp_int const &a0)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(18), J2CPP_METHOD_SIGNATURE(18), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int android::text::Layout::getParagraphDirection(cpp_int const &a0)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(19), J2CPP_METHOD_SIGNATURE(19), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean android::text::Layout::getLineContainsTab(cpp_int const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(20), J2CPP_METHOD_SIGNATURE(20), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< android::text::Layout_::Directions > android::text::Layout::getLineDirections(cpp_int const &a0)
{
	return local_ref< android::text::Layout_::Directions >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(21), J2CPP_METHOD_SIGNATURE(21), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int android::text::Layout::getTopPadding()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(22), J2CPP_METHOD_SIGNATURE(22), false>()
		)
	);
}

cpp_int android::text::Layout::getBottomPadding()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(23), J2CPP_METHOD_SIGNATURE(23), false>()
		)
	);
}

cpp_float android::text::Layout::getPrimaryHorizontal(cpp_int const &a0)
{
	return cpp_float(
		environment::get().get_jenv()->CallFloatMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(24), J2CPP_METHOD_SIGNATURE(24), false>(),
			a0.get_jtype()
		)
	);
}

cpp_float android::text::Layout::getSecondaryHorizontal(cpp_int const &a0)
{
	return cpp_float(
		environment::get().get_jenv()->CallFloatMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(25), J2CPP_METHOD_SIGNATURE(25), false>(),
			a0.get_jtype()
		)
	);
}

cpp_float android::text::Layout::getLineLeft(cpp_int const &a0)
{
	return cpp_float(
		environment::get().get_jenv()->CallFloatMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(26), J2CPP_METHOD_SIGNATURE(26), false>(),
			a0.get_jtype()
		)
	);
}

cpp_float android::text::Layout::getLineRight(cpp_int const &a0)
{
	return cpp_float(
		environment::get().get_jenv()->CallFloatMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(27), J2CPP_METHOD_SIGNATURE(27), false>(),
			a0.get_jtype()
		)
	);
}

cpp_float android::text::Layout::getLineMax(cpp_int const &a0)
{
	return cpp_float(
		environment::get().get_jenv()->CallFloatMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(28), J2CPP_METHOD_SIGNATURE(28), false>(),
			a0.get_jtype()
		)
	);
}

cpp_float android::text::Layout::getLineWidth(cpp_int const &a0)
{
	return cpp_float(
		environment::get().get_jenv()->CallFloatMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(29), J2CPP_METHOD_SIGNATURE(29), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int android::text::Layout::getLineForVertical(cpp_int const &a0)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(30), J2CPP_METHOD_SIGNATURE(30), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int android::text::Layout::getLineForOffset(cpp_int const &a0)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(31), J2CPP_METHOD_SIGNATURE(31), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int android::text::Layout::getOffsetForHorizontal(cpp_int const &a0, cpp_float const &a1)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(32), J2CPP_METHOD_SIGNATURE(32), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_int android::text::Layout::getLineEnd(cpp_int const &a0)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(33), J2CPP_METHOD_SIGNATURE(33), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int android::text::Layout::getLineVisibleEnd(cpp_int const &a0)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(34), J2CPP_METHOD_SIGNATURE(34), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int android::text::Layout::getLineBottom(cpp_int const &a0)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(35), J2CPP_METHOD_SIGNATURE(35), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int android::text::Layout::getLineBaseline(cpp_int const &a0)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(36), J2CPP_METHOD_SIGNATURE(36), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int android::text::Layout::getLineAscent(cpp_int const &a0)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(37), J2CPP_METHOD_SIGNATURE(37), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int android::text::Layout::getOffsetToLeftOf(cpp_int const &a0)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(38), J2CPP_METHOD_SIGNATURE(38), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int android::text::Layout::getOffsetToRightOf(cpp_int const &a0)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(39), J2CPP_METHOD_SIGNATURE(39), false>(),
			a0.get_jtype()
		)
	);
}

void android::text::Layout::getCursorPath(cpp_int const &a0, local_ref< android::graphics::Path > const &a1, local_ref< java::lang::CharSequence > const &a2)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(40), J2CPP_METHOD_SIGNATURE(40), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

void android::text::Layout::getSelectionPath(cpp_int const &a0, cpp_int const &a1, local_ref< android::graphics::Path > const &a2)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(41), J2CPP_METHOD_SIGNATURE(41), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

local_ref< android::text::Layout_::Alignment > android::text::Layout::getParagraphAlignment(cpp_int const &a0)
{
	return local_ref< android::text::Layout_::Alignment >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(42), J2CPP_METHOD_SIGNATURE(42), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int android::text::Layout::getParagraphLeft(cpp_int const &a0)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(43), J2CPP_METHOD_SIGNATURE(43), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int android::text::Layout::getParagraphRight(cpp_int const &a0)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(44), J2CPP_METHOD_SIGNATURE(44), false>(),
			a0.get_jtype()
		)
	);
}


cpp_int android::text::Layout::getEllipsisStart(cpp_int const &a0)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(46), J2CPP_METHOD_SIGNATURE(46), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int android::text::Layout::getEllipsisCount(cpp_int const &a0)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(47), J2CPP_METHOD_SIGNATURE(47), false>(),
			a0.get_jtype()
		)
	);
}


static_field<
	android::text::Layout::J2CPP_CLASS_NAME,
	android::text::Layout::J2CPP_FIELD_NAME(0),
	android::text::Layout::J2CPP_FIELD_SIGNATURE(0),
	cpp_int
> android::text::Layout::DIR_LEFT_TO_RIGHT;

static_field<
	android::text::Layout::J2CPP_CLASS_NAME,
	android::text::Layout::J2CPP_FIELD_NAME(1),
	android::text::Layout::J2CPP_FIELD_SIGNATURE(1),
	cpp_int
> android::text::Layout::DIR_RIGHT_TO_LEFT;


J2CPP_DEFINE_CLASS(android::text::Layout,"android/text/Layout")
J2CPP_DEFINE_METHOD(android::text::Layout,0,"<init>","(Ljava/lang/CharSequence;Landroid/text/TextPaint;ILandroid/text/Layout$Alignment;FF)V")
J2CPP_DEFINE_METHOD(android::text::Layout,1,"getDesiredWidth","(Ljava/lang/CharSequence;Landroid/text/TextPaint;)F")
J2CPP_DEFINE_METHOD(android::text::Layout,2,"getDesiredWidth","(Ljava/lang/CharSequence;IILandroid/text/TextPaint;)F")
J2CPP_DEFINE_METHOD(android::text::Layout,3,"draw","(Landroid/graphics/Canvas;)V")
J2CPP_DEFINE_METHOD(android::text::Layout,4,"draw","(Landroid/graphics/Canvas;Landroid/graphics/Path;Landroid/graphics/Paint;I)V")
J2CPP_DEFINE_METHOD(android::text::Layout,5,"getText","()Ljava/lang/CharSequence;")
J2CPP_DEFINE_METHOD(android::text::Layout,6,"getPaint","()Landroid/text/TextPaint;")
J2CPP_DEFINE_METHOD(android::text::Layout,7,"getWidth","()I")
J2CPP_DEFINE_METHOD(android::text::Layout,8,"getEllipsizedWidth","()I")
J2CPP_DEFINE_METHOD(android::text::Layout,9,"increaseWidthTo","(I)V")
J2CPP_DEFINE_METHOD(android::text::Layout,10,"getHeight","()I")
J2CPP_DEFINE_METHOD(android::text::Layout,11,"getAlignment","()Landroid/text/Layout$Alignment;")
J2CPP_DEFINE_METHOD(android::text::Layout,12,"getSpacingMultiplier","()F")
J2CPP_DEFINE_METHOD(android::text::Layout,13,"getSpacingAdd","()F")
J2CPP_DEFINE_METHOD(android::text::Layout,14,"getLineCount","()I")
J2CPP_DEFINE_METHOD(android::text::Layout,15,"getLineBounds","(ILandroid/graphics/Rect;)I")
J2CPP_DEFINE_METHOD(android::text::Layout,16,"getLineTop","(I)I")
J2CPP_DEFINE_METHOD(android::text::Layout,17,"getLineDescent","(I)I")
J2CPP_DEFINE_METHOD(android::text::Layout,18,"getLineStart","(I)I")
J2CPP_DEFINE_METHOD(android::text::Layout,19,"getParagraphDirection","(I)I")
J2CPP_DEFINE_METHOD(android::text::Layout,20,"getLineContainsTab","(I)Z")
J2CPP_DEFINE_METHOD(android::text::Layout,21,"getLineDirections","(I)Landroid/text/Layout$Directions;")
J2CPP_DEFINE_METHOD(android::text::Layout,22,"getTopPadding","()I")
J2CPP_DEFINE_METHOD(android::text::Layout,23,"getBottomPadding","()I")
J2CPP_DEFINE_METHOD(android::text::Layout,24,"getPrimaryHorizontal","(I)F")
J2CPP_DEFINE_METHOD(android::text::Layout,25,"getSecondaryHorizontal","(I)F")
J2CPP_DEFINE_METHOD(android::text::Layout,26,"getLineLeft","(I)F")
J2CPP_DEFINE_METHOD(android::text::Layout,27,"getLineRight","(I)F")
J2CPP_DEFINE_METHOD(android::text::Layout,28,"getLineMax","(I)F")
J2CPP_DEFINE_METHOD(android::text::Layout,29,"getLineWidth","(I)F")
J2CPP_DEFINE_METHOD(android::text::Layout,30,"getLineForVertical","(I)I")
J2CPP_DEFINE_METHOD(android::text::Layout,31,"getLineForOffset","(I)I")
J2CPP_DEFINE_METHOD(android::text::Layout,32,"getOffsetForHorizontal","(IF)I")
J2CPP_DEFINE_METHOD(android::text::Layout,33,"getLineEnd","(I)I")
J2CPP_DEFINE_METHOD(android::text::Layout,34,"getLineVisibleEnd","(I)I")
J2CPP_DEFINE_METHOD(android::text::Layout,35,"getLineBottom","(I)I")
J2CPP_DEFINE_METHOD(android::text::Layout,36,"getLineBaseline","(I)I")
J2CPP_DEFINE_METHOD(android::text::Layout,37,"getLineAscent","(I)I")
J2CPP_DEFINE_METHOD(android::text::Layout,38,"getOffsetToLeftOf","(I)I")
J2CPP_DEFINE_METHOD(android::text::Layout,39,"getOffsetToRightOf","(I)I")
J2CPP_DEFINE_METHOD(android::text::Layout,40,"getCursorPath","(ILandroid/graphics/Path;Ljava/lang/CharSequence;)V")
J2CPP_DEFINE_METHOD(android::text::Layout,41,"getSelectionPath","(IILandroid/graphics/Path;)V")
J2CPP_DEFINE_METHOD(android::text::Layout,42,"getParagraphAlignment","(I)Landroid/text/Layout$Alignment;")
J2CPP_DEFINE_METHOD(android::text::Layout,43,"getParagraphLeft","(I)I")
J2CPP_DEFINE_METHOD(android::text::Layout,44,"getParagraphRight","(I)I")
J2CPP_DEFINE_METHOD(android::text::Layout,45,"isSpanned","()Z")
J2CPP_DEFINE_METHOD(android::text::Layout,46,"getEllipsisStart","(I)I")
J2CPP_DEFINE_METHOD(android::text::Layout,47,"getEllipsisCount","(I)I")
J2CPP_DEFINE_FIELD(android::text::Layout,0,"DIR_LEFT_TO_RIGHT","I")
J2CPP_DEFINE_FIELD(android::text::Layout,1,"DIR_RIGHT_TO_LEFT","I")

} //namespace j2cpp

#endif //J2CPP_ANDROID_TEXT_LAYOUT_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
