/*================================================================================
  code generated by: java2cpp
  class: android.test.ProviderTestCase
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_TEST_PROVIDERTESTCASE_HPP_DECL
#define J2CPP_ANDROID_TEST_PROVIDERTESTCASE_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace lang { class Class; } } }
namespace j2cpp { namespace android { namespace content { class ContentProvider; } } }
namespace j2cpp { namespace android { namespace content { class ContentResolver; } } }
namespace j2cpp { namespace android { namespace content { class Context; } } }
namespace j2cpp { namespace android { namespace test { namespace mock { class MockContentResolver; } } } }
namespace j2cpp { namespace android { namespace test { class IsolatedContext; } } }


#include <android/content/ContentProvider.hpp>
#include <android/content/ContentResolver.hpp>
#include <android/content/Context.hpp>
#include <android/test/IsolatedContext.hpp>
#include <android/test/mock/MockContentResolver.hpp>
#include <java/lang/Class.hpp>
#include <java/lang/String.hpp>


namespace j2cpp {

namespace android { namespace test {

	class ProviderTestCase;
	class ProviderTestCase
		: public cpp_object<ProviderTestCase>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)

		ProviderTestCase(jobject jobj)
		: cpp_object<ProviderTestCase>(jobj)
		{
		}

		local_ref< android::content::ContentProvider > getProvider();
		local_ref< android::test::mock::MockContentResolver > getMockContentResolver();
		local_ref< android::test::IsolatedContext > getMockContext();
		static local_ref< android::content::ContentResolver > newResolverWithContentProviderFromSql(local_ref< android::content::Context > const&, local_ref< java::lang::Class > const&, local_ref< java::lang::String > const&, local_ref< java::lang::String > const&, cpp_int const&, local_ref< java::lang::String > const&);
	}; //class ProviderTestCase

} //namespace test
} //namespace android


} //namespace j2cpp

#endif //J2CPP_ANDROID_TEST_PROVIDERTESTCASE_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_TEST_PROVIDERTESTCASE_HPP_IMPL
#define J2CPP_ANDROID_TEST_PROVIDERTESTCASE_HPP_IMPL

namespace j2cpp {


template <>
local_ref< android::test::ProviderTestCase > create< android::test::ProviderTestCase>(local_ref< java::lang::Class > const &a0, local_ref< java::lang::String > const &a1)
{
	return local_ref< android::test::ProviderTestCase >(
		environment::get().get_jenv()->NewObject(
			get_class<android::test::ProviderTestCase::J2CPP_CLASS_NAME>(),
			get_method_id<android::test::ProviderTestCase::J2CPP_CLASS_NAME, android::test::ProviderTestCase::J2CPP_METHOD_NAME(0), android::test::ProviderTestCase::J2CPP_METHOD_SIGNATURE(0), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< android::content::ContentProvider > android::test::ProviderTestCase::getProvider()
{
	return local_ref< android::content::ContentProvider >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), false>()
		)
	);
}


local_ref< android::test::mock::MockContentResolver > android::test::ProviderTestCase::getMockContentResolver()
{
	return local_ref< android::test::mock::MockContentResolver >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>()
		)
	);
}

local_ref< android::test::IsolatedContext > android::test::ProviderTestCase::getMockContext()
{
	return local_ref< android::test::IsolatedContext >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>()
		)
	);
}

local_ref< android::content::ContentResolver > android::test::ProviderTestCase::newResolverWithContentProviderFromSql(local_ref< android::content::Context > const &a0, local_ref< java::lang::Class > const &a1, local_ref< java::lang::String > const &a2, local_ref< java::lang::String > const &a3, cpp_int const &a4, local_ref< java::lang::String > const &a5)
{
	return local_ref< android::content::ContentResolver >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), true>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype(), a3.get_jtype(), a4.get_jtype(), a5.get_jtype()
		)
	);
}


J2CPP_DEFINE_CLASS(android::test::ProviderTestCase,"android/test/ProviderTestCase")
J2CPP_DEFINE_METHOD(android::test::ProviderTestCase,0,"<init>","(Ljava/lang/Class;Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(android::test::ProviderTestCase,1,"getProvider","()Landroid/content/ContentProvider;")
J2CPP_DEFINE_METHOD(android::test::ProviderTestCase,2,"setUp","()V")
J2CPP_DEFINE_METHOD(android::test::ProviderTestCase,3,"getMockContentResolver","()Landroid/test/mock/MockContentResolver;")
J2CPP_DEFINE_METHOD(android::test::ProviderTestCase,4,"getMockContext","()Landroid/test/IsolatedContext;")
J2CPP_DEFINE_METHOD(android::test::ProviderTestCase,5,"newResolverWithContentProviderFromSql","(Landroid/content/Context;Ljava/lang/Class;Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;)Landroid/content/ContentResolver;")

} //namespace j2cpp

#endif //J2CPP_ANDROID_TEST_PROVIDERTESTCASE_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
