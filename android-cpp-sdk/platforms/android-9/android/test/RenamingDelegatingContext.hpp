/*================================================================================
  code generated by: java2cpp
  class: android.test.RenamingDelegatingContext
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_TEST_RENAMINGDELEGATINGCONTEXT_HPP_DECL
#define J2CPP_ANDROID_TEST_RENAMINGDELEGATINGCONTEXT_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace lang { class Class; } } }
namespace j2cpp { namespace java { namespace io { class FileInputStream; } } }
namespace j2cpp { namespace java { namespace io { class File; } } }
namespace j2cpp { namespace java { namespace io { class FileOutputStream; } } }
namespace j2cpp { namespace android { namespace content { class ContentProvider; } } }
namespace j2cpp { namespace android { namespace content { class Context; } } }
namespace j2cpp { namespace android { namespace database { namespace sqlite { class SQLiteDatabase; } } } }
namespace j2cpp { namespace android { namespace database { namespace sqlite { namespace SQLiteDatabase_ { class CursorFactory; } } } } }


#include <android/content/ContentProvider.hpp>
#include <android/content/Context.hpp>
#include <android/database/sqlite/SQLiteDatabase.hpp>
#include <java/io/File.hpp>
#include <java/io/FileInputStream.hpp>
#include <java/io/FileOutputStream.hpp>
#include <java/lang/Class.hpp>
#include <java/lang/String.hpp>


namespace j2cpp {

namespace android { namespace test {

	class RenamingDelegatingContext;
	class RenamingDelegatingContext
		: public cpp_object<RenamingDelegatingContext>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_METHOD(12)
		J2CPP_DECLARE_METHOD(13)
		J2CPP_DECLARE_METHOD(14)
		J2CPP_DECLARE_METHOD(15)

		RenamingDelegatingContext(jobject jobj)
		: cpp_object<RenamingDelegatingContext>(jobj)
		{
		}

		static local_ref< android::content::ContentProvider > providerWithRenamedContext(local_ref< java::lang::Class > const&, local_ref< android::content::Context > const&, local_ref< java::lang::String > const&);
		static local_ref< android::content::ContentProvider > providerWithRenamedContext(local_ref< java::lang::Class > const&, local_ref< android::content::Context > const&, local_ref< java::lang::String > const&, cpp_boolean const&);
		void makeExistingFilesAndDbsAccessible();
		local_ref< java::lang::String > getDatabasePrefix();
		local_ref< android::database::sqlite::SQLiteDatabase > openOrCreateDatabase(local_ref< java::lang::String > const&, cpp_int const&, local_ref< android::database::sqlite::SQLiteDatabase_::CursorFactory > const&);
		cpp_boolean deleteDatabase(local_ref< java::lang::String > const&);
		local_ref< java::io::File > getDatabasePath(local_ref< java::lang::String > const&);
		local_ref< cpp_object_array<java::lang::String, 1> > databaseList();
		local_ref< java::io::FileInputStream > openFileInput(local_ref< java::lang::String > const&);
		local_ref< java::io::FileOutputStream > openFileOutput(local_ref< java::lang::String > const&, cpp_int const&);
		local_ref< java::io::File > getFileStreamPath(local_ref< java::lang::String > const&);
		cpp_boolean deleteFile(local_ref< java::lang::String > const&);
		local_ref< cpp_object_array<java::lang::String, 1> > fileList();
		local_ref< java::io::File > getCacheDir();
	}; //class RenamingDelegatingContext

} //namespace test
} //namespace android


} //namespace j2cpp

#endif //J2CPP_ANDROID_TEST_RENAMINGDELEGATINGCONTEXT_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_TEST_RENAMINGDELEGATINGCONTEXT_HPP_IMPL
#define J2CPP_ANDROID_TEST_RENAMINGDELEGATINGCONTEXT_HPP_IMPL

namespace j2cpp {


template <>
local_ref< android::test::RenamingDelegatingContext > create< android::test::RenamingDelegatingContext>(local_ref< android::content::Context > const &a0, local_ref< java::lang::String > const &a1)
{
	return local_ref< android::test::RenamingDelegatingContext >(
		environment::get().get_jenv()->NewObject(
			get_class<android::test::RenamingDelegatingContext::J2CPP_CLASS_NAME>(),
			get_method_id<android::test::RenamingDelegatingContext::J2CPP_CLASS_NAME, android::test::RenamingDelegatingContext::J2CPP_METHOD_NAME(0), android::test::RenamingDelegatingContext::J2CPP_METHOD_SIGNATURE(0), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

template <>
local_ref< android::test::RenamingDelegatingContext > create< android::test::RenamingDelegatingContext>(local_ref< android::content::Context > const &a0, local_ref< android::content::Context > const &a1, local_ref< java::lang::String > const &a2)
{
	return local_ref< android::test::RenamingDelegatingContext >(
		environment::get().get_jenv()->NewObject(
			get_class<android::test::RenamingDelegatingContext::J2CPP_CLASS_NAME>(),
			get_method_id<android::test::RenamingDelegatingContext::J2CPP_CLASS_NAME, android::test::RenamingDelegatingContext::J2CPP_METHOD_NAME(1), android::test::RenamingDelegatingContext::J2CPP_METHOD_SIGNATURE(1), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

local_ref< android::content::ContentProvider > android::test::RenamingDelegatingContext::providerWithRenamedContext(local_ref< java::lang::Class > const &a0, local_ref< android::content::Context > const &a1, local_ref< java::lang::String > const &a2)
{
	return local_ref< android::content::ContentProvider >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), true>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

local_ref< android::content::ContentProvider > android::test::RenamingDelegatingContext::providerWithRenamedContext(local_ref< java::lang::Class > const &a0, local_ref< android::content::Context > const &a1, local_ref< java::lang::String > const &a2, cpp_boolean const &a3)
{
	return local_ref< android::content::ContentProvider >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), true>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype(), a3.get_jtype()
		)
	);
}

void android::test::RenamingDelegatingContext::makeExistingFilesAndDbsAccessible()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>()
		)
	);
}

local_ref< java::lang::String > android::test::RenamingDelegatingContext::getDatabasePrefix()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>()
		)
	);
}

local_ref< android::database::sqlite::SQLiteDatabase > android::test::RenamingDelegatingContext::openOrCreateDatabase(local_ref< java::lang::String > const &a0, cpp_int const &a1, local_ref< android::database::sqlite::SQLiteDatabase_::CursorFactory > const &a2)
{
	return local_ref< android::database::sqlite::SQLiteDatabase >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

cpp_boolean android::test::RenamingDelegatingContext::deleteDatabase(local_ref< java::lang::String > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(7), J2CPP_METHOD_SIGNATURE(7), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::io::File > android::test::RenamingDelegatingContext::getDatabasePath(local_ref< java::lang::String > const &a0)
{
	return local_ref< java::io::File >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(8), J2CPP_METHOD_SIGNATURE(8), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< cpp_object_array<java::lang::String, 1> > android::test::RenamingDelegatingContext::databaseList()
{
	return local_ref< cpp_object_array<java::lang::String, 1> >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(9), J2CPP_METHOD_SIGNATURE(9), false>()
		)
	);
}

local_ref< java::io::FileInputStream > android::test::RenamingDelegatingContext::openFileInput(local_ref< java::lang::String > const &a0)
{
	return local_ref< java::io::FileInputStream >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(10), J2CPP_METHOD_SIGNATURE(10), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::io::FileOutputStream > android::test::RenamingDelegatingContext::openFileOutput(local_ref< java::lang::String > const &a0, cpp_int const &a1)
{
	return local_ref< java::io::FileOutputStream >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(11), J2CPP_METHOD_SIGNATURE(11), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< java::io::File > android::test::RenamingDelegatingContext::getFileStreamPath(local_ref< java::lang::String > const &a0)
{
	return local_ref< java::io::File >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(12), J2CPP_METHOD_SIGNATURE(12), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean android::test::RenamingDelegatingContext::deleteFile(local_ref< java::lang::String > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(13), J2CPP_METHOD_SIGNATURE(13), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< cpp_object_array<java::lang::String, 1> > android::test::RenamingDelegatingContext::fileList()
{
	return local_ref< cpp_object_array<java::lang::String, 1> >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(14), J2CPP_METHOD_SIGNATURE(14), false>()
		)
	);
}

local_ref< java::io::File > android::test::RenamingDelegatingContext::getCacheDir()
{
	return local_ref< java::io::File >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(15), J2CPP_METHOD_SIGNATURE(15), false>()
		)
	);
}


J2CPP_DEFINE_CLASS(android::test::RenamingDelegatingContext,"android/test/RenamingDelegatingContext")
J2CPP_DEFINE_METHOD(android::test::RenamingDelegatingContext,0,"<init>","(Landroid/content/Context;Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(android::test::RenamingDelegatingContext,1,"<init>","(Landroid/content/Context;Landroid/content/Context;Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(android::test::RenamingDelegatingContext,2,"providerWithRenamedContext","(Ljava/lang/Class;Landroid/content/Context;Ljava/lang/String;)Landroid/content/ContentProvider;")
J2CPP_DEFINE_METHOD(android::test::RenamingDelegatingContext,3,"providerWithRenamedContext","(Ljava/lang/Class;Landroid/content/Context;Ljava/lang/String;Z)Landroid/content/ContentProvider;")
J2CPP_DEFINE_METHOD(android::test::RenamingDelegatingContext,4,"makeExistingFilesAndDbsAccessible","()V")
J2CPP_DEFINE_METHOD(android::test::RenamingDelegatingContext,5,"getDatabasePrefix","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(android::test::RenamingDelegatingContext,6,"openOrCreateDatabase","(Ljava/lang/String;ILandroid/database/sqlite/SQLiteDatabase$CursorFactory;)Landroid/database/sqlite/SQLiteDatabase;")
J2CPP_DEFINE_METHOD(android::test::RenamingDelegatingContext,7,"deleteDatabase","(Ljava/lang/String;)Z")
J2CPP_DEFINE_METHOD(android::test::RenamingDelegatingContext,8,"getDatabasePath","(Ljava/lang/String;)Ljava/io/File;")
J2CPP_DEFINE_METHOD(android::test::RenamingDelegatingContext,9,"databaseList","()[java.lang.String")
J2CPP_DEFINE_METHOD(android::test::RenamingDelegatingContext,10,"openFileInput","(Ljava/lang/String;)Ljava/io/FileInputStream;")
J2CPP_DEFINE_METHOD(android::test::RenamingDelegatingContext,11,"openFileOutput","(Ljava/lang/String;I)Ljava/io/FileOutputStream;")
J2CPP_DEFINE_METHOD(android::test::RenamingDelegatingContext,12,"getFileStreamPath","(Ljava/lang/String;)Ljava/io/File;")
J2CPP_DEFINE_METHOD(android::test::RenamingDelegatingContext,13,"deleteFile","(Ljava/lang/String;)Z")
J2CPP_DEFINE_METHOD(android::test::RenamingDelegatingContext,14,"fileList","()[java.lang.String")
J2CPP_DEFINE_METHOD(android::test::RenamingDelegatingContext,15,"getCacheDir","()Ljava/io/File;")

} //namespace j2cpp

#endif //J2CPP_ANDROID_TEST_RENAMINGDELEGATINGCONTEXT_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
