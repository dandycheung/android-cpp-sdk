/*================================================================================
  code generated by: java2cpp
  class: android.database.sqlite.SQLiteCursor
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_DATABASE_SQLITE_SQLITECURSOR_HPP_DECL
#define J2CPP_ANDROID_DATABASE_SQLITE_SQLITECURSOR_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace android { namespace database { namespace sqlite { class SQLiteCursorDriver; } } } }
namespace j2cpp { namespace android { namespace database { namespace sqlite { class SQLiteDatabase; } } } }
namespace j2cpp { namespace android { namespace database { namespace sqlite { class SQLiteQuery; } } } }
namespace j2cpp { namespace android { namespace database { class DataSetObserver; } } }
namespace j2cpp { namespace android { namespace database { class CursorWindow; } } }


#include <android/database/CursorWindow.hpp>
#include <android/database/DataSetObserver.hpp>
#include <android/database/sqlite/SQLiteCursorDriver.hpp>
#include <android/database/sqlite/SQLiteDatabase.hpp>
#include <android/database/sqlite/SQLiteQuery.hpp>
#include <java/lang/String.hpp>


namespace j2cpp {

namespace android { namespace database { namespace sqlite {

	class SQLiteCursor;
	class SQLiteCursor
		: public cpp_object<SQLiteCursor>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_METHOD(12)

		SQLiteCursor(jobject jobj)
		: cpp_object<SQLiteCursor>(jobj)
		{
		}

		void registerDataSetObserver(local_ref< android::database::DataSetObserver > const&);
		local_ref< android::database::sqlite::SQLiteDatabase > getDatabase();
		cpp_boolean onMove(cpp_int const&, cpp_int const&);
		cpp_int getCount();
		cpp_int getColumnIndex(local_ref< java::lang::String > const&);
		local_ref< cpp_object_array<java::lang::String, 1> > getColumnNames();
		void deactivate();
		void close();
		cpp_boolean requery();
		void setWindow(local_ref< android::database::CursorWindow > const&);
		void setSelectionArguments(local_ref< cpp_object_array<java::lang::String, 1> > const&);
	}; //class SQLiteCursor

} //namespace sqlite
} //namespace database
} //namespace android


} //namespace j2cpp

#endif //J2CPP_ANDROID_DATABASE_SQLITE_SQLITECURSOR_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_DATABASE_SQLITE_SQLITECURSOR_HPP_IMPL
#define J2CPP_ANDROID_DATABASE_SQLITE_SQLITECURSOR_HPP_IMPL

namespace j2cpp {


template <>
local_ref< android::database::sqlite::SQLiteCursor > create< android::database::sqlite::SQLiteCursor>(local_ref< android::database::sqlite::SQLiteDatabase > const &a0, local_ref< android::database::sqlite::SQLiteCursorDriver > const &a1, local_ref< java::lang::String > const &a2, local_ref< android::database::sqlite::SQLiteQuery > const &a3)
{
	return local_ref< android::database::sqlite::SQLiteCursor >(
		environment::get().get_jenv()->NewObject(
			get_class<android::database::sqlite::SQLiteCursor::J2CPP_CLASS_NAME>(),
			get_method_id<android::database::sqlite::SQLiteCursor::J2CPP_CLASS_NAME, android::database::sqlite::SQLiteCursor::J2CPP_METHOD_NAME(0), android::database::sqlite::SQLiteCursor::J2CPP_METHOD_SIGNATURE(0), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype(), a3.get_jtype()
		)
	);
}

void android::database::sqlite::SQLiteCursor::registerDataSetObserver(local_ref< android::database::DataSetObserver > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< android::database::sqlite::SQLiteDatabase > android::database::sqlite::SQLiteCursor::getDatabase()
{
	return local_ref< android::database::sqlite::SQLiteDatabase >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>()
		)
	);
}

cpp_boolean android::database::sqlite::SQLiteCursor::onMove(cpp_int const &a0, cpp_int const &a1)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_int android::database::sqlite::SQLiteCursor::getCount()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>()
		)
	);
}

cpp_int android::database::sqlite::SQLiteCursor::getColumnIndex(local_ref< java::lang::String > const &a0)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< cpp_object_array<java::lang::String, 1> > android::database::sqlite::SQLiteCursor::getColumnNames()
{
	return local_ref< cpp_object_array<java::lang::String, 1> >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>()
		)
	);
}

void android::database::sqlite::SQLiteCursor::deactivate()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(7), J2CPP_METHOD_SIGNATURE(7), false>()
		)
	);
}

void android::database::sqlite::SQLiteCursor::close()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(8), J2CPP_METHOD_SIGNATURE(8), false>()
		)
	);
}

cpp_boolean android::database::sqlite::SQLiteCursor::requery()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(9), J2CPP_METHOD_SIGNATURE(9), false>()
		)
	);
}

void android::database::sqlite::SQLiteCursor::setWindow(local_ref< android::database::CursorWindow > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(10), J2CPP_METHOD_SIGNATURE(10), false>(),
			a0.get_jtype()
		)
	);
}

void android::database::sqlite::SQLiteCursor::setSelectionArguments(local_ref< cpp_object_array<java::lang::String, 1> > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(11), J2CPP_METHOD_SIGNATURE(11), false>(),
			a0.get_jtype()
		)
	);
}



J2CPP_DEFINE_CLASS(android::database::sqlite::SQLiteCursor,"android/database/sqlite/SQLiteCursor")
J2CPP_DEFINE_METHOD(android::database::sqlite::SQLiteCursor,0,"<init>","(Landroid/database/sqlite/SQLiteDatabase;Landroid/database/sqlite/SQLiteCursorDriver;Ljava/lang/String;Landroid/database/sqlite/SQLiteQuery;)V")
J2CPP_DEFINE_METHOD(android::database::sqlite::SQLiteCursor,1,"registerDataSetObserver","(Landroid/database/DataSetObserver;)V")
J2CPP_DEFINE_METHOD(android::database::sqlite::SQLiteCursor,2,"getDatabase","()Landroid/database/sqlite/SQLiteDatabase;")
J2CPP_DEFINE_METHOD(android::database::sqlite::SQLiteCursor,3,"onMove","(II)Z")
J2CPP_DEFINE_METHOD(android::database::sqlite::SQLiteCursor,4,"getCount","()I")
J2CPP_DEFINE_METHOD(android::database::sqlite::SQLiteCursor,5,"getColumnIndex","(Ljava/lang/String;)I")
J2CPP_DEFINE_METHOD(android::database::sqlite::SQLiteCursor,6,"getColumnNames","()[java.lang.String")
J2CPP_DEFINE_METHOD(android::database::sqlite::SQLiteCursor,7,"deactivate","()V")
J2CPP_DEFINE_METHOD(android::database::sqlite::SQLiteCursor,8,"close","()V")
J2CPP_DEFINE_METHOD(android::database::sqlite::SQLiteCursor,9,"requery","()Z")
J2CPP_DEFINE_METHOD(android::database::sqlite::SQLiteCursor,10,"setWindow","(Landroid/database/CursorWindow;)V")
J2CPP_DEFINE_METHOD(android::database::sqlite::SQLiteCursor,11,"setSelectionArguments","([java.lang.String)V")
J2CPP_DEFINE_METHOD(android::database::sqlite::SQLiteCursor,12,"finalize","()V")

} //namespace j2cpp

#endif //J2CPP_ANDROID_DATABASE_SQLITE_SQLITECURSOR_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
