/*================================================================================
  code generated by: java2cpp
  class: java.security.PermissionCollection
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_SECURITY_PERMISSIONCOLLECTION_HPP_DECL
#define J2CPP_JAVA_SECURITY_PERMISSIONCOLLECTION_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace security { class Permission; } } }
namespace j2cpp { namespace java { namespace util { class Enumeration; } } }


#include <java/lang/String.hpp>
#include <java/security/Permission.hpp>
#include <java/util/Enumeration.hpp>


namespace j2cpp {

namespace java { namespace security {

	class PermissionCollection;
	class PermissionCollection
		: public cpp_object<PermissionCollection>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)

		PermissionCollection(jobject jobj)
		: cpp_object<PermissionCollection>(jobj)
		{
		}

		void add(local_ref< java::security::Permission > const&);
		local_ref< java::util::Enumeration > elements();
		cpp_boolean implies(local_ref< java::security::Permission > const&);
		cpp_boolean isReadOnly();
		void setReadOnly();
		local_ref< java::lang::String > toString();
	}; //class PermissionCollection

} //namespace security
} //namespace java


} //namespace j2cpp

#endif //J2CPP_JAVA_SECURITY_PERMISSIONCOLLECTION_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_SECURITY_PERMISSIONCOLLECTION_HPP_IMPL
#define J2CPP_JAVA_SECURITY_PERMISSIONCOLLECTION_HPP_IMPL

namespace j2cpp {


template <>
local_ref< java::security::PermissionCollection > create< java::security::PermissionCollection>()
{
	return local_ref< java::security::PermissionCollection >(
		environment::get().get_jenv()->NewObject(
			get_class<java::security::PermissionCollection::J2CPP_CLASS_NAME>(),
			get_method_id<java::security::PermissionCollection::J2CPP_CLASS_NAME, java::security::PermissionCollection::J2CPP_METHOD_NAME(0), java::security::PermissionCollection::J2CPP_METHOD_SIGNATURE(0), false>()
		)
	);
}

void java::security::PermissionCollection::add(local_ref< java::security::Permission > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::util::Enumeration > java::security::PermissionCollection::elements()
{
	return local_ref< java::util::Enumeration >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>()
		)
	);
}

cpp_boolean java::security::PermissionCollection::implies(local_ref< java::security::Permission > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean java::security::PermissionCollection::isReadOnly()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>()
		)
	);
}

void java::security::PermissionCollection::setReadOnly()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>()
		)
	);
}

local_ref< java::lang::String > java::security::PermissionCollection::toString()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>()
		)
	);
}


J2CPP_DEFINE_CLASS(java::security::PermissionCollection,"java/security/PermissionCollection")
J2CPP_DEFINE_METHOD(java::security::PermissionCollection,0,"<init>","()V")
J2CPP_DEFINE_METHOD(java::security::PermissionCollection,1,"add","(Ljava/security/Permission;)V")
J2CPP_DEFINE_METHOD(java::security::PermissionCollection,2,"elements","()Ljava/util/Enumeration;")
J2CPP_DEFINE_METHOD(java::security::PermissionCollection,3,"implies","(Ljava/security/Permission;)Z")
J2CPP_DEFINE_METHOD(java::security::PermissionCollection,4,"isReadOnly","()Z")
J2CPP_DEFINE_METHOD(java::security::PermissionCollection,5,"setReadOnly","()V")
J2CPP_DEFINE_METHOD(java::security::PermissionCollection,6,"toString","()Ljava/lang/String;")

} //namespace j2cpp

#endif //J2CPP_JAVA_SECURITY_PERMISSIONCOLLECTION_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
