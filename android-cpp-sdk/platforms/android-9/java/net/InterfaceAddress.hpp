/*================================================================================
  code generated by: java2cpp
  class: java.net.InterfaceAddress
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_NET_INTERFACEADDRESS_HPP_DECL
#define J2CPP_JAVA_NET_INTERFACEADDRESS_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace net { class InetAddress; } } }


#include <java/lang/Object.hpp>
#include <java/lang/String.hpp>
#include <java/net/InetAddress.hpp>


namespace j2cpp {

namespace java { namespace net {

	class InterfaceAddress;
	class InterfaceAddress
		: public cpp_object<InterfaceAddress>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)

		InterfaceAddress(jobject jobj)
		: cpp_object<InterfaceAddress>(jobj)
		{
		}

		cpp_boolean equals(local_ref< java::lang::Object > const&);
		cpp_int hashCode();
		local_ref< java::lang::String > toString();
		local_ref< java::net::InetAddress > getAddress();
		local_ref< java::net::InetAddress > getBroadcast();
		cpp_short getNetworkPrefixLength();
	}; //class InterfaceAddress

} //namespace net
} //namespace java


} //namespace j2cpp

#endif //J2CPP_JAVA_NET_INTERFACEADDRESS_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_NET_INTERFACEADDRESS_HPP_IMPL
#define J2CPP_JAVA_NET_INTERFACEADDRESS_HPP_IMPL

namespace j2cpp {


template <>
local_ref< java::net::InterfaceAddress > create< java::net::InterfaceAddress>()
{
	return local_ref< java::net::InterfaceAddress >(
		environment::get().get_jenv()->NewObject(
			get_class<java::net::InterfaceAddress::J2CPP_CLASS_NAME>(),
			get_method_id<java::net::InterfaceAddress::J2CPP_CLASS_NAME, java::net::InterfaceAddress::J2CPP_METHOD_NAME(0), java::net::InterfaceAddress::J2CPP_METHOD_SIGNATURE(0), false>()
		)
	);
}

cpp_boolean java::net::InterfaceAddress::equals(local_ref< java::lang::Object > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int java::net::InterfaceAddress::hashCode()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>()
		)
	);
}

local_ref< java::lang::String > java::net::InterfaceAddress::toString()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>()
		)
	);
}

local_ref< java::net::InetAddress > java::net::InterfaceAddress::getAddress()
{
	return local_ref< java::net::InetAddress >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>()
		)
	);
}

local_ref< java::net::InetAddress > java::net::InterfaceAddress::getBroadcast()
{
	return local_ref< java::net::InetAddress >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>()
		)
	);
}

cpp_short java::net::InterfaceAddress::getNetworkPrefixLength()
{
	return cpp_short(
		environment::get().get_jenv()->CallShortMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>()
		)
	);
}


J2CPP_DEFINE_CLASS(java::net::InterfaceAddress,"java/net/InterfaceAddress")
J2CPP_DEFINE_METHOD(java::net::InterfaceAddress,0,"<init>","()V")
J2CPP_DEFINE_METHOD(java::net::InterfaceAddress,1,"equals","(Ljava/lang/Object;)Z")
J2CPP_DEFINE_METHOD(java::net::InterfaceAddress,2,"hashCode","()I")
J2CPP_DEFINE_METHOD(java::net::InterfaceAddress,3,"toString","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::net::InterfaceAddress,4,"getAddress","()Ljava/net/InetAddress;")
J2CPP_DEFINE_METHOD(java::net::InterfaceAddress,5,"getBroadcast","()Ljava/net/InetAddress;")
J2CPP_DEFINE_METHOD(java::net::InterfaceAddress,6,"getNetworkPrefixLength","()S")

} //namespace j2cpp

#endif //J2CPP_JAVA_NET_INTERFACEADDRESS_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
