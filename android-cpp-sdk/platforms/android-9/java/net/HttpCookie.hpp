/*================================================================================
  code generated by: java2cpp
  class: java.net.HttpCookie
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_NET_HTTPCOOKIE_HPP_DECL
#define J2CPP_JAVA_NET_HTTPCOOKIE_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace util { class List; } } }


#include <java/lang/Object.hpp>
#include <java/lang/String.hpp>
#include <java/util/List.hpp>


namespace j2cpp {

namespace java { namespace net {

	class HttpCookie;
	class HttpCookie
		: public cpp_object<HttpCookie>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_METHOD(12)
		J2CPP_DECLARE_METHOD(13)
		J2CPP_DECLARE_METHOD(14)
		J2CPP_DECLARE_METHOD(15)
		J2CPP_DECLARE_METHOD(16)
		J2CPP_DECLARE_METHOD(17)
		J2CPP_DECLARE_METHOD(18)
		J2CPP_DECLARE_METHOD(19)
		J2CPP_DECLARE_METHOD(20)
		J2CPP_DECLARE_METHOD(21)
		J2CPP_DECLARE_METHOD(22)
		J2CPP_DECLARE_METHOD(23)
		J2CPP_DECLARE_METHOD(24)
		J2CPP_DECLARE_METHOD(25)
		J2CPP_DECLARE_METHOD(26)
		J2CPP_DECLARE_METHOD(27)
		J2CPP_DECLARE_METHOD(28)

		HttpCookie(jobject jobj)
		: cpp_object<HttpCookie>(jobj)
		{
		}

		static cpp_boolean domainMatches(local_ref< java::lang::String > const&, local_ref< java::lang::String > const&);
		static local_ref< java::util::List > parse(local_ref< java::lang::String > const&);
		local_ref< java::lang::String > getComment();
		local_ref< java::lang::String > getCommentURL();
		cpp_boolean getDiscard();
		local_ref< java::lang::String > getDomain();
		cpp_long getMaxAge();
		local_ref< java::lang::String > getName();
		local_ref< java::lang::String > getPath();
		local_ref< java::lang::String > getPortlist();
		cpp_boolean getSecure();
		local_ref< java::lang::String > getValue();
		cpp_int getVersion();
		cpp_boolean hasExpired();
		void setComment(local_ref< java::lang::String > const&);
		void setCommentURL(local_ref< java::lang::String > const&);
		void setDiscard(cpp_boolean const&);
		void setDomain(local_ref< java::lang::String > const&);
		void setMaxAge(cpp_long const&);
		void setPath(local_ref< java::lang::String > const&);
		void setPortlist(local_ref< java::lang::String > const&);
		void setSecure(cpp_boolean const&);
		void setValue(local_ref< java::lang::String > const&);
		void setVersion(cpp_int const&);
		local_ref< java::lang::Object > clone();
		cpp_boolean equals(local_ref< java::lang::Object > const&);
		cpp_int hashCode();
		local_ref< java::lang::String > toString();
	}; //class HttpCookie

} //namespace net
} //namespace java


} //namespace j2cpp

#endif //J2CPP_JAVA_NET_HTTPCOOKIE_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_NET_HTTPCOOKIE_HPP_IMPL
#define J2CPP_JAVA_NET_HTTPCOOKIE_HPP_IMPL

namespace j2cpp {


template <>
local_ref< java::net::HttpCookie > create< java::net::HttpCookie>(local_ref< java::lang::String > const &a0, local_ref< java::lang::String > const &a1)
{
	return local_ref< java::net::HttpCookie >(
		environment::get().get_jenv()->NewObject(
			get_class<java::net::HttpCookie::J2CPP_CLASS_NAME>(),
			get_method_id<java::net::HttpCookie::J2CPP_CLASS_NAME, java::net::HttpCookie::J2CPP_METHOD_NAME(0), java::net::HttpCookie::J2CPP_METHOD_SIGNATURE(0), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_boolean java::net::HttpCookie::domainMatches(local_ref< java::lang::String > const &a0, local_ref< java::lang::String > const &a1)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallStaticBooleanMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), true>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< java::util::List > java::net::HttpCookie::parse(local_ref< java::lang::String > const &a0)
{
	return local_ref< java::util::List >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), true>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::String > java::net::HttpCookie::getComment()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>()
		)
	);
}

local_ref< java::lang::String > java::net::HttpCookie::getCommentURL()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>()
		)
	);
}

cpp_boolean java::net::HttpCookie::getDiscard()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>()
		)
	);
}

local_ref< java::lang::String > java::net::HttpCookie::getDomain()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>()
		)
	);
}

cpp_long java::net::HttpCookie::getMaxAge()
{
	return cpp_long(
		environment::get().get_jenv()->CallLongMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(7), J2CPP_METHOD_SIGNATURE(7), false>()
		)
	);
}

local_ref< java::lang::String > java::net::HttpCookie::getName()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(8), J2CPP_METHOD_SIGNATURE(8), false>()
		)
	);
}

local_ref< java::lang::String > java::net::HttpCookie::getPath()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(9), J2CPP_METHOD_SIGNATURE(9), false>()
		)
	);
}

local_ref< java::lang::String > java::net::HttpCookie::getPortlist()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(10), J2CPP_METHOD_SIGNATURE(10), false>()
		)
	);
}

cpp_boolean java::net::HttpCookie::getSecure()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(11), J2CPP_METHOD_SIGNATURE(11), false>()
		)
	);
}

local_ref< java::lang::String > java::net::HttpCookie::getValue()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(12), J2CPP_METHOD_SIGNATURE(12), false>()
		)
	);
}

cpp_int java::net::HttpCookie::getVersion()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(13), J2CPP_METHOD_SIGNATURE(13), false>()
		)
	);
}

cpp_boolean java::net::HttpCookie::hasExpired()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(14), J2CPP_METHOD_SIGNATURE(14), false>()
		)
	);
}

void java::net::HttpCookie::setComment(local_ref< java::lang::String > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(15), J2CPP_METHOD_SIGNATURE(15), false>(),
			a0.get_jtype()
		)
	);
}

void java::net::HttpCookie::setCommentURL(local_ref< java::lang::String > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(16), J2CPP_METHOD_SIGNATURE(16), false>(),
			a0.get_jtype()
		)
	);
}

void java::net::HttpCookie::setDiscard(cpp_boolean const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(17), J2CPP_METHOD_SIGNATURE(17), false>(),
			a0.get_jtype()
		)
	);
}

void java::net::HttpCookie::setDomain(local_ref< java::lang::String > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(18), J2CPP_METHOD_SIGNATURE(18), false>(),
			a0.get_jtype()
		)
	);
}

void java::net::HttpCookie::setMaxAge(cpp_long const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(19), J2CPP_METHOD_SIGNATURE(19), false>(),
			a0.get_jtype()
		)
	);
}

void java::net::HttpCookie::setPath(local_ref< java::lang::String > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(20), J2CPP_METHOD_SIGNATURE(20), false>(),
			a0.get_jtype()
		)
	);
}

void java::net::HttpCookie::setPortlist(local_ref< java::lang::String > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(21), J2CPP_METHOD_SIGNATURE(21), false>(),
			a0.get_jtype()
		)
	);
}

void java::net::HttpCookie::setSecure(cpp_boolean const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(22), J2CPP_METHOD_SIGNATURE(22), false>(),
			a0.get_jtype()
		)
	);
}

void java::net::HttpCookie::setValue(local_ref< java::lang::String > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(23), J2CPP_METHOD_SIGNATURE(23), false>(),
			a0.get_jtype()
		)
	);
}

void java::net::HttpCookie::setVersion(cpp_int const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(24), J2CPP_METHOD_SIGNATURE(24), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::Object > java::net::HttpCookie::clone()
{
	return local_ref< java::lang::Object >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(25), J2CPP_METHOD_SIGNATURE(25), false>()
		)
	);
}

cpp_boolean java::net::HttpCookie::equals(local_ref< java::lang::Object > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(26), J2CPP_METHOD_SIGNATURE(26), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int java::net::HttpCookie::hashCode()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(27), J2CPP_METHOD_SIGNATURE(27), false>()
		)
	);
}

local_ref< java::lang::String > java::net::HttpCookie::toString()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(28), J2CPP_METHOD_SIGNATURE(28), false>()
		)
	);
}


J2CPP_DEFINE_CLASS(java::net::HttpCookie,"java/net/HttpCookie")
J2CPP_DEFINE_METHOD(java::net::HttpCookie,0,"<init>","(Ljava/lang/String;Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(java::net::HttpCookie,1,"domainMatches","(Ljava/lang/String;Ljava/lang/String;)Z")
J2CPP_DEFINE_METHOD(java::net::HttpCookie,2,"parse","(Ljava/lang/String;)Ljava/util/List;")
J2CPP_DEFINE_METHOD(java::net::HttpCookie,3,"getComment","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::net::HttpCookie,4,"getCommentURL","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::net::HttpCookie,5,"getDiscard","()Z")
J2CPP_DEFINE_METHOD(java::net::HttpCookie,6,"getDomain","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::net::HttpCookie,7,"getMaxAge","()J")
J2CPP_DEFINE_METHOD(java::net::HttpCookie,8,"getName","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::net::HttpCookie,9,"getPath","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::net::HttpCookie,10,"getPortlist","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::net::HttpCookie,11,"getSecure","()Z")
J2CPP_DEFINE_METHOD(java::net::HttpCookie,12,"getValue","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::net::HttpCookie,13,"getVersion","()I")
J2CPP_DEFINE_METHOD(java::net::HttpCookie,14,"hasExpired","()Z")
J2CPP_DEFINE_METHOD(java::net::HttpCookie,15,"setComment","(Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(java::net::HttpCookie,16,"setCommentURL","(Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(java::net::HttpCookie,17,"setDiscard","(Z)V")
J2CPP_DEFINE_METHOD(java::net::HttpCookie,18,"setDomain","(Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(java::net::HttpCookie,19,"setMaxAge","(J)V")
J2CPP_DEFINE_METHOD(java::net::HttpCookie,20,"setPath","(Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(java::net::HttpCookie,21,"setPortlist","(Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(java::net::HttpCookie,22,"setSecure","(Z)V")
J2CPP_DEFINE_METHOD(java::net::HttpCookie,23,"setValue","(Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(java::net::HttpCookie,24,"setVersion","(I)V")
J2CPP_DEFINE_METHOD(java::net::HttpCookie,25,"clone","()Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(java::net::HttpCookie,26,"equals","(Ljava/lang/Object;)Z")
J2CPP_DEFINE_METHOD(java::net::HttpCookie,27,"hashCode","()I")
J2CPP_DEFINE_METHOD(java::net::HttpCookie,28,"toString","()Ljava/lang/String;")

} //namespace j2cpp

#endif //J2CPP_JAVA_NET_HTTPCOOKIE_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
