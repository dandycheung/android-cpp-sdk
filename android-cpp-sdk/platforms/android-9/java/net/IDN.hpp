/*================================================================================
  code generated by: java2cpp
  class: java.net.IDN
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_NET_IDN_HPP_DECL
#define J2CPP_JAVA_NET_IDN_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class String; } } }


#include <java/lang/String.hpp>


namespace j2cpp {

namespace java { namespace net {

	class IDN;
	class IDN
		: public cpp_object<IDN>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_FIELD(0)
		J2CPP_DECLARE_FIELD(1)

		IDN(jobject jobj)
		: cpp_object<IDN>(jobj)
		{
		}

		static local_ref< java::lang::String > toASCII(local_ref< java::lang::String > const&, cpp_int const&);
		static local_ref< java::lang::String > toASCII(local_ref< java::lang::String > const&);
		static local_ref< java::lang::String > toUnicode(local_ref< java::lang::String > const&, cpp_int const&);
		static local_ref< java::lang::String > toUnicode(local_ref< java::lang::String > const&);

		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(0), J2CPP_FIELD_SIGNATURE(0), cpp_int > ALLOW_UNASSIGNED;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(1), J2CPP_FIELD_SIGNATURE(1), cpp_int > USE_STD3_ASCII_RULES;
	}; //class IDN

} //namespace net
} //namespace java


} //namespace j2cpp

#endif //J2CPP_JAVA_NET_IDN_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_NET_IDN_HPP_IMPL
#define J2CPP_JAVA_NET_IDN_HPP_IMPL

namespace j2cpp {


template <>
local_ref< java::net::IDN > create< java::net::IDN>()
{
	return local_ref< java::net::IDN >(
		environment::get().get_jenv()->NewObject(
			get_class<java::net::IDN::J2CPP_CLASS_NAME>(),
			get_method_id<java::net::IDN::J2CPP_CLASS_NAME, java::net::IDN::J2CPP_METHOD_NAME(0), java::net::IDN::J2CPP_METHOD_SIGNATURE(0), false>()
		)
	);
}

local_ref< java::lang::String > java::net::IDN::toASCII(local_ref< java::lang::String > const &a0, cpp_int const &a1)
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), true>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< java::lang::String > java::net::IDN::toASCII(local_ref< java::lang::String > const &a0)
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), true>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::String > java::net::IDN::toUnicode(local_ref< java::lang::String > const &a0, cpp_int const &a1)
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), true>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< java::lang::String > java::net::IDN::toUnicode(local_ref< java::lang::String > const &a0)
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), true>(),
			a0.get_jtype()
		)
	);
}


static_field<
	java::net::IDN::J2CPP_CLASS_NAME,
	java::net::IDN::J2CPP_FIELD_NAME(0),
	java::net::IDN::J2CPP_FIELD_SIGNATURE(0),
	cpp_int
> java::net::IDN::ALLOW_UNASSIGNED;

static_field<
	java::net::IDN::J2CPP_CLASS_NAME,
	java::net::IDN::J2CPP_FIELD_NAME(1),
	java::net::IDN::J2CPP_FIELD_SIGNATURE(1),
	cpp_int
> java::net::IDN::USE_STD3_ASCII_RULES;


J2CPP_DEFINE_CLASS(java::net::IDN,"java/net/IDN")
J2CPP_DEFINE_METHOD(java::net::IDN,0,"<init>","()V")
J2CPP_DEFINE_METHOD(java::net::IDN,1,"toASCII","(Ljava/lang/String;I)Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::net::IDN,2,"toASCII","(Ljava/lang/String;)Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::net::IDN,3,"toUnicode","(Ljava/lang/String;I)Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::net::IDN,4,"toUnicode","(Ljava/lang/String;)Ljava/lang/String;")
J2CPP_DEFINE_FIELD(java::net::IDN,0,"ALLOW_UNASSIGNED","I")
J2CPP_DEFINE_FIELD(java::net::IDN,1,"USE_STD3_ASCII_RULES","I")

} //namespace j2cpp

#endif //J2CPP_JAVA_NET_IDN_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
