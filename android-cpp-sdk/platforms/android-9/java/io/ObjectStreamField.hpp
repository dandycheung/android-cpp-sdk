/*================================================================================
  code generated by: java2cpp
  class: java.io.ObjectStreamField
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_IO_OBJECTSTREAMFIELD_HPP_DECL
#define J2CPP_JAVA_IO_OBJECTSTREAMFIELD_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace lang { class Class; } } }
namespace j2cpp { namespace java { namespace lang { class Object; } } }


#include <java/lang/Class.hpp>
#include <java/lang/Object.hpp>
#include <java/lang/String.hpp>


namespace j2cpp {

namespace java { namespace io {

	class ObjectStreamField;
	class ObjectStreamField
		: public cpp_object<ObjectStreamField>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)

		ObjectStreamField(jobject jobj)
		: cpp_object<ObjectStreamField>(jobj)
		{
		}

		cpp_int compareTo(local_ref< java::lang::Object > const&);
		local_ref< java::lang::String > getName();
		cpp_int getOffset();
		local_ref< java::lang::Class > getType();
		cpp_char getTypeCode();
		local_ref< java::lang::String > getTypeString();
		cpp_boolean isPrimitive();
		local_ref< java::lang::String > toString();
		cpp_boolean isUnshared();
	}; //class ObjectStreamField

} //namespace io
} //namespace java


} //namespace j2cpp

#endif //J2CPP_JAVA_IO_OBJECTSTREAMFIELD_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_IO_OBJECTSTREAMFIELD_HPP_IMPL
#define J2CPP_JAVA_IO_OBJECTSTREAMFIELD_HPP_IMPL

namespace j2cpp {


template <>
local_ref< java::io::ObjectStreamField > create< java::io::ObjectStreamField>(local_ref< java::lang::String > const &a0, local_ref< java::lang::Class > const &a1)
{
	return local_ref< java::io::ObjectStreamField >(
		environment::get().get_jenv()->NewObject(
			get_class<java::io::ObjectStreamField::J2CPP_CLASS_NAME>(),
			get_method_id<java::io::ObjectStreamField::J2CPP_CLASS_NAME, java::io::ObjectStreamField::J2CPP_METHOD_NAME(0), java::io::ObjectStreamField::J2CPP_METHOD_SIGNATURE(0), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

template <>
local_ref< java::io::ObjectStreamField > create< java::io::ObjectStreamField>(local_ref< java::lang::String > const &a0, local_ref< java::lang::Class > const &a1, cpp_boolean const &a2)
{
	return local_ref< java::io::ObjectStreamField >(
		environment::get().get_jenv()->NewObject(
			get_class<java::io::ObjectStreamField::J2CPP_CLASS_NAME>(),
			get_method_id<java::io::ObjectStreamField::J2CPP_CLASS_NAME, java::io::ObjectStreamField::J2CPP_METHOD_NAME(1), java::io::ObjectStreamField::J2CPP_METHOD_SIGNATURE(1), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

cpp_int java::io::ObjectStreamField::compareTo(local_ref< java::lang::Object > const &a0)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::String > java::io::ObjectStreamField::getName()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>()
		)
	);
}

cpp_int java::io::ObjectStreamField::getOffset()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>()
		)
	);
}

local_ref< java::lang::Class > java::io::ObjectStreamField::getType()
{
	return local_ref< java::lang::Class >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>()
		)
	);
}

cpp_char java::io::ObjectStreamField::getTypeCode()
{
	return cpp_char(
		environment::get().get_jenv()->CallCharMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>()
		)
	);
}

local_ref< java::lang::String > java::io::ObjectStreamField::getTypeString()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(7), J2CPP_METHOD_SIGNATURE(7), false>()
		)
	);
}

cpp_boolean java::io::ObjectStreamField::isPrimitive()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(8), J2CPP_METHOD_SIGNATURE(8), false>()
		)
	);
}


local_ref< java::lang::String > java::io::ObjectStreamField::toString()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(10), J2CPP_METHOD_SIGNATURE(10), false>()
		)
	);
}

cpp_boolean java::io::ObjectStreamField::isUnshared()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(11), J2CPP_METHOD_SIGNATURE(11), false>()
		)
	);
}


J2CPP_DEFINE_CLASS(java::io::ObjectStreamField,"java/io/ObjectStreamField")
J2CPP_DEFINE_METHOD(java::io::ObjectStreamField,0,"<init>","(Ljava/lang/String;Ljava/lang/Class;)V")
J2CPP_DEFINE_METHOD(java::io::ObjectStreamField,1,"<init>","(Ljava/lang/String;Ljava/lang/Class;Z)V")
J2CPP_DEFINE_METHOD(java::io::ObjectStreamField,2,"compareTo","(Ljava/lang/Object;)I")
J2CPP_DEFINE_METHOD(java::io::ObjectStreamField,3,"getName","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::io::ObjectStreamField,4,"getOffset","()I")
J2CPP_DEFINE_METHOD(java::io::ObjectStreamField,5,"getType","()Ljava/lang/Class;")
J2CPP_DEFINE_METHOD(java::io::ObjectStreamField,6,"getTypeCode","()C")
J2CPP_DEFINE_METHOD(java::io::ObjectStreamField,7,"getTypeString","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::io::ObjectStreamField,8,"isPrimitive","()Z")
J2CPP_DEFINE_METHOD(java::io::ObjectStreamField,9,"setOffset","(I)V")
J2CPP_DEFINE_METHOD(java::io::ObjectStreamField,10,"toString","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::io::ObjectStreamField,11,"isUnshared","()Z")

} //namespace j2cpp

#endif //J2CPP_JAVA_IO_OBJECTSTREAMFIELD_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
