/*================================================================================
  code generated by: java2cpp
  class: java.io.RandomAccessFile
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_IO_RANDOMACCESSFILE_HPP_DECL
#define J2CPP_JAVA_IO_RANDOMACCESSFILE_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace nio { namespace channels { class FileChannel; } } } }
namespace j2cpp { namespace java { namespace io { class File; } } }
namespace j2cpp { namespace java { namespace io { class FileDescriptor; } } }


#include <java/io/File.hpp>
#include <java/io/FileDescriptor.hpp>
#include <java/lang/String.hpp>
#include <java/nio/channels/FileChannel.hpp>


namespace j2cpp {

namespace java { namespace io {

	class RandomAccessFile;
	class RandomAccessFile
		: public cpp_object<RandomAccessFile>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_METHOD(12)
		J2CPP_DECLARE_METHOD(13)
		J2CPP_DECLARE_METHOD(14)
		J2CPP_DECLARE_METHOD(15)
		J2CPP_DECLARE_METHOD(16)
		J2CPP_DECLARE_METHOD(17)
		J2CPP_DECLARE_METHOD(18)
		J2CPP_DECLARE_METHOD(19)
		J2CPP_DECLARE_METHOD(20)
		J2CPP_DECLARE_METHOD(21)
		J2CPP_DECLARE_METHOD(22)
		J2CPP_DECLARE_METHOD(23)
		J2CPP_DECLARE_METHOD(24)
		J2CPP_DECLARE_METHOD(25)
		J2CPP_DECLARE_METHOD(26)
		J2CPP_DECLARE_METHOD(27)
		J2CPP_DECLARE_METHOD(28)
		J2CPP_DECLARE_METHOD(29)
		J2CPP_DECLARE_METHOD(30)
		J2CPP_DECLARE_METHOD(31)
		J2CPP_DECLARE_METHOD(32)
		J2CPP_DECLARE_METHOD(33)
		J2CPP_DECLARE_METHOD(34)
		J2CPP_DECLARE_METHOD(35)
		J2CPP_DECLARE_METHOD(36)
		J2CPP_DECLARE_METHOD(37)
		J2CPP_DECLARE_METHOD(38)
		J2CPP_DECLARE_METHOD(39)
		J2CPP_DECLARE_METHOD(40)
		J2CPP_DECLARE_METHOD(41)

		RandomAccessFile(jobject jobj)
		: cpp_object<RandomAccessFile>(jobj)
		{
		}

		void close();
		local_ref< java::nio::channels::FileChannel > getChannel();
		local_ref< java::io::FileDescriptor > getFD();
		cpp_long getFilePointer();
		cpp_long length();
		cpp_int read();
		cpp_int read(local_ref< cpp_byte_array<1> > const&);
		cpp_int read(local_ref< cpp_byte_array<1> > const&, cpp_int const&, cpp_int const&);
		cpp_boolean readBoolean();
		cpp_byte readByte();
		cpp_char readChar();
		cpp_double readDouble();
		cpp_float readFloat();
		void readFully(local_ref< cpp_byte_array<1> > const&);
		void readFully(local_ref< cpp_byte_array<1> > const&, cpp_int const&, cpp_int const&);
		cpp_int readInt();
		local_ref< java::lang::String > readLine();
		cpp_long readLong();
		cpp_short readShort();
		cpp_int readUnsignedByte();
		cpp_int readUnsignedShort();
		local_ref< java::lang::String > readUTF();
		void seek(cpp_long const&);
		void setLength(cpp_long const&);
		cpp_int skipBytes(cpp_int const&);
		void write(local_ref< cpp_byte_array<1> > const&);
		void write(local_ref< cpp_byte_array<1> > const&, cpp_int const&, cpp_int const&);
		void write(cpp_int const&);
		void writeBoolean(cpp_boolean const&);
		void writeByte(cpp_int const&);
		void writeBytes(local_ref< java::lang::String > const&);
		void writeChar(cpp_int const&);
		void writeChars(local_ref< java::lang::String > const&);
		void writeDouble(cpp_double const&);
		void writeFloat(cpp_float const&);
		void writeInt(cpp_int const&);
		void writeLong(cpp_long const&);
		void writeShort(cpp_int const&);
		void writeUTF(local_ref< java::lang::String > const&);
	}; //class RandomAccessFile

} //namespace io
} //namespace java


} //namespace j2cpp

#endif //J2CPP_JAVA_IO_RANDOMACCESSFILE_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_IO_RANDOMACCESSFILE_HPP_IMPL
#define J2CPP_JAVA_IO_RANDOMACCESSFILE_HPP_IMPL

namespace j2cpp {


template <>
local_ref< java::io::RandomAccessFile > create< java::io::RandomAccessFile>(local_ref< java::io::File > const &a0, local_ref< java::lang::String > const &a1)
{
	return local_ref< java::io::RandomAccessFile >(
		environment::get().get_jenv()->NewObject(
			get_class<java::io::RandomAccessFile::J2CPP_CLASS_NAME>(),
			get_method_id<java::io::RandomAccessFile::J2CPP_CLASS_NAME, java::io::RandomAccessFile::J2CPP_METHOD_NAME(0), java::io::RandomAccessFile::J2CPP_METHOD_SIGNATURE(0), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

template <>
local_ref< java::io::RandomAccessFile > create< java::io::RandomAccessFile>(local_ref< java::lang::String > const &a0, local_ref< java::lang::String > const &a1)
{
	return local_ref< java::io::RandomAccessFile >(
		environment::get().get_jenv()->NewObject(
			get_class<java::io::RandomAccessFile::J2CPP_CLASS_NAME>(),
			get_method_id<java::io::RandomAccessFile::J2CPP_CLASS_NAME, java::io::RandomAccessFile::J2CPP_METHOD_NAME(1), java::io::RandomAccessFile::J2CPP_METHOD_SIGNATURE(1), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void java::io::RandomAccessFile::close()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>()
		)
	);
}


local_ref< java::nio::channels::FileChannel > java::io::RandomAccessFile::getChannel()
{
	return local_ref< java::nio::channels::FileChannel >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>()
		)
	);
}

local_ref< java::io::FileDescriptor > java::io::RandomAccessFile::getFD()
{
	return local_ref< java::io::FileDescriptor >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>()
		)
	);
}

cpp_long java::io::RandomAccessFile::getFilePointer()
{
	return cpp_long(
		environment::get().get_jenv()->CallLongMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>()
		)
	);
}

cpp_long java::io::RandomAccessFile::length()
{
	return cpp_long(
		environment::get().get_jenv()->CallLongMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(7), J2CPP_METHOD_SIGNATURE(7), false>()
		)
	);
}

cpp_int java::io::RandomAccessFile::read()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(8), J2CPP_METHOD_SIGNATURE(8), false>()
		)
	);
}

cpp_int java::io::RandomAccessFile::read(local_ref< cpp_byte_array<1> > const &a0)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(9), J2CPP_METHOD_SIGNATURE(9), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int java::io::RandomAccessFile::read(local_ref< cpp_byte_array<1> > const &a0, cpp_int const &a1, cpp_int const &a2)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(10), J2CPP_METHOD_SIGNATURE(10), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

cpp_boolean java::io::RandomAccessFile::readBoolean()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(11), J2CPP_METHOD_SIGNATURE(11), false>()
		)
	);
}

cpp_byte java::io::RandomAccessFile::readByte()
{
	return cpp_byte(
		environment::get().get_jenv()->CallByteMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(12), J2CPP_METHOD_SIGNATURE(12), false>()
		)
	);
}

cpp_char java::io::RandomAccessFile::readChar()
{
	return cpp_char(
		environment::get().get_jenv()->CallCharMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(13), J2CPP_METHOD_SIGNATURE(13), false>()
		)
	);
}

cpp_double java::io::RandomAccessFile::readDouble()
{
	return cpp_double(
		environment::get().get_jenv()->CallDoubleMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(14), J2CPP_METHOD_SIGNATURE(14), false>()
		)
	);
}

cpp_float java::io::RandomAccessFile::readFloat()
{
	return cpp_float(
		environment::get().get_jenv()->CallFloatMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(15), J2CPP_METHOD_SIGNATURE(15), false>()
		)
	);
}

void java::io::RandomAccessFile::readFully(local_ref< cpp_byte_array<1> > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(16), J2CPP_METHOD_SIGNATURE(16), false>(),
			a0.get_jtype()
		)
	);
}

void java::io::RandomAccessFile::readFully(local_ref< cpp_byte_array<1> > const &a0, cpp_int const &a1, cpp_int const &a2)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(17), J2CPP_METHOD_SIGNATURE(17), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

cpp_int java::io::RandomAccessFile::readInt()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(18), J2CPP_METHOD_SIGNATURE(18), false>()
		)
	);
}

local_ref< java::lang::String > java::io::RandomAccessFile::readLine()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(19), J2CPP_METHOD_SIGNATURE(19), false>()
		)
	);
}

cpp_long java::io::RandomAccessFile::readLong()
{
	return cpp_long(
		environment::get().get_jenv()->CallLongMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(20), J2CPP_METHOD_SIGNATURE(20), false>()
		)
	);
}

cpp_short java::io::RandomAccessFile::readShort()
{
	return cpp_short(
		environment::get().get_jenv()->CallShortMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(21), J2CPP_METHOD_SIGNATURE(21), false>()
		)
	);
}

cpp_int java::io::RandomAccessFile::readUnsignedByte()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(22), J2CPP_METHOD_SIGNATURE(22), false>()
		)
	);
}

cpp_int java::io::RandomAccessFile::readUnsignedShort()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(23), J2CPP_METHOD_SIGNATURE(23), false>()
		)
	);
}

local_ref< java::lang::String > java::io::RandomAccessFile::readUTF()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(24), J2CPP_METHOD_SIGNATURE(24), false>()
		)
	);
}

void java::io::RandomAccessFile::seek(cpp_long const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(25), J2CPP_METHOD_SIGNATURE(25), false>(),
			a0.get_jtype()
		)
	);
}

void java::io::RandomAccessFile::setLength(cpp_long const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(26), J2CPP_METHOD_SIGNATURE(26), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int java::io::RandomAccessFile::skipBytes(cpp_int const &a0)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(27), J2CPP_METHOD_SIGNATURE(27), false>(),
			a0.get_jtype()
		)
	);
}

void java::io::RandomAccessFile::write(local_ref< cpp_byte_array<1> > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(28), J2CPP_METHOD_SIGNATURE(28), false>(),
			a0.get_jtype()
		)
	);
}

void java::io::RandomAccessFile::write(local_ref< cpp_byte_array<1> > const &a0, cpp_int const &a1, cpp_int const &a2)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(29), J2CPP_METHOD_SIGNATURE(29), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

void java::io::RandomAccessFile::write(cpp_int const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(30), J2CPP_METHOD_SIGNATURE(30), false>(),
			a0.get_jtype()
		)
	);
}

void java::io::RandomAccessFile::writeBoolean(cpp_boolean const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(31), J2CPP_METHOD_SIGNATURE(31), false>(),
			a0.get_jtype()
		)
	);
}

void java::io::RandomAccessFile::writeByte(cpp_int const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(32), J2CPP_METHOD_SIGNATURE(32), false>(),
			a0.get_jtype()
		)
	);
}

void java::io::RandomAccessFile::writeBytes(local_ref< java::lang::String > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(33), J2CPP_METHOD_SIGNATURE(33), false>(),
			a0.get_jtype()
		)
	);
}

void java::io::RandomAccessFile::writeChar(cpp_int const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(34), J2CPP_METHOD_SIGNATURE(34), false>(),
			a0.get_jtype()
		)
	);
}

void java::io::RandomAccessFile::writeChars(local_ref< java::lang::String > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(35), J2CPP_METHOD_SIGNATURE(35), false>(),
			a0.get_jtype()
		)
	);
}

void java::io::RandomAccessFile::writeDouble(cpp_double const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(36), J2CPP_METHOD_SIGNATURE(36), false>(),
			a0.get_jtype()
		)
	);
}

void java::io::RandomAccessFile::writeFloat(cpp_float const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(37), J2CPP_METHOD_SIGNATURE(37), false>(),
			a0.get_jtype()
		)
	);
}

void java::io::RandomAccessFile::writeInt(cpp_int const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(38), J2CPP_METHOD_SIGNATURE(38), false>(),
			a0.get_jtype()
		)
	);
}

void java::io::RandomAccessFile::writeLong(cpp_long const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(39), J2CPP_METHOD_SIGNATURE(39), false>(),
			a0.get_jtype()
		)
	);
}

void java::io::RandomAccessFile::writeShort(cpp_int const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(40), J2CPP_METHOD_SIGNATURE(40), false>(),
			a0.get_jtype()
		)
	);
}

void java::io::RandomAccessFile::writeUTF(local_ref< java::lang::String > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(41), J2CPP_METHOD_SIGNATURE(41), false>(),
			a0.get_jtype()
		)
	);
}


J2CPP_DEFINE_CLASS(java::io::RandomAccessFile,"java/io/RandomAccessFile")
J2CPP_DEFINE_METHOD(java::io::RandomAccessFile,0,"<init>","(Ljava/io/File;Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(java::io::RandomAccessFile,1,"<init>","(Ljava/lang/String;Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(java::io::RandomAccessFile,2,"close","()V")
J2CPP_DEFINE_METHOD(java::io::RandomAccessFile,3,"finalize","()V")
J2CPP_DEFINE_METHOD(java::io::RandomAccessFile,4,"getChannel","()Ljava/nio/channels/FileChannel;")
J2CPP_DEFINE_METHOD(java::io::RandomAccessFile,5,"getFD","()Ljava/io/FileDescriptor;")
J2CPP_DEFINE_METHOD(java::io::RandomAccessFile,6,"getFilePointer","()J")
J2CPP_DEFINE_METHOD(java::io::RandomAccessFile,7,"length","()J")
J2CPP_DEFINE_METHOD(java::io::RandomAccessFile,8,"read","()I")
J2CPP_DEFINE_METHOD(java::io::RandomAccessFile,9,"read","([B)I")
J2CPP_DEFINE_METHOD(java::io::RandomAccessFile,10,"read","([BII)I")
J2CPP_DEFINE_METHOD(java::io::RandomAccessFile,11,"readBoolean","()Z")
J2CPP_DEFINE_METHOD(java::io::RandomAccessFile,12,"readByte","()B")
J2CPP_DEFINE_METHOD(java::io::RandomAccessFile,13,"readChar","()C")
J2CPP_DEFINE_METHOD(java::io::RandomAccessFile,14,"readDouble","()D")
J2CPP_DEFINE_METHOD(java::io::RandomAccessFile,15,"readFloat","()F")
J2CPP_DEFINE_METHOD(java::io::RandomAccessFile,16,"readFully","([B)V")
J2CPP_DEFINE_METHOD(java::io::RandomAccessFile,17,"readFully","([BII)V")
J2CPP_DEFINE_METHOD(java::io::RandomAccessFile,18,"readInt","()I")
J2CPP_DEFINE_METHOD(java::io::RandomAccessFile,19,"readLine","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::io::RandomAccessFile,20,"readLong","()J")
J2CPP_DEFINE_METHOD(java::io::RandomAccessFile,21,"readShort","()S")
J2CPP_DEFINE_METHOD(java::io::RandomAccessFile,22,"readUnsignedByte","()I")
J2CPP_DEFINE_METHOD(java::io::RandomAccessFile,23,"readUnsignedShort","()I")
J2CPP_DEFINE_METHOD(java::io::RandomAccessFile,24,"readUTF","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::io::RandomAccessFile,25,"seek","(J)V")
J2CPP_DEFINE_METHOD(java::io::RandomAccessFile,26,"setLength","(J)V")
J2CPP_DEFINE_METHOD(java::io::RandomAccessFile,27,"skipBytes","(I)I")
J2CPP_DEFINE_METHOD(java::io::RandomAccessFile,28,"write","([B)V")
J2CPP_DEFINE_METHOD(java::io::RandomAccessFile,29,"write","([BII)V")
J2CPP_DEFINE_METHOD(java::io::RandomAccessFile,30,"write","(I)V")
J2CPP_DEFINE_METHOD(java::io::RandomAccessFile,31,"writeBoolean","(Z)V")
J2CPP_DEFINE_METHOD(java::io::RandomAccessFile,32,"writeByte","(I)V")
J2CPP_DEFINE_METHOD(java::io::RandomAccessFile,33,"writeBytes","(Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(java::io::RandomAccessFile,34,"writeChar","(I)V")
J2CPP_DEFINE_METHOD(java::io::RandomAccessFile,35,"writeChars","(Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(java::io::RandomAccessFile,36,"writeDouble","(D)V")
J2CPP_DEFINE_METHOD(java::io::RandomAccessFile,37,"writeFloat","(F)V")
J2CPP_DEFINE_METHOD(java::io::RandomAccessFile,38,"writeInt","(I)V")
J2CPP_DEFINE_METHOD(java::io::RandomAccessFile,39,"writeLong","(J)V")
J2CPP_DEFINE_METHOD(java::io::RandomAccessFile,40,"writeShort","(I)V")
J2CPP_DEFINE_METHOD(java::io::RandomAccessFile,41,"writeUTF","(Ljava/lang/String;)V")

} //namespace j2cpp

#endif //J2CPP_JAVA_IO_RANDOMACCESSFILE_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
