/*================================================================================
  code generated by: java2cpp
  class: java.util.zip.InflaterOutputStream
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_ZIP_INFLATEROUTPUTSTREAM_HPP_DECL
#define J2CPP_JAVA_UTIL_ZIP_INFLATEROUTPUTSTREAM_HPP_DECL


namespace j2cpp { namespace java { namespace util { namespace zip { class Inflater; } } } }
namespace j2cpp { namespace java { namespace io { class OutputStream; } } }


#include <java/io/OutputStream.hpp>
#include <java/util/zip/Inflater.hpp>


namespace j2cpp {

namespace java { namespace util { namespace zip {

	class InflaterOutputStream;
	class InflaterOutputStream
		: public cpp_object<InflaterOutputStream>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_FIELD(0)
		J2CPP_DECLARE_FIELD(1)

		InflaterOutputStream(jobject jobj)
		: cpp_object<InflaterOutputStream>(jobj)
		{
		}

		void close();
		void flush();
		void finish();
		void write(cpp_int const&);
		void write(local_ref< cpp_byte_array<1> > const&, cpp_int const&, cpp_int const&);

	}; //class InflaterOutputStream

} //namespace zip
} //namespace util
} //namespace java


} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_ZIP_INFLATEROUTPUTSTREAM_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_ZIP_INFLATEROUTPUTSTREAM_HPP_IMPL
#define J2CPP_JAVA_UTIL_ZIP_INFLATEROUTPUTSTREAM_HPP_IMPL

namespace j2cpp {


template <>
local_ref< java::util::zip::InflaterOutputStream > create< java::util::zip::InflaterOutputStream>(local_ref< java::io::OutputStream > const &a0)
{
	return local_ref< java::util::zip::InflaterOutputStream >(
		environment::get().get_jenv()->NewObject(
			get_class<java::util::zip::InflaterOutputStream::J2CPP_CLASS_NAME>(),
			get_method_id<java::util::zip::InflaterOutputStream::J2CPP_CLASS_NAME, java::util::zip::InflaterOutputStream::J2CPP_METHOD_NAME(0), java::util::zip::InflaterOutputStream::J2CPP_METHOD_SIGNATURE(0), false>(),
			a0.get_jtype()
		)
	);
}

template <>
local_ref< java::util::zip::InflaterOutputStream > create< java::util::zip::InflaterOutputStream>(local_ref< java::io::OutputStream > const &a0, local_ref< java::util::zip::Inflater > const &a1)
{
	return local_ref< java::util::zip::InflaterOutputStream >(
		environment::get().get_jenv()->NewObject(
			get_class<java::util::zip::InflaterOutputStream::J2CPP_CLASS_NAME>(),
			get_method_id<java::util::zip::InflaterOutputStream::J2CPP_CLASS_NAME, java::util::zip::InflaterOutputStream::J2CPP_METHOD_NAME(1), java::util::zip::InflaterOutputStream::J2CPP_METHOD_SIGNATURE(1), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

template <>
local_ref< java::util::zip::InflaterOutputStream > create< java::util::zip::InflaterOutputStream>(local_ref< java::io::OutputStream > const &a0, local_ref< java::util::zip::Inflater > const &a1, cpp_int const &a2)
{
	return local_ref< java::util::zip::InflaterOutputStream >(
		environment::get().get_jenv()->NewObject(
			get_class<java::util::zip::InflaterOutputStream::J2CPP_CLASS_NAME>(),
			get_method_id<java::util::zip::InflaterOutputStream::J2CPP_CLASS_NAME, java::util::zip::InflaterOutputStream::J2CPP_METHOD_NAME(2), java::util::zip::InflaterOutputStream::J2CPP_METHOD_SIGNATURE(2), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

void java::util::zip::InflaterOutputStream::close()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>()
		)
	);
}

void java::util::zip::InflaterOutputStream::flush()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>()
		)
	);
}

void java::util::zip::InflaterOutputStream::finish()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>()
		)
	);
}

void java::util::zip::InflaterOutputStream::write(cpp_int const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>(),
			a0.get_jtype()
		)
	);
}

void java::util::zip::InflaterOutputStream::write(local_ref< cpp_byte_array<1> > const &a0, cpp_int const &a1, cpp_int const &a2)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(7), J2CPP_METHOD_SIGNATURE(7), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}



J2CPP_DEFINE_CLASS(java::util::zip::InflaterOutputStream,"java/util/zip/InflaterOutputStream")
J2CPP_DEFINE_METHOD(java::util::zip::InflaterOutputStream,0,"<init>","(Ljava/io/OutputStream;)V")
J2CPP_DEFINE_METHOD(java::util::zip::InflaterOutputStream,1,"<init>","(Ljava/io/OutputStream;Ljava/util/zip/Inflater;)V")
J2CPP_DEFINE_METHOD(java::util::zip::InflaterOutputStream,2,"<init>","(Ljava/io/OutputStream;Ljava/util/zip/Inflater;I)V")
J2CPP_DEFINE_METHOD(java::util::zip::InflaterOutputStream,3,"close","()V")
J2CPP_DEFINE_METHOD(java::util::zip::InflaterOutputStream,4,"flush","()V")
J2CPP_DEFINE_METHOD(java::util::zip::InflaterOutputStream,5,"finish","()V")
J2CPP_DEFINE_METHOD(java::util::zip::InflaterOutputStream,6,"write","(I)V")
J2CPP_DEFINE_METHOD(java::util::zip::InflaterOutputStream,7,"write","([BII)V")
J2CPP_DEFINE_FIELD(java::util::zip::InflaterOutputStream,0,"inf","Ljava/util/zip/Inflater;")
J2CPP_DEFINE_FIELD(java::util::zip::InflaterOutputStream,1,"buf","[B")

} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_ZIP_INFLATEROUTPUTSTREAM_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
