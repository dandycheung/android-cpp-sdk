/*================================================================================
  code generated by: java2cpp
  class: java.util.AbstractMap
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_ABSTRACTMAP_HPP_DECL
#define J2CPP_JAVA_UTIL_ABSTRACTMAP_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace util { class Collection; } } }
namespace j2cpp { namespace java { namespace util { class Map; } } }
namespace j2cpp { namespace java { namespace util { namespace Map_ { class Entry; } } } }
namespace j2cpp { namespace java { namespace util { class Set; } } }


#include <java/lang/Object.hpp>
#include <java/lang/String.hpp>
#include <java/util/Collection.hpp>
#include <java/util/Map.hpp>
#include <java/util/Set.hpp>


namespace j2cpp {

namespace java { namespace util {

	class AbstractMap;
	namespace AbstractMap_ {

		class SimpleImmutableEntry;
		class SimpleImmutableEntry
			: public cpp_object<SimpleImmutableEntry>
		{
		public:

			J2CPP_DECLARE_CLASS

			J2CPP_DECLARE_METHOD(0)
			J2CPP_DECLARE_METHOD(1)
			J2CPP_DECLARE_METHOD(2)
			J2CPP_DECLARE_METHOD(3)
			J2CPP_DECLARE_METHOD(4)
			J2CPP_DECLARE_METHOD(5)
			J2CPP_DECLARE_METHOD(6)
			J2CPP_DECLARE_METHOD(7)

			SimpleImmutableEntry(jobject jobj)
			: cpp_object<SimpleImmutableEntry>(jobj)
			{
			}

			local_ref< java::lang::Object > getKey();
			local_ref< java::lang::Object > getValue();
			local_ref< java::lang::Object > setValue(local_ref< java::lang::Object > const&);
			cpp_boolean equals(local_ref< java::lang::Object > const&);
			cpp_int hashCode();
			local_ref< java::lang::String > toString();
		}; //class SimpleImmutableEntry

		class SimpleEntry;
		class SimpleEntry
			: public cpp_object<SimpleEntry>
		{
		public:

			J2CPP_DECLARE_CLASS

			J2CPP_DECLARE_METHOD(0)
			J2CPP_DECLARE_METHOD(1)
			J2CPP_DECLARE_METHOD(2)
			J2CPP_DECLARE_METHOD(3)
			J2CPP_DECLARE_METHOD(4)
			J2CPP_DECLARE_METHOD(5)
			J2CPP_DECLARE_METHOD(6)
			J2CPP_DECLARE_METHOD(7)

			SimpleEntry(jobject jobj)
			: cpp_object<SimpleEntry>(jobj)
			{
			}

			local_ref< java::lang::Object > getKey();
			local_ref< java::lang::Object > getValue();
			local_ref< java::lang::Object > setValue(local_ref< java::lang::Object > const&);
			cpp_boolean equals(local_ref< java::lang::Object > const&);
			cpp_int hashCode();
			local_ref< java::lang::String > toString();
		}; //class SimpleEntry

	} //namespace AbstractMap_

	class AbstractMap
		: public cpp_object<AbstractMap>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_METHOD(12)
		J2CPP_DECLARE_METHOD(13)
		J2CPP_DECLARE_METHOD(14)
		J2CPP_DECLARE_METHOD(15)
		J2CPP_DECLARE_METHOD(16)

		typedef AbstractMap_::SimpleImmutableEntry SimpleImmutableEntry;
		typedef AbstractMap_::SimpleEntry SimpleEntry;

		AbstractMap(jobject jobj)
		: cpp_object<AbstractMap>(jobj)
		{
		}

		void clear();
		cpp_boolean containsKey(local_ref< java::lang::Object > const&);
		cpp_boolean containsValue(local_ref< java::lang::Object > const&);
		local_ref< java::util::Set > entrySet();
		cpp_boolean equals(local_ref< java::lang::Object > const&);
		local_ref< java::lang::Object > get(local_ref< java::lang::Object > const&);
		cpp_int hashCode();
		cpp_boolean isEmpty();
		local_ref< java::util::Set > keySet();
		local_ref< java::lang::Object > put(local_ref< java::lang::Object > const&, local_ref< java::lang::Object > const&);
		void putAll(local_ref< java::util::Map > const&);
		local_ref< java::lang::Object > remove(local_ref< java::lang::Object > const&);
		cpp_int size();
		local_ref< java::lang::String > toString();
		local_ref< java::util::Collection > values();
	}; //class AbstractMap

} //namespace util
} //namespace java


} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_ABSTRACTMAP_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_ABSTRACTMAP_HPP_IMPL
#define J2CPP_JAVA_UTIL_ABSTRACTMAP_HPP_IMPL

namespace j2cpp {



template <>
local_ref< java::util::AbstractMap_::SimpleImmutableEntry > create< java::util::AbstractMap_::SimpleImmutableEntry>(local_ref< java::lang::Object > const &a0, local_ref< java::lang::Object > const &a1)
{
	return local_ref< java::util::AbstractMap_::SimpleImmutableEntry >(
		environment::get().get_jenv()->NewObject(
			get_class<java::util::AbstractMap_::SimpleImmutableEntry::J2CPP_CLASS_NAME>(),
			get_method_id<java::util::AbstractMap_::SimpleImmutableEntry::J2CPP_CLASS_NAME, java::util::AbstractMap_::SimpleImmutableEntry::J2CPP_METHOD_NAME(0), java::util::AbstractMap_::SimpleImmutableEntry::J2CPP_METHOD_SIGNATURE(0), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

template <>
local_ref< java::util::AbstractMap_::SimpleImmutableEntry > create< java::util::AbstractMap_::SimpleImmutableEntry>(local_ref< java::util::Map_::Entry > const &a0)
{
	return local_ref< java::util::AbstractMap_::SimpleImmutableEntry >(
		environment::get().get_jenv()->NewObject(
			get_class<java::util::AbstractMap_::SimpleImmutableEntry::J2CPP_CLASS_NAME>(),
			get_method_id<java::util::AbstractMap_::SimpleImmutableEntry::J2CPP_CLASS_NAME, java::util::AbstractMap_::SimpleImmutableEntry::J2CPP_METHOD_NAME(1), java::util::AbstractMap_::SimpleImmutableEntry::J2CPP_METHOD_SIGNATURE(1), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::Object > java::util::AbstractMap_::SimpleImmutableEntry::getKey()
{
	return local_ref< java::lang::Object >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>()
		)
	);
}

local_ref< java::lang::Object > java::util::AbstractMap_::SimpleImmutableEntry::getValue()
{
	return local_ref< java::lang::Object >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>()
		)
	);
}

local_ref< java::lang::Object > java::util::AbstractMap_::SimpleImmutableEntry::setValue(local_ref< java::lang::Object > const &a0)
{
	return local_ref< java::lang::Object >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean java::util::AbstractMap_::SimpleImmutableEntry::equals(local_ref< java::lang::Object > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int java::util::AbstractMap_::SimpleImmutableEntry::hashCode()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>()
		)
	);
}

local_ref< java::lang::String > java::util::AbstractMap_::SimpleImmutableEntry::toString()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(7), J2CPP_METHOD_SIGNATURE(7), false>()
		)
	);
}


J2CPP_DEFINE_CLASS(java::util::AbstractMap_::SimpleImmutableEntry,"java/util/AbstractMap$SimpleImmutableEntry")
J2CPP_DEFINE_METHOD(java::util::AbstractMap_::SimpleImmutableEntry,0,"<init>","(Ljava/lang/Object;Ljava/lang/Object;)V")
J2CPP_DEFINE_METHOD(java::util::AbstractMap_::SimpleImmutableEntry,1,"<init>","(Ljava/util/Map$Entry;)V")
J2CPP_DEFINE_METHOD(java::util::AbstractMap_::SimpleImmutableEntry,2,"getKey","()Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(java::util::AbstractMap_::SimpleImmutableEntry,3,"getValue","()Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(java::util::AbstractMap_::SimpleImmutableEntry,4,"setValue","(Ljava/lang/Object;)Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(java::util::AbstractMap_::SimpleImmutableEntry,5,"equals","(Ljava/lang/Object;)Z")
J2CPP_DEFINE_METHOD(java::util::AbstractMap_::SimpleImmutableEntry,6,"hashCode","()I")
J2CPP_DEFINE_METHOD(java::util::AbstractMap_::SimpleImmutableEntry,7,"toString","()Ljava/lang/String;")

template <>
local_ref< java::util::AbstractMap_::SimpleEntry > create< java::util::AbstractMap_::SimpleEntry>(local_ref< java::lang::Object > const &a0, local_ref< java::lang::Object > const &a1)
{
	return local_ref< java::util::AbstractMap_::SimpleEntry >(
		environment::get().get_jenv()->NewObject(
			get_class<java::util::AbstractMap_::SimpleEntry::J2CPP_CLASS_NAME>(),
			get_method_id<java::util::AbstractMap_::SimpleEntry::J2CPP_CLASS_NAME, java::util::AbstractMap_::SimpleEntry::J2CPP_METHOD_NAME(0), java::util::AbstractMap_::SimpleEntry::J2CPP_METHOD_SIGNATURE(0), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

template <>
local_ref< java::util::AbstractMap_::SimpleEntry > create< java::util::AbstractMap_::SimpleEntry>(local_ref< java::util::Map_::Entry > const &a0)
{
	return local_ref< java::util::AbstractMap_::SimpleEntry >(
		environment::get().get_jenv()->NewObject(
			get_class<java::util::AbstractMap_::SimpleEntry::J2CPP_CLASS_NAME>(),
			get_method_id<java::util::AbstractMap_::SimpleEntry::J2CPP_CLASS_NAME, java::util::AbstractMap_::SimpleEntry::J2CPP_METHOD_NAME(1), java::util::AbstractMap_::SimpleEntry::J2CPP_METHOD_SIGNATURE(1), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::Object > java::util::AbstractMap_::SimpleEntry::getKey()
{
	return local_ref< java::lang::Object >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>()
		)
	);
}

local_ref< java::lang::Object > java::util::AbstractMap_::SimpleEntry::getValue()
{
	return local_ref< java::lang::Object >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>()
		)
	);
}

local_ref< java::lang::Object > java::util::AbstractMap_::SimpleEntry::setValue(local_ref< java::lang::Object > const &a0)
{
	return local_ref< java::lang::Object >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean java::util::AbstractMap_::SimpleEntry::equals(local_ref< java::lang::Object > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int java::util::AbstractMap_::SimpleEntry::hashCode()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>()
		)
	);
}

local_ref< java::lang::String > java::util::AbstractMap_::SimpleEntry::toString()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(7), J2CPP_METHOD_SIGNATURE(7), false>()
		)
	);
}


J2CPP_DEFINE_CLASS(java::util::AbstractMap_::SimpleEntry,"java/util/AbstractMap$SimpleEntry")
J2CPP_DEFINE_METHOD(java::util::AbstractMap_::SimpleEntry,0,"<init>","(Ljava/lang/Object;Ljava/lang/Object;)V")
J2CPP_DEFINE_METHOD(java::util::AbstractMap_::SimpleEntry,1,"<init>","(Ljava/util/Map$Entry;)V")
J2CPP_DEFINE_METHOD(java::util::AbstractMap_::SimpleEntry,2,"getKey","()Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(java::util::AbstractMap_::SimpleEntry,3,"getValue","()Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(java::util::AbstractMap_::SimpleEntry,4,"setValue","(Ljava/lang/Object;)Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(java::util::AbstractMap_::SimpleEntry,5,"equals","(Ljava/lang/Object;)Z")
J2CPP_DEFINE_METHOD(java::util::AbstractMap_::SimpleEntry,6,"hashCode","()I")
J2CPP_DEFINE_METHOD(java::util::AbstractMap_::SimpleEntry,7,"toString","()Ljava/lang/String;")


template <>
local_ref< java::util::AbstractMap > create< java::util::AbstractMap>()
{
	return local_ref< java::util::AbstractMap >(
		environment::get().get_jenv()->NewObject(
			get_class<java::util::AbstractMap::J2CPP_CLASS_NAME>(),
			get_method_id<java::util::AbstractMap::J2CPP_CLASS_NAME, java::util::AbstractMap::J2CPP_METHOD_NAME(0), java::util::AbstractMap::J2CPP_METHOD_SIGNATURE(0), false>()
		)
	);
}

void java::util::AbstractMap::clear()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), false>()
		)
	);
}

cpp_boolean java::util::AbstractMap::containsKey(local_ref< java::lang::Object > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean java::util::AbstractMap::containsValue(local_ref< java::lang::Object > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::util::Set > java::util::AbstractMap::entrySet()
{
	return local_ref< java::util::Set >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>()
		)
	);
}

cpp_boolean java::util::AbstractMap::equals(local_ref< java::lang::Object > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::Object > java::util::AbstractMap::get(local_ref< java::lang::Object > const &a0)
{
	return local_ref< java::lang::Object >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int java::util::AbstractMap::hashCode()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(7), J2CPP_METHOD_SIGNATURE(7), false>()
		)
	);
}

cpp_boolean java::util::AbstractMap::isEmpty()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(8), J2CPP_METHOD_SIGNATURE(8), false>()
		)
	);
}

local_ref< java::util::Set > java::util::AbstractMap::keySet()
{
	return local_ref< java::util::Set >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(9), J2CPP_METHOD_SIGNATURE(9), false>()
		)
	);
}

local_ref< java::lang::Object > java::util::AbstractMap::put(local_ref< java::lang::Object > const &a0, local_ref< java::lang::Object > const &a1)
{
	return local_ref< java::lang::Object >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(10), J2CPP_METHOD_SIGNATURE(10), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void java::util::AbstractMap::putAll(local_ref< java::util::Map > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(11), J2CPP_METHOD_SIGNATURE(11), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::Object > java::util::AbstractMap::remove(local_ref< java::lang::Object > const &a0)
{
	return local_ref< java::lang::Object >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(12), J2CPP_METHOD_SIGNATURE(12), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int java::util::AbstractMap::size()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(13), J2CPP_METHOD_SIGNATURE(13), false>()
		)
	);
}

local_ref< java::lang::String > java::util::AbstractMap::toString()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(14), J2CPP_METHOD_SIGNATURE(14), false>()
		)
	);
}

local_ref< java::util::Collection > java::util::AbstractMap::values()
{
	return local_ref< java::util::Collection >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(15), J2CPP_METHOD_SIGNATURE(15), false>()
		)
	);
}



J2CPP_DEFINE_CLASS(java::util::AbstractMap,"java/util/AbstractMap")
J2CPP_DEFINE_METHOD(java::util::AbstractMap,0,"<init>","()V")
J2CPP_DEFINE_METHOD(java::util::AbstractMap,1,"clear","()V")
J2CPP_DEFINE_METHOD(java::util::AbstractMap,2,"containsKey","(Ljava/lang/Object;)Z")
J2CPP_DEFINE_METHOD(java::util::AbstractMap,3,"containsValue","(Ljava/lang/Object;)Z")
J2CPP_DEFINE_METHOD(java::util::AbstractMap,4,"entrySet","()Ljava/util/Set;")
J2CPP_DEFINE_METHOD(java::util::AbstractMap,5,"equals","(Ljava/lang/Object;)Z")
J2CPP_DEFINE_METHOD(java::util::AbstractMap,6,"get","(Ljava/lang/Object;)Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(java::util::AbstractMap,7,"hashCode","()I")
J2CPP_DEFINE_METHOD(java::util::AbstractMap,8,"isEmpty","()Z")
J2CPP_DEFINE_METHOD(java::util::AbstractMap,9,"keySet","()Ljava/util/Set;")
J2CPP_DEFINE_METHOD(java::util::AbstractMap,10,"put","(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(java::util::AbstractMap,11,"putAll","(Ljava/util/Map;)V")
J2CPP_DEFINE_METHOD(java::util::AbstractMap,12,"remove","(Ljava/lang/Object;)Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(java::util::AbstractMap,13,"size","()I")
J2CPP_DEFINE_METHOD(java::util::AbstractMap,14,"toString","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::util::AbstractMap,15,"values","()Ljava/util/Collection;")
J2CPP_DEFINE_METHOD(java::util::AbstractMap,16,"clone","()Ljava/lang/Object;")

} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_ABSTRACTMAP_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
