/*================================================================================
  code generated by: java2cpp
  class: java.util.ServiceLoader
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_SERVICELOADER_HPP_DECL
#define J2CPP_JAVA_UTIL_SERVICELOADER_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace lang { class ClassLoader; } } }
namespace j2cpp { namespace java { namespace lang { class Class; } } }
namespace j2cpp { namespace java { namespace util { class Iterator; } } }


#include <java/lang/Class.hpp>
#include <java/lang/ClassLoader.hpp>
#include <java/lang/String.hpp>
#include <java/util/Iterator.hpp>


namespace j2cpp {

namespace java { namespace util {

	class ServiceLoader;
	class ServiceLoader
		: public cpp_object<ServiceLoader>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)

		ServiceLoader(jobject jobj)
		: cpp_object<ServiceLoader>(jobj)
		{
		}

		void reload();
		local_ref< java::util::Iterator > iterator();
		static local_ref< java::util::ServiceLoader > load(local_ref< java::lang::Class > const&, local_ref< java::lang::ClassLoader > const&);
		static local_ref< java::util::ServiceLoader > load(local_ref< java::lang::Class > const&);
		static local_ref< java::util::ServiceLoader > loadInstalled(local_ref< java::lang::Class > const&);
		local_ref< java::lang::String > toString();
	}; //class ServiceLoader

} //namespace util
} //namespace java


} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_SERVICELOADER_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_SERVICELOADER_HPP_IMPL
#define J2CPP_JAVA_UTIL_SERVICELOADER_HPP_IMPL

namespace j2cpp {


template <>
local_ref< java::util::ServiceLoader > create< java::util::ServiceLoader>()
{
	return local_ref< java::util::ServiceLoader >(
		environment::get().get_jenv()->NewObject(
			get_class<java::util::ServiceLoader::J2CPP_CLASS_NAME>(),
			get_method_id<java::util::ServiceLoader::J2CPP_CLASS_NAME, java::util::ServiceLoader::J2CPP_METHOD_NAME(0), java::util::ServiceLoader::J2CPP_METHOD_SIGNATURE(0), false>()
		)
	);
}

void java::util::ServiceLoader::reload()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), false>()
		)
	);
}

local_ref< java::util::Iterator > java::util::ServiceLoader::iterator()
{
	return local_ref< java::util::Iterator >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>()
		)
	);
}

local_ref< java::util::ServiceLoader > java::util::ServiceLoader::load(local_ref< java::lang::Class > const &a0, local_ref< java::lang::ClassLoader > const &a1)
{
	return local_ref< java::util::ServiceLoader >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), true>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< java::util::ServiceLoader > java::util::ServiceLoader::load(local_ref< java::lang::Class > const &a0)
{
	return local_ref< java::util::ServiceLoader >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), true>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::util::ServiceLoader > java::util::ServiceLoader::loadInstalled(local_ref< java::lang::Class > const &a0)
{
	return local_ref< java::util::ServiceLoader >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), true>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::String > java::util::ServiceLoader::toString()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>()
		)
	);
}


J2CPP_DEFINE_CLASS(java::util::ServiceLoader,"java/util/ServiceLoader")
J2CPP_DEFINE_METHOD(java::util::ServiceLoader,0,"<init>","()V")
J2CPP_DEFINE_METHOD(java::util::ServiceLoader,1,"reload","()V")
J2CPP_DEFINE_METHOD(java::util::ServiceLoader,2,"iterator","()Ljava/util/Iterator;")
J2CPP_DEFINE_METHOD(java::util::ServiceLoader,3,"load","(Ljava/lang/Class;Ljava/lang/ClassLoader;)Ljava/util/ServiceLoader;")
J2CPP_DEFINE_METHOD(java::util::ServiceLoader,4,"load","(Ljava/lang/Class;)Ljava/util/ServiceLoader;")
J2CPP_DEFINE_METHOD(java::util::ServiceLoader,5,"loadInstalled","(Ljava/lang/Class;)Ljava/util/ServiceLoader;")
J2CPP_DEFINE_METHOD(java::util::ServiceLoader,6,"toString","()Ljava/lang/String;")

} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_SERVICELOADER_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
