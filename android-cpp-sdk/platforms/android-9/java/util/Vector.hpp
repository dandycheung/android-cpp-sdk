/*================================================================================
  code generated by: java2cpp
  class: java.util.Vector
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_VECTOR_HPP_DECL
#define J2CPP_JAVA_UTIL_VECTOR_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace util { class Collection; } } }
namespace j2cpp { namespace java { namespace util { class Enumeration; } } }
namespace j2cpp { namespace java { namespace util { class List; } } }


#include <java/lang/Object.hpp>
#include <java/lang/String.hpp>
#include <java/util/Collection.hpp>
#include <java/util/Enumeration.hpp>
#include <java/util/List.hpp>


namespace j2cpp {

namespace java { namespace util {

	class Vector;
	class Vector
		: public cpp_object<Vector>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_METHOD(12)
		J2CPP_DECLARE_METHOD(13)
		J2CPP_DECLARE_METHOD(14)
		J2CPP_DECLARE_METHOD(15)
		J2CPP_DECLARE_METHOD(16)
		J2CPP_DECLARE_METHOD(17)
		J2CPP_DECLARE_METHOD(18)
		J2CPP_DECLARE_METHOD(19)
		J2CPP_DECLARE_METHOD(20)
		J2CPP_DECLARE_METHOD(21)
		J2CPP_DECLARE_METHOD(22)
		J2CPP_DECLARE_METHOD(23)
		J2CPP_DECLARE_METHOD(24)
		J2CPP_DECLARE_METHOD(25)
		J2CPP_DECLARE_METHOD(26)
		J2CPP_DECLARE_METHOD(27)
		J2CPP_DECLARE_METHOD(28)
		J2CPP_DECLARE_METHOD(29)
		J2CPP_DECLARE_METHOD(30)
		J2CPP_DECLARE_METHOD(31)
		J2CPP_DECLARE_METHOD(32)
		J2CPP_DECLARE_METHOD(33)
		J2CPP_DECLARE_METHOD(34)
		J2CPP_DECLARE_METHOD(35)
		J2CPP_DECLARE_METHOD(36)
		J2CPP_DECLARE_METHOD(37)
		J2CPP_DECLARE_METHOD(38)
		J2CPP_DECLARE_METHOD(39)
		J2CPP_DECLARE_METHOD(40)
		J2CPP_DECLARE_METHOD(41)
		J2CPP_DECLARE_METHOD(42)
		J2CPP_DECLARE_METHOD(43)
		J2CPP_DECLARE_METHOD(44)
		J2CPP_DECLARE_METHOD(45)
		J2CPP_DECLARE_FIELD(0)
		J2CPP_DECLARE_FIELD(1)
		J2CPP_DECLARE_FIELD(2)

		Vector(jobject jobj)
		: cpp_object<Vector>(jobj)
		{
		}

		void add(cpp_int const&, local_ref< java::lang::Object > const&);
		cpp_boolean add(local_ref< java::lang::Object > const&);
		cpp_boolean addAll(cpp_int const&, local_ref< java::util::Collection > const&);
		cpp_boolean addAll(local_ref< java::util::Collection > const&);
		void addElement(local_ref< java::lang::Object > const&);
		cpp_int capacity();
		void clear();
		local_ref< java::lang::Object > clone();
		cpp_boolean contains(local_ref< java::lang::Object > const&);
		cpp_boolean containsAll(local_ref< java::util::Collection > const&);
		void copyInto(local_ref< cpp_object_array<java::lang::Object, 1> > const&);
		local_ref< java::lang::Object > elementAt(cpp_int const&);
		local_ref< java::util::Enumeration > elements();
		void ensureCapacity(cpp_int const&);
		cpp_boolean equals(local_ref< java::lang::Object > const&);
		local_ref< java::lang::Object > firstElement();
		local_ref< java::lang::Object > get(cpp_int const&);
		cpp_int hashCode();
		cpp_int indexOf(local_ref< java::lang::Object > const&);
		cpp_int indexOf(local_ref< java::lang::Object > const&, cpp_int const&);
		void insertElementAt(local_ref< java::lang::Object > const&, cpp_int const&);
		cpp_boolean isEmpty();
		local_ref< java::lang::Object > lastElement();
		cpp_int lastIndexOf(local_ref< java::lang::Object > const&);
		cpp_int lastIndexOf(local_ref< java::lang::Object > const&, cpp_int const&);
		local_ref< java::lang::Object > remove(cpp_int const&);
		cpp_boolean remove(local_ref< java::lang::Object > const&);
		cpp_boolean removeAll(local_ref< java::util::Collection > const&);
		void removeAllElements();
		cpp_boolean removeElement(local_ref< java::lang::Object > const&);
		void removeElementAt(cpp_int const&);
		cpp_boolean retainAll(local_ref< java::util::Collection > const&);
		local_ref< java::lang::Object > set(cpp_int const&, local_ref< java::lang::Object > const&);
		void setElementAt(local_ref< java::lang::Object > const&, cpp_int const&);
		void setSize(cpp_int const&);
		cpp_int size();
		local_ref< java::util::List > subList(cpp_int const&, cpp_int const&);
		local_ref< cpp_object_array<java::lang::Object, 1> > toArray();
		local_ref< cpp_object_array<java::lang::Object, 1> > toArray(local_ref< cpp_object_array<java::lang::Object, 1> > const&);
		local_ref< java::lang::String > toString();
		void trimToSize();

	}; //class Vector

} //namespace util
} //namespace java


} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_VECTOR_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_VECTOR_HPP_IMPL
#define J2CPP_JAVA_UTIL_VECTOR_HPP_IMPL

namespace j2cpp {


template <>
local_ref< java::util::Vector > create< java::util::Vector>()
{
	return local_ref< java::util::Vector >(
		environment::get().get_jenv()->NewObject(
			get_class<java::util::Vector::J2CPP_CLASS_NAME>(),
			get_method_id<java::util::Vector::J2CPP_CLASS_NAME, java::util::Vector::J2CPP_METHOD_NAME(0), java::util::Vector::J2CPP_METHOD_SIGNATURE(0), false>()
		)
	);
}

template <>
local_ref< java::util::Vector > create< java::util::Vector>(cpp_int const &a0)
{
	return local_ref< java::util::Vector >(
		environment::get().get_jenv()->NewObject(
			get_class<java::util::Vector::J2CPP_CLASS_NAME>(),
			get_method_id<java::util::Vector::J2CPP_CLASS_NAME, java::util::Vector::J2CPP_METHOD_NAME(1), java::util::Vector::J2CPP_METHOD_SIGNATURE(1), false>(),
			a0.get_jtype()
		)
	);
}

template <>
local_ref< java::util::Vector > create< java::util::Vector>(cpp_int const &a0, cpp_int const &a1)
{
	return local_ref< java::util::Vector >(
		environment::get().get_jenv()->NewObject(
			get_class<java::util::Vector::J2CPP_CLASS_NAME>(),
			get_method_id<java::util::Vector::J2CPP_CLASS_NAME, java::util::Vector::J2CPP_METHOD_NAME(2), java::util::Vector::J2CPP_METHOD_SIGNATURE(2), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

template <>
local_ref< java::util::Vector > create< java::util::Vector>(local_ref< java::util::Collection > const &a0)
{
	return local_ref< java::util::Vector >(
		environment::get().get_jenv()->NewObject(
			get_class<java::util::Vector::J2CPP_CLASS_NAME>(),
			get_method_id<java::util::Vector::J2CPP_CLASS_NAME, java::util::Vector::J2CPP_METHOD_NAME(3), java::util::Vector::J2CPP_METHOD_SIGNATURE(3), false>(),
			a0.get_jtype()
		)
	);
}

void java::util::Vector::add(cpp_int const &a0, local_ref< java::lang::Object > const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_boolean java::util::Vector::add(local_ref< java::lang::Object > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean java::util::Vector::addAll(cpp_int const &a0, local_ref< java::util::Collection > const &a1)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_boolean java::util::Vector::addAll(local_ref< java::util::Collection > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(7), J2CPP_METHOD_SIGNATURE(7), false>(),
			a0.get_jtype()
		)
	);
}

void java::util::Vector::addElement(local_ref< java::lang::Object > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(8), J2CPP_METHOD_SIGNATURE(8), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int java::util::Vector::capacity()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(9), J2CPP_METHOD_SIGNATURE(9), false>()
		)
	);
}

void java::util::Vector::clear()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(10), J2CPP_METHOD_SIGNATURE(10), false>()
		)
	);
}

local_ref< java::lang::Object > java::util::Vector::clone()
{
	return local_ref< java::lang::Object >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(11), J2CPP_METHOD_SIGNATURE(11), false>()
		)
	);
}

cpp_boolean java::util::Vector::contains(local_ref< java::lang::Object > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(12), J2CPP_METHOD_SIGNATURE(12), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean java::util::Vector::containsAll(local_ref< java::util::Collection > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(13), J2CPP_METHOD_SIGNATURE(13), false>(),
			a0.get_jtype()
		)
	);
}

void java::util::Vector::copyInto(local_ref< cpp_object_array<java::lang::Object, 1> > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(14), J2CPP_METHOD_SIGNATURE(14), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::Object > java::util::Vector::elementAt(cpp_int const &a0)
{
	return local_ref< java::lang::Object >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(15), J2CPP_METHOD_SIGNATURE(15), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::util::Enumeration > java::util::Vector::elements()
{
	return local_ref< java::util::Enumeration >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(16), J2CPP_METHOD_SIGNATURE(16), false>()
		)
	);
}

void java::util::Vector::ensureCapacity(cpp_int const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(17), J2CPP_METHOD_SIGNATURE(17), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean java::util::Vector::equals(local_ref< java::lang::Object > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(18), J2CPP_METHOD_SIGNATURE(18), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::Object > java::util::Vector::firstElement()
{
	return local_ref< java::lang::Object >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(19), J2CPP_METHOD_SIGNATURE(19), false>()
		)
	);
}

local_ref< java::lang::Object > java::util::Vector::get(cpp_int const &a0)
{
	return local_ref< java::lang::Object >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(20), J2CPP_METHOD_SIGNATURE(20), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int java::util::Vector::hashCode()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(21), J2CPP_METHOD_SIGNATURE(21), false>()
		)
	);
}

cpp_int java::util::Vector::indexOf(local_ref< java::lang::Object > const &a0)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(22), J2CPP_METHOD_SIGNATURE(22), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int java::util::Vector::indexOf(local_ref< java::lang::Object > const &a0, cpp_int const &a1)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(23), J2CPP_METHOD_SIGNATURE(23), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void java::util::Vector::insertElementAt(local_ref< java::lang::Object > const &a0, cpp_int const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(24), J2CPP_METHOD_SIGNATURE(24), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_boolean java::util::Vector::isEmpty()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(25), J2CPP_METHOD_SIGNATURE(25), false>()
		)
	);
}

local_ref< java::lang::Object > java::util::Vector::lastElement()
{
	return local_ref< java::lang::Object >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(26), J2CPP_METHOD_SIGNATURE(26), false>()
		)
	);
}

cpp_int java::util::Vector::lastIndexOf(local_ref< java::lang::Object > const &a0)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(27), J2CPP_METHOD_SIGNATURE(27), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int java::util::Vector::lastIndexOf(local_ref< java::lang::Object > const &a0, cpp_int const &a1)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(28), J2CPP_METHOD_SIGNATURE(28), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< java::lang::Object > java::util::Vector::remove(cpp_int const &a0)
{
	return local_ref< java::lang::Object >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(29), J2CPP_METHOD_SIGNATURE(29), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean java::util::Vector::remove(local_ref< java::lang::Object > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(30), J2CPP_METHOD_SIGNATURE(30), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean java::util::Vector::removeAll(local_ref< java::util::Collection > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(31), J2CPP_METHOD_SIGNATURE(31), false>(),
			a0.get_jtype()
		)
	);
}

void java::util::Vector::removeAllElements()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(32), J2CPP_METHOD_SIGNATURE(32), false>()
		)
	);
}

cpp_boolean java::util::Vector::removeElement(local_ref< java::lang::Object > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(33), J2CPP_METHOD_SIGNATURE(33), false>(),
			a0.get_jtype()
		)
	);
}

void java::util::Vector::removeElementAt(cpp_int const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(34), J2CPP_METHOD_SIGNATURE(34), false>(),
			a0.get_jtype()
		)
	);
}


cpp_boolean java::util::Vector::retainAll(local_ref< java::util::Collection > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(36), J2CPP_METHOD_SIGNATURE(36), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::Object > java::util::Vector::set(cpp_int const &a0, local_ref< java::lang::Object > const &a1)
{
	return local_ref< java::lang::Object >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(37), J2CPP_METHOD_SIGNATURE(37), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void java::util::Vector::setElementAt(local_ref< java::lang::Object > const &a0, cpp_int const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(38), J2CPP_METHOD_SIGNATURE(38), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void java::util::Vector::setSize(cpp_int const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(39), J2CPP_METHOD_SIGNATURE(39), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int java::util::Vector::size()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(40), J2CPP_METHOD_SIGNATURE(40), false>()
		)
	);
}

local_ref< java::util::List > java::util::Vector::subList(cpp_int const &a0, cpp_int const &a1)
{
	return local_ref< java::util::List >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(41), J2CPP_METHOD_SIGNATURE(41), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< cpp_object_array<java::lang::Object, 1> > java::util::Vector::toArray()
{
	return local_ref< cpp_object_array<java::lang::Object, 1> >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(42), J2CPP_METHOD_SIGNATURE(42), false>()
		)
	);
}

local_ref< cpp_object_array<java::lang::Object, 1> > java::util::Vector::toArray(local_ref< cpp_object_array<java::lang::Object, 1> > const &a0)
{
	return local_ref< cpp_object_array<java::lang::Object, 1> >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(43), J2CPP_METHOD_SIGNATURE(43), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::String > java::util::Vector::toString()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(44), J2CPP_METHOD_SIGNATURE(44), false>()
		)
	);
}

void java::util::Vector::trimToSize()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(45), J2CPP_METHOD_SIGNATURE(45), false>()
		)
	);
}



J2CPP_DEFINE_CLASS(java::util::Vector,"java/util/Vector")
J2CPP_DEFINE_METHOD(java::util::Vector,0,"<init>","()V")
J2CPP_DEFINE_METHOD(java::util::Vector,1,"<init>","(I)V")
J2CPP_DEFINE_METHOD(java::util::Vector,2,"<init>","(II)V")
J2CPP_DEFINE_METHOD(java::util::Vector,3,"<init>","(Ljava/util/Collection;)V")
J2CPP_DEFINE_METHOD(java::util::Vector,4,"add","(ILjava/lang/Object;)V")
J2CPP_DEFINE_METHOD(java::util::Vector,5,"add","(Ljava/lang/Object;)Z")
J2CPP_DEFINE_METHOD(java::util::Vector,6,"addAll","(ILjava/util/Collection;)Z")
J2CPP_DEFINE_METHOD(java::util::Vector,7,"addAll","(Ljava/util/Collection;)Z")
J2CPP_DEFINE_METHOD(java::util::Vector,8,"addElement","(Ljava/lang/Object;)V")
J2CPP_DEFINE_METHOD(java::util::Vector,9,"capacity","()I")
J2CPP_DEFINE_METHOD(java::util::Vector,10,"clear","()V")
J2CPP_DEFINE_METHOD(java::util::Vector,11,"clone","()Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(java::util::Vector,12,"contains","(Ljava/lang/Object;)Z")
J2CPP_DEFINE_METHOD(java::util::Vector,13,"containsAll","(Ljava/util/Collection;)Z")
J2CPP_DEFINE_METHOD(java::util::Vector,14,"copyInto","([java.lang.Object)V")
J2CPP_DEFINE_METHOD(java::util::Vector,15,"elementAt","(I)Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(java::util::Vector,16,"elements","()Ljava/util/Enumeration;")
J2CPP_DEFINE_METHOD(java::util::Vector,17,"ensureCapacity","(I)V")
J2CPP_DEFINE_METHOD(java::util::Vector,18,"equals","(Ljava/lang/Object;)Z")
J2CPP_DEFINE_METHOD(java::util::Vector,19,"firstElement","()Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(java::util::Vector,20,"get","(I)Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(java::util::Vector,21,"hashCode","()I")
J2CPP_DEFINE_METHOD(java::util::Vector,22,"indexOf","(Ljava/lang/Object;)I")
J2CPP_DEFINE_METHOD(java::util::Vector,23,"indexOf","(Ljava/lang/Object;I)I")
J2CPP_DEFINE_METHOD(java::util::Vector,24,"insertElementAt","(Ljava/lang/Object;I)V")
J2CPP_DEFINE_METHOD(java::util::Vector,25,"isEmpty","()Z")
J2CPP_DEFINE_METHOD(java::util::Vector,26,"lastElement","()Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(java::util::Vector,27,"lastIndexOf","(Ljava/lang/Object;)I")
J2CPP_DEFINE_METHOD(java::util::Vector,28,"lastIndexOf","(Ljava/lang/Object;I)I")
J2CPP_DEFINE_METHOD(java::util::Vector,29,"remove","(I)Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(java::util::Vector,30,"remove","(Ljava/lang/Object;)Z")
J2CPP_DEFINE_METHOD(java::util::Vector,31,"removeAll","(Ljava/util/Collection;)Z")
J2CPP_DEFINE_METHOD(java::util::Vector,32,"removeAllElements","()V")
J2CPP_DEFINE_METHOD(java::util::Vector,33,"removeElement","(Ljava/lang/Object;)Z")
J2CPP_DEFINE_METHOD(java::util::Vector,34,"removeElementAt","(I)V")
J2CPP_DEFINE_METHOD(java::util::Vector,35,"removeRange","(II)V")
J2CPP_DEFINE_METHOD(java::util::Vector,36,"retainAll","(Ljava/util/Collection;)Z")
J2CPP_DEFINE_METHOD(java::util::Vector,37,"set","(ILjava/lang/Object;)Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(java::util::Vector,38,"setElementAt","(Ljava/lang/Object;I)V")
J2CPP_DEFINE_METHOD(java::util::Vector,39,"setSize","(I)V")
J2CPP_DEFINE_METHOD(java::util::Vector,40,"size","()I")
J2CPP_DEFINE_METHOD(java::util::Vector,41,"subList","(II)Ljava/util/List;")
J2CPP_DEFINE_METHOD(java::util::Vector,42,"toArray","()[java.lang.Object")
J2CPP_DEFINE_METHOD(java::util::Vector,43,"toArray","([java.lang.Object)[java.lang.Object")
J2CPP_DEFINE_METHOD(java::util::Vector,44,"toString","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::util::Vector,45,"trimToSize","()V")
J2CPP_DEFINE_FIELD(java::util::Vector,0,"elementCount","I")
J2CPP_DEFINE_FIELD(java::util::Vector,1,"elementData","[java.lang.Object")
J2CPP_DEFINE_FIELD(java::util::Vector,2,"capacityIncrement","I")

} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_VECTOR_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
