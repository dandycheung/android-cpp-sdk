/*================================================================================
  code generated by: java2cpp
  class: java.util.logging.FileHandler
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_LOGGING_FILEHANDLER_HPP_DECL
#define J2CPP_JAVA_UTIL_LOGGING_FILEHANDLER_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace util { namespace logging { class LogRecord; } } } }


#include <java/lang/String.hpp>
#include <java/util/logging/LogRecord.hpp>


namespace j2cpp {

namespace java { namespace util { namespace logging {

	class FileHandler;
	class FileHandler
		: public cpp_object<FileHandler>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)

		FileHandler(jobject jobj)
		: cpp_object<FileHandler>(jobj)
		{
		}

		void close();
		void publish(local_ref< java::util::logging::LogRecord > const&);
	}; //class FileHandler

} //namespace logging
} //namespace util
} //namespace java


} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_LOGGING_FILEHANDLER_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_LOGGING_FILEHANDLER_HPP_IMPL
#define J2CPP_JAVA_UTIL_LOGGING_FILEHANDLER_HPP_IMPL

namespace j2cpp {


template <>
local_ref< java::util::logging::FileHandler > create< java::util::logging::FileHandler>()
{
	return local_ref< java::util::logging::FileHandler >(
		environment::get().get_jenv()->NewObject(
			get_class<java::util::logging::FileHandler::J2CPP_CLASS_NAME>(),
			get_method_id<java::util::logging::FileHandler::J2CPP_CLASS_NAME, java::util::logging::FileHandler::J2CPP_METHOD_NAME(0), java::util::logging::FileHandler::J2CPP_METHOD_SIGNATURE(0), false>()
		)
	);
}

template <>
local_ref< java::util::logging::FileHandler > create< java::util::logging::FileHandler>(local_ref< java::lang::String > const &a0)
{
	return local_ref< java::util::logging::FileHandler >(
		environment::get().get_jenv()->NewObject(
			get_class<java::util::logging::FileHandler::J2CPP_CLASS_NAME>(),
			get_method_id<java::util::logging::FileHandler::J2CPP_CLASS_NAME, java::util::logging::FileHandler::J2CPP_METHOD_NAME(1), java::util::logging::FileHandler::J2CPP_METHOD_SIGNATURE(1), false>(),
			a0.get_jtype()
		)
	);
}

template <>
local_ref< java::util::logging::FileHandler > create< java::util::logging::FileHandler>(local_ref< java::lang::String > const &a0, cpp_boolean const &a1)
{
	return local_ref< java::util::logging::FileHandler >(
		environment::get().get_jenv()->NewObject(
			get_class<java::util::logging::FileHandler::J2CPP_CLASS_NAME>(),
			get_method_id<java::util::logging::FileHandler::J2CPP_CLASS_NAME, java::util::logging::FileHandler::J2CPP_METHOD_NAME(2), java::util::logging::FileHandler::J2CPP_METHOD_SIGNATURE(2), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

template <>
local_ref< java::util::logging::FileHandler > create< java::util::logging::FileHandler>(local_ref< java::lang::String > const &a0, cpp_int const &a1, cpp_int const &a2)
{
	return local_ref< java::util::logging::FileHandler >(
		environment::get().get_jenv()->NewObject(
			get_class<java::util::logging::FileHandler::J2CPP_CLASS_NAME>(),
			get_method_id<java::util::logging::FileHandler::J2CPP_CLASS_NAME, java::util::logging::FileHandler::J2CPP_METHOD_NAME(3), java::util::logging::FileHandler::J2CPP_METHOD_SIGNATURE(3), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

template <>
local_ref< java::util::logging::FileHandler > create< java::util::logging::FileHandler>(local_ref< java::lang::String > const &a0, cpp_int const &a1, cpp_int const &a2, cpp_boolean const &a3)
{
	return local_ref< java::util::logging::FileHandler >(
		environment::get().get_jenv()->NewObject(
			get_class<java::util::logging::FileHandler::J2CPP_CLASS_NAME>(),
			get_method_id<java::util::logging::FileHandler::J2CPP_CLASS_NAME, java::util::logging::FileHandler::J2CPP_METHOD_NAME(4), java::util::logging::FileHandler::J2CPP_METHOD_SIGNATURE(4), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype(), a3.get_jtype()
		)
	);
}

void java::util::logging::FileHandler::close()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>()
		)
	);
}

void java::util::logging::FileHandler::publish(local_ref< java::util::logging::LogRecord > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>(),
			a0.get_jtype()
		)
	);
}


J2CPP_DEFINE_CLASS(java::util::logging::FileHandler,"java/util/logging/FileHandler")
J2CPP_DEFINE_METHOD(java::util::logging::FileHandler,0,"<init>","()V")
J2CPP_DEFINE_METHOD(java::util::logging::FileHandler,1,"<init>","(Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(java::util::logging::FileHandler,2,"<init>","(Ljava/lang/String;Z)V")
J2CPP_DEFINE_METHOD(java::util::logging::FileHandler,3,"<init>","(Ljava/lang/String;II)V")
J2CPP_DEFINE_METHOD(java::util::logging::FileHandler,4,"<init>","(Ljava/lang/String;IIZ)V")
J2CPP_DEFINE_METHOD(java::util::logging::FileHandler,5,"close","()V")
J2CPP_DEFINE_METHOD(java::util::logging::FileHandler,6,"publish","(Ljava/util/logging/LogRecord;)V")

} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_LOGGING_FILEHANDLER_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
