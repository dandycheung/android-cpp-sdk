/*================================================================================
  code generated by: java2cpp
  class: java.util.logging.MemoryHandler
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_LOGGING_MEMORYHANDLER_HPP_DECL
#define J2CPP_JAVA_UTIL_LOGGING_MEMORYHANDLER_HPP_DECL


namespace j2cpp { namespace java { namespace util { namespace logging { class Handler; } } } }
namespace j2cpp { namespace java { namespace util { namespace logging { class LogRecord; } } } }
namespace j2cpp { namespace java { namespace util { namespace logging { class Level; } } } }


#include <java/util/logging/Handler.hpp>
#include <java/util/logging/Level.hpp>
#include <java/util/logging/LogRecord.hpp>


namespace j2cpp {

namespace java { namespace util { namespace logging {

	class MemoryHandler;
	class MemoryHandler
		: public cpp_object<MemoryHandler>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)

		MemoryHandler(jobject jobj)
		: cpp_object<MemoryHandler>(jobj)
		{
		}

		void close();
		void flush();
		void publish(local_ref< java::util::logging::LogRecord > const&);
		local_ref< java::util::logging::Level > getPushLevel();
		cpp_boolean isLoggable(local_ref< java::util::logging::LogRecord > const&);
		void push();
		void setPushLevel(local_ref< java::util::logging::Level > const&);
	}; //class MemoryHandler

} //namespace logging
} //namespace util
} //namespace java


} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_LOGGING_MEMORYHANDLER_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_LOGGING_MEMORYHANDLER_HPP_IMPL
#define J2CPP_JAVA_UTIL_LOGGING_MEMORYHANDLER_HPP_IMPL

namespace j2cpp {


template <>
local_ref< java::util::logging::MemoryHandler > create< java::util::logging::MemoryHandler>()
{
	return local_ref< java::util::logging::MemoryHandler >(
		environment::get().get_jenv()->NewObject(
			get_class<java::util::logging::MemoryHandler::J2CPP_CLASS_NAME>(),
			get_method_id<java::util::logging::MemoryHandler::J2CPP_CLASS_NAME, java::util::logging::MemoryHandler::J2CPP_METHOD_NAME(0), java::util::logging::MemoryHandler::J2CPP_METHOD_SIGNATURE(0), false>()
		)
	);
}

template <>
local_ref< java::util::logging::MemoryHandler > create< java::util::logging::MemoryHandler>(local_ref< java::util::logging::Handler > const &a0, cpp_int const &a1, local_ref< java::util::logging::Level > const &a2)
{
	return local_ref< java::util::logging::MemoryHandler >(
		environment::get().get_jenv()->NewObject(
			get_class<java::util::logging::MemoryHandler::J2CPP_CLASS_NAME>(),
			get_method_id<java::util::logging::MemoryHandler::J2CPP_CLASS_NAME, java::util::logging::MemoryHandler::J2CPP_METHOD_NAME(1), java::util::logging::MemoryHandler::J2CPP_METHOD_SIGNATURE(1), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

void java::util::logging::MemoryHandler::close()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>()
		)
	);
}

void java::util::logging::MemoryHandler::flush()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>()
		)
	);
}

void java::util::logging::MemoryHandler::publish(local_ref< java::util::logging::LogRecord > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::util::logging::Level > java::util::logging::MemoryHandler::getPushLevel()
{
	return local_ref< java::util::logging::Level >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>()
		)
	);
}

cpp_boolean java::util::logging::MemoryHandler::isLoggable(local_ref< java::util::logging::LogRecord > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>(),
			a0.get_jtype()
		)
	);
}

void java::util::logging::MemoryHandler::push()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(7), J2CPP_METHOD_SIGNATURE(7), false>()
		)
	);
}

void java::util::logging::MemoryHandler::setPushLevel(local_ref< java::util::logging::Level > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(8), J2CPP_METHOD_SIGNATURE(8), false>(),
			a0.get_jtype()
		)
	);
}


J2CPP_DEFINE_CLASS(java::util::logging::MemoryHandler,"java/util/logging/MemoryHandler")
J2CPP_DEFINE_METHOD(java::util::logging::MemoryHandler,0,"<init>","()V")
J2CPP_DEFINE_METHOD(java::util::logging::MemoryHandler,1,"<init>","(Ljava/util/logging/Handler;ILjava/util/logging/Level;)V")
J2CPP_DEFINE_METHOD(java::util::logging::MemoryHandler,2,"close","()V")
J2CPP_DEFINE_METHOD(java::util::logging::MemoryHandler,3,"flush","()V")
J2CPP_DEFINE_METHOD(java::util::logging::MemoryHandler,4,"publish","(Ljava/util/logging/LogRecord;)V")
J2CPP_DEFINE_METHOD(java::util::logging::MemoryHandler,5,"getPushLevel","()Ljava/util/logging/Level;")
J2CPP_DEFINE_METHOD(java::util::logging::MemoryHandler,6,"isLoggable","(Ljava/util/logging/LogRecord;)Z")
J2CPP_DEFINE_METHOD(java::util::logging::MemoryHandler,7,"push","()V")
J2CPP_DEFINE_METHOD(java::util::logging::MemoryHandler,8,"setPushLevel","(Ljava/util/logging/Level;)V")

} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_LOGGING_MEMORYHANDLER_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
