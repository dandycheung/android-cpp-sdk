/*================================================================================
  code generated by: java2cpp
  class: java.util.logging.LogRecord
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_LOGGING_LOGRECORD_HPP_DECL
#define J2CPP_JAVA_UTIL_LOGGING_LOGRECORD_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace lang { class Throwable; } } }
namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace util { class ResourceBundle; } } }
namespace j2cpp { namespace java { namespace util { namespace logging { class Level; } } } }


#include <java/lang/Object.hpp>
#include <java/lang/String.hpp>
#include <java/lang/Throwable.hpp>
#include <java/util/ResourceBundle.hpp>
#include <java/util/logging/Level.hpp>


namespace j2cpp {

namespace java { namespace util { namespace logging {

	class LogRecord;
	class LogRecord
		: public cpp_object<LogRecord>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_METHOD(12)
		J2CPP_DECLARE_METHOD(13)
		J2CPP_DECLARE_METHOD(14)
		J2CPP_DECLARE_METHOD(15)
		J2CPP_DECLARE_METHOD(16)
		J2CPP_DECLARE_METHOD(17)
		J2CPP_DECLARE_METHOD(18)
		J2CPP_DECLARE_METHOD(19)
		J2CPP_DECLARE_METHOD(20)
		J2CPP_DECLARE_METHOD(21)
		J2CPP_DECLARE_METHOD(22)
		J2CPP_DECLARE_METHOD(23)
		J2CPP_DECLARE_METHOD(24)

		LogRecord(jobject jobj)
		: cpp_object<LogRecord>(jobj)
		{
		}

		local_ref< java::util::logging::Level > getLevel();
		void setLevel(local_ref< java::util::logging::Level > const&);
		local_ref< java::lang::String > getLoggerName();
		void setLoggerName(local_ref< java::lang::String > const&);
		local_ref< java::lang::String > getMessage();
		void setMessage(local_ref< java::lang::String > const&);
		cpp_long getMillis();
		void setMillis(cpp_long const&);
		local_ref< cpp_object_array<java::lang::Object, 1> > getParameters();
		void setParameters(local_ref< cpp_object_array<java::lang::Object, 1> > const&);
		local_ref< java::util::ResourceBundle > getResourceBundle();
		void setResourceBundle(local_ref< java::util::ResourceBundle > const&);
		local_ref< java::lang::String > getResourceBundleName();
		void setResourceBundleName(local_ref< java::lang::String > const&);
		cpp_long getSequenceNumber();
		void setSequenceNumber(cpp_long const&);
		local_ref< java::lang::String > getSourceClassName();
		void setSourceClassName(local_ref< java::lang::String > const&);
		local_ref< java::lang::String > getSourceMethodName();
		void setSourceMethodName(local_ref< java::lang::String > const&);
		cpp_int getThreadID();
		void setThreadID(cpp_int const&);
		local_ref< java::lang::Throwable > getThrown();
		void setThrown(local_ref< java::lang::Throwable > const&);
	}; //class LogRecord

} //namespace logging
} //namespace util
} //namespace java


} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_LOGGING_LOGRECORD_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_LOGGING_LOGRECORD_HPP_IMPL
#define J2CPP_JAVA_UTIL_LOGGING_LOGRECORD_HPP_IMPL

namespace j2cpp {


template <>
local_ref< java::util::logging::LogRecord > create< java::util::logging::LogRecord>(local_ref< java::util::logging::Level > const &a0, local_ref< java::lang::String > const &a1)
{
	return local_ref< java::util::logging::LogRecord >(
		environment::get().get_jenv()->NewObject(
			get_class<java::util::logging::LogRecord::J2CPP_CLASS_NAME>(),
			get_method_id<java::util::logging::LogRecord::J2CPP_CLASS_NAME, java::util::logging::LogRecord::J2CPP_METHOD_NAME(0), java::util::logging::LogRecord::J2CPP_METHOD_SIGNATURE(0), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< java::util::logging::Level > java::util::logging::LogRecord::getLevel()
{
	return local_ref< java::util::logging::Level >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), false>()
		)
	);
}

void java::util::logging::LogRecord::setLevel(local_ref< java::util::logging::Level > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::String > java::util::logging::LogRecord::getLoggerName()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>()
		)
	);
}

void java::util::logging::LogRecord::setLoggerName(local_ref< java::lang::String > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::String > java::util::logging::LogRecord::getMessage()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>()
		)
	);
}

void java::util::logging::LogRecord::setMessage(local_ref< java::lang::String > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>(),
			a0.get_jtype()
		)
	);
}

cpp_long java::util::logging::LogRecord::getMillis()
{
	return cpp_long(
		environment::get().get_jenv()->CallLongMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(7), J2CPP_METHOD_SIGNATURE(7), false>()
		)
	);
}

void java::util::logging::LogRecord::setMillis(cpp_long const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(8), J2CPP_METHOD_SIGNATURE(8), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< cpp_object_array<java::lang::Object, 1> > java::util::logging::LogRecord::getParameters()
{
	return local_ref< cpp_object_array<java::lang::Object, 1> >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(9), J2CPP_METHOD_SIGNATURE(9), false>()
		)
	);
}

void java::util::logging::LogRecord::setParameters(local_ref< cpp_object_array<java::lang::Object, 1> > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(10), J2CPP_METHOD_SIGNATURE(10), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::util::ResourceBundle > java::util::logging::LogRecord::getResourceBundle()
{
	return local_ref< java::util::ResourceBundle >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(11), J2CPP_METHOD_SIGNATURE(11), false>()
		)
	);
}

void java::util::logging::LogRecord::setResourceBundle(local_ref< java::util::ResourceBundle > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(12), J2CPP_METHOD_SIGNATURE(12), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::String > java::util::logging::LogRecord::getResourceBundleName()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(13), J2CPP_METHOD_SIGNATURE(13), false>()
		)
	);
}

void java::util::logging::LogRecord::setResourceBundleName(local_ref< java::lang::String > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(14), J2CPP_METHOD_SIGNATURE(14), false>(),
			a0.get_jtype()
		)
	);
}

cpp_long java::util::logging::LogRecord::getSequenceNumber()
{
	return cpp_long(
		environment::get().get_jenv()->CallLongMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(15), J2CPP_METHOD_SIGNATURE(15), false>()
		)
	);
}

void java::util::logging::LogRecord::setSequenceNumber(cpp_long const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(16), J2CPP_METHOD_SIGNATURE(16), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::String > java::util::logging::LogRecord::getSourceClassName()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(17), J2CPP_METHOD_SIGNATURE(17), false>()
		)
	);
}

void java::util::logging::LogRecord::setSourceClassName(local_ref< java::lang::String > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(18), J2CPP_METHOD_SIGNATURE(18), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::String > java::util::logging::LogRecord::getSourceMethodName()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(19), J2CPP_METHOD_SIGNATURE(19), false>()
		)
	);
}

void java::util::logging::LogRecord::setSourceMethodName(local_ref< java::lang::String > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(20), J2CPP_METHOD_SIGNATURE(20), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int java::util::logging::LogRecord::getThreadID()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(21), J2CPP_METHOD_SIGNATURE(21), false>()
		)
	);
}

void java::util::logging::LogRecord::setThreadID(cpp_int const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(22), J2CPP_METHOD_SIGNATURE(22), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::Throwable > java::util::logging::LogRecord::getThrown()
{
	return local_ref< java::lang::Throwable >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(23), J2CPP_METHOD_SIGNATURE(23), false>()
		)
	);
}

void java::util::logging::LogRecord::setThrown(local_ref< java::lang::Throwable > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(24), J2CPP_METHOD_SIGNATURE(24), false>(),
			a0.get_jtype()
		)
	);
}


J2CPP_DEFINE_CLASS(java::util::logging::LogRecord,"java/util/logging/LogRecord")
J2CPP_DEFINE_METHOD(java::util::logging::LogRecord,0,"<init>","(Ljava/util/logging/Level;Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(java::util::logging::LogRecord,1,"getLevel","()Ljava/util/logging/Level;")
J2CPP_DEFINE_METHOD(java::util::logging::LogRecord,2,"setLevel","(Ljava/util/logging/Level;)V")
J2CPP_DEFINE_METHOD(java::util::logging::LogRecord,3,"getLoggerName","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::util::logging::LogRecord,4,"setLoggerName","(Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(java::util::logging::LogRecord,5,"getMessage","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::util::logging::LogRecord,6,"setMessage","(Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(java::util::logging::LogRecord,7,"getMillis","()J")
J2CPP_DEFINE_METHOD(java::util::logging::LogRecord,8,"setMillis","(J)V")
J2CPP_DEFINE_METHOD(java::util::logging::LogRecord,9,"getParameters","()[java.lang.Object")
J2CPP_DEFINE_METHOD(java::util::logging::LogRecord,10,"setParameters","([java.lang.Object)V")
J2CPP_DEFINE_METHOD(java::util::logging::LogRecord,11,"getResourceBundle","()Ljava/util/ResourceBundle;")
J2CPP_DEFINE_METHOD(java::util::logging::LogRecord,12,"setResourceBundle","(Ljava/util/ResourceBundle;)V")
J2CPP_DEFINE_METHOD(java::util::logging::LogRecord,13,"getResourceBundleName","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::util::logging::LogRecord,14,"setResourceBundleName","(Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(java::util::logging::LogRecord,15,"getSequenceNumber","()J")
J2CPP_DEFINE_METHOD(java::util::logging::LogRecord,16,"setSequenceNumber","(J)V")
J2CPP_DEFINE_METHOD(java::util::logging::LogRecord,17,"getSourceClassName","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::util::logging::LogRecord,18,"setSourceClassName","(Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(java::util::logging::LogRecord,19,"getSourceMethodName","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::util::logging::LogRecord,20,"setSourceMethodName","(Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(java::util::logging::LogRecord,21,"getThreadID","()I")
J2CPP_DEFINE_METHOD(java::util::logging::LogRecord,22,"setThreadID","(I)V")
J2CPP_DEFINE_METHOD(java::util::logging::LogRecord,23,"getThrown","()Ljava/lang/Throwable;")
J2CPP_DEFINE_METHOD(java::util::logging::LogRecord,24,"setThrown","(Ljava/lang/Throwable;)V")

} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_LOGGING_LOGRECORD_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
