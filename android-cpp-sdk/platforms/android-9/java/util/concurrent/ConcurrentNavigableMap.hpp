/*================================================================================
  code generated by: java2cpp
  class: java.util.concurrent.ConcurrentNavigableMap
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_CONCURRENT_CONCURRENTNAVIGABLEMAP_HPP_DECL
#define J2CPP_JAVA_UTIL_CONCURRENT_CONCURRENTNAVIGABLEMAP_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace util { class NavigableSet; } } }


#include <java/lang/Object.hpp>
#include <java/util/NavigableSet.hpp>


namespace j2cpp {

namespace java { namespace util { namespace concurrent {

	class ConcurrentNavigableMap;
	class ConcurrentNavigableMap
		: public cpp_object<ConcurrentNavigableMap>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)

		ConcurrentNavigableMap(jobject jobj)
		: cpp_object<ConcurrentNavigableMap>(jobj)
		{
		}

		local_ref< java::util::concurrent::ConcurrentNavigableMap > subMap(local_ref< java::lang::Object > const&, cpp_boolean const&, local_ref< java::lang::Object > const&, cpp_boolean const&);
		local_ref< java::util::concurrent::ConcurrentNavigableMap > headMap(local_ref< java::lang::Object > const&, cpp_boolean const&);
		local_ref< java::util::concurrent::ConcurrentNavigableMap > tailMap(local_ref< java::lang::Object > const&, cpp_boolean const&);
		local_ref< java::util::concurrent::ConcurrentNavigableMap > subMap(local_ref< java::lang::Object > const&, local_ref< java::lang::Object > const&);
		local_ref< java::util::concurrent::ConcurrentNavigableMap > headMap(local_ref< java::lang::Object > const&);
		local_ref< java::util::concurrent::ConcurrentNavigableMap > tailMap(local_ref< java::lang::Object > const&);
		local_ref< java::util::concurrent::ConcurrentNavigableMap > descendingMap();
		local_ref< java::util::NavigableSet > navigableKeySet();
		local_ref< java::util::NavigableSet > keySet();
		local_ref< java::util::NavigableSet > descendingKeySet();
	}; //class ConcurrentNavigableMap

} //namespace concurrent
} //namespace util
} //namespace java


} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_CONCURRENT_CONCURRENTNAVIGABLEMAP_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_CONCURRENT_CONCURRENTNAVIGABLEMAP_HPP_IMPL
#define J2CPP_JAVA_UTIL_CONCURRENT_CONCURRENTNAVIGABLEMAP_HPP_IMPL

namespace j2cpp {


local_ref< java::util::concurrent::ConcurrentNavigableMap > java::util::concurrent::ConcurrentNavigableMap::subMap(local_ref< java::lang::Object > const &a0, cpp_boolean const &a1, local_ref< java::lang::Object > const &a2, cpp_boolean const &a3)
{
	return local_ref< java::util::concurrent::ConcurrentNavigableMap >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(0), J2CPP_METHOD_SIGNATURE(0), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype(), a3.get_jtype()
		)
	);
}

local_ref< java::util::concurrent::ConcurrentNavigableMap > java::util::concurrent::ConcurrentNavigableMap::headMap(local_ref< java::lang::Object > const &a0, cpp_boolean const &a1)
{
	return local_ref< java::util::concurrent::ConcurrentNavigableMap >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< java::util::concurrent::ConcurrentNavigableMap > java::util::concurrent::ConcurrentNavigableMap::tailMap(local_ref< java::lang::Object > const &a0, cpp_boolean const &a1)
{
	return local_ref< java::util::concurrent::ConcurrentNavigableMap >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< java::util::concurrent::ConcurrentNavigableMap > java::util::concurrent::ConcurrentNavigableMap::subMap(local_ref< java::lang::Object > const &a0, local_ref< java::lang::Object > const &a1)
{
	return local_ref< java::util::concurrent::ConcurrentNavigableMap >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< java::util::concurrent::ConcurrentNavigableMap > java::util::concurrent::ConcurrentNavigableMap::headMap(local_ref< java::lang::Object > const &a0)
{
	return local_ref< java::util::concurrent::ConcurrentNavigableMap >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::util::concurrent::ConcurrentNavigableMap > java::util::concurrent::ConcurrentNavigableMap::tailMap(local_ref< java::lang::Object > const &a0)
{
	return local_ref< java::util::concurrent::ConcurrentNavigableMap >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::util::concurrent::ConcurrentNavigableMap > java::util::concurrent::ConcurrentNavigableMap::descendingMap()
{
	return local_ref< java::util::concurrent::ConcurrentNavigableMap >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>()
		)
	);
}

local_ref< java::util::NavigableSet > java::util::concurrent::ConcurrentNavigableMap::navigableKeySet()
{
	return local_ref< java::util::NavigableSet >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(7), J2CPP_METHOD_SIGNATURE(7), false>()
		)
	);
}

local_ref< java::util::NavigableSet > java::util::concurrent::ConcurrentNavigableMap::keySet()
{
	return local_ref< java::util::NavigableSet >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(8), J2CPP_METHOD_SIGNATURE(8), false>()
		)
	);
}

local_ref< java::util::NavigableSet > java::util::concurrent::ConcurrentNavigableMap::descendingKeySet()
{
	return local_ref< java::util::NavigableSet >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(9), J2CPP_METHOD_SIGNATURE(9), false>()
		)
	);
}


J2CPP_DEFINE_CLASS(java::util::concurrent::ConcurrentNavigableMap,"java/util/concurrent/ConcurrentNavigableMap")
J2CPP_DEFINE_METHOD(java::util::concurrent::ConcurrentNavigableMap,0,"subMap","(Ljava/lang/Object;ZLjava/lang/Object;Z)Ljava/util/concurrent/ConcurrentNavigableMap;")
J2CPP_DEFINE_METHOD(java::util::concurrent::ConcurrentNavigableMap,1,"headMap","(Ljava/lang/Object;Z)Ljava/util/concurrent/ConcurrentNavigableMap;")
J2CPP_DEFINE_METHOD(java::util::concurrent::ConcurrentNavigableMap,2,"tailMap","(Ljava/lang/Object;Z)Ljava/util/concurrent/ConcurrentNavigableMap;")
J2CPP_DEFINE_METHOD(java::util::concurrent::ConcurrentNavigableMap,3,"subMap","(Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/concurrent/ConcurrentNavigableMap;")
J2CPP_DEFINE_METHOD(java::util::concurrent::ConcurrentNavigableMap,4,"headMap","(Ljava/lang/Object;)Ljava/util/concurrent/ConcurrentNavigableMap;")
J2CPP_DEFINE_METHOD(java::util::concurrent::ConcurrentNavigableMap,5,"tailMap","(Ljava/lang/Object;)Ljava/util/concurrent/ConcurrentNavigableMap;")
J2CPP_DEFINE_METHOD(java::util::concurrent::ConcurrentNavigableMap,6,"descendingMap","()Ljava/util/concurrent/ConcurrentNavigableMap;")
J2CPP_DEFINE_METHOD(java::util::concurrent::ConcurrentNavigableMap,7,"navigableKeySet","()Ljava/util/NavigableSet;")
J2CPP_DEFINE_METHOD(java::util::concurrent::ConcurrentNavigableMap,8,"keySet","()Ljava/util/NavigableSet;")
J2CPP_DEFINE_METHOD(java::util::concurrent::ConcurrentNavigableMap,9,"descendingKeySet","()Ljava/util/NavigableSet;")

} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_CONCURRENT_CONCURRENTNAVIGABLEMAP_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
