/*================================================================================
  code generated by: java2cpp
  class: java.util.concurrent.ConcurrentSkipListMap
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_CONCURRENT_CONCURRENTSKIPLISTMAP_HPP_DECL
#define J2CPP_JAVA_UTIL_CONCURRENT_CONCURRENTSKIPLISTMAP_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace util { class NavigableSet; } } }
namespace j2cpp { namespace java { namespace util { class Collection; } } }
namespace j2cpp { namespace java { namespace util { class Map; } } }
namespace j2cpp { namespace java { namespace util { class Comparator; } } }
namespace j2cpp { namespace java { namespace util { class NavigableMap; } } }
namespace j2cpp { namespace java { namespace util { namespace concurrent { class ConcurrentNavigableMap; } } } }
namespace j2cpp { namespace java { namespace util { namespace Map_ { class Entry; } } } }
namespace j2cpp { namespace java { namespace util { class Set; } } }
namespace j2cpp { namespace java { namespace util { class SortedMap; } } }


#include <java/lang/Object.hpp>
#include <java/util/Collection.hpp>
#include <java/util/Comparator.hpp>
#include <java/util/Map.hpp>
#include <java/util/NavigableMap.hpp>
#include <java/util/NavigableSet.hpp>
#include <java/util/Set.hpp>
#include <java/util/SortedMap.hpp>
#include <java/util/concurrent/ConcurrentNavigableMap.hpp>


namespace j2cpp {

namespace java { namespace util { namespace concurrent {

	class ConcurrentSkipListMap;
	class ConcurrentSkipListMap
		: public cpp_object<ConcurrentSkipListMap>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_METHOD(12)
		J2CPP_DECLARE_METHOD(13)
		J2CPP_DECLARE_METHOD(14)
		J2CPP_DECLARE_METHOD(15)
		J2CPP_DECLARE_METHOD(16)
		J2CPP_DECLARE_METHOD(17)
		J2CPP_DECLARE_METHOD(18)
		J2CPP_DECLARE_METHOD(19)
		J2CPP_DECLARE_METHOD(20)
		J2CPP_DECLARE_METHOD(21)
		J2CPP_DECLARE_METHOD(22)
		J2CPP_DECLARE_METHOD(23)
		J2CPP_DECLARE_METHOD(24)
		J2CPP_DECLARE_METHOD(25)
		J2CPP_DECLARE_METHOD(26)
		J2CPP_DECLARE_METHOD(27)
		J2CPP_DECLARE_METHOD(28)
		J2CPP_DECLARE_METHOD(29)
		J2CPP_DECLARE_METHOD(30)
		J2CPP_DECLARE_METHOD(31)
		J2CPP_DECLARE_METHOD(32)
		J2CPP_DECLARE_METHOD(33)
		J2CPP_DECLARE_METHOD(34)
		J2CPP_DECLARE_METHOD(35)
		J2CPP_DECLARE_METHOD(36)
		J2CPP_DECLARE_METHOD(37)
		J2CPP_DECLARE_METHOD(38)
		J2CPP_DECLARE_METHOD(39)
		J2CPP_DECLARE_METHOD(40)
		J2CPP_DECLARE_METHOD(41)
		J2CPP_DECLARE_METHOD(42)
		J2CPP_DECLARE_METHOD(43)
		J2CPP_DECLARE_METHOD(44)
		J2CPP_DECLARE_METHOD(45)
		J2CPP_DECLARE_METHOD(46)
		J2CPP_DECLARE_METHOD(47)
		J2CPP_DECLARE_METHOD(48)
		J2CPP_DECLARE_METHOD(49)
		J2CPP_DECLARE_METHOD(50)
		J2CPP_DECLARE_METHOD(51)
		J2CPP_DECLARE_METHOD(52)
		J2CPP_DECLARE_METHOD(53)

		ConcurrentSkipListMap(jobject jobj)
		: cpp_object<ConcurrentSkipListMap>(jobj)
		{
		}

		local_ref< java::util::concurrent::ConcurrentSkipListMap > clone();
		cpp_boolean containsKey(local_ref< java::lang::Object > const&);
		local_ref< java::lang::Object > get(local_ref< java::lang::Object > const&);
		local_ref< java::lang::Object > put(local_ref< java::lang::Object > const&, local_ref< java::lang::Object > const&);
		local_ref< java::lang::Object > remove(local_ref< java::lang::Object > const&);
		cpp_boolean containsValue(local_ref< java::lang::Object > const&);
		cpp_int size();
		cpp_boolean isEmpty();
		void clear();
		local_ref< java::util::NavigableSet > keySet();
		local_ref< java::util::NavigableSet > navigableKeySet();
		local_ref< java::util::Collection > values();
		local_ref< java::util::Set > entrySet();
		local_ref< java::util::concurrent::ConcurrentNavigableMap > descendingMap();
		local_ref< java::util::NavigableSet > descendingKeySet();
		cpp_boolean equals(local_ref< java::lang::Object > const&);
		local_ref< java::lang::Object > putIfAbsent(local_ref< java::lang::Object > const&, local_ref< java::lang::Object > const&);
		cpp_boolean remove(local_ref< java::lang::Object > const&, local_ref< java::lang::Object > const&);
		cpp_boolean replace(local_ref< java::lang::Object > const&, local_ref< java::lang::Object > const&, local_ref< java::lang::Object > const&);
		local_ref< java::lang::Object > replace(local_ref< java::lang::Object > const&, local_ref< java::lang::Object > const&);
		local_ref< java::util::Comparator > comparator();
		local_ref< java::lang::Object > firstKey();
		local_ref< java::lang::Object > lastKey();
		local_ref< java::util::concurrent::ConcurrentNavigableMap > subMap(local_ref< java::lang::Object > const&, cpp_boolean const&, local_ref< java::lang::Object > const&, cpp_boolean const&);
		local_ref< java::util::concurrent::ConcurrentNavigableMap > headMap(local_ref< java::lang::Object > const&, cpp_boolean const&);
		local_ref< java::util::concurrent::ConcurrentNavigableMap > tailMap(local_ref< java::lang::Object > const&, cpp_boolean const&);
		local_ref< java::util::concurrent::ConcurrentNavigableMap > subMap(local_ref< java::lang::Object > const&, local_ref< java::lang::Object > const&);
		local_ref< java::util::concurrent::ConcurrentNavigableMap > headMap(local_ref< java::lang::Object > const&);
		local_ref< java::util::concurrent::ConcurrentNavigableMap > tailMap(local_ref< java::lang::Object > const&);
		local_ref< java::util::Map_::Entry > lowerEntry(local_ref< java::lang::Object > const&);
		local_ref< java::lang::Object > lowerKey(local_ref< java::lang::Object > const&);
		local_ref< java::util::Map_::Entry > floorEntry(local_ref< java::lang::Object > const&);
		local_ref< java::lang::Object > floorKey(local_ref< java::lang::Object > const&);
		local_ref< java::util::Map_::Entry > ceilingEntry(local_ref< java::lang::Object > const&);
		local_ref< java::lang::Object > ceilingKey(local_ref< java::lang::Object > const&);
		local_ref< java::util::Map_::Entry > higherEntry(local_ref< java::lang::Object > const&);
		local_ref< java::lang::Object > higherKey(local_ref< java::lang::Object > const&);
		local_ref< java::util::Map_::Entry > firstEntry();
		local_ref< java::util::Map_::Entry > lastEntry();
		local_ref< java::util::Map_::Entry > pollFirstEntry();
		local_ref< java::util::Map_::Entry > pollLastEntry();
		local_ref< java::lang::Object > clone_1();
		local_ref< java::util::Set > keySet_1();
		local_ref< java::util::NavigableMap > tailMap_1(local_ref< java::lang::Object > const&, cpp_boolean const&);
		local_ref< java::util::NavigableMap > headMap_1(local_ref< java::lang::Object > const&, cpp_boolean const&);
		local_ref< java::util::NavigableMap > subMap_1(local_ref< java::lang::Object > const&, cpp_boolean const&, local_ref< java::lang::Object > const&, cpp_boolean const&);
		local_ref< java::util::NavigableMap > descendingMap_1();
		local_ref< java::util::SortedMap > tailMap_1(local_ref< java::lang::Object > const&);
		local_ref< java::util::SortedMap > subMap_1(local_ref< java::lang::Object > const&, local_ref< java::lang::Object > const&);
		local_ref< java::util::SortedMap > headMap_1(local_ref< java::lang::Object > const&);
	}; //class ConcurrentSkipListMap

} //namespace concurrent
} //namespace util
} //namespace java


} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_CONCURRENT_CONCURRENTSKIPLISTMAP_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_CONCURRENT_CONCURRENTSKIPLISTMAP_HPP_IMPL
#define J2CPP_JAVA_UTIL_CONCURRENT_CONCURRENTSKIPLISTMAP_HPP_IMPL

namespace j2cpp {


template <>
local_ref< java::util::concurrent::ConcurrentSkipListMap > create< java::util::concurrent::ConcurrentSkipListMap>()
{
	return local_ref< java::util::concurrent::ConcurrentSkipListMap >(
		environment::get().get_jenv()->NewObject(
			get_class<java::util::concurrent::ConcurrentSkipListMap::J2CPP_CLASS_NAME>(),
			get_method_id<java::util::concurrent::ConcurrentSkipListMap::J2CPP_CLASS_NAME, java::util::concurrent::ConcurrentSkipListMap::J2CPP_METHOD_NAME(0), java::util::concurrent::ConcurrentSkipListMap::J2CPP_METHOD_SIGNATURE(0), false>()
		)
	);
}

template <>
local_ref< java::util::concurrent::ConcurrentSkipListMap > create< java::util::concurrent::ConcurrentSkipListMap>(local_ref< java::util::Comparator > const &a0)
{
	return local_ref< java::util::concurrent::ConcurrentSkipListMap >(
		environment::get().get_jenv()->NewObject(
			get_class<java::util::concurrent::ConcurrentSkipListMap::J2CPP_CLASS_NAME>(),
			get_method_id<java::util::concurrent::ConcurrentSkipListMap::J2CPP_CLASS_NAME, java::util::concurrent::ConcurrentSkipListMap::J2CPP_METHOD_NAME(1), java::util::concurrent::ConcurrentSkipListMap::J2CPP_METHOD_SIGNATURE(1), false>(),
			a0.get_jtype()
		)
	);
}

template <>
local_ref< java::util::concurrent::ConcurrentSkipListMap > create< java::util::concurrent::ConcurrentSkipListMap>(local_ref< java::util::Map > const &a0)
{
	return local_ref< java::util::concurrent::ConcurrentSkipListMap >(
		environment::get().get_jenv()->NewObject(
			get_class<java::util::concurrent::ConcurrentSkipListMap::J2CPP_CLASS_NAME>(),
			get_method_id<java::util::concurrent::ConcurrentSkipListMap::J2CPP_CLASS_NAME, java::util::concurrent::ConcurrentSkipListMap::J2CPP_METHOD_NAME(2), java::util::concurrent::ConcurrentSkipListMap::J2CPP_METHOD_SIGNATURE(2), false>(),
			a0.get_jtype()
		)
	);
}

template <>
local_ref< java::util::concurrent::ConcurrentSkipListMap > create< java::util::concurrent::ConcurrentSkipListMap>(local_ref< java::util::SortedMap > const &a0)
{
	return local_ref< java::util::concurrent::ConcurrentSkipListMap >(
		environment::get().get_jenv()->NewObject(
			get_class<java::util::concurrent::ConcurrentSkipListMap::J2CPP_CLASS_NAME>(),
			get_method_id<java::util::concurrent::ConcurrentSkipListMap::J2CPP_CLASS_NAME, java::util::concurrent::ConcurrentSkipListMap::J2CPP_METHOD_NAME(3), java::util::concurrent::ConcurrentSkipListMap::J2CPP_METHOD_SIGNATURE(3), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::util::concurrent::ConcurrentSkipListMap > java::util::concurrent::ConcurrentSkipListMap::clone()
{
	return local_ref< java::util::concurrent::ConcurrentSkipListMap >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>()
		)
	);
}

cpp_boolean java::util::concurrent::ConcurrentSkipListMap::containsKey(local_ref< java::lang::Object > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::Object > java::util::concurrent::ConcurrentSkipListMap::get(local_ref< java::lang::Object > const &a0)
{
	return local_ref< java::lang::Object >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::Object > java::util::concurrent::ConcurrentSkipListMap::put(local_ref< java::lang::Object > const &a0, local_ref< java::lang::Object > const &a1)
{
	return local_ref< java::lang::Object >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(7), J2CPP_METHOD_SIGNATURE(7), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< java::lang::Object > java::util::concurrent::ConcurrentSkipListMap::remove(local_ref< java::lang::Object > const &a0)
{
	return local_ref< java::lang::Object >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(8), J2CPP_METHOD_SIGNATURE(8), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean java::util::concurrent::ConcurrentSkipListMap::containsValue(local_ref< java::lang::Object > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(9), J2CPP_METHOD_SIGNATURE(9), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int java::util::concurrent::ConcurrentSkipListMap::size()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(10), J2CPP_METHOD_SIGNATURE(10), false>()
		)
	);
}

cpp_boolean java::util::concurrent::ConcurrentSkipListMap::isEmpty()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(11), J2CPP_METHOD_SIGNATURE(11), false>()
		)
	);
}

void java::util::concurrent::ConcurrentSkipListMap::clear()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(12), J2CPP_METHOD_SIGNATURE(12), false>()
		)
	);
}

local_ref< java::util::NavigableSet > java::util::concurrent::ConcurrentSkipListMap::keySet()
{
	return local_ref< java::util::NavigableSet >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(13), J2CPP_METHOD_SIGNATURE(13), false>()
		)
	);
}

local_ref< java::util::NavigableSet > java::util::concurrent::ConcurrentSkipListMap::navigableKeySet()
{
	return local_ref< java::util::NavigableSet >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(14), J2CPP_METHOD_SIGNATURE(14), false>()
		)
	);
}

local_ref< java::util::Collection > java::util::concurrent::ConcurrentSkipListMap::values()
{
	return local_ref< java::util::Collection >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(15), J2CPP_METHOD_SIGNATURE(15), false>()
		)
	);
}

local_ref< java::util::Set > java::util::concurrent::ConcurrentSkipListMap::entrySet()
{
	return local_ref< java::util::Set >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(16), J2CPP_METHOD_SIGNATURE(16), false>()
		)
	);
}

local_ref< java::util::concurrent::ConcurrentNavigableMap > java::util::concurrent::ConcurrentSkipListMap::descendingMap()
{
	return local_ref< java::util::concurrent::ConcurrentNavigableMap >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(17), J2CPP_METHOD_SIGNATURE(17), false>()
		)
	);
}

local_ref< java::util::NavigableSet > java::util::concurrent::ConcurrentSkipListMap::descendingKeySet()
{
	return local_ref< java::util::NavigableSet >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(18), J2CPP_METHOD_SIGNATURE(18), false>()
		)
	);
}

cpp_boolean java::util::concurrent::ConcurrentSkipListMap::equals(local_ref< java::lang::Object > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(19), J2CPP_METHOD_SIGNATURE(19), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::Object > java::util::concurrent::ConcurrentSkipListMap::putIfAbsent(local_ref< java::lang::Object > const &a0, local_ref< java::lang::Object > const &a1)
{
	return local_ref< java::lang::Object >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(20), J2CPP_METHOD_SIGNATURE(20), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_boolean java::util::concurrent::ConcurrentSkipListMap::remove(local_ref< java::lang::Object > const &a0, local_ref< java::lang::Object > const &a1)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(21), J2CPP_METHOD_SIGNATURE(21), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_boolean java::util::concurrent::ConcurrentSkipListMap::replace(local_ref< java::lang::Object > const &a0, local_ref< java::lang::Object > const &a1, local_ref< java::lang::Object > const &a2)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(22), J2CPP_METHOD_SIGNATURE(22), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

local_ref< java::lang::Object > java::util::concurrent::ConcurrentSkipListMap::replace(local_ref< java::lang::Object > const &a0, local_ref< java::lang::Object > const &a1)
{
	return local_ref< java::lang::Object >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(23), J2CPP_METHOD_SIGNATURE(23), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< java::util::Comparator > java::util::concurrent::ConcurrentSkipListMap::comparator()
{
	return local_ref< java::util::Comparator >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(24), J2CPP_METHOD_SIGNATURE(24), false>()
		)
	);
}

local_ref< java::lang::Object > java::util::concurrent::ConcurrentSkipListMap::firstKey()
{
	return local_ref< java::lang::Object >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(25), J2CPP_METHOD_SIGNATURE(25), false>()
		)
	);
}

local_ref< java::lang::Object > java::util::concurrent::ConcurrentSkipListMap::lastKey()
{
	return local_ref< java::lang::Object >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(26), J2CPP_METHOD_SIGNATURE(26), false>()
		)
	);
}

local_ref< java::util::concurrent::ConcurrentNavigableMap > java::util::concurrent::ConcurrentSkipListMap::subMap(local_ref< java::lang::Object > const &a0, cpp_boolean const &a1, local_ref< java::lang::Object > const &a2, cpp_boolean const &a3)
{
	return local_ref< java::util::concurrent::ConcurrentNavigableMap >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(27), J2CPP_METHOD_SIGNATURE(27), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype(), a3.get_jtype()
		)
	);
}

local_ref< java::util::concurrent::ConcurrentNavigableMap > java::util::concurrent::ConcurrentSkipListMap::headMap(local_ref< java::lang::Object > const &a0, cpp_boolean const &a1)
{
	return local_ref< java::util::concurrent::ConcurrentNavigableMap >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(28), J2CPP_METHOD_SIGNATURE(28), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< java::util::concurrent::ConcurrentNavigableMap > java::util::concurrent::ConcurrentSkipListMap::tailMap(local_ref< java::lang::Object > const &a0, cpp_boolean const &a1)
{
	return local_ref< java::util::concurrent::ConcurrentNavigableMap >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(29), J2CPP_METHOD_SIGNATURE(29), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< java::util::concurrent::ConcurrentNavigableMap > java::util::concurrent::ConcurrentSkipListMap::subMap(local_ref< java::lang::Object > const &a0, local_ref< java::lang::Object > const &a1)
{
	return local_ref< java::util::concurrent::ConcurrentNavigableMap >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(30), J2CPP_METHOD_SIGNATURE(30), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< java::util::concurrent::ConcurrentNavigableMap > java::util::concurrent::ConcurrentSkipListMap::headMap(local_ref< java::lang::Object > const &a0)
{
	return local_ref< java::util::concurrent::ConcurrentNavigableMap >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(31), J2CPP_METHOD_SIGNATURE(31), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::util::concurrent::ConcurrentNavigableMap > java::util::concurrent::ConcurrentSkipListMap::tailMap(local_ref< java::lang::Object > const &a0)
{
	return local_ref< java::util::concurrent::ConcurrentNavigableMap >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(32), J2CPP_METHOD_SIGNATURE(32), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::util::Map_::Entry > java::util::concurrent::ConcurrentSkipListMap::lowerEntry(local_ref< java::lang::Object > const &a0)
{
	return local_ref< java::util::Map_::Entry >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(33), J2CPP_METHOD_SIGNATURE(33), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::Object > java::util::concurrent::ConcurrentSkipListMap::lowerKey(local_ref< java::lang::Object > const &a0)
{
	return local_ref< java::lang::Object >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(34), J2CPP_METHOD_SIGNATURE(34), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::util::Map_::Entry > java::util::concurrent::ConcurrentSkipListMap::floorEntry(local_ref< java::lang::Object > const &a0)
{
	return local_ref< java::util::Map_::Entry >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(35), J2CPP_METHOD_SIGNATURE(35), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::Object > java::util::concurrent::ConcurrentSkipListMap::floorKey(local_ref< java::lang::Object > const &a0)
{
	return local_ref< java::lang::Object >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(36), J2CPP_METHOD_SIGNATURE(36), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::util::Map_::Entry > java::util::concurrent::ConcurrentSkipListMap::ceilingEntry(local_ref< java::lang::Object > const &a0)
{
	return local_ref< java::util::Map_::Entry >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(37), J2CPP_METHOD_SIGNATURE(37), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::Object > java::util::concurrent::ConcurrentSkipListMap::ceilingKey(local_ref< java::lang::Object > const &a0)
{
	return local_ref< java::lang::Object >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(38), J2CPP_METHOD_SIGNATURE(38), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::util::Map_::Entry > java::util::concurrent::ConcurrentSkipListMap::higherEntry(local_ref< java::lang::Object > const &a0)
{
	return local_ref< java::util::Map_::Entry >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(39), J2CPP_METHOD_SIGNATURE(39), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::Object > java::util::concurrent::ConcurrentSkipListMap::higherKey(local_ref< java::lang::Object > const &a0)
{
	return local_ref< java::lang::Object >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(40), J2CPP_METHOD_SIGNATURE(40), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::util::Map_::Entry > java::util::concurrent::ConcurrentSkipListMap::firstEntry()
{
	return local_ref< java::util::Map_::Entry >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(41), J2CPP_METHOD_SIGNATURE(41), false>()
		)
	);
}

local_ref< java::util::Map_::Entry > java::util::concurrent::ConcurrentSkipListMap::lastEntry()
{
	return local_ref< java::util::Map_::Entry >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(42), J2CPP_METHOD_SIGNATURE(42), false>()
		)
	);
}

local_ref< java::util::Map_::Entry > java::util::concurrent::ConcurrentSkipListMap::pollFirstEntry()
{
	return local_ref< java::util::Map_::Entry >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(43), J2CPP_METHOD_SIGNATURE(43), false>()
		)
	);
}

local_ref< java::util::Map_::Entry > java::util::concurrent::ConcurrentSkipListMap::pollLastEntry()
{
	return local_ref< java::util::Map_::Entry >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(44), J2CPP_METHOD_SIGNATURE(44), false>()
		)
	);
}

local_ref< java::lang::Object > java::util::concurrent::ConcurrentSkipListMap::clone_1()
{
	return local_ref< java::lang::Object >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(45), J2CPP_METHOD_SIGNATURE(45), false>()
		)
	);
}

local_ref< java::util::Set > java::util::concurrent::ConcurrentSkipListMap::keySet_1()
{
	return local_ref< java::util::Set >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(46), J2CPP_METHOD_SIGNATURE(46), false>()
		)
	);
}

local_ref< java::util::NavigableMap > java::util::concurrent::ConcurrentSkipListMap::tailMap_1(local_ref< java::lang::Object > const &a0, cpp_boolean const &a1)
{
	return local_ref< java::util::NavigableMap >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(47), J2CPP_METHOD_SIGNATURE(47), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< java::util::NavigableMap > java::util::concurrent::ConcurrentSkipListMap::headMap_1(local_ref< java::lang::Object > const &a0, cpp_boolean const &a1)
{
	return local_ref< java::util::NavigableMap >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(48), J2CPP_METHOD_SIGNATURE(48), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< java::util::NavigableMap > java::util::concurrent::ConcurrentSkipListMap::subMap_1(local_ref< java::lang::Object > const &a0, cpp_boolean const &a1, local_ref< java::lang::Object > const &a2, cpp_boolean const &a3)
{
	return local_ref< java::util::NavigableMap >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(49), J2CPP_METHOD_SIGNATURE(49), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype(), a3.get_jtype()
		)
	);
}

local_ref< java::util::NavigableMap > java::util::concurrent::ConcurrentSkipListMap::descendingMap_1()
{
	return local_ref< java::util::NavigableMap >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(50), J2CPP_METHOD_SIGNATURE(50), false>()
		)
	);
}

local_ref< java::util::SortedMap > java::util::concurrent::ConcurrentSkipListMap::tailMap_1(local_ref< java::lang::Object > const &a0)
{
	return local_ref< java::util::SortedMap >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(51), J2CPP_METHOD_SIGNATURE(51), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::util::SortedMap > java::util::concurrent::ConcurrentSkipListMap::subMap_1(local_ref< java::lang::Object > const &a0, local_ref< java::lang::Object > const &a1)
{
	return local_ref< java::util::SortedMap >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(52), J2CPP_METHOD_SIGNATURE(52), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< java::util::SortedMap > java::util::concurrent::ConcurrentSkipListMap::headMap_1(local_ref< java::lang::Object > const &a0)
{
	return local_ref< java::util::SortedMap >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(53), J2CPP_METHOD_SIGNATURE(53), false>(),
			a0.get_jtype()
		)
	);
}


J2CPP_DEFINE_CLASS(java::util::concurrent::ConcurrentSkipListMap,"java/util/concurrent/ConcurrentSkipListMap")
J2CPP_DEFINE_METHOD(java::util::concurrent::ConcurrentSkipListMap,0,"<init>","()V")
J2CPP_DEFINE_METHOD(java::util::concurrent::ConcurrentSkipListMap,1,"<init>","(Ljava/util/Comparator;)V")
J2CPP_DEFINE_METHOD(java::util::concurrent::ConcurrentSkipListMap,2,"<init>","(Ljava/util/Map;)V")
J2CPP_DEFINE_METHOD(java::util::concurrent::ConcurrentSkipListMap,3,"<init>","(Ljava/util/SortedMap;)V")
J2CPP_DEFINE_METHOD(java::util::concurrent::ConcurrentSkipListMap,4,"clone","()Ljava/util/concurrent/ConcurrentSkipListMap;")
J2CPP_DEFINE_METHOD(java::util::concurrent::ConcurrentSkipListMap,5,"containsKey","(Ljava/lang/Object;)Z")
J2CPP_DEFINE_METHOD(java::util::concurrent::ConcurrentSkipListMap,6,"get","(Ljava/lang/Object;)Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(java::util::concurrent::ConcurrentSkipListMap,7,"put","(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(java::util::concurrent::ConcurrentSkipListMap,8,"remove","(Ljava/lang/Object;)Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(java::util::concurrent::ConcurrentSkipListMap,9,"containsValue","(Ljava/lang/Object;)Z")
J2CPP_DEFINE_METHOD(java::util::concurrent::ConcurrentSkipListMap,10,"size","()I")
J2CPP_DEFINE_METHOD(java::util::concurrent::ConcurrentSkipListMap,11,"isEmpty","()Z")
J2CPP_DEFINE_METHOD(java::util::concurrent::ConcurrentSkipListMap,12,"clear","()V")
J2CPP_DEFINE_METHOD(java::util::concurrent::ConcurrentSkipListMap,13,"keySet","()Ljava/util/NavigableSet;")
J2CPP_DEFINE_METHOD(java::util::concurrent::ConcurrentSkipListMap,14,"navigableKeySet","()Ljava/util/NavigableSet;")
J2CPP_DEFINE_METHOD(java::util::concurrent::ConcurrentSkipListMap,15,"values","()Ljava/util/Collection;")
J2CPP_DEFINE_METHOD(java::util::concurrent::ConcurrentSkipListMap,16,"entrySet","()Ljava/util/Set;")
J2CPP_DEFINE_METHOD(java::util::concurrent::ConcurrentSkipListMap,17,"descendingMap","()Ljava/util/concurrent/ConcurrentNavigableMap;")
J2CPP_DEFINE_METHOD(java::util::concurrent::ConcurrentSkipListMap,18,"descendingKeySet","()Ljava/util/NavigableSet;")
J2CPP_DEFINE_METHOD(java::util::concurrent::ConcurrentSkipListMap,19,"equals","(Ljava/lang/Object;)Z")
J2CPP_DEFINE_METHOD(java::util::concurrent::ConcurrentSkipListMap,20,"putIfAbsent","(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(java::util::concurrent::ConcurrentSkipListMap,21,"remove","(Ljava/lang/Object;Ljava/lang/Object;)Z")
J2CPP_DEFINE_METHOD(java::util::concurrent::ConcurrentSkipListMap,22,"replace","(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z")
J2CPP_DEFINE_METHOD(java::util::concurrent::ConcurrentSkipListMap,23,"replace","(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(java::util::concurrent::ConcurrentSkipListMap,24,"comparator","()Ljava/util/Comparator;")
J2CPP_DEFINE_METHOD(java::util::concurrent::ConcurrentSkipListMap,25,"firstKey","()Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(java::util::concurrent::ConcurrentSkipListMap,26,"lastKey","()Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(java::util::concurrent::ConcurrentSkipListMap,27,"subMap","(Ljava/lang/Object;ZLjava/lang/Object;Z)Ljava/util/concurrent/ConcurrentNavigableMap;")
J2CPP_DEFINE_METHOD(java::util::concurrent::ConcurrentSkipListMap,28,"headMap","(Ljava/lang/Object;Z)Ljava/util/concurrent/ConcurrentNavigableMap;")
J2CPP_DEFINE_METHOD(java::util::concurrent::ConcurrentSkipListMap,29,"tailMap","(Ljava/lang/Object;Z)Ljava/util/concurrent/ConcurrentNavigableMap;")
J2CPP_DEFINE_METHOD(java::util::concurrent::ConcurrentSkipListMap,30,"subMap","(Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/concurrent/ConcurrentNavigableMap;")
J2CPP_DEFINE_METHOD(java::util::concurrent::ConcurrentSkipListMap,31,"headMap","(Ljava/lang/Object;)Ljava/util/concurrent/ConcurrentNavigableMap;")
J2CPP_DEFINE_METHOD(java::util::concurrent::ConcurrentSkipListMap,32,"tailMap","(Ljava/lang/Object;)Ljava/util/concurrent/ConcurrentNavigableMap;")
J2CPP_DEFINE_METHOD(java::util::concurrent::ConcurrentSkipListMap,33,"lowerEntry","(Ljava/lang/Object;)Ljava/util/Map$Entry;")
J2CPP_DEFINE_METHOD(java::util::concurrent::ConcurrentSkipListMap,34,"lowerKey","(Ljava/lang/Object;)Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(java::util::concurrent::ConcurrentSkipListMap,35,"floorEntry","(Ljava/lang/Object;)Ljava/util/Map$Entry;")
J2CPP_DEFINE_METHOD(java::util::concurrent::ConcurrentSkipListMap,36,"floorKey","(Ljava/lang/Object;)Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(java::util::concurrent::ConcurrentSkipListMap,37,"ceilingEntry","(Ljava/lang/Object;)Ljava/util/Map$Entry;")
J2CPP_DEFINE_METHOD(java::util::concurrent::ConcurrentSkipListMap,38,"ceilingKey","(Ljava/lang/Object;)Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(java::util::concurrent::ConcurrentSkipListMap,39,"higherEntry","(Ljava/lang/Object;)Ljava/util/Map$Entry;")
J2CPP_DEFINE_METHOD(java::util::concurrent::ConcurrentSkipListMap,40,"higherKey","(Ljava/lang/Object;)Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(java::util::concurrent::ConcurrentSkipListMap,41,"firstEntry","()Ljava/util/Map$Entry;")
J2CPP_DEFINE_METHOD(java::util::concurrent::ConcurrentSkipListMap,42,"lastEntry","()Ljava/util/Map$Entry;")
J2CPP_DEFINE_METHOD(java::util::concurrent::ConcurrentSkipListMap,43,"pollFirstEntry","()Ljava/util/Map$Entry;")
J2CPP_DEFINE_METHOD(java::util::concurrent::ConcurrentSkipListMap,44,"pollLastEntry","()Ljava/util/Map$Entry;")
J2CPP_DEFINE_METHOD(java::util::concurrent::ConcurrentSkipListMap,45,"clone","()Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(java::util::concurrent::ConcurrentSkipListMap,46,"keySet","()Ljava/util/Set;")
J2CPP_DEFINE_METHOD(java::util::concurrent::ConcurrentSkipListMap,47,"tailMap","(Ljava/lang/Object;Z)Ljava/util/NavigableMap;")
J2CPP_DEFINE_METHOD(java::util::concurrent::ConcurrentSkipListMap,48,"headMap","(Ljava/lang/Object;Z)Ljava/util/NavigableMap;")
J2CPP_DEFINE_METHOD(java::util::concurrent::ConcurrentSkipListMap,49,"subMap","(Ljava/lang/Object;ZLjava/lang/Object;Z)Ljava/util/NavigableMap;")
J2CPP_DEFINE_METHOD(java::util::concurrent::ConcurrentSkipListMap,50,"descendingMap","()Ljava/util/NavigableMap;")
J2CPP_DEFINE_METHOD(java::util::concurrent::ConcurrentSkipListMap,51,"tailMap","(Ljava/lang/Object;)Ljava/util/SortedMap;")
J2CPP_DEFINE_METHOD(java::util::concurrent::ConcurrentSkipListMap,52,"subMap","(Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/SortedMap;")
J2CPP_DEFINE_METHOD(java::util::concurrent::ConcurrentSkipListMap,53,"headMap","(Ljava/lang/Object;)Ljava/util/SortedMap;")

} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_CONCURRENT_CONCURRENTSKIPLISTMAP_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
