/*================================================================================
  code generated by: java2cpp
  class: java.util.concurrent.ConcurrentSkipListSet
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_CONCURRENT_CONCURRENTSKIPLISTSET_HPP_DECL
#define J2CPP_JAVA_UTIL_CONCURRENT_CONCURRENTSKIPLISTSET_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace util { class SortedSet; } } }
namespace j2cpp { namespace java { namespace util { class Iterator; } } }
namespace j2cpp { namespace java { namespace util { class NavigableSet; } } }
namespace j2cpp { namespace java { namespace util { class Collection; } } }
namespace j2cpp { namespace java { namespace util { class Comparator; } } }


#include <java/lang/Object.hpp>
#include <java/util/Collection.hpp>
#include <java/util/Comparator.hpp>
#include <java/util/Iterator.hpp>
#include <java/util/NavigableSet.hpp>
#include <java/util/SortedSet.hpp>


namespace j2cpp {

namespace java { namespace util { namespace concurrent {

	class ConcurrentSkipListSet;
	class ConcurrentSkipListSet
		: public cpp_object<ConcurrentSkipListSet>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_METHOD(12)
		J2CPP_DECLARE_METHOD(13)
		J2CPP_DECLARE_METHOD(14)
		J2CPP_DECLARE_METHOD(15)
		J2CPP_DECLARE_METHOD(16)
		J2CPP_DECLARE_METHOD(17)
		J2CPP_DECLARE_METHOD(18)
		J2CPP_DECLARE_METHOD(19)
		J2CPP_DECLARE_METHOD(20)
		J2CPP_DECLARE_METHOD(21)
		J2CPP_DECLARE_METHOD(22)
		J2CPP_DECLARE_METHOD(23)
		J2CPP_DECLARE_METHOD(24)
		J2CPP_DECLARE_METHOD(25)
		J2CPP_DECLARE_METHOD(26)
		J2CPP_DECLARE_METHOD(27)
		J2CPP_DECLARE_METHOD(28)
		J2CPP_DECLARE_METHOD(29)
		J2CPP_DECLARE_METHOD(30)
		J2CPP_DECLARE_METHOD(31)
		J2CPP_DECLARE_METHOD(32)
		J2CPP_DECLARE_METHOD(33)
		J2CPP_DECLARE_METHOD(34)

		ConcurrentSkipListSet(jobject jobj)
		: cpp_object<ConcurrentSkipListSet>(jobj)
		{
		}

		local_ref< java::util::concurrent::ConcurrentSkipListSet > clone();
		cpp_int size();
		cpp_boolean isEmpty();
		cpp_boolean contains(local_ref< java::lang::Object > const&);
		cpp_boolean add(local_ref< java::lang::Object > const&);
		cpp_boolean remove(local_ref< java::lang::Object > const&);
		void clear();
		local_ref< java::util::Iterator > iterator();
		local_ref< java::util::Iterator > descendingIterator();
		cpp_boolean equals(local_ref< java::lang::Object > const&);
		cpp_boolean removeAll(local_ref< java::util::Collection > const&);
		local_ref< java::lang::Object > lower(local_ref< java::lang::Object > const&);
		local_ref< java::lang::Object > floor(local_ref< java::lang::Object > const&);
		local_ref< java::lang::Object > ceiling(local_ref< java::lang::Object > const&);
		local_ref< java::lang::Object > higher(local_ref< java::lang::Object > const&);
		local_ref< java::lang::Object > pollFirst();
		local_ref< java::lang::Object > pollLast();
		local_ref< java::util::Comparator > comparator();
		local_ref< java::lang::Object > first();
		local_ref< java::lang::Object > last();
		local_ref< java::util::NavigableSet > subSet(local_ref< java::lang::Object > const&, cpp_boolean const&, local_ref< java::lang::Object > const&, cpp_boolean const&);
		local_ref< java::util::NavigableSet > headSet(local_ref< java::lang::Object > const&, cpp_boolean const&);
		local_ref< java::util::NavigableSet > tailSet(local_ref< java::lang::Object > const&, cpp_boolean const&);
		local_ref< java::util::NavigableSet > subSet(local_ref< java::lang::Object > const&, local_ref< java::lang::Object > const&);
		local_ref< java::util::NavigableSet > headSet(local_ref< java::lang::Object > const&);
		local_ref< java::util::NavigableSet > tailSet(local_ref< java::lang::Object > const&);
		local_ref< java::util::NavigableSet > descendingSet();
		local_ref< java::lang::Object > clone_1();
		local_ref< java::util::SortedSet > tailSet_1(local_ref< java::lang::Object > const&);
		local_ref< java::util::SortedSet > subSet_1(local_ref< java::lang::Object > const&, local_ref< java::lang::Object > const&);
		local_ref< java::util::SortedSet > headSet_1(local_ref< java::lang::Object > const&);
	}; //class ConcurrentSkipListSet

} //namespace concurrent
} //namespace util
} //namespace java


} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_CONCURRENT_CONCURRENTSKIPLISTSET_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_CONCURRENT_CONCURRENTSKIPLISTSET_HPP_IMPL
#define J2CPP_JAVA_UTIL_CONCURRENT_CONCURRENTSKIPLISTSET_HPP_IMPL

namespace j2cpp {


template <>
local_ref< java::util::concurrent::ConcurrentSkipListSet > create< java::util::concurrent::ConcurrentSkipListSet>()
{
	return local_ref< java::util::concurrent::ConcurrentSkipListSet >(
		environment::get().get_jenv()->NewObject(
			get_class<java::util::concurrent::ConcurrentSkipListSet::J2CPP_CLASS_NAME>(),
			get_method_id<java::util::concurrent::ConcurrentSkipListSet::J2CPP_CLASS_NAME, java::util::concurrent::ConcurrentSkipListSet::J2CPP_METHOD_NAME(0), java::util::concurrent::ConcurrentSkipListSet::J2CPP_METHOD_SIGNATURE(0), false>()
		)
	);
}

template <>
local_ref< java::util::concurrent::ConcurrentSkipListSet > create< java::util::concurrent::ConcurrentSkipListSet>(local_ref< java::util::Comparator > const &a0)
{
	return local_ref< java::util::concurrent::ConcurrentSkipListSet >(
		environment::get().get_jenv()->NewObject(
			get_class<java::util::concurrent::ConcurrentSkipListSet::J2CPP_CLASS_NAME>(),
			get_method_id<java::util::concurrent::ConcurrentSkipListSet::J2CPP_CLASS_NAME, java::util::concurrent::ConcurrentSkipListSet::J2CPP_METHOD_NAME(1), java::util::concurrent::ConcurrentSkipListSet::J2CPP_METHOD_SIGNATURE(1), false>(),
			a0.get_jtype()
		)
	);
}

template <>
local_ref< java::util::concurrent::ConcurrentSkipListSet > create< java::util::concurrent::ConcurrentSkipListSet>(local_ref< java::util::Collection > const &a0)
{
	return local_ref< java::util::concurrent::ConcurrentSkipListSet >(
		environment::get().get_jenv()->NewObject(
			get_class<java::util::concurrent::ConcurrentSkipListSet::J2CPP_CLASS_NAME>(),
			get_method_id<java::util::concurrent::ConcurrentSkipListSet::J2CPP_CLASS_NAME, java::util::concurrent::ConcurrentSkipListSet::J2CPP_METHOD_NAME(2), java::util::concurrent::ConcurrentSkipListSet::J2CPP_METHOD_SIGNATURE(2), false>(),
			a0.get_jtype()
		)
	);
}

template <>
local_ref< java::util::concurrent::ConcurrentSkipListSet > create< java::util::concurrent::ConcurrentSkipListSet>(local_ref< java::util::SortedSet > const &a0)
{
	return local_ref< java::util::concurrent::ConcurrentSkipListSet >(
		environment::get().get_jenv()->NewObject(
			get_class<java::util::concurrent::ConcurrentSkipListSet::J2CPP_CLASS_NAME>(),
			get_method_id<java::util::concurrent::ConcurrentSkipListSet::J2CPP_CLASS_NAME, java::util::concurrent::ConcurrentSkipListSet::J2CPP_METHOD_NAME(3), java::util::concurrent::ConcurrentSkipListSet::J2CPP_METHOD_SIGNATURE(3), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::util::concurrent::ConcurrentSkipListSet > java::util::concurrent::ConcurrentSkipListSet::clone()
{
	return local_ref< java::util::concurrent::ConcurrentSkipListSet >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>()
		)
	);
}

cpp_int java::util::concurrent::ConcurrentSkipListSet::size()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>()
		)
	);
}

cpp_boolean java::util::concurrent::ConcurrentSkipListSet::isEmpty()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>()
		)
	);
}

cpp_boolean java::util::concurrent::ConcurrentSkipListSet::contains(local_ref< java::lang::Object > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(7), J2CPP_METHOD_SIGNATURE(7), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean java::util::concurrent::ConcurrentSkipListSet::add(local_ref< java::lang::Object > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(8), J2CPP_METHOD_SIGNATURE(8), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean java::util::concurrent::ConcurrentSkipListSet::remove(local_ref< java::lang::Object > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(9), J2CPP_METHOD_SIGNATURE(9), false>(),
			a0.get_jtype()
		)
	);
}

void java::util::concurrent::ConcurrentSkipListSet::clear()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(10), J2CPP_METHOD_SIGNATURE(10), false>()
		)
	);
}

local_ref< java::util::Iterator > java::util::concurrent::ConcurrentSkipListSet::iterator()
{
	return local_ref< java::util::Iterator >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(11), J2CPP_METHOD_SIGNATURE(11), false>()
		)
	);
}

local_ref< java::util::Iterator > java::util::concurrent::ConcurrentSkipListSet::descendingIterator()
{
	return local_ref< java::util::Iterator >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(12), J2CPP_METHOD_SIGNATURE(12), false>()
		)
	);
}

cpp_boolean java::util::concurrent::ConcurrentSkipListSet::equals(local_ref< java::lang::Object > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(13), J2CPP_METHOD_SIGNATURE(13), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean java::util::concurrent::ConcurrentSkipListSet::removeAll(local_ref< java::util::Collection > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(14), J2CPP_METHOD_SIGNATURE(14), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::Object > java::util::concurrent::ConcurrentSkipListSet::lower(local_ref< java::lang::Object > const &a0)
{
	return local_ref< java::lang::Object >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(15), J2CPP_METHOD_SIGNATURE(15), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::Object > java::util::concurrent::ConcurrentSkipListSet::floor(local_ref< java::lang::Object > const &a0)
{
	return local_ref< java::lang::Object >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(16), J2CPP_METHOD_SIGNATURE(16), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::Object > java::util::concurrent::ConcurrentSkipListSet::ceiling(local_ref< java::lang::Object > const &a0)
{
	return local_ref< java::lang::Object >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(17), J2CPP_METHOD_SIGNATURE(17), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::Object > java::util::concurrent::ConcurrentSkipListSet::higher(local_ref< java::lang::Object > const &a0)
{
	return local_ref< java::lang::Object >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(18), J2CPP_METHOD_SIGNATURE(18), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::Object > java::util::concurrent::ConcurrentSkipListSet::pollFirst()
{
	return local_ref< java::lang::Object >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(19), J2CPP_METHOD_SIGNATURE(19), false>()
		)
	);
}

local_ref< java::lang::Object > java::util::concurrent::ConcurrentSkipListSet::pollLast()
{
	return local_ref< java::lang::Object >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(20), J2CPP_METHOD_SIGNATURE(20), false>()
		)
	);
}

local_ref< java::util::Comparator > java::util::concurrent::ConcurrentSkipListSet::comparator()
{
	return local_ref< java::util::Comparator >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(21), J2CPP_METHOD_SIGNATURE(21), false>()
		)
	);
}

local_ref< java::lang::Object > java::util::concurrent::ConcurrentSkipListSet::first()
{
	return local_ref< java::lang::Object >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(22), J2CPP_METHOD_SIGNATURE(22), false>()
		)
	);
}

local_ref< java::lang::Object > java::util::concurrent::ConcurrentSkipListSet::last()
{
	return local_ref< java::lang::Object >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(23), J2CPP_METHOD_SIGNATURE(23), false>()
		)
	);
}

local_ref< java::util::NavigableSet > java::util::concurrent::ConcurrentSkipListSet::subSet(local_ref< java::lang::Object > const &a0, cpp_boolean const &a1, local_ref< java::lang::Object > const &a2, cpp_boolean const &a3)
{
	return local_ref< java::util::NavigableSet >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(24), J2CPP_METHOD_SIGNATURE(24), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype(), a3.get_jtype()
		)
	);
}

local_ref< java::util::NavigableSet > java::util::concurrent::ConcurrentSkipListSet::headSet(local_ref< java::lang::Object > const &a0, cpp_boolean const &a1)
{
	return local_ref< java::util::NavigableSet >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(25), J2CPP_METHOD_SIGNATURE(25), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< java::util::NavigableSet > java::util::concurrent::ConcurrentSkipListSet::tailSet(local_ref< java::lang::Object > const &a0, cpp_boolean const &a1)
{
	return local_ref< java::util::NavigableSet >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(26), J2CPP_METHOD_SIGNATURE(26), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< java::util::NavigableSet > java::util::concurrent::ConcurrentSkipListSet::subSet(local_ref< java::lang::Object > const &a0, local_ref< java::lang::Object > const &a1)
{
	return local_ref< java::util::NavigableSet >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(27), J2CPP_METHOD_SIGNATURE(27), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< java::util::NavigableSet > java::util::concurrent::ConcurrentSkipListSet::headSet(local_ref< java::lang::Object > const &a0)
{
	return local_ref< java::util::NavigableSet >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(28), J2CPP_METHOD_SIGNATURE(28), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::util::NavigableSet > java::util::concurrent::ConcurrentSkipListSet::tailSet(local_ref< java::lang::Object > const &a0)
{
	return local_ref< java::util::NavigableSet >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(29), J2CPP_METHOD_SIGNATURE(29), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::util::NavigableSet > java::util::concurrent::ConcurrentSkipListSet::descendingSet()
{
	return local_ref< java::util::NavigableSet >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(30), J2CPP_METHOD_SIGNATURE(30), false>()
		)
	);
}

local_ref< java::lang::Object > java::util::concurrent::ConcurrentSkipListSet::clone_1()
{
	return local_ref< java::lang::Object >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(31), J2CPP_METHOD_SIGNATURE(31), false>()
		)
	);
}

local_ref< java::util::SortedSet > java::util::concurrent::ConcurrentSkipListSet::tailSet_1(local_ref< java::lang::Object > const &a0)
{
	return local_ref< java::util::SortedSet >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(32), J2CPP_METHOD_SIGNATURE(32), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::util::SortedSet > java::util::concurrent::ConcurrentSkipListSet::subSet_1(local_ref< java::lang::Object > const &a0, local_ref< java::lang::Object > const &a1)
{
	return local_ref< java::util::SortedSet >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(33), J2CPP_METHOD_SIGNATURE(33), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< java::util::SortedSet > java::util::concurrent::ConcurrentSkipListSet::headSet_1(local_ref< java::lang::Object > const &a0)
{
	return local_ref< java::util::SortedSet >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(34), J2CPP_METHOD_SIGNATURE(34), false>(),
			a0.get_jtype()
		)
	);
}


J2CPP_DEFINE_CLASS(java::util::concurrent::ConcurrentSkipListSet,"java/util/concurrent/ConcurrentSkipListSet")
J2CPP_DEFINE_METHOD(java::util::concurrent::ConcurrentSkipListSet,0,"<init>","()V")
J2CPP_DEFINE_METHOD(java::util::concurrent::ConcurrentSkipListSet,1,"<init>","(Ljava/util/Comparator;)V")
J2CPP_DEFINE_METHOD(java::util::concurrent::ConcurrentSkipListSet,2,"<init>","(Ljava/util/Collection;)V")
J2CPP_DEFINE_METHOD(java::util::concurrent::ConcurrentSkipListSet,3,"<init>","(Ljava/util/SortedSet;)V")
J2CPP_DEFINE_METHOD(java::util::concurrent::ConcurrentSkipListSet,4,"clone","()Ljava/util/concurrent/ConcurrentSkipListSet;")
J2CPP_DEFINE_METHOD(java::util::concurrent::ConcurrentSkipListSet,5,"size","()I")
J2CPP_DEFINE_METHOD(java::util::concurrent::ConcurrentSkipListSet,6,"isEmpty","()Z")
J2CPP_DEFINE_METHOD(java::util::concurrent::ConcurrentSkipListSet,7,"contains","(Ljava/lang/Object;)Z")
J2CPP_DEFINE_METHOD(java::util::concurrent::ConcurrentSkipListSet,8,"add","(Ljava/lang/Object;)Z")
J2CPP_DEFINE_METHOD(java::util::concurrent::ConcurrentSkipListSet,9,"remove","(Ljava/lang/Object;)Z")
J2CPP_DEFINE_METHOD(java::util::concurrent::ConcurrentSkipListSet,10,"clear","()V")
J2CPP_DEFINE_METHOD(java::util::concurrent::ConcurrentSkipListSet,11,"iterator","()Ljava/util/Iterator;")
J2CPP_DEFINE_METHOD(java::util::concurrent::ConcurrentSkipListSet,12,"descendingIterator","()Ljava/util/Iterator;")
J2CPP_DEFINE_METHOD(java::util::concurrent::ConcurrentSkipListSet,13,"equals","(Ljava/lang/Object;)Z")
J2CPP_DEFINE_METHOD(java::util::concurrent::ConcurrentSkipListSet,14,"removeAll","(Ljava/util/Collection;)Z")
J2CPP_DEFINE_METHOD(java::util::concurrent::ConcurrentSkipListSet,15,"lower","(Ljava/lang/Object;)Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(java::util::concurrent::ConcurrentSkipListSet,16,"floor","(Ljava/lang/Object;)Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(java::util::concurrent::ConcurrentSkipListSet,17,"ceiling","(Ljava/lang/Object;)Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(java::util::concurrent::ConcurrentSkipListSet,18,"higher","(Ljava/lang/Object;)Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(java::util::concurrent::ConcurrentSkipListSet,19,"pollFirst","()Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(java::util::concurrent::ConcurrentSkipListSet,20,"pollLast","()Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(java::util::concurrent::ConcurrentSkipListSet,21,"comparator","()Ljava/util/Comparator;")
J2CPP_DEFINE_METHOD(java::util::concurrent::ConcurrentSkipListSet,22,"first","()Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(java::util::concurrent::ConcurrentSkipListSet,23,"last","()Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(java::util::concurrent::ConcurrentSkipListSet,24,"subSet","(Ljava/lang/Object;ZLjava/lang/Object;Z)Ljava/util/NavigableSet;")
J2CPP_DEFINE_METHOD(java::util::concurrent::ConcurrentSkipListSet,25,"headSet","(Ljava/lang/Object;Z)Ljava/util/NavigableSet;")
J2CPP_DEFINE_METHOD(java::util::concurrent::ConcurrentSkipListSet,26,"tailSet","(Ljava/lang/Object;Z)Ljava/util/NavigableSet;")
J2CPP_DEFINE_METHOD(java::util::concurrent::ConcurrentSkipListSet,27,"subSet","(Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/NavigableSet;")
J2CPP_DEFINE_METHOD(java::util::concurrent::ConcurrentSkipListSet,28,"headSet","(Ljava/lang/Object;)Ljava/util/NavigableSet;")
J2CPP_DEFINE_METHOD(java::util::concurrent::ConcurrentSkipListSet,29,"tailSet","(Ljava/lang/Object;)Ljava/util/NavigableSet;")
J2CPP_DEFINE_METHOD(java::util::concurrent::ConcurrentSkipListSet,30,"descendingSet","()Ljava/util/NavigableSet;")
J2CPP_DEFINE_METHOD(java::util::concurrent::ConcurrentSkipListSet,31,"clone","()Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(java::util::concurrent::ConcurrentSkipListSet,32,"tailSet","(Ljava/lang/Object;)Ljava/util/SortedSet;")
J2CPP_DEFINE_METHOD(java::util::concurrent::ConcurrentSkipListSet,33,"subSet","(Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/SortedSet;")
J2CPP_DEFINE_METHOD(java::util::concurrent::ConcurrentSkipListSet,34,"headSet","(Ljava/lang/Object;)Ljava/util/SortedSet;")

} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_CONCURRENT_CONCURRENTSKIPLISTSET_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
