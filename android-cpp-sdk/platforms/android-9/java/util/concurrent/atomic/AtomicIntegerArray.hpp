/*================================================================================
  code generated by: java2cpp
  class: java.util.concurrent.atomic.AtomicIntegerArray
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_CONCURRENT_ATOMIC_ATOMICINTEGERARRAY_HPP_DECL
#define J2CPP_JAVA_UTIL_CONCURRENT_ATOMIC_ATOMICINTEGERARRAY_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class String; } } }


#include <java/lang/String.hpp>


namespace j2cpp {

namespace java { namespace util { namespace concurrent { namespace atomic {

	class AtomicIntegerArray;
	class AtomicIntegerArray
		: public cpp_object<AtomicIntegerArray>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_METHOD(12)
		J2CPP_DECLARE_METHOD(13)
		J2CPP_DECLARE_METHOD(14)
		J2CPP_DECLARE_METHOD(15)

		AtomicIntegerArray(jobject jobj)
		: cpp_object<AtomicIntegerArray>(jobj)
		{
		}

		cpp_int length();
		cpp_int get(cpp_int const&);
		void set(cpp_int const&, cpp_int const&);
		void lazySet(cpp_int const&, cpp_int const&);
		cpp_int getAndSet(cpp_int const&, cpp_int const&);
		cpp_boolean compareAndSet(cpp_int const&, cpp_int const&, cpp_int const&);
		cpp_boolean weakCompareAndSet(cpp_int const&, cpp_int const&, cpp_int const&);
		cpp_int getAndIncrement(cpp_int const&);
		cpp_int getAndDecrement(cpp_int const&);
		cpp_int getAndAdd(cpp_int const&, cpp_int const&);
		cpp_int incrementAndGet(cpp_int const&);
		cpp_int decrementAndGet(cpp_int const&);
		cpp_int addAndGet(cpp_int const&, cpp_int const&);
		local_ref< java::lang::String > toString();
	}; //class AtomicIntegerArray

} //namespace atomic
} //namespace concurrent
} //namespace util
} //namespace java


} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_CONCURRENT_ATOMIC_ATOMICINTEGERARRAY_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_CONCURRENT_ATOMIC_ATOMICINTEGERARRAY_HPP_IMPL
#define J2CPP_JAVA_UTIL_CONCURRENT_ATOMIC_ATOMICINTEGERARRAY_HPP_IMPL

namespace j2cpp {


template <>
local_ref< java::util::concurrent::atomic::AtomicIntegerArray > create< java::util::concurrent::atomic::AtomicIntegerArray>(cpp_int const &a0)
{
	return local_ref< java::util::concurrent::atomic::AtomicIntegerArray >(
		environment::get().get_jenv()->NewObject(
			get_class<java::util::concurrent::atomic::AtomicIntegerArray::J2CPP_CLASS_NAME>(),
			get_method_id<java::util::concurrent::atomic::AtomicIntegerArray::J2CPP_CLASS_NAME, java::util::concurrent::atomic::AtomicIntegerArray::J2CPP_METHOD_NAME(0), java::util::concurrent::atomic::AtomicIntegerArray::J2CPP_METHOD_SIGNATURE(0), false>(),
			a0.get_jtype()
		)
	);
}

template <>
local_ref< java::util::concurrent::atomic::AtomicIntegerArray > create< java::util::concurrent::atomic::AtomicIntegerArray>(local_ref< cpp_int_array<1> > const &a0)
{
	return local_ref< java::util::concurrent::atomic::AtomicIntegerArray >(
		environment::get().get_jenv()->NewObject(
			get_class<java::util::concurrent::atomic::AtomicIntegerArray::J2CPP_CLASS_NAME>(),
			get_method_id<java::util::concurrent::atomic::AtomicIntegerArray::J2CPP_CLASS_NAME, java::util::concurrent::atomic::AtomicIntegerArray::J2CPP_METHOD_NAME(1), java::util::concurrent::atomic::AtomicIntegerArray::J2CPP_METHOD_SIGNATURE(1), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int java::util::concurrent::atomic::AtomicIntegerArray::length()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>()
		)
	);
}

cpp_int java::util::concurrent::atomic::AtomicIntegerArray::get(cpp_int const &a0)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>(),
			a0.get_jtype()
		)
	);
}

void java::util::concurrent::atomic::AtomicIntegerArray::set(cpp_int const &a0, cpp_int const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void java::util::concurrent::atomic::AtomicIntegerArray::lazySet(cpp_int const &a0, cpp_int const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_int java::util::concurrent::atomic::AtomicIntegerArray::getAndSet(cpp_int const &a0, cpp_int const &a1)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_boolean java::util::concurrent::atomic::AtomicIntegerArray::compareAndSet(cpp_int const &a0, cpp_int const &a1, cpp_int const &a2)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(7), J2CPP_METHOD_SIGNATURE(7), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

cpp_boolean java::util::concurrent::atomic::AtomicIntegerArray::weakCompareAndSet(cpp_int const &a0, cpp_int const &a1, cpp_int const &a2)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(8), J2CPP_METHOD_SIGNATURE(8), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

cpp_int java::util::concurrent::atomic::AtomicIntegerArray::getAndIncrement(cpp_int const &a0)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(9), J2CPP_METHOD_SIGNATURE(9), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int java::util::concurrent::atomic::AtomicIntegerArray::getAndDecrement(cpp_int const &a0)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(10), J2CPP_METHOD_SIGNATURE(10), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int java::util::concurrent::atomic::AtomicIntegerArray::getAndAdd(cpp_int const &a0, cpp_int const &a1)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(11), J2CPP_METHOD_SIGNATURE(11), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_int java::util::concurrent::atomic::AtomicIntegerArray::incrementAndGet(cpp_int const &a0)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(12), J2CPP_METHOD_SIGNATURE(12), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int java::util::concurrent::atomic::AtomicIntegerArray::decrementAndGet(cpp_int const &a0)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(13), J2CPP_METHOD_SIGNATURE(13), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int java::util::concurrent::atomic::AtomicIntegerArray::addAndGet(cpp_int const &a0, cpp_int const &a1)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(14), J2CPP_METHOD_SIGNATURE(14), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< java::lang::String > java::util::concurrent::atomic::AtomicIntegerArray::toString()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(15), J2CPP_METHOD_SIGNATURE(15), false>()
		)
	);
}


J2CPP_DEFINE_CLASS(java::util::concurrent::atomic::AtomicIntegerArray,"java/util/concurrent/atomic/AtomicIntegerArray")
J2CPP_DEFINE_METHOD(java::util::concurrent::atomic::AtomicIntegerArray,0,"<init>","(I)V")
J2CPP_DEFINE_METHOD(java::util::concurrent::atomic::AtomicIntegerArray,1,"<init>","([I)V")
J2CPP_DEFINE_METHOD(java::util::concurrent::atomic::AtomicIntegerArray,2,"length","()I")
J2CPP_DEFINE_METHOD(java::util::concurrent::atomic::AtomicIntegerArray,3,"get","(I)I")
J2CPP_DEFINE_METHOD(java::util::concurrent::atomic::AtomicIntegerArray,4,"set","(II)V")
J2CPP_DEFINE_METHOD(java::util::concurrent::atomic::AtomicIntegerArray,5,"lazySet","(II)V")
J2CPP_DEFINE_METHOD(java::util::concurrent::atomic::AtomicIntegerArray,6,"getAndSet","(II)I")
J2CPP_DEFINE_METHOD(java::util::concurrent::atomic::AtomicIntegerArray,7,"compareAndSet","(III)Z")
J2CPP_DEFINE_METHOD(java::util::concurrent::atomic::AtomicIntegerArray,8,"weakCompareAndSet","(III)Z")
J2CPP_DEFINE_METHOD(java::util::concurrent::atomic::AtomicIntegerArray,9,"getAndIncrement","(I)I")
J2CPP_DEFINE_METHOD(java::util::concurrent::atomic::AtomicIntegerArray,10,"getAndDecrement","(I)I")
J2CPP_DEFINE_METHOD(java::util::concurrent::atomic::AtomicIntegerArray,11,"getAndAdd","(II)I")
J2CPP_DEFINE_METHOD(java::util::concurrent::atomic::AtomicIntegerArray,12,"incrementAndGet","(I)I")
J2CPP_DEFINE_METHOD(java::util::concurrent::atomic::AtomicIntegerArray,13,"decrementAndGet","(I)I")
J2CPP_DEFINE_METHOD(java::util::concurrent::atomic::AtomicIntegerArray,14,"addAndGet","(II)I")
J2CPP_DEFINE_METHOD(java::util::concurrent::atomic::AtomicIntegerArray,15,"toString","()Ljava/lang/String;")

} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_CONCURRENT_ATOMIC_ATOMICINTEGERARRAY_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
