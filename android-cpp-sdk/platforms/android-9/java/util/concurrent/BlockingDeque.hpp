/*================================================================================
  code generated by: java2cpp
  class: java.util.concurrent.BlockingDeque
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_CONCURRENT_BLOCKINGDEQUE_HPP_DECL
#define J2CPP_JAVA_UTIL_CONCURRENT_BLOCKINGDEQUE_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace util { class Iterator; } } }
namespace j2cpp { namespace java { namespace util { namespace concurrent { class TimeUnit; } } } }


#include <java/lang/Object.hpp>
#include <java/util/Iterator.hpp>
#include <java/util/concurrent/TimeUnit.hpp>


namespace j2cpp {

namespace java { namespace util { namespace concurrent {

	class BlockingDeque;
	class BlockingDeque
		: public cpp_object<BlockingDeque>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_METHOD(12)
		J2CPP_DECLARE_METHOD(13)
		J2CPP_DECLARE_METHOD(14)
		J2CPP_DECLARE_METHOD(15)
		J2CPP_DECLARE_METHOD(16)
		J2CPP_DECLARE_METHOD(17)
		J2CPP_DECLARE_METHOD(18)
		J2CPP_DECLARE_METHOD(19)
		J2CPP_DECLARE_METHOD(20)
		J2CPP_DECLARE_METHOD(21)
		J2CPP_DECLARE_METHOD(22)
		J2CPP_DECLARE_METHOD(23)
		J2CPP_DECLARE_METHOD(24)
		J2CPP_DECLARE_METHOD(25)
		J2CPP_DECLARE_METHOD(26)
		J2CPP_DECLARE_METHOD(27)
		J2CPP_DECLARE_METHOD(28)

		BlockingDeque(jobject jobj)
		: cpp_object<BlockingDeque>(jobj)
		{
		}

		void addFirst(local_ref< java::lang::Object > const&);
		void addLast(local_ref< java::lang::Object > const&);
		cpp_boolean offerFirst(local_ref< java::lang::Object > const&);
		cpp_boolean offerLast(local_ref< java::lang::Object > const&);
		void putFirst(local_ref< java::lang::Object > const&);
		void putLast(local_ref< java::lang::Object > const&);
		cpp_boolean offerFirst(local_ref< java::lang::Object > const&, cpp_long const&, local_ref< java::util::concurrent::TimeUnit > const&);
		cpp_boolean offerLast(local_ref< java::lang::Object > const&, cpp_long const&, local_ref< java::util::concurrent::TimeUnit > const&);
		local_ref< java::lang::Object > takeFirst();
		local_ref< java::lang::Object > takeLast();
		local_ref< java::lang::Object > pollFirst(cpp_long const&, local_ref< java::util::concurrent::TimeUnit > const&);
		local_ref< java::lang::Object > pollLast(cpp_long const&, local_ref< java::util::concurrent::TimeUnit > const&);
		cpp_boolean removeFirstOccurrence(local_ref< java::lang::Object > const&);
		cpp_boolean removeLastOccurrence(local_ref< java::lang::Object > const&);
		cpp_boolean add(local_ref< java::lang::Object > const&);
		cpp_boolean offer(local_ref< java::lang::Object > const&);
		void put(local_ref< java::lang::Object > const&);
		cpp_boolean offer(local_ref< java::lang::Object > const&, cpp_long const&, local_ref< java::util::concurrent::TimeUnit > const&);
		local_ref< java::lang::Object > remove();
		local_ref< java::lang::Object > poll();
		local_ref< java::lang::Object > take();
		local_ref< java::lang::Object > poll(cpp_long const&, local_ref< java::util::concurrent::TimeUnit > const&);
		local_ref< java::lang::Object > element();
		local_ref< java::lang::Object > peek();
		cpp_boolean remove(local_ref< java::lang::Object > const&);
		cpp_boolean contains(local_ref< java::lang::Object > const&);
		cpp_int size();
		local_ref< java::util::Iterator > iterator();
		void push(local_ref< java::lang::Object > const&);
	}; //class BlockingDeque

} //namespace concurrent
} //namespace util
} //namespace java


} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_CONCURRENT_BLOCKINGDEQUE_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_CONCURRENT_BLOCKINGDEQUE_HPP_IMPL
#define J2CPP_JAVA_UTIL_CONCURRENT_BLOCKINGDEQUE_HPP_IMPL

namespace j2cpp {


void java::util::concurrent::BlockingDeque::addFirst(local_ref< java::lang::Object > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(0), J2CPP_METHOD_SIGNATURE(0), false>(),
			a0.get_jtype()
		)
	);
}

void java::util::concurrent::BlockingDeque::addLast(local_ref< java::lang::Object > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean java::util::concurrent::BlockingDeque::offerFirst(local_ref< java::lang::Object > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean java::util::concurrent::BlockingDeque::offerLast(local_ref< java::lang::Object > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>(),
			a0.get_jtype()
		)
	);
}

void java::util::concurrent::BlockingDeque::putFirst(local_ref< java::lang::Object > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>(),
			a0.get_jtype()
		)
	);
}

void java::util::concurrent::BlockingDeque::putLast(local_ref< java::lang::Object > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean java::util::concurrent::BlockingDeque::offerFirst(local_ref< java::lang::Object > const &a0, cpp_long const &a1, local_ref< java::util::concurrent::TimeUnit > const &a2)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

cpp_boolean java::util::concurrent::BlockingDeque::offerLast(local_ref< java::lang::Object > const &a0, cpp_long const &a1, local_ref< java::util::concurrent::TimeUnit > const &a2)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(7), J2CPP_METHOD_SIGNATURE(7), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

local_ref< java::lang::Object > java::util::concurrent::BlockingDeque::takeFirst()
{
	return local_ref< java::lang::Object >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(8), J2CPP_METHOD_SIGNATURE(8), false>()
		)
	);
}

local_ref< java::lang::Object > java::util::concurrent::BlockingDeque::takeLast()
{
	return local_ref< java::lang::Object >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(9), J2CPP_METHOD_SIGNATURE(9), false>()
		)
	);
}

local_ref< java::lang::Object > java::util::concurrent::BlockingDeque::pollFirst(cpp_long const &a0, local_ref< java::util::concurrent::TimeUnit > const &a1)
{
	return local_ref< java::lang::Object >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(10), J2CPP_METHOD_SIGNATURE(10), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< java::lang::Object > java::util::concurrent::BlockingDeque::pollLast(cpp_long const &a0, local_ref< java::util::concurrent::TimeUnit > const &a1)
{
	return local_ref< java::lang::Object >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(11), J2CPP_METHOD_SIGNATURE(11), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_boolean java::util::concurrent::BlockingDeque::removeFirstOccurrence(local_ref< java::lang::Object > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(12), J2CPP_METHOD_SIGNATURE(12), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean java::util::concurrent::BlockingDeque::removeLastOccurrence(local_ref< java::lang::Object > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(13), J2CPP_METHOD_SIGNATURE(13), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean java::util::concurrent::BlockingDeque::add(local_ref< java::lang::Object > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(14), J2CPP_METHOD_SIGNATURE(14), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean java::util::concurrent::BlockingDeque::offer(local_ref< java::lang::Object > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(15), J2CPP_METHOD_SIGNATURE(15), false>(),
			a0.get_jtype()
		)
	);
}

void java::util::concurrent::BlockingDeque::put(local_ref< java::lang::Object > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(16), J2CPP_METHOD_SIGNATURE(16), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean java::util::concurrent::BlockingDeque::offer(local_ref< java::lang::Object > const &a0, cpp_long const &a1, local_ref< java::util::concurrent::TimeUnit > const &a2)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(17), J2CPP_METHOD_SIGNATURE(17), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

local_ref< java::lang::Object > java::util::concurrent::BlockingDeque::remove()
{
	return local_ref< java::lang::Object >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(18), J2CPP_METHOD_SIGNATURE(18), false>()
		)
	);
}

local_ref< java::lang::Object > java::util::concurrent::BlockingDeque::poll()
{
	return local_ref< java::lang::Object >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(19), J2CPP_METHOD_SIGNATURE(19), false>()
		)
	);
}

local_ref< java::lang::Object > java::util::concurrent::BlockingDeque::take()
{
	return local_ref< java::lang::Object >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(20), J2CPP_METHOD_SIGNATURE(20), false>()
		)
	);
}

local_ref< java::lang::Object > java::util::concurrent::BlockingDeque::poll(cpp_long const &a0, local_ref< java::util::concurrent::TimeUnit > const &a1)
{
	return local_ref< java::lang::Object >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(21), J2CPP_METHOD_SIGNATURE(21), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< java::lang::Object > java::util::concurrent::BlockingDeque::element()
{
	return local_ref< java::lang::Object >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(22), J2CPP_METHOD_SIGNATURE(22), false>()
		)
	);
}

local_ref< java::lang::Object > java::util::concurrent::BlockingDeque::peek()
{
	return local_ref< java::lang::Object >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(23), J2CPP_METHOD_SIGNATURE(23), false>()
		)
	);
}

cpp_boolean java::util::concurrent::BlockingDeque::remove(local_ref< java::lang::Object > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(24), J2CPP_METHOD_SIGNATURE(24), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean java::util::concurrent::BlockingDeque::contains(local_ref< java::lang::Object > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(25), J2CPP_METHOD_SIGNATURE(25), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int java::util::concurrent::BlockingDeque::size()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(26), J2CPP_METHOD_SIGNATURE(26), false>()
		)
	);
}

local_ref< java::util::Iterator > java::util::concurrent::BlockingDeque::iterator()
{
	return local_ref< java::util::Iterator >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(27), J2CPP_METHOD_SIGNATURE(27), false>()
		)
	);
}

void java::util::concurrent::BlockingDeque::push(local_ref< java::lang::Object > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(28), J2CPP_METHOD_SIGNATURE(28), false>(),
			a0.get_jtype()
		)
	);
}


J2CPP_DEFINE_CLASS(java::util::concurrent::BlockingDeque,"java/util/concurrent/BlockingDeque")
J2CPP_DEFINE_METHOD(java::util::concurrent::BlockingDeque,0,"addFirst","(Ljava/lang/Object;)V")
J2CPP_DEFINE_METHOD(java::util::concurrent::BlockingDeque,1,"addLast","(Ljava/lang/Object;)V")
J2CPP_DEFINE_METHOD(java::util::concurrent::BlockingDeque,2,"offerFirst","(Ljava/lang/Object;)Z")
J2CPP_DEFINE_METHOD(java::util::concurrent::BlockingDeque,3,"offerLast","(Ljava/lang/Object;)Z")
J2CPP_DEFINE_METHOD(java::util::concurrent::BlockingDeque,4,"putFirst","(Ljava/lang/Object;)V")
J2CPP_DEFINE_METHOD(java::util::concurrent::BlockingDeque,5,"putLast","(Ljava/lang/Object;)V")
J2CPP_DEFINE_METHOD(java::util::concurrent::BlockingDeque,6,"offerFirst","(Ljava/lang/Object;JLjava/util/concurrent/TimeUnit;)Z")
J2CPP_DEFINE_METHOD(java::util::concurrent::BlockingDeque,7,"offerLast","(Ljava/lang/Object;JLjava/util/concurrent/TimeUnit;)Z")
J2CPP_DEFINE_METHOD(java::util::concurrent::BlockingDeque,8,"takeFirst","()Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(java::util::concurrent::BlockingDeque,9,"takeLast","()Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(java::util::concurrent::BlockingDeque,10,"pollFirst","(JLjava/util/concurrent/TimeUnit;)Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(java::util::concurrent::BlockingDeque,11,"pollLast","(JLjava/util/concurrent/TimeUnit;)Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(java::util::concurrent::BlockingDeque,12,"removeFirstOccurrence","(Ljava/lang/Object;)Z")
J2CPP_DEFINE_METHOD(java::util::concurrent::BlockingDeque,13,"removeLastOccurrence","(Ljava/lang/Object;)Z")
J2CPP_DEFINE_METHOD(java::util::concurrent::BlockingDeque,14,"add","(Ljava/lang/Object;)Z")
J2CPP_DEFINE_METHOD(java::util::concurrent::BlockingDeque,15,"offer","(Ljava/lang/Object;)Z")
J2CPP_DEFINE_METHOD(java::util::concurrent::BlockingDeque,16,"put","(Ljava/lang/Object;)V")
J2CPP_DEFINE_METHOD(java::util::concurrent::BlockingDeque,17,"offer","(Ljava/lang/Object;JLjava/util/concurrent/TimeUnit;)Z")
J2CPP_DEFINE_METHOD(java::util::concurrent::BlockingDeque,18,"remove","()Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(java::util::concurrent::BlockingDeque,19,"poll","()Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(java::util::concurrent::BlockingDeque,20,"take","()Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(java::util::concurrent::BlockingDeque,21,"poll","(JLjava/util/concurrent/TimeUnit;)Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(java::util::concurrent::BlockingDeque,22,"element","()Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(java::util::concurrent::BlockingDeque,23,"peek","()Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(java::util::concurrent::BlockingDeque,24,"remove","(Ljava/lang/Object;)Z")
J2CPP_DEFINE_METHOD(java::util::concurrent::BlockingDeque,25,"contains","(Ljava/lang/Object;)Z")
J2CPP_DEFINE_METHOD(java::util::concurrent::BlockingDeque,26,"size","()I")
J2CPP_DEFINE_METHOD(java::util::concurrent::BlockingDeque,27,"iterator","()Ljava/util/Iterator;")
J2CPP_DEFINE_METHOD(java::util::concurrent::BlockingDeque,28,"push","(Ljava/lang/Object;)V")

} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_CONCURRENT_BLOCKINGDEQUE_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
