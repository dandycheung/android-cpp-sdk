/*================================================================================
  code generated by: java2cpp
  class: java.util.concurrent.RunnableScheduledFuture
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_CONCURRENT_RUNNABLESCHEDULEDFUTURE_HPP_DECL
#define J2CPP_JAVA_UTIL_CONCURRENT_RUNNABLESCHEDULEDFUTURE_HPP_DECL






namespace j2cpp {

namespace java { namespace util { namespace concurrent {

	class RunnableScheduledFuture;
	class RunnableScheduledFuture
		: public cpp_object<RunnableScheduledFuture>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)

		RunnableScheduledFuture(jobject jobj)
		: cpp_object<RunnableScheduledFuture>(jobj)
		{
		}

		cpp_boolean isPeriodic();
	}; //class RunnableScheduledFuture

} //namespace concurrent
} //namespace util
} //namespace java


} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_CONCURRENT_RUNNABLESCHEDULEDFUTURE_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_CONCURRENT_RUNNABLESCHEDULEDFUTURE_HPP_IMPL
#define J2CPP_JAVA_UTIL_CONCURRENT_RUNNABLESCHEDULEDFUTURE_HPP_IMPL

namespace j2cpp {


cpp_boolean java::util::concurrent::RunnableScheduledFuture::isPeriodic()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(0), J2CPP_METHOD_SIGNATURE(0), false>()
		)
	);
}


J2CPP_DEFINE_CLASS(java::util::concurrent::RunnableScheduledFuture,"java/util/concurrent/RunnableScheduledFuture")
J2CPP_DEFINE_METHOD(java::util::concurrent::RunnableScheduledFuture,0,"isPeriodic","()Z")

} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_CONCURRENT_RUNNABLESCHEDULEDFUTURE_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
