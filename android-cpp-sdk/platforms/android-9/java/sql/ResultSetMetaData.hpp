/*================================================================================
  code generated by: java2cpp
  class: java.sql.ResultSetMetaData
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_SQL_RESULTSETMETADATA_HPP_DECL
#define J2CPP_JAVA_SQL_RESULTSETMETADATA_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class String; } } }


#include <java/lang/String.hpp>


namespace j2cpp {

namespace java { namespace sql {

	class ResultSetMetaData;
	class ResultSetMetaData
		: public cpp_object<ResultSetMetaData>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_METHOD(12)
		J2CPP_DECLARE_METHOD(13)
		J2CPP_DECLARE_METHOD(14)
		J2CPP_DECLARE_METHOD(15)
		J2CPP_DECLARE_METHOD(16)
		J2CPP_DECLARE_METHOD(17)
		J2CPP_DECLARE_METHOD(18)
		J2CPP_DECLARE_METHOD(19)
		J2CPP_DECLARE_METHOD(20)
		J2CPP_DECLARE_FIELD(0)
		J2CPP_DECLARE_FIELD(1)
		J2CPP_DECLARE_FIELD(2)

		ResultSetMetaData(jobject jobj)
		: cpp_object<ResultSetMetaData>(jobj)
		{
		}

		local_ref< java::lang::String > getCatalogName(cpp_int const&);
		local_ref< java::lang::String > getColumnClassName(cpp_int const&);
		cpp_int getColumnCount();
		cpp_int getColumnDisplaySize(cpp_int const&);
		local_ref< java::lang::String > getColumnLabel(cpp_int const&);
		local_ref< java::lang::String > getColumnName(cpp_int const&);
		cpp_int getColumnType(cpp_int const&);
		local_ref< java::lang::String > getColumnTypeName(cpp_int const&);
		cpp_int getPrecision(cpp_int const&);
		cpp_int getScale(cpp_int const&);
		local_ref< java::lang::String > getSchemaName(cpp_int const&);
		local_ref< java::lang::String > getTableName(cpp_int const&);
		cpp_boolean isAutoIncrement(cpp_int const&);
		cpp_boolean isCaseSensitive(cpp_int const&);
		cpp_boolean isCurrency(cpp_int const&);
		cpp_boolean isDefinitelyWritable(cpp_int const&);
		cpp_int isNullable(cpp_int const&);
		cpp_boolean isReadOnly(cpp_int const&);
		cpp_boolean isSearchable(cpp_int const&);
		cpp_boolean isSigned(cpp_int const&);
		cpp_boolean isWritable(cpp_int const&);

		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(0), J2CPP_FIELD_SIGNATURE(0), cpp_int > columnNoNulls;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(1), J2CPP_FIELD_SIGNATURE(1), cpp_int > columnNullable;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(2), J2CPP_FIELD_SIGNATURE(2), cpp_int > columnNullableUnknown;
	}; //class ResultSetMetaData

} //namespace sql
} //namespace java


} //namespace j2cpp

#endif //J2CPP_JAVA_SQL_RESULTSETMETADATA_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_SQL_RESULTSETMETADATA_HPP_IMPL
#define J2CPP_JAVA_SQL_RESULTSETMETADATA_HPP_IMPL

namespace j2cpp {


local_ref< java::lang::String > java::sql::ResultSetMetaData::getCatalogName(cpp_int const &a0)
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(0), J2CPP_METHOD_SIGNATURE(0), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::String > java::sql::ResultSetMetaData::getColumnClassName(cpp_int const &a0)
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int java::sql::ResultSetMetaData::getColumnCount()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>()
		)
	);
}

cpp_int java::sql::ResultSetMetaData::getColumnDisplaySize(cpp_int const &a0)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::String > java::sql::ResultSetMetaData::getColumnLabel(cpp_int const &a0)
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::String > java::sql::ResultSetMetaData::getColumnName(cpp_int const &a0)
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int java::sql::ResultSetMetaData::getColumnType(cpp_int const &a0)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::String > java::sql::ResultSetMetaData::getColumnTypeName(cpp_int const &a0)
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(7), J2CPP_METHOD_SIGNATURE(7), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int java::sql::ResultSetMetaData::getPrecision(cpp_int const &a0)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(8), J2CPP_METHOD_SIGNATURE(8), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int java::sql::ResultSetMetaData::getScale(cpp_int const &a0)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(9), J2CPP_METHOD_SIGNATURE(9), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::String > java::sql::ResultSetMetaData::getSchemaName(cpp_int const &a0)
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(10), J2CPP_METHOD_SIGNATURE(10), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::String > java::sql::ResultSetMetaData::getTableName(cpp_int const &a0)
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(11), J2CPP_METHOD_SIGNATURE(11), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean java::sql::ResultSetMetaData::isAutoIncrement(cpp_int const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(12), J2CPP_METHOD_SIGNATURE(12), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean java::sql::ResultSetMetaData::isCaseSensitive(cpp_int const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(13), J2CPP_METHOD_SIGNATURE(13), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean java::sql::ResultSetMetaData::isCurrency(cpp_int const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(14), J2CPP_METHOD_SIGNATURE(14), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean java::sql::ResultSetMetaData::isDefinitelyWritable(cpp_int const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(15), J2CPP_METHOD_SIGNATURE(15), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int java::sql::ResultSetMetaData::isNullable(cpp_int const &a0)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(16), J2CPP_METHOD_SIGNATURE(16), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean java::sql::ResultSetMetaData::isReadOnly(cpp_int const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(17), J2CPP_METHOD_SIGNATURE(17), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean java::sql::ResultSetMetaData::isSearchable(cpp_int const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(18), J2CPP_METHOD_SIGNATURE(18), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean java::sql::ResultSetMetaData::isSigned(cpp_int const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(19), J2CPP_METHOD_SIGNATURE(19), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean java::sql::ResultSetMetaData::isWritable(cpp_int const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(20), J2CPP_METHOD_SIGNATURE(20), false>(),
			a0.get_jtype()
		)
	);
}


static_field<
	java::sql::ResultSetMetaData::J2CPP_CLASS_NAME,
	java::sql::ResultSetMetaData::J2CPP_FIELD_NAME(0),
	java::sql::ResultSetMetaData::J2CPP_FIELD_SIGNATURE(0),
	cpp_int
> java::sql::ResultSetMetaData::columnNoNulls;

static_field<
	java::sql::ResultSetMetaData::J2CPP_CLASS_NAME,
	java::sql::ResultSetMetaData::J2CPP_FIELD_NAME(1),
	java::sql::ResultSetMetaData::J2CPP_FIELD_SIGNATURE(1),
	cpp_int
> java::sql::ResultSetMetaData::columnNullable;

static_field<
	java::sql::ResultSetMetaData::J2CPP_CLASS_NAME,
	java::sql::ResultSetMetaData::J2CPP_FIELD_NAME(2),
	java::sql::ResultSetMetaData::J2CPP_FIELD_SIGNATURE(2),
	cpp_int
> java::sql::ResultSetMetaData::columnNullableUnknown;


J2CPP_DEFINE_CLASS(java::sql::ResultSetMetaData,"java/sql/ResultSetMetaData")
J2CPP_DEFINE_METHOD(java::sql::ResultSetMetaData,0,"getCatalogName","(I)Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::sql::ResultSetMetaData,1,"getColumnClassName","(I)Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::sql::ResultSetMetaData,2,"getColumnCount","()I")
J2CPP_DEFINE_METHOD(java::sql::ResultSetMetaData,3,"getColumnDisplaySize","(I)I")
J2CPP_DEFINE_METHOD(java::sql::ResultSetMetaData,4,"getColumnLabel","(I)Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::sql::ResultSetMetaData,5,"getColumnName","(I)Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::sql::ResultSetMetaData,6,"getColumnType","(I)I")
J2CPP_DEFINE_METHOD(java::sql::ResultSetMetaData,7,"getColumnTypeName","(I)Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::sql::ResultSetMetaData,8,"getPrecision","(I)I")
J2CPP_DEFINE_METHOD(java::sql::ResultSetMetaData,9,"getScale","(I)I")
J2CPP_DEFINE_METHOD(java::sql::ResultSetMetaData,10,"getSchemaName","(I)Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::sql::ResultSetMetaData,11,"getTableName","(I)Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::sql::ResultSetMetaData,12,"isAutoIncrement","(I)Z")
J2CPP_DEFINE_METHOD(java::sql::ResultSetMetaData,13,"isCaseSensitive","(I)Z")
J2CPP_DEFINE_METHOD(java::sql::ResultSetMetaData,14,"isCurrency","(I)Z")
J2CPP_DEFINE_METHOD(java::sql::ResultSetMetaData,15,"isDefinitelyWritable","(I)Z")
J2CPP_DEFINE_METHOD(java::sql::ResultSetMetaData,16,"isNullable","(I)I")
J2CPP_DEFINE_METHOD(java::sql::ResultSetMetaData,17,"isReadOnly","(I)Z")
J2CPP_DEFINE_METHOD(java::sql::ResultSetMetaData,18,"isSearchable","(I)Z")
J2CPP_DEFINE_METHOD(java::sql::ResultSetMetaData,19,"isSigned","(I)Z")
J2CPP_DEFINE_METHOD(java::sql::ResultSetMetaData,20,"isWritable","(I)Z")
J2CPP_DEFINE_FIELD(java::sql::ResultSetMetaData,0,"columnNoNulls","I")
J2CPP_DEFINE_FIELD(java::sql::ResultSetMetaData,1,"columnNullable","I")
J2CPP_DEFINE_FIELD(java::sql::ResultSetMetaData,2,"columnNullableUnknown","I")

} //namespace j2cpp

#endif //J2CPP_JAVA_SQL_RESULTSETMETADATA_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
