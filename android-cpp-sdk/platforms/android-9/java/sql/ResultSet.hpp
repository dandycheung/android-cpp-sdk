/*================================================================================
  code generated by: java2cpp
  class: java.sql.ResultSet
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_SQL_RESULTSET_HPP_DECL
#define J2CPP_JAVA_SQL_RESULTSET_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace util { class Map; } } }
namespace j2cpp { namespace java { namespace util { class Calendar; } } }
namespace j2cpp { namespace java { namespace sql { class Array; } } }
namespace j2cpp { namespace java { namespace sql { class Statement; } } }
namespace j2cpp { namespace java { namespace sql { class Date; } } }
namespace j2cpp { namespace java { namespace sql { class Timestamp; } } }
namespace j2cpp { namespace java { namespace sql { class Clob; } } }
namespace j2cpp { namespace java { namespace sql { class Ref; } } }
namespace j2cpp { namespace java { namespace sql { class NClob; } } }
namespace j2cpp { namespace java { namespace sql { class Blob; } } }
namespace j2cpp { namespace java { namespace sql { class Time; } } }
namespace j2cpp { namespace java { namespace sql { class SQLXML; } } }
namespace j2cpp { namespace java { namespace sql { class ResultSetMetaData; } } }
namespace j2cpp { namespace java { namespace sql { class SQLWarning; } } }
namespace j2cpp { namespace java { namespace sql { class RowId; } } }
namespace j2cpp { namespace java { namespace net { class URL; } } }
namespace j2cpp { namespace java { namespace io { class InputStream; } } }
namespace j2cpp { namespace java { namespace io { class Reader; } } }
namespace j2cpp { namespace java { namespace math { class BigDecimal; } } }


#include <java/io/InputStream.hpp>
#include <java/io/Reader.hpp>
#include <java/lang/Object.hpp>
#include <java/lang/String.hpp>
#include <java/math/BigDecimal.hpp>
#include <java/net/URL.hpp>
#include <java/sql/Array.hpp>
#include <java/sql/Blob.hpp>
#include <java/sql/Clob.hpp>
#include <java/sql/Date.hpp>
#include <java/sql/NClob.hpp>
#include <java/sql/Ref.hpp>
#include <java/sql/ResultSetMetaData.hpp>
#include <java/sql/RowId.hpp>
#include <java/sql/SQLWarning.hpp>
#include <java/sql/SQLXML.hpp>
#include <java/sql/Statement.hpp>
#include <java/sql/Time.hpp>
#include <java/sql/Timestamp.hpp>
#include <java/util/Calendar.hpp>
#include <java/util/Map.hpp>


namespace j2cpp {

namespace java { namespace sql {

	class ResultSet;
	class ResultSet
		: public cpp_object<ResultSet>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_METHOD(12)
		J2CPP_DECLARE_METHOD(13)
		J2CPP_DECLARE_METHOD(14)
		J2CPP_DECLARE_METHOD(15)
		J2CPP_DECLARE_METHOD(16)
		J2CPP_DECLARE_METHOD(17)
		J2CPP_DECLARE_METHOD(18)
		J2CPP_DECLARE_METHOD(19)
		J2CPP_DECLARE_METHOD(20)
		J2CPP_DECLARE_METHOD(21)
		J2CPP_DECLARE_METHOD(22)
		J2CPP_DECLARE_METHOD(23)
		J2CPP_DECLARE_METHOD(24)
		J2CPP_DECLARE_METHOD(25)
		J2CPP_DECLARE_METHOD(26)
		J2CPP_DECLARE_METHOD(27)
		J2CPP_DECLARE_METHOD(28)
		J2CPP_DECLARE_METHOD(29)
		J2CPP_DECLARE_METHOD(30)
		J2CPP_DECLARE_METHOD(31)
		J2CPP_DECLARE_METHOD(32)
		J2CPP_DECLARE_METHOD(33)
		J2CPP_DECLARE_METHOD(34)
		J2CPP_DECLARE_METHOD(35)
		J2CPP_DECLARE_METHOD(36)
		J2CPP_DECLARE_METHOD(37)
		J2CPP_DECLARE_METHOD(38)
		J2CPP_DECLARE_METHOD(39)
		J2CPP_DECLARE_METHOD(40)
		J2CPP_DECLARE_METHOD(41)
		J2CPP_DECLARE_METHOD(42)
		J2CPP_DECLARE_METHOD(43)
		J2CPP_DECLARE_METHOD(44)
		J2CPP_DECLARE_METHOD(45)
		J2CPP_DECLARE_METHOD(46)
		J2CPP_DECLARE_METHOD(47)
		J2CPP_DECLARE_METHOD(48)
		J2CPP_DECLARE_METHOD(49)
		J2CPP_DECLARE_METHOD(50)
		J2CPP_DECLARE_METHOD(51)
		J2CPP_DECLARE_METHOD(52)
		J2CPP_DECLARE_METHOD(53)
		J2CPP_DECLARE_METHOD(54)
		J2CPP_DECLARE_METHOD(55)
		J2CPP_DECLARE_METHOD(56)
		J2CPP_DECLARE_METHOD(57)
		J2CPP_DECLARE_METHOD(58)
		J2CPP_DECLARE_METHOD(59)
		J2CPP_DECLARE_METHOD(60)
		J2CPP_DECLARE_METHOD(61)
		J2CPP_DECLARE_METHOD(62)
		J2CPP_DECLARE_METHOD(63)
		J2CPP_DECLARE_METHOD(64)
		J2CPP_DECLARE_METHOD(65)
		J2CPP_DECLARE_METHOD(66)
		J2CPP_DECLARE_METHOD(67)
		J2CPP_DECLARE_METHOD(68)
		J2CPP_DECLARE_METHOD(69)
		J2CPP_DECLARE_METHOD(70)
		J2CPP_DECLARE_METHOD(71)
		J2CPP_DECLARE_METHOD(72)
		J2CPP_DECLARE_METHOD(73)
		J2CPP_DECLARE_METHOD(74)
		J2CPP_DECLARE_METHOD(75)
		J2CPP_DECLARE_METHOD(76)
		J2CPP_DECLARE_METHOD(77)
		J2CPP_DECLARE_METHOD(78)
		J2CPP_DECLARE_METHOD(79)
		J2CPP_DECLARE_METHOD(80)
		J2CPP_DECLARE_METHOD(81)
		J2CPP_DECLARE_METHOD(82)
		J2CPP_DECLARE_METHOD(83)
		J2CPP_DECLARE_METHOD(84)
		J2CPP_DECLARE_METHOD(85)
		J2CPP_DECLARE_METHOD(86)
		J2CPP_DECLARE_METHOD(87)
		J2CPP_DECLARE_METHOD(88)
		J2CPP_DECLARE_METHOD(89)
		J2CPP_DECLARE_METHOD(90)
		J2CPP_DECLARE_METHOD(91)
		J2CPP_DECLARE_METHOD(92)
		J2CPP_DECLARE_METHOD(93)
		J2CPP_DECLARE_METHOD(94)
		J2CPP_DECLARE_METHOD(95)
		J2CPP_DECLARE_METHOD(96)
		J2CPP_DECLARE_METHOD(97)
		J2CPP_DECLARE_METHOD(98)
		J2CPP_DECLARE_METHOD(99)
		J2CPP_DECLARE_METHOD(100)
		J2CPP_DECLARE_METHOD(101)
		J2CPP_DECLARE_METHOD(102)
		J2CPP_DECLARE_METHOD(103)
		J2CPP_DECLARE_METHOD(104)
		J2CPP_DECLARE_METHOD(105)
		J2CPP_DECLARE_METHOD(106)
		J2CPP_DECLARE_METHOD(107)
		J2CPP_DECLARE_METHOD(108)
		J2CPP_DECLARE_METHOD(109)
		J2CPP_DECLARE_METHOD(110)
		J2CPP_DECLARE_METHOD(111)
		J2CPP_DECLARE_METHOD(112)
		J2CPP_DECLARE_METHOD(113)
		J2CPP_DECLARE_METHOD(114)
		J2CPP_DECLARE_METHOD(115)
		J2CPP_DECLARE_METHOD(116)
		J2CPP_DECLARE_METHOD(117)
		J2CPP_DECLARE_METHOD(118)
		J2CPP_DECLARE_METHOD(119)
		J2CPP_DECLARE_METHOD(120)
		J2CPP_DECLARE_METHOD(121)
		J2CPP_DECLARE_METHOD(122)
		J2CPP_DECLARE_METHOD(123)
		J2CPP_DECLARE_METHOD(124)
		J2CPP_DECLARE_METHOD(125)
		J2CPP_DECLARE_METHOD(126)
		J2CPP_DECLARE_METHOD(127)
		J2CPP_DECLARE_METHOD(128)
		J2CPP_DECLARE_METHOD(129)
		J2CPP_DECLARE_METHOD(130)
		J2CPP_DECLARE_METHOD(131)
		J2CPP_DECLARE_METHOD(132)
		J2CPP_DECLARE_METHOD(133)
		J2CPP_DECLARE_METHOD(134)
		J2CPP_DECLARE_METHOD(135)
		J2CPP_DECLARE_METHOD(136)
		J2CPP_DECLARE_METHOD(137)
		J2CPP_DECLARE_METHOD(138)
		J2CPP_DECLARE_METHOD(139)
		J2CPP_DECLARE_METHOD(140)
		J2CPP_DECLARE_METHOD(141)
		J2CPP_DECLARE_METHOD(142)
		J2CPP_DECLARE_METHOD(143)
		J2CPP_DECLARE_METHOD(144)
		J2CPP_DECLARE_METHOD(145)
		J2CPP_DECLARE_METHOD(146)
		J2CPP_DECLARE_METHOD(147)
		J2CPP_DECLARE_METHOD(148)
		J2CPP_DECLARE_METHOD(149)
		J2CPP_DECLARE_METHOD(150)
		J2CPP_DECLARE_METHOD(151)
		J2CPP_DECLARE_METHOD(152)
		J2CPP_DECLARE_METHOD(153)
		J2CPP_DECLARE_METHOD(154)
		J2CPP_DECLARE_METHOD(155)
		J2CPP_DECLARE_METHOD(156)
		J2CPP_DECLARE_METHOD(157)
		J2CPP_DECLARE_METHOD(158)
		J2CPP_DECLARE_METHOD(159)
		J2CPP_DECLARE_METHOD(160)
		J2CPP_DECLARE_METHOD(161)
		J2CPP_DECLARE_METHOD(162)
		J2CPP_DECLARE_METHOD(163)
		J2CPP_DECLARE_METHOD(164)
		J2CPP_DECLARE_METHOD(165)
		J2CPP_DECLARE_METHOD(166)
		J2CPP_DECLARE_METHOD(167)
		J2CPP_DECLARE_METHOD(168)
		J2CPP_DECLARE_METHOD(169)
		J2CPP_DECLARE_METHOD(170)
		J2CPP_DECLARE_METHOD(171)
		J2CPP_DECLARE_METHOD(172)
		J2CPP_DECLARE_METHOD(173)
		J2CPP_DECLARE_METHOD(174)
		J2CPP_DECLARE_METHOD(175)
		J2CPP_DECLARE_METHOD(176)
		J2CPP_DECLARE_METHOD(177)
		J2CPP_DECLARE_METHOD(178)
		J2CPP_DECLARE_METHOD(179)
		J2CPP_DECLARE_METHOD(180)
		J2CPP_DECLARE_METHOD(181)
		J2CPP_DECLARE_METHOD(182)
		J2CPP_DECLARE_METHOD(183)
		J2CPP_DECLARE_METHOD(184)
		J2CPP_DECLARE_METHOD(185)
		J2CPP_DECLARE_METHOD(186)
		J2CPP_DECLARE_FIELD(0)
		J2CPP_DECLARE_FIELD(1)
		J2CPP_DECLARE_FIELD(2)
		J2CPP_DECLARE_FIELD(3)
		J2CPP_DECLARE_FIELD(4)
		J2CPP_DECLARE_FIELD(5)
		J2CPP_DECLARE_FIELD(6)
		J2CPP_DECLARE_FIELD(7)
		J2CPP_DECLARE_FIELD(8)
		J2CPP_DECLARE_FIELD(9)

		ResultSet(jobject jobj)
		: cpp_object<ResultSet>(jobj)
		{
		}

		cpp_boolean absolute(cpp_int const&);
		void afterLast();
		void beforeFirst();
		void cancelRowUpdates();
		void clearWarnings();
		void close();
		void deleteRow();
		cpp_int findColumn(local_ref< java::lang::String > const&);
		cpp_boolean first();
		local_ref< java::sql::Array > getArray(cpp_int const&);
		local_ref< java::sql::Array > getArray(local_ref< java::lang::String > const&);
		local_ref< java::io::InputStream > getAsciiStream(cpp_int const&);
		local_ref< java::io::InputStream > getAsciiStream(local_ref< java::lang::String > const&);
		local_ref< java::math::BigDecimal > getBigDecimal(cpp_int const&);
		local_ref< java::math::BigDecimal > getBigDecimal(cpp_int const&, cpp_int const&);
		local_ref< java::math::BigDecimal > getBigDecimal(local_ref< java::lang::String > const&);
		local_ref< java::math::BigDecimal > getBigDecimal(local_ref< java::lang::String > const&, cpp_int const&);
		local_ref< java::io::InputStream > getBinaryStream(cpp_int const&);
		local_ref< java::io::InputStream > getBinaryStream(local_ref< java::lang::String > const&);
		local_ref< java::sql::Blob > getBlob(cpp_int const&);
		local_ref< java::sql::Blob > getBlob(local_ref< java::lang::String > const&);
		cpp_boolean getBoolean(cpp_int const&);
		cpp_boolean getBoolean(local_ref< java::lang::String > const&);
		cpp_byte getByte(cpp_int const&);
		cpp_byte getByte(local_ref< java::lang::String > const&);
		local_ref< cpp_byte_array<1> > getBytes(cpp_int const&);
		local_ref< cpp_byte_array<1> > getBytes(local_ref< java::lang::String > const&);
		local_ref< java::io::Reader > getCharacterStream(cpp_int const&);
		local_ref< java::io::Reader > getCharacterStream(local_ref< java::lang::String > const&);
		local_ref< java::sql::Clob > getClob(cpp_int const&);
		local_ref< java::sql::Clob > getClob(local_ref< java::lang::String > const&);
		cpp_int getConcurrency();
		local_ref< java::lang::String > getCursorName();
		local_ref< java::sql::Date > getDate(cpp_int const&);
		local_ref< java::sql::Date > getDate(cpp_int const&, local_ref< java::util::Calendar > const&);
		local_ref< java::sql::Date > getDate(local_ref< java::lang::String > const&);
		local_ref< java::sql::Date > getDate(local_ref< java::lang::String > const&, local_ref< java::util::Calendar > const&);
		cpp_double getDouble(cpp_int const&);
		cpp_double getDouble(local_ref< java::lang::String > const&);
		cpp_int getFetchDirection();
		cpp_int getFetchSize();
		cpp_float getFloat(cpp_int const&);
		cpp_float getFloat(local_ref< java::lang::String > const&);
		cpp_int getInt(cpp_int const&);
		cpp_int getInt(local_ref< java::lang::String > const&);
		cpp_long getLong(cpp_int const&);
		cpp_long getLong(local_ref< java::lang::String > const&);
		local_ref< java::sql::ResultSetMetaData > getMetaData();
		local_ref< java::lang::Object > getObject(cpp_int const&);
		local_ref< java::lang::Object > getObject(cpp_int const&, local_ref< java::util::Map > const&);
		local_ref< java::lang::Object > getObject(local_ref< java::lang::String > const&);
		local_ref< java::lang::Object > getObject(local_ref< java::lang::String > const&, local_ref< java::util::Map > const&);
		local_ref< java::sql::Ref > getRef(cpp_int const&);
		local_ref< java::sql::Ref > getRef(local_ref< java::lang::String > const&);
		cpp_int getRow();
		cpp_short getShort(cpp_int const&);
		cpp_short getShort(local_ref< java::lang::String > const&);
		local_ref< java::sql::Statement > getStatement();
		local_ref< java::lang::String > getString(cpp_int const&);
		local_ref< java::lang::String > getString(local_ref< java::lang::String > const&);
		local_ref< java::sql::Time > getTime(cpp_int const&);
		local_ref< java::sql::Time > getTime(cpp_int const&, local_ref< java::util::Calendar > const&);
		local_ref< java::sql::Time > getTime(local_ref< java::lang::String > const&);
		local_ref< java::sql::Time > getTime(local_ref< java::lang::String > const&, local_ref< java::util::Calendar > const&);
		local_ref< java::sql::Timestamp > getTimestamp(cpp_int const&);
		local_ref< java::sql::Timestamp > getTimestamp(cpp_int const&, local_ref< java::util::Calendar > const&);
		local_ref< java::sql::Timestamp > getTimestamp(local_ref< java::lang::String > const&);
		local_ref< java::sql::Timestamp > getTimestamp(local_ref< java::lang::String > const&, local_ref< java::util::Calendar > const&);
		cpp_int getType();
		local_ref< java::io::InputStream > getUnicodeStream(cpp_int const&);
		local_ref< java::io::InputStream > getUnicodeStream(local_ref< java::lang::String > const&);
		local_ref< java::net::URL > getURL(cpp_int const&);
		local_ref< java::net::URL > getURL(local_ref< java::lang::String > const&);
		local_ref< java::sql::SQLWarning > getWarnings();
		void insertRow();
		cpp_boolean isAfterLast();
		cpp_boolean isBeforeFirst();
		cpp_boolean isFirst();
		cpp_boolean isLast();
		cpp_boolean last();
		void moveToCurrentRow();
		void moveToInsertRow();
		cpp_boolean next();
		cpp_boolean previous();
		void refreshRow();
		cpp_boolean relative(cpp_int const&);
		cpp_boolean rowDeleted();
		cpp_boolean rowInserted();
		cpp_boolean rowUpdated();
		void setFetchDirection(cpp_int const&);
		void setFetchSize(cpp_int const&);
		void updateArray(cpp_int const&, local_ref< java::sql::Array > const&);
		void updateArray(local_ref< java::lang::String > const&, local_ref< java::sql::Array > const&);
		void updateAsciiStream(cpp_int const&, local_ref< java::io::InputStream > const&, cpp_int const&);
		void updateAsciiStream(local_ref< java::lang::String > const&, local_ref< java::io::InputStream > const&, cpp_int const&);
		void updateBigDecimal(cpp_int const&, local_ref< java::math::BigDecimal > const&);
		void updateBigDecimal(local_ref< java::lang::String > const&, local_ref< java::math::BigDecimal > const&);
		void updateBinaryStream(cpp_int const&, local_ref< java::io::InputStream > const&, cpp_int const&);
		void updateBinaryStream(local_ref< java::lang::String > const&, local_ref< java::io::InputStream > const&, cpp_int const&);
		void updateBlob(cpp_int const&, local_ref< java::sql::Blob > const&);
		void updateBlob(local_ref< java::lang::String > const&, local_ref< java::sql::Blob > const&);
		void updateBoolean(cpp_int const&, cpp_boolean const&);
		void updateBoolean(local_ref< java::lang::String > const&, cpp_boolean const&);
		void updateByte(cpp_int const&, cpp_byte const&);
		void updateByte(local_ref< java::lang::String > const&, cpp_byte const&);
		void updateBytes(cpp_int const&, local_ref< cpp_byte_array<1> > const&);
		void updateBytes(local_ref< java::lang::String > const&, local_ref< cpp_byte_array<1> > const&);
		void updateCharacterStream(cpp_int const&, local_ref< java::io::Reader > const&, cpp_int const&);
		void updateCharacterStream(local_ref< java::lang::String > const&, local_ref< java::io::Reader > const&, cpp_int const&);
		void updateClob(cpp_int const&, local_ref< java::sql::Clob > const&);
		void updateClob(local_ref< java::lang::String > const&, local_ref< java::sql::Clob > const&);
		void updateDate(cpp_int const&, local_ref< java::sql::Date > const&);
		void updateDate(local_ref< java::lang::String > const&, local_ref< java::sql::Date > const&);
		void updateDouble(cpp_int const&, cpp_double const&);
		void updateDouble(local_ref< java::lang::String > const&, cpp_double const&);
		void updateFloat(cpp_int const&, cpp_float const&);
		void updateFloat(local_ref< java::lang::String > const&, cpp_float const&);
		void updateInt(cpp_int const&, cpp_int const&);
		void updateInt(local_ref< java::lang::String > const&, cpp_int const&);
		void updateLong(cpp_int const&, cpp_long const&);
		void updateLong(local_ref< java::lang::String > const&, cpp_long const&);
		void updateNull(cpp_int const&);
		void updateNull(local_ref< java::lang::String > const&);
		void updateObject(cpp_int const&, local_ref< java::lang::Object > const&);
		void updateObject(cpp_int const&, local_ref< java::lang::Object > const&, cpp_int const&);
		void updateObject(local_ref< java::lang::String > const&, local_ref< java::lang::Object > const&);
		void updateObject(local_ref< java::lang::String > const&, local_ref< java::lang::Object > const&, cpp_int const&);
		void updateRef(cpp_int const&, local_ref< java::sql::Ref > const&);
		void updateRef(local_ref< java::lang::String > const&, local_ref< java::sql::Ref > const&);
		void updateRow();
		void updateShort(cpp_int const&, cpp_short const&);
		void updateShort(local_ref< java::lang::String > const&, cpp_short const&);
		void updateString(cpp_int const&, local_ref< java::lang::String > const&);
		void updateString(local_ref< java::lang::String > const&, local_ref< java::lang::String > const&);
		void updateTime(cpp_int const&, local_ref< java::sql::Time > const&);
		void updateTime(local_ref< java::lang::String > const&, local_ref< java::sql::Time > const&);
		void updateTimestamp(cpp_int const&, local_ref< java::sql::Timestamp > const&);
		void updateTimestamp(local_ref< java::lang::String > const&, local_ref< java::sql::Timestamp > const&);
		cpp_boolean wasNull();
		local_ref< java::sql::RowId > getRowId(cpp_int const&);
		local_ref< java::sql::RowId > getRowId(local_ref< java::lang::String > const&);
		void updateRowId(cpp_int const&, local_ref< java::sql::RowId > const&);
		void updateRowId(local_ref< java::lang::String > const&, local_ref< java::sql::RowId > const&);
		cpp_int getHoldability();
		cpp_boolean isClosed();
		void updateNString(cpp_int const&, local_ref< java::lang::String > const&);
		void updateNString(local_ref< java::lang::String > const&, local_ref< java::lang::String > const&);
		void updateNClob(cpp_int const&, local_ref< java::sql::NClob > const&);
		void updateNClob(local_ref< java::lang::String > const&, local_ref< java::sql::NClob > const&);
		local_ref< java::sql::NClob > getNClob(cpp_int const&);
		local_ref< java::sql::NClob > getNClob(local_ref< java::lang::String > const&);
		local_ref< java::sql::SQLXML > getSQLXML(cpp_int const&);
		local_ref< java::sql::SQLXML > getSQLXML(local_ref< java::lang::String > const&);
		void updateSQLXML(cpp_int const&, local_ref< java::sql::SQLXML > const&);
		void updateSQLXML(local_ref< java::lang::String > const&, local_ref< java::sql::SQLXML > const&);
		local_ref< java::lang::String > getNString(cpp_int const&);
		local_ref< java::lang::String > getNString(local_ref< java::lang::String > const&);
		local_ref< java::io::Reader > getNCharacterStream(cpp_int const&);
		local_ref< java::io::Reader > getNCharacterStream(local_ref< java::lang::String > const&);
		void updateNCharacterStream(cpp_int const&, local_ref< java::io::Reader > const&, cpp_long const&);
		void updateNCharacterStream(local_ref< java::lang::String > const&, local_ref< java::io::Reader > const&, cpp_long const&);
		void updateAsciiStream(cpp_int const&, local_ref< java::io::InputStream > const&, cpp_long const&);
		void updateBinaryStream(cpp_int const&, local_ref< java::io::InputStream > const&, cpp_long const&);
		void updateCharacterStream(cpp_int const&, local_ref< java::io::Reader > const&, cpp_long const&);
		void updateAsciiStream(local_ref< java::lang::String > const&, local_ref< java::io::InputStream > const&, cpp_long const&);
		void updateBinaryStream(local_ref< java::lang::String > const&, local_ref< java::io::InputStream > const&, cpp_long const&);
		void updateCharacterStream(local_ref< java::lang::String > const&, local_ref< java::io::Reader > const&, cpp_long const&);
		void updateBlob(cpp_int const&, local_ref< java::io::InputStream > const&, cpp_long const&);
		void updateBlob(local_ref< java::lang::String > const&, local_ref< java::io::InputStream > const&, cpp_long const&);
		void updateClob(cpp_int const&, local_ref< java::io::Reader > const&, cpp_long const&);
		void updateClob(local_ref< java::lang::String > const&, local_ref< java::io::Reader > const&, cpp_long const&);
		void updateNClob(cpp_int const&, local_ref< java::io::Reader > const&, cpp_long const&);
		void updateNClob(local_ref< java::lang::String > const&, local_ref< java::io::Reader > const&, cpp_long const&);
		void updateNCharacterStream(cpp_int const&, local_ref< java::io::Reader > const&);
		void updateNCharacterStream(local_ref< java::lang::String > const&, local_ref< java::io::Reader > const&);
		void updateAsciiStream(cpp_int const&, local_ref< java::io::InputStream > const&);
		void updateBinaryStream(cpp_int const&, local_ref< java::io::InputStream > const&);
		void updateCharacterStream(cpp_int const&, local_ref< java::io::Reader > const&);
		void updateAsciiStream(local_ref< java::lang::String > const&, local_ref< java::io::InputStream > const&);
		void updateBinaryStream(local_ref< java::lang::String > const&, local_ref< java::io::InputStream > const&);
		void updateCharacterStream(local_ref< java::lang::String > const&, local_ref< java::io::Reader > const&);
		void updateBlob(cpp_int const&, local_ref< java::io::InputStream > const&);
		void updateBlob(local_ref< java::lang::String > const&, local_ref< java::io::InputStream > const&);
		void updateClob(cpp_int const&, local_ref< java::io::Reader > const&);
		void updateClob(local_ref< java::lang::String > const&, local_ref< java::io::Reader > const&);
		void updateNClob(cpp_int const&, local_ref< java::io::Reader > const&);
		void updateNClob(local_ref< java::lang::String > const&, local_ref< java::io::Reader > const&);

		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(0), J2CPP_FIELD_SIGNATURE(0), cpp_int > CLOSE_CURSORS_AT_COMMIT;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(1), J2CPP_FIELD_SIGNATURE(1), cpp_int > HOLD_CURSORS_OVER_COMMIT;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(2), J2CPP_FIELD_SIGNATURE(2), cpp_int > CONCUR_READ_ONLY;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(3), J2CPP_FIELD_SIGNATURE(3), cpp_int > CONCUR_UPDATABLE;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(4), J2CPP_FIELD_SIGNATURE(4), cpp_int > FETCH_FORWARD;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(5), J2CPP_FIELD_SIGNATURE(5), cpp_int > FETCH_REVERSE;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(6), J2CPP_FIELD_SIGNATURE(6), cpp_int > FETCH_UNKNOWN;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(7), J2CPP_FIELD_SIGNATURE(7), cpp_int > TYPE_FORWARD_ONLY;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(8), J2CPP_FIELD_SIGNATURE(8), cpp_int > TYPE_SCROLL_INSENSITIVE;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(9), J2CPP_FIELD_SIGNATURE(9), cpp_int > TYPE_SCROLL_SENSITIVE;
	}; //class ResultSet

} //namespace sql
} //namespace java


} //namespace j2cpp

#endif //J2CPP_JAVA_SQL_RESULTSET_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_SQL_RESULTSET_HPP_IMPL
#define J2CPP_JAVA_SQL_RESULTSET_HPP_IMPL

namespace j2cpp {


cpp_boolean java::sql::ResultSet::absolute(cpp_int const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(0), J2CPP_METHOD_SIGNATURE(0), false>(),
			a0.get_jtype()
		)
	);
}

void java::sql::ResultSet::afterLast()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), false>()
		)
	);
}

void java::sql::ResultSet::beforeFirst()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>()
		)
	);
}

void java::sql::ResultSet::cancelRowUpdates()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>()
		)
	);
}

void java::sql::ResultSet::clearWarnings()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>()
		)
	);
}

void java::sql::ResultSet::close()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>()
		)
	);
}

void java::sql::ResultSet::deleteRow()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>()
		)
	);
}

cpp_int java::sql::ResultSet::findColumn(local_ref< java::lang::String > const &a0)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(7), J2CPP_METHOD_SIGNATURE(7), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean java::sql::ResultSet::first()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(8), J2CPP_METHOD_SIGNATURE(8), false>()
		)
	);
}

local_ref< java::sql::Array > java::sql::ResultSet::getArray(cpp_int const &a0)
{
	return local_ref< java::sql::Array >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(9), J2CPP_METHOD_SIGNATURE(9), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::sql::Array > java::sql::ResultSet::getArray(local_ref< java::lang::String > const &a0)
{
	return local_ref< java::sql::Array >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(10), J2CPP_METHOD_SIGNATURE(10), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::io::InputStream > java::sql::ResultSet::getAsciiStream(cpp_int const &a0)
{
	return local_ref< java::io::InputStream >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(11), J2CPP_METHOD_SIGNATURE(11), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::io::InputStream > java::sql::ResultSet::getAsciiStream(local_ref< java::lang::String > const &a0)
{
	return local_ref< java::io::InputStream >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(12), J2CPP_METHOD_SIGNATURE(12), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::math::BigDecimal > java::sql::ResultSet::getBigDecimal(cpp_int const &a0)
{
	return local_ref< java::math::BigDecimal >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(13), J2CPP_METHOD_SIGNATURE(13), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::math::BigDecimal > java::sql::ResultSet::getBigDecimal(cpp_int const &a0, cpp_int const &a1)
{
	return local_ref< java::math::BigDecimal >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(14), J2CPP_METHOD_SIGNATURE(14), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< java::math::BigDecimal > java::sql::ResultSet::getBigDecimal(local_ref< java::lang::String > const &a0)
{
	return local_ref< java::math::BigDecimal >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(15), J2CPP_METHOD_SIGNATURE(15), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::math::BigDecimal > java::sql::ResultSet::getBigDecimal(local_ref< java::lang::String > const &a0, cpp_int const &a1)
{
	return local_ref< java::math::BigDecimal >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(16), J2CPP_METHOD_SIGNATURE(16), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< java::io::InputStream > java::sql::ResultSet::getBinaryStream(cpp_int const &a0)
{
	return local_ref< java::io::InputStream >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(17), J2CPP_METHOD_SIGNATURE(17), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::io::InputStream > java::sql::ResultSet::getBinaryStream(local_ref< java::lang::String > const &a0)
{
	return local_ref< java::io::InputStream >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(18), J2CPP_METHOD_SIGNATURE(18), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::sql::Blob > java::sql::ResultSet::getBlob(cpp_int const &a0)
{
	return local_ref< java::sql::Blob >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(19), J2CPP_METHOD_SIGNATURE(19), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::sql::Blob > java::sql::ResultSet::getBlob(local_ref< java::lang::String > const &a0)
{
	return local_ref< java::sql::Blob >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(20), J2CPP_METHOD_SIGNATURE(20), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean java::sql::ResultSet::getBoolean(cpp_int const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(21), J2CPP_METHOD_SIGNATURE(21), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean java::sql::ResultSet::getBoolean(local_ref< java::lang::String > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(22), J2CPP_METHOD_SIGNATURE(22), false>(),
			a0.get_jtype()
		)
	);
}

cpp_byte java::sql::ResultSet::getByte(cpp_int const &a0)
{
	return cpp_byte(
		environment::get().get_jenv()->CallByteMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(23), J2CPP_METHOD_SIGNATURE(23), false>(),
			a0.get_jtype()
		)
	);
}

cpp_byte java::sql::ResultSet::getByte(local_ref< java::lang::String > const &a0)
{
	return cpp_byte(
		environment::get().get_jenv()->CallByteMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(24), J2CPP_METHOD_SIGNATURE(24), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< cpp_byte_array<1> > java::sql::ResultSet::getBytes(cpp_int const &a0)
{
	return local_ref< cpp_byte_array<1> >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(25), J2CPP_METHOD_SIGNATURE(25), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< cpp_byte_array<1> > java::sql::ResultSet::getBytes(local_ref< java::lang::String > const &a0)
{
	return local_ref< cpp_byte_array<1> >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(26), J2CPP_METHOD_SIGNATURE(26), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::io::Reader > java::sql::ResultSet::getCharacterStream(cpp_int const &a0)
{
	return local_ref< java::io::Reader >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(27), J2CPP_METHOD_SIGNATURE(27), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::io::Reader > java::sql::ResultSet::getCharacterStream(local_ref< java::lang::String > const &a0)
{
	return local_ref< java::io::Reader >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(28), J2CPP_METHOD_SIGNATURE(28), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::sql::Clob > java::sql::ResultSet::getClob(cpp_int const &a0)
{
	return local_ref< java::sql::Clob >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(29), J2CPP_METHOD_SIGNATURE(29), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::sql::Clob > java::sql::ResultSet::getClob(local_ref< java::lang::String > const &a0)
{
	return local_ref< java::sql::Clob >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(30), J2CPP_METHOD_SIGNATURE(30), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int java::sql::ResultSet::getConcurrency()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(31), J2CPP_METHOD_SIGNATURE(31), false>()
		)
	);
}

local_ref< java::lang::String > java::sql::ResultSet::getCursorName()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(32), J2CPP_METHOD_SIGNATURE(32), false>()
		)
	);
}

local_ref< java::sql::Date > java::sql::ResultSet::getDate(cpp_int const &a0)
{
	return local_ref< java::sql::Date >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(33), J2CPP_METHOD_SIGNATURE(33), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::sql::Date > java::sql::ResultSet::getDate(cpp_int const &a0, local_ref< java::util::Calendar > const &a1)
{
	return local_ref< java::sql::Date >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(34), J2CPP_METHOD_SIGNATURE(34), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< java::sql::Date > java::sql::ResultSet::getDate(local_ref< java::lang::String > const &a0)
{
	return local_ref< java::sql::Date >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(35), J2CPP_METHOD_SIGNATURE(35), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::sql::Date > java::sql::ResultSet::getDate(local_ref< java::lang::String > const &a0, local_ref< java::util::Calendar > const &a1)
{
	return local_ref< java::sql::Date >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(36), J2CPP_METHOD_SIGNATURE(36), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_double java::sql::ResultSet::getDouble(cpp_int const &a0)
{
	return cpp_double(
		environment::get().get_jenv()->CallDoubleMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(37), J2CPP_METHOD_SIGNATURE(37), false>(),
			a0.get_jtype()
		)
	);
}

cpp_double java::sql::ResultSet::getDouble(local_ref< java::lang::String > const &a0)
{
	return cpp_double(
		environment::get().get_jenv()->CallDoubleMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(38), J2CPP_METHOD_SIGNATURE(38), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int java::sql::ResultSet::getFetchDirection()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(39), J2CPP_METHOD_SIGNATURE(39), false>()
		)
	);
}

cpp_int java::sql::ResultSet::getFetchSize()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(40), J2CPP_METHOD_SIGNATURE(40), false>()
		)
	);
}

cpp_float java::sql::ResultSet::getFloat(cpp_int const &a0)
{
	return cpp_float(
		environment::get().get_jenv()->CallFloatMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(41), J2CPP_METHOD_SIGNATURE(41), false>(),
			a0.get_jtype()
		)
	);
}

cpp_float java::sql::ResultSet::getFloat(local_ref< java::lang::String > const &a0)
{
	return cpp_float(
		environment::get().get_jenv()->CallFloatMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(42), J2CPP_METHOD_SIGNATURE(42), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int java::sql::ResultSet::getInt(cpp_int const &a0)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(43), J2CPP_METHOD_SIGNATURE(43), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int java::sql::ResultSet::getInt(local_ref< java::lang::String > const &a0)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(44), J2CPP_METHOD_SIGNATURE(44), false>(),
			a0.get_jtype()
		)
	);
}

cpp_long java::sql::ResultSet::getLong(cpp_int const &a0)
{
	return cpp_long(
		environment::get().get_jenv()->CallLongMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(45), J2CPP_METHOD_SIGNATURE(45), false>(),
			a0.get_jtype()
		)
	);
}

cpp_long java::sql::ResultSet::getLong(local_ref< java::lang::String > const &a0)
{
	return cpp_long(
		environment::get().get_jenv()->CallLongMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(46), J2CPP_METHOD_SIGNATURE(46), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::sql::ResultSetMetaData > java::sql::ResultSet::getMetaData()
{
	return local_ref< java::sql::ResultSetMetaData >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(47), J2CPP_METHOD_SIGNATURE(47), false>()
		)
	);
}

local_ref< java::lang::Object > java::sql::ResultSet::getObject(cpp_int const &a0)
{
	return local_ref< java::lang::Object >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(48), J2CPP_METHOD_SIGNATURE(48), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::Object > java::sql::ResultSet::getObject(cpp_int const &a0, local_ref< java::util::Map > const &a1)
{
	return local_ref< java::lang::Object >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(49), J2CPP_METHOD_SIGNATURE(49), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< java::lang::Object > java::sql::ResultSet::getObject(local_ref< java::lang::String > const &a0)
{
	return local_ref< java::lang::Object >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(50), J2CPP_METHOD_SIGNATURE(50), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::Object > java::sql::ResultSet::getObject(local_ref< java::lang::String > const &a0, local_ref< java::util::Map > const &a1)
{
	return local_ref< java::lang::Object >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(51), J2CPP_METHOD_SIGNATURE(51), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< java::sql::Ref > java::sql::ResultSet::getRef(cpp_int const &a0)
{
	return local_ref< java::sql::Ref >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(52), J2CPP_METHOD_SIGNATURE(52), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::sql::Ref > java::sql::ResultSet::getRef(local_ref< java::lang::String > const &a0)
{
	return local_ref< java::sql::Ref >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(53), J2CPP_METHOD_SIGNATURE(53), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int java::sql::ResultSet::getRow()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(54), J2CPP_METHOD_SIGNATURE(54), false>()
		)
	);
}

cpp_short java::sql::ResultSet::getShort(cpp_int const &a0)
{
	return cpp_short(
		environment::get().get_jenv()->CallShortMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(55), J2CPP_METHOD_SIGNATURE(55), false>(),
			a0.get_jtype()
		)
	);
}

cpp_short java::sql::ResultSet::getShort(local_ref< java::lang::String > const &a0)
{
	return cpp_short(
		environment::get().get_jenv()->CallShortMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(56), J2CPP_METHOD_SIGNATURE(56), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::sql::Statement > java::sql::ResultSet::getStatement()
{
	return local_ref< java::sql::Statement >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(57), J2CPP_METHOD_SIGNATURE(57), false>()
		)
	);
}

local_ref< java::lang::String > java::sql::ResultSet::getString(cpp_int const &a0)
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(58), J2CPP_METHOD_SIGNATURE(58), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::String > java::sql::ResultSet::getString(local_ref< java::lang::String > const &a0)
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(59), J2CPP_METHOD_SIGNATURE(59), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::sql::Time > java::sql::ResultSet::getTime(cpp_int const &a0)
{
	return local_ref< java::sql::Time >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(60), J2CPP_METHOD_SIGNATURE(60), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::sql::Time > java::sql::ResultSet::getTime(cpp_int const &a0, local_ref< java::util::Calendar > const &a1)
{
	return local_ref< java::sql::Time >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(61), J2CPP_METHOD_SIGNATURE(61), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< java::sql::Time > java::sql::ResultSet::getTime(local_ref< java::lang::String > const &a0)
{
	return local_ref< java::sql::Time >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(62), J2CPP_METHOD_SIGNATURE(62), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::sql::Time > java::sql::ResultSet::getTime(local_ref< java::lang::String > const &a0, local_ref< java::util::Calendar > const &a1)
{
	return local_ref< java::sql::Time >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(63), J2CPP_METHOD_SIGNATURE(63), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< java::sql::Timestamp > java::sql::ResultSet::getTimestamp(cpp_int const &a0)
{
	return local_ref< java::sql::Timestamp >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(64), J2CPP_METHOD_SIGNATURE(64), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::sql::Timestamp > java::sql::ResultSet::getTimestamp(cpp_int const &a0, local_ref< java::util::Calendar > const &a1)
{
	return local_ref< java::sql::Timestamp >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(65), J2CPP_METHOD_SIGNATURE(65), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< java::sql::Timestamp > java::sql::ResultSet::getTimestamp(local_ref< java::lang::String > const &a0)
{
	return local_ref< java::sql::Timestamp >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(66), J2CPP_METHOD_SIGNATURE(66), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::sql::Timestamp > java::sql::ResultSet::getTimestamp(local_ref< java::lang::String > const &a0, local_ref< java::util::Calendar > const &a1)
{
	return local_ref< java::sql::Timestamp >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(67), J2CPP_METHOD_SIGNATURE(67), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_int java::sql::ResultSet::getType()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(68), J2CPP_METHOD_SIGNATURE(68), false>()
		)
	);
}

local_ref< java::io::InputStream > java::sql::ResultSet::getUnicodeStream(cpp_int const &a0)
{
	return local_ref< java::io::InputStream >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(69), J2CPP_METHOD_SIGNATURE(69), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::io::InputStream > java::sql::ResultSet::getUnicodeStream(local_ref< java::lang::String > const &a0)
{
	return local_ref< java::io::InputStream >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(70), J2CPP_METHOD_SIGNATURE(70), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::net::URL > java::sql::ResultSet::getURL(cpp_int const &a0)
{
	return local_ref< java::net::URL >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(71), J2CPP_METHOD_SIGNATURE(71), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::net::URL > java::sql::ResultSet::getURL(local_ref< java::lang::String > const &a0)
{
	return local_ref< java::net::URL >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(72), J2CPP_METHOD_SIGNATURE(72), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::sql::SQLWarning > java::sql::ResultSet::getWarnings()
{
	return local_ref< java::sql::SQLWarning >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(73), J2CPP_METHOD_SIGNATURE(73), false>()
		)
	);
}

void java::sql::ResultSet::insertRow()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(74), J2CPP_METHOD_SIGNATURE(74), false>()
		)
	);
}

cpp_boolean java::sql::ResultSet::isAfterLast()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(75), J2CPP_METHOD_SIGNATURE(75), false>()
		)
	);
}

cpp_boolean java::sql::ResultSet::isBeforeFirst()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(76), J2CPP_METHOD_SIGNATURE(76), false>()
		)
	);
}

cpp_boolean java::sql::ResultSet::isFirst()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(77), J2CPP_METHOD_SIGNATURE(77), false>()
		)
	);
}

cpp_boolean java::sql::ResultSet::isLast()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(78), J2CPP_METHOD_SIGNATURE(78), false>()
		)
	);
}

cpp_boolean java::sql::ResultSet::last()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(79), J2CPP_METHOD_SIGNATURE(79), false>()
		)
	);
}

void java::sql::ResultSet::moveToCurrentRow()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(80), J2CPP_METHOD_SIGNATURE(80), false>()
		)
	);
}

void java::sql::ResultSet::moveToInsertRow()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(81), J2CPP_METHOD_SIGNATURE(81), false>()
		)
	);
}

cpp_boolean java::sql::ResultSet::next()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(82), J2CPP_METHOD_SIGNATURE(82), false>()
		)
	);
}

cpp_boolean java::sql::ResultSet::previous()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(83), J2CPP_METHOD_SIGNATURE(83), false>()
		)
	);
}

void java::sql::ResultSet::refreshRow()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(84), J2CPP_METHOD_SIGNATURE(84), false>()
		)
	);
}

cpp_boolean java::sql::ResultSet::relative(cpp_int const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(85), J2CPP_METHOD_SIGNATURE(85), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean java::sql::ResultSet::rowDeleted()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(86), J2CPP_METHOD_SIGNATURE(86), false>()
		)
	);
}

cpp_boolean java::sql::ResultSet::rowInserted()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(87), J2CPP_METHOD_SIGNATURE(87), false>()
		)
	);
}

cpp_boolean java::sql::ResultSet::rowUpdated()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(88), J2CPP_METHOD_SIGNATURE(88), false>()
		)
	);
}

void java::sql::ResultSet::setFetchDirection(cpp_int const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(89), J2CPP_METHOD_SIGNATURE(89), false>(),
			a0.get_jtype()
		)
	);
}

void java::sql::ResultSet::setFetchSize(cpp_int const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(90), J2CPP_METHOD_SIGNATURE(90), false>(),
			a0.get_jtype()
		)
	);
}

void java::sql::ResultSet::updateArray(cpp_int const &a0, local_ref< java::sql::Array > const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(91), J2CPP_METHOD_SIGNATURE(91), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void java::sql::ResultSet::updateArray(local_ref< java::lang::String > const &a0, local_ref< java::sql::Array > const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(92), J2CPP_METHOD_SIGNATURE(92), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void java::sql::ResultSet::updateAsciiStream(cpp_int const &a0, local_ref< java::io::InputStream > const &a1, cpp_int const &a2)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(93), J2CPP_METHOD_SIGNATURE(93), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

void java::sql::ResultSet::updateAsciiStream(local_ref< java::lang::String > const &a0, local_ref< java::io::InputStream > const &a1, cpp_int const &a2)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(94), J2CPP_METHOD_SIGNATURE(94), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

void java::sql::ResultSet::updateBigDecimal(cpp_int const &a0, local_ref< java::math::BigDecimal > const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(95), J2CPP_METHOD_SIGNATURE(95), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void java::sql::ResultSet::updateBigDecimal(local_ref< java::lang::String > const &a0, local_ref< java::math::BigDecimal > const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(96), J2CPP_METHOD_SIGNATURE(96), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void java::sql::ResultSet::updateBinaryStream(cpp_int const &a0, local_ref< java::io::InputStream > const &a1, cpp_int const &a2)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(97), J2CPP_METHOD_SIGNATURE(97), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

void java::sql::ResultSet::updateBinaryStream(local_ref< java::lang::String > const &a0, local_ref< java::io::InputStream > const &a1, cpp_int const &a2)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(98), J2CPP_METHOD_SIGNATURE(98), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

void java::sql::ResultSet::updateBlob(cpp_int const &a0, local_ref< java::sql::Blob > const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(99), J2CPP_METHOD_SIGNATURE(99), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void java::sql::ResultSet::updateBlob(local_ref< java::lang::String > const &a0, local_ref< java::sql::Blob > const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(100), J2CPP_METHOD_SIGNATURE(100), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void java::sql::ResultSet::updateBoolean(cpp_int const &a0, cpp_boolean const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(101), J2CPP_METHOD_SIGNATURE(101), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void java::sql::ResultSet::updateBoolean(local_ref< java::lang::String > const &a0, cpp_boolean const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(102), J2CPP_METHOD_SIGNATURE(102), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void java::sql::ResultSet::updateByte(cpp_int const &a0, cpp_byte const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(103), J2CPP_METHOD_SIGNATURE(103), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void java::sql::ResultSet::updateByte(local_ref< java::lang::String > const &a0, cpp_byte const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(104), J2CPP_METHOD_SIGNATURE(104), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void java::sql::ResultSet::updateBytes(cpp_int const &a0, local_ref< cpp_byte_array<1> > const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(105), J2CPP_METHOD_SIGNATURE(105), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void java::sql::ResultSet::updateBytes(local_ref< java::lang::String > const &a0, local_ref< cpp_byte_array<1> > const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(106), J2CPP_METHOD_SIGNATURE(106), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void java::sql::ResultSet::updateCharacterStream(cpp_int const &a0, local_ref< java::io::Reader > const &a1, cpp_int const &a2)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(107), J2CPP_METHOD_SIGNATURE(107), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

void java::sql::ResultSet::updateCharacterStream(local_ref< java::lang::String > const &a0, local_ref< java::io::Reader > const &a1, cpp_int const &a2)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(108), J2CPP_METHOD_SIGNATURE(108), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

void java::sql::ResultSet::updateClob(cpp_int const &a0, local_ref< java::sql::Clob > const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(109), J2CPP_METHOD_SIGNATURE(109), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void java::sql::ResultSet::updateClob(local_ref< java::lang::String > const &a0, local_ref< java::sql::Clob > const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(110), J2CPP_METHOD_SIGNATURE(110), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void java::sql::ResultSet::updateDate(cpp_int const &a0, local_ref< java::sql::Date > const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(111), J2CPP_METHOD_SIGNATURE(111), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void java::sql::ResultSet::updateDate(local_ref< java::lang::String > const &a0, local_ref< java::sql::Date > const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(112), J2CPP_METHOD_SIGNATURE(112), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void java::sql::ResultSet::updateDouble(cpp_int const &a0, cpp_double const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(113), J2CPP_METHOD_SIGNATURE(113), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void java::sql::ResultSet::updateDouble(local_ref< java::lang::String > const &a0, cpp_double const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(114), J2CPP_METHOD_SIGNATURE(114), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void java::sql::ResultSet::updateFloat(cpp_int const &a0, cpp_float const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(115), J2CPP_METHOD_SIGNATURE(115), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void java::sql::ResultSet::updateFloat(local_ref< java::lang::String > const &a0, cpp_float const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(116), J2CPP_METHOD_SIGNATURE(116), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void java::sql::ResultSet::updateInt(cpp_int const &a0, cpp_int const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(117), J2CPP_METHOD_SIGNATURE(117), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void java::sql::ResultSet::updateInt(local_ref< java::lang::String > const &a0, cpp_int const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(118), J2CPP_METHOD_SIGNATURE(118), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void java::sql::ResultSet::updateLong(cpp_int const &a0, cpp_long const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(119), J2CPP_METHOD_SIGNATURE(119), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void java::sql::ResultSet::updateLong(local_ref< java::lang::String > const &a0, cpp_long const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(120), J2CPP_METHOD_SIGNATURE(120), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void java::sql::ResultSet::updateNull(cpp_int const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(121), J2CPP_METHOD_SIGNATURE(121), false>(),
			a0.get_jtype()
		)
	);
}

void java::sql::ResultSet::updateNull(local_ref< java::lang::String > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(122), J2CPP_METHOD_SIGNATURE(122), false>(),
			a0.get_jtype()
		)
	);
}

void java::sql::ResultSet::updateObject(cpp_int const &a0, local_ref< java::lang::Object > const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(123), J2CPP_METHOD_SIGNATURE(123), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void java::sql::ResultSet::updateObject(cpp_int const &a0, local_ref< java::lang::Object > const &a1, cpp_int const &a2)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(124), J2CPP_METHOD_SIGNATURE(124), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

void java::sql::ResultSet::updateObject(local_ref< java::lang::String > const &a0, local_ref< java::lang::Object > const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(125), J2CPP_METHOD_SIGNATURE(125), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void java::sql::ResultSet::updateObject(local_ref< java::lang::String > const &a0, local_ref< java::lang::Object > const &a1, cpp_int const &a2)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(126), J2CPP_METHOD_SIGNATURE(126), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

void java::sql::ResultSet::updateRef(cpp_int const &a0, local_ref< java::sql::Ref > const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(127), J2CPP_METHOD_SIGNATURE(127), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void java::sql::ResultSet::updateRef(local_ref< java::lang::String > const &a0, local_ref< java::sql::Ref > const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(128), J2CPP_METHOD_SIGNATURE(128), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void java::sql::ResultSet::updateRow()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(129), J2CPP_METHOD_SIGNATURE(129), false>()
		)
	);
}

void java::sql::ResultSet::updateShort(cpp_int const &a0, cpp_short const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(130), J2CPP_METHOD_SIGNATURE(130), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void java::sql::ResultSet::updateShort(local_ref< java::lang::String > const &a0, cpp_short const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(131), J2CPP_METHOD_SIGNATURE(131), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void java::sql::ResultSet::updateString(cpp_int const &a0, local_ref< java::lang::String > const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(132), J2CPP_METHOD_SIGNATURE(132), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void java::sql::ResultSet::updateString(local_ref< java::lang::String > const &a0, local_ref< java::lang::String > const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(133), J2CPP_METHOD_SIGNATURE(133), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void java::sql::ResultSet::updateTime(cpp_int const &a0, local_ref< java::sql::Time > const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(134), J2CPP_METHOD_SIGNATURE(134), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void java::sql::ResultSet::updateTime(local_ref< java::lang::String > const &a0, local_ref< java::sql::Time > const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(135), J2CPP_METHOD_SIGNATURE(135), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void java::sql::ResultSet::updateTimestamp(cpp_int const &a0, local_ref< java::sql::Timestamp > const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(136), J2CPP_METHOD_SIGNATURE(136), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void java::sql::ResultSet::updateTimestamp(local_ref< java::lang::String > const &a0, local_ref< java::sql::Timestamp > const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(137), J2CPP_METHOD_SIGNATURE(137), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_boolean java::sql::ResultSet::wasNull()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(138), J2CPP_METHOD_SIGNATURE(138), false>()
		)
	);
}

local_ref< java::sql::RowId > java::sql::ResultSet::getRowId(cpp_int const &a0)
{
	return local_ref< java::sql::RowId >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(139), J2CPP_METHOD_SIGNATURE(139), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::sql::RowId > java::sql::ResultSet::getRowId(local_ref< java::lang::String > const &a0)
{
	return local_ref< java::sql::RowId >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(140), J2CPP_METHOD_SIGNATURE(140), false>(),
			a0.get_jtype()
		)
	);
}

void java::sql::ResultSet::updateRowId(cpp_int const &a0, local_ref< java::sql::RowId > const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(141), J2CPP_METHOD_SIGNATURE(141), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void java::sql::ResultSet::updateRowId(local_ref< java::lang::String > const &a0, local_ref< java::sql::RowId > const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(142), J2CPP_METHOD_SIGNATURE(142), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_int java::sql::ResultSet::getHoldability()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(143), J2CPP_METHOD_SIGNATURE(143), false>()
		)
	);
}

cpp_boolean java::sql::ResultSet::isClosed()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(144), J2CPP_METHOD_SIGNATURE(144), false>()
		)
	);
}

void java::sql::ResultSet::updateNString(cpp_int const &a0, local_ref< java::lang::String > const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(145), J2CPP_METHOD_SIGNATURE(145), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void java::sql::ResultSet::updateNString(local_ref< java::lang::String > const &a0, local_ref< java::lang::String > const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(146), J2CPP_METHOD_SIGNATURE(146), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void java::sql::ResultSet::updateNClob(cpp_int const &a0, local_ref< java::sql::NClob > const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(147), J2CPP_METHOD_SIGNATURE(147), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void java::sql::ResultSet::updateNClob(local_ref< java::lang::String > const &a0, local_ref< java::sql::NClob > const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(148), J2CPP_METHOD_SIGNATURE(148), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< java::sql::NClob > java::sql::ResultSet::getNClob(cpp_int const &a0)
{
	return local_ref< java::sql::NClob >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(149), J2CPP_METHOD_SIGNATURE(149), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::sql::NClob > java::sql::ResultSet::getNClob(local_ref< java::lang::String > const &a0)
{
	return local_ref< java::sql::NClob >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(150), J2CPP_METHOD_SIGNATURE(150), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::sql::SQLXML > java::sql::ResultSet::getSQLXML(cpp_int const &a0)
{
	return local_ref< java::sql::SQLXML >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(151), J2CPP_METHOD_SIGNATURE(151), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::sql::SQLXML > java::sql::ResultSet::getSQLXML(local_ref< java::lang::String > const &a0)
{
	return local_ref< java::sql::SQLXML >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(152), J2CPP_METHOD_SIGNATURE(152), false>(),
			a0.get_jtype()
		)
	);
}

void java::sql::ResultSet::updateSQLXML(cpp_int const &a0, local_ref< java::sql::SQLXML > const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(153), J2CPP_METHOD_SIGNATURE(153), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void java::sql::ResultSet::updateSQLXML(local_ref< java::lang::String > const &a0, local_ref< java::sql::SQLXML > const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(154), J2CPP_METHOD_SIGNATURE(154), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< java::lang::String > java::sql::ResultSet::getNString(cpp_int const &a0)
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(155), J2CPP_METHOD_SIGNATURE(155), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::String > java::sql::ResultSet::getNString(local_ref< java::lang::String > const &a0)
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(156), J2CPP_METHOD_SIGNATURE(156), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::io::Reader > java::sql::ResultSet::getNCharacterStream(cpp_int const &a0)
{
	return local_ref< java::io::Reader >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(157), J2CPP_METHOD_SIGNATURE(157), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::io::Reader > java::sql::ResultSet::getNCharacterStream(local_ref< java::lang::String > const &a0)
{
	return local_ref< java::io::Reader >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(158), J2CPP_METHOD_SIGNATURE(158), false>(),
			a0.get_jtype()
		)
	);
}

void java::sql::ResultSet::updateNCharacterStream(cpp_int const &a0, local_ref< java::io::Reader > const &a1, cpp_long const &a2)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(159), J2CPP_METHOD_SIGNATURE(159), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

void java::sql::ResultSet::updateNCharacterStream(local_ref< java::lang::String > const &a0, local_ref< java::io::Reader > const &a1, cpp_long const &a2)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(160), J2CPP_METHOD_SIGNATURE(160), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

void java::sql::ResultSet::updateAsciiStream(cpp_int const &a0, local_ref< java::io::InputStream > const &a1, cpp_long const &a2)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(161), J2CPP_METHOD_SIGNATURE(161), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

void java::sql::ResultSet::updateBinaryStream(cpp_int const &a0, local_ref< java::io::InputStream > const &a1, cpp_long const &a2)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(162), J2CPP_METHOD_SIGNATURE(162), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

void java::sql::ResultSet::updateCharacterStream(cpp_int const &a0, local_ref< java::io::Reader > const &a1, cpp_long const &a2)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(163), J2CPP_METHOD_SIGNATURE(163), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

void java::sql::ResultSet::updateAsciiStream(local_ref< java::lang::String > const &a0, local_ref< java::io::InputStream > const &a1, cpp_long const &a2)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(164), J2CPP_METHOD_SIGNATURE(164), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

void java::sql::ResultSet::updateBinaryStream(local_ref< java::lang::String > const &a0, local_ref< java::io::InputStream > const &a1, cpp_long const &a2)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(165), J2CPP_METHOD_SIGNATURE(165), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

void java::sql::ResultSet::updateCharacterStream(local_ref< java::lang::String > const &a0, local_ref< java::io::Reader > const &a1, cpp_long const &a2)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(166), J2CPP_METHOD_SIGNATURE(166), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

void java::sql::ResultSet::updateBlob(cpp_int const &a0, local_ref< java::io::InputStream > const &a1, cpp_long const &a2)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(167), J2CPP_METHOD_SIGNATURE(167), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

void java::sql::ResultSet::updateBlob(local_ref< java::lang::String > const &a0, local_ref< java::io::InputStream > const &a1, cpp_long const &a2)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(168), J2CPP_METHOD_SIGNATURE(168), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

void java::sql::ResultSet::updateClob(cpp_int const &a0, local_ref< java::io::Reader > const &a1, cpp_long const &a2)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(169), J2CPP_METHOD_SIGNATURE(169), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

void java::sql::ResultSet::updateClob(local_ref< java::lang::String > const &a0, local_ref< java::io::Reader > const &a1, cpp_long const &a2)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(170), J2CPP_METHOD_SIGNATURE(170), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

void java::sql::ResultSet::updateNClob(cpp_int const &a0, local_ref< java::io::Reader > const &a1, cpp_long const &a2)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(171), J2CPP_METHOD_SIGNATURE(171), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

void java::sql::ResultSet::updateNClob(local_ref< java::lang::String > const &a0, local_ref< java::io::Reader > const &a1, cpp_long const &a2)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(172), J2CPP_METHOD_SIGNATURE(172), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

void java::sql::ResultSet::updateNCharacterStream(cpp_int const &a0, local_ref< java::io::Reader > const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(173), J2CPP_METHOD_SIGNATURE(173), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void java::sql::ResultSet::updateNCharacterStream(local_ref< java::lang::String > const &a0, local_ref< java::io::Reader > const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(174), J2CPP_METHOD_SIGNATURE(174), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void java::sql::ResultSet::updateAsciiStream(cpp_int const &a0, local_ref< java::io::InputStream > const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(175), J2CPP_METHOD_SIGNATURE(175), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void java::sql::ResultSet::updateBinaryStream(cpp_int const &a0, local_ref< java::io::InputStream > const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(176), J2CPP_METHOD_SIGNATURE(176), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void java::sql::ResultSet::updateCharacterStream(cpp_int const &a0, local_ref< java::io::Reader > const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(177), J2CPP_METHOD_SIGNATURE(177), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void java::sql::ResultSet::updateAsciiStream(local_ref< java::lang::String > const &a0, local_ref< java::io::InputStream > const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(178), J2CPP_METHOD_SIGNATURE(178), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void java::sql::ResultSet::updateBinaryStream(local_ref< java::lang::String > const &a0, local_ref< java::io::InputStream > const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(179), J2CPP_METHOD_SIGNATURE(179), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void java::sql::ResultSet::updateCharacterStream(local_ref< java::lang::String > const &a0, local_ref< java::io::Reader > const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(180), J2CPP_METHOD_SIGNATURE(180), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void java::sql::ResultSet::updateBlob(cpp_int const &a0, local_ref< java::io::InputStream > const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(181), J2CPP_METHOD_SIGNATURE(181), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void java::sql::ResultSet::updateBlob(local_ref< java::lang::String > const &a0, local_ref< java::io::InputStream > const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(182), J2CPP_METHOD_SIGNATURE(182), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void java::sql::ResultSet::updateClob(cpp_int const &a0, local_ref< java::io::Reader > const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(183), J2CPP_METHOD_SIGNATURE(183), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void java::sql::ResultSet::updateClob(local_ref< java::lang::String > const &a0, local_ref< java::io::Reader > const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(184), J2CPP_METHOD_SIGNATURE(184), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void java::sql::ResultSet::updateNClob(cpp_int const &a0, local_ref< java::io::Reader > const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(185), J2CPP_METHOD_SIGNATURE(185), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void java::sql::ResultSet::updateNClob(local_ref< java::lang::String > const &a0, local_ref< java::io::Reader > const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(186), J2CPP_METHOD_SIGNATURE(186), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}


static_field<
	java::sql::ResultSet::J2CPP_CLASS_NAME,
	java::sql::ResultSet::J2CPP_FIELD_NAME(0),
	java::sql::ResultSet::J2CPP_FIELD_SIGNATURE(0),
	cpp_int
> java::sql::ResultSet::CLOSE_CURSORS_AT_COMMIT;

static_field<
	java::sql::ResultSet::J2CPP_CLASS_NAME,
	java::sql::ResultSet::J2CPP_FIELD_NAME(1),
	java::sql::ResultSet::J2CPP_FIELD_SIGNATURE(1),
	cpp_int
> java::sql::ResultSet::HOLD_CURSORS_OVER_COMMIT;

static_field<
	java::sql::ResultSet::J2CPP_CLASS_NAME,
	java::sql::ResultSet::J2CPP_FIELD_NAME(2),
	java::sql::ResultSet::J2CPP_FIELD_SIGNATURE(2),
	cpp_int
> java::sql::ResultSet::CONCUR_READ_ONLY;

static_field<
	java::sql::ResultSet::J2CPP_CLASS_NAME,
	java::sql::ResultSet::J2CPP_FIELD_NAME(3),
	java::sql::ResultSet::J2CPP_FIELD_SIGNATURE(3),
	cpp_int
> java::sql::ResultSet::CONCUR_UPDATABLE;

static_field<
	java::sql::ResultSet::J2CPP_CLASS_NAME,
	java::sql::ResultSet::J2CPP_FIELD_NAME(4),
	java::sql::ResultSet::J2CPP_FIELD_SIGNATURE(4),
	cpp_int
> java::sql::ResultSet::FETCH_FORWARD;

static_field<
	java::sql::ResultSet::J2CPP_CLASS_NAME,
	java::sql::ResultSet::J2CPP_FIELD_NAME(5),
	java::sql::ResultSet::J2CPP_FIELD_SIGNATURE(5),
	cpp_int
> java::sql::ResultSet::FETCH_REVERSE;

static_field<
	java::sql::ResultSet::J2CPP_CLASS_NAME,
	java::sql::ResultSet::J2CPP_FIELD_NAME(6),
	java::sql::ResultSet::J2CPP_FIELD_SIGNATURE(6),
	cpp_int
> java::sql::ResultSet::FETCH_UNKNOWN;

static_field<
	java::sql::ResultSet::J2CPP_CLASS_NAME,
	java::sql::ResultSet::J2CPP_FIELD_NAME(7),
	java::sql::ResultSet::J2CPP_FIELD_SIGNATURE(7),
	cpp_int
> java::sql::ResultSet::TYPE_FORWARD_ONLY;

static_field<
	java::sql::ResultSet::J2CPP_CLASS_NAME,
	java::sql::ResultSet::J2CPP_FIELD_NAME(8),
	java::sql::ResultSet::J2CPP_FIELD_SIGNATURE(8),
	cpp_int
> java::sql::ResultSet::TYPE_SCROLL_INSENSITIVE;

static_field<
	java::sql::ResultSet::J2CPP_CLASS_NAME,
	java::sql::ResultSet::J2CPP_FIELD_NAME(9),
	java::sql::ResultSet::J2CPP_FIELD_SIGNATURE(9),
	cpp_int
> java::sql::ResultSet::TYPE_SCROLL_SENSITIVE;


J2CPP_DEFINE_CLASS(java::sql::ResultSet,"java/sql/ResultSet")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,0,"absolute","(I)Z")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,1,"afterLast","()V")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,2,"beforeFirst","()V")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,3,"cancelRowUpdates","()V")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,4,"clearWarnings","()V")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,5,"close","()V")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,6,"deleteRow","()V")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,7,"findColumn","(Ljava/lang/String;)I")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,8,"first","()Z")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,9,"getArray","(I)Ljava/sql/Array;")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,10,"getArray","(Ljava/lang/String;)Ljava/sql/Array;")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,11,"getAsciiStream","(I)Ljava/io/InputStream;")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,12,"getAsciiStream","(Ljava/lang/String;)Ljava/io/InputStream;")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,13,"getBigDecimal","(I)Ljava/math/BigDecimal;")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,14,"getBigDecimal","(II)Ljava/math/BigDecimal;")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,15,"getBigDecimal","(Ljava/lang/String;)Ljava/math/BigDecimal;")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,16,"getBigDecimal","(Ljava/lang/String;I)Ljava/math/BigDecimal;")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,17,"getBinaryStream","(I)Ljava/io/InputStream;")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,18,"getBinaryStream","(Ljava/lang/String;)Ljava/io/InputStream;")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,19,"getBlob","(I)Ljava/sql/Blob;")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,20,"getBlob","(Ljava/lang/String;)Ljava/sql/Blob;")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,21,"getBoolean","(I)Z")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,22,"getBoolean","(Ljava/lang/String;)Z")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,23,"getByte","(I)B")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,24,"getByte","(Ljava/lang/String;)B")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,25,"getBytes","(I)[B")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,26,"getBytes","(Ljava/lang/String;)[B")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,27,"getCharacterStream","(I)Ljava/io/Reader;")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,28,"getCharacterStream","(Ljava/lang/String;)Ljava/io/Reader;")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,29,"getClob","(I)Ljava/sql/Clob;")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,30,"getClob","(Ljava/lang/String;)Ljava/sql/Clob;")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,31,"getConcurrency","()I")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,32,"getCursorName","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,33,"getDate","(I)Ljava/sql/Date;")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,34,"getDate","(ILjava/util/Calendar;)Ljava/sql/Date;")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,35,"getDate","(Ljava/lang/String;)Ljava/sql/Date;")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,36,"getDate","(Ljava/lang/String;Ljava/util/Calendar;)Ljava/sql/Date;")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,37,"getDouble","(I)D")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,38,"getDouble","(Ljava/lang/String;)D")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,39,"getFetchDirection","()I")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,40,"getFetchSize","()I")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,41,"getFloat","(I)F")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,42,"getFloat","(Ljava/lang/String;)F")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,43,"getInt","(I)I")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,44,"getInt","(Ljava/lang/String;)I")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,45,"getLong","(I)J")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,46,"getLong","(Ljava/lang/String;)J")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,47,"getMetaData","()Ljava/sql/ResultSetMetaData;")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,48,"getObject","(I)Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,49,"getObject","(ILjava/util/Map;)Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,50,"getObject","(Ljava/lang/String;)Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,51,"getObject","(Ljava/lang/String;Ljava/util/Map;)Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,52,"getRef","(I)Ljava/sql/Ref;")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,53,"getRef","(Ljava/lang/String;)Ljava/sql/Ref;")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,54,"getRow","()I")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,55,"getShort","(I)S")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,56,"getShort","(Ljava/lang/String;)S")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,57,"getStatement","()Ljava/sql/Statement;")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,58,"getString","(I)Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,59,"getString","(Ljava/lang/String;)Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,60,"getTime","(I)Ljava/sql/Time;")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,61,"getTime","(ILjava/util/Calendar;)Ljava/sql/Time;")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,62,"getTime","(Ljava/lang/String;)Ljava/sql/Time;")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,63,"getTime","(Ljava/lang/String;Ljava/util/Calendar;)Ljava/sql/Time;")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,64,"getTimestamp","(I)Ljava/sql/Timestamp;")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,65,"getTimestamp","(ILjava/util/Calendar;)Ljava/sql/Timestamp;")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,66,"getTimestamp","(Ljava/lang/String;)Ljava/sql/Timestamp;")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,67,"getTimestamp","(Ljava/lang/String;Ljava/util/Calendar;)Ljava/sql/Timestamp;")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,68,"getType","()I")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,69,"getUnicodeStream","(I)Ljava/io/InputStream;")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,70,"getUnicodeStream","(Ljava/lang/String;)Ljava/io/InputStream;")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,71,"getURL","(I)Ljava/net/URL;")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,72,"getURL","(Ljava/lang/String;)Ljava/net/URL;")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,73,"getWarnings","()Ljava/sql/SQLWarning;")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,74,"insertRow","()V")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,75,"isAfterLast","()Z")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,76,"isBeforeFirst","()Z")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,77,"isFirst","()Z")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,78,"isLast","()Z")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,79,"last","()Z")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,80,"moveToCurrentRow","()V")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,81,"moveToInsertRow","()V")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,82,"next","()Z")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,83,"previous","()Z")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,84,"refreshRow","()V")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,85,"relative","(I)Z")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,86,"rowDeleted","()Z")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,87,"rowInserted","()Z")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,88,"rowUpdated","()Z")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,89,"setFetchDirection","(I)V")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,90,"setFetchSize","(I)V")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,91,"updateArray","(ILjava/sql/Array;)V")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,92,"updateArray","(Ljava/lang/String;Ljava/sql/Array;)V")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,93,"updateAsciiStream","(ILjava/io/InputStream;I)V")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,94,"updateAsciiStream","(Ljava/lang/String;Ljava/io/InputStream;I)V")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,95,"updateBigDecimal","(ILjava/math/BigDecimal;)V")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,96,"updateBigDecimal","(Ljava/lang/String;Ljava/math/BigDecimal;)V")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,97,"updateBinaryStream","(ILjava/io/InputStream;I)V")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,98,"updateBinaryStream","(Ljava/lang/String;Ljava/io/InputStream;I)V")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,99,"updateBlob","(ILjava/sql/Blob;)V")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,100,"updateBlob","(Ljava/lang/String;Ljava/sql/Blob;)V")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,101,"updateBoolean","(IZ)V")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,102,"updateBoolean","(Ljava/lang/String;Z)V")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,103,"updateByte","(IB)V")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,104,"updateByte","(Ljava/lang/String;B)V")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,105,"updateBytes","(I[B)V")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,106,"updateBytes","(Ljava/lang/String;[B)V")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,107,"updateCharacterStream","(ILjava/io/Reader;I)V")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,108,"updateCharacterStream","(Ljava/lang/String;Ljava/io/Reader;I)V")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,109,"updateClob","(ILjava/sql/Clob;)V")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,110,"updateClob","(Ljava/lang/String;Ljava/sql/Clob;)V")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,111,"updateDate","(ILjava/sql/Date;)V")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,112,"updateDate","(Ljava/lang/String;Ljava/sql/Date;)V")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,113,"updateDouble","(ID)V")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,114,"updateDouble","(Ljava/lang/String;D)V")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,115,"updateFloat","(IF)V")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,116,"updateFloat","(Ljava/lang/String;F)V")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,117,"updateInt","(II)V")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,118,"updateInt","(Ljava/lang/String;I)V")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,119,"updateLong","(IJ)V")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,120,"updateLong","(Ljava/lang/String;J)V")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,121,"updateNull","(I)V")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,122,"updateNull","(Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,123,"updateObject","(ILjava/lang/Object;)V")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,124,"updateObject","(ILjava/lang/Object;I)V")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,125,"updateObject","(Ljava/lang/String;Ljava/lang/Object;)V")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,126,"updateObject","(Ljava/lang/String;Ljava/lang/Object;I)V")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,127,"updateRef","(ILjava/sql/Ref;)V")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,128,"updateRef","(Ljava/lang/String;Ljava/sql/Ref;)V")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,129,"updateRow","()V")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,130,"updateShort","(IS)V")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,131,"updateShort","(Ljava/lang/String;S)V")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,132,"updateString","(ILjava/lang/String;)V")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,133,"updateString","(Ljava/lang/String;Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,134,"updateTime","(ILjava/sql/Time;)V")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,135,"updateTime","(Ljava/lang/String;Ljava/sql/Time;)V")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,136,"updateTimestamp","(ILjava/sql/Timestamp;)V")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,137,"updateTimestamp","(Ljava/lang/String;Ljava/sql/Timestamp;)V")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,138,"wasNull","()Z")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,139,"getRowId","(I)Ljava/sql/RowId;")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,140,"getRowId","(Ljava/lang/String;)Ljava/sql/RowId;")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,141,"updateRowId","(ILjava/sql/RowId;)V")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,142,"updateRowId","(Ljava/lang/String;Ljava/sql/RowId;)V")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,143,"getHoldability","()I")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,144,"isClosed","()Z")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,145,"updateNString","(ILjava/lang/String;)V")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,146,"updateNString","(Ljava/lang/String;Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,147,"updateNClob","(ILjava/sql/NClob;)V")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,148,"updateNClob","(Ljava/lang/String;Ljava/sql/NClob;)V")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,149,"getNClob","(I)Ljava/sql/NClob;")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,150,"getNClob","(Ljava/lang/String;)Ljava/sql/NClob;")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,151,"getSQLXML","(I)Ljava/sql/SQLXML;")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,152,"getSQLXML","(Ljava/lang/String;)Ljava/sql/SQLXML;")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,153,"updateSQLXML","(ILjava/sql/SQLXML;)V")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,154,"updateSQLXML","(Ljava/lang/String;Ljava/sql/SQLXML;)V")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,155,"getNString","(I)Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,156,"getNString","(Ljava/lang/String;)Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,157,"getNCharacterStream","(I)Ljava/io/Reader;")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,158,"getNCharacterStream","(Ljava/lang/String;)Ljava/io/Reader;")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,159,"updateNCharacterStream","(ILjava/io/Reader;J)V")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,160,"updateNCharacterStream","(Ljava/lang/String;Ljava/io/Reader;J)V")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,161,"updateAsciiStream","(ILjava/io/InputStream;J)V")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,162,"updateBinaryStream","(ILjava/io/InputStream;J)V")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,163,"updateCharacterStream","(ILjava/io/Reader;J)V")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,164,"updateAsciiStream","(Ljava/lang/String;Ljava/io/InputStream;J)V")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,165,"updateBinaryStream","(Ljava/lang/String;Ljava/io/InputStream;J)V")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,166,"updateCharacterStream","(Ljava/lang/String;Ljava/io/Reader;J)V")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,167,"updateBlob","(ILjava/io/InputStream;J)V")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,168,"updateBlob","(Ljava/lang/String;Ljava/io/InputStream;J)V")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,169,"updateClob","(ILjava/io/Reader;J)V")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,170,"updateClob","(Ljava/lang/String;Ljava/io/Reader;J)V")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,171,"updateNClob","(ILjava/io/Reader;J)V")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,172,"updateNClob","(Ljava/lang/String;Ljava/io/Reader;J)V")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,173,"updateNCharacterStream","(ILjava/io/Reader;)V")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,174,"updateNCharacterStream","(Ljava/lang/String;Ljava/io/Reader;)V")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,175,"updateAsciiStream","(ILjava/io/InputStream;)V")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,176,"updateBinaryStream","(ILjava/io/InputStream;)V")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,177,"updateCharacterStream","(ILjava/io/Reader;)V")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,178,"updateAsciiStream","(Ljava/lang/String;Ljava/io/InputStream;)V")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,179,"updateBinaryStream","(Ljava/lang/String;Ljava/io/InputStream;)V")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,180,"updateCharacterStream","(Ljava/lang/String;Ljava/io/Reader;)V")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,181,"updateBlob","(ILjava/io/InputStream;)V")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,182,"updateBlob","(Ljava/lang/String;Ljava/io/InputStream;)V")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,183,"updateClob","(ILjava/io/Reader;)V")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,184,"updateClob","(Ljava/lang/String;Ljava/io/Reader;)V")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,185,"updateNClob","(ILjava/io/Reader;)V")
J2CPP_DEFINE_METHOD(java::sql::ResultSet,186,"updateNClob","(Ljava/lang/String;Ljava/io/Reader;)V")
J2CPP_DEFINE_FIELD(java::sql::ResultSet,0,"CLOSE_CURSORS_AT_COMMIT","I")
J2CPP_DEFINE_FIELD(java::sql::ResultSet,1,"HOLD_CURSORS_OVER_COMMIT","I")
J2CPP_DEFINE_FIELD(java::sql::ResultSet,2,"CONCUR_READ_ONLY","I")
J2CPP_DEFINE_FIELD(java::sql::ResultSet,3,"CONCUR_UPDATABLE","I")
J2CPP_DEFINE_FIELD(java::sql::ResultSet,4,"FETCH_FORWARD","I")
J2CPP_DEFINE_FIELD(java::sql::ResultSet,5,"FETCH_REVERSE","I")
J2CPP_DEFINE_FIELD(java::sql::ResultSet,6,"FETCH_UNKNOWN","I")
J2CPP_DEFINE_FIELD(java::sql::ResultSet,7,"TYPE_FORWARD_ONLY","I")
J2CPP_DEFINE_FIELD(java::sql::ResultSet,8,"TYPE_SCROLL_INSENSITIVE","I")
J2CPP_DEFINE_FIELD(java::sql::ResultSet,9,"TYPE_SCROLL_SENSITIVE","I")

} //namespace j2cpp

#endif //J2CPP_JAVA_SQL_RESULTSET_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
