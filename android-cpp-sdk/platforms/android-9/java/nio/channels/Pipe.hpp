/*================================================================================
  code generated by: java2cpp
  class: java.nio.channels.Pipe
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_NIO_CHANNELS_PIPE_HPP_DECL
#define J2CPP_JAVA_NIO_CHANNELS_PIPE_HPP_DECL


namespace j2cpp { namespace java { namespace nio { namespace channels { namespace Pipe_ { class SinkChannel; } } } } }
namespace j2cpp { namespace java { namespace nio { namespace channels { namespace Pipe_ { class SourceChannel; } } } } }


#include <java/nio/channels/Pipe.hpp>


namespace j2cpp {

namespace java { namespace nio { namespace channels {

	class Pipe;
	namespace Pipe_ {

		class SinkChannel;
		class SinkChannel
			: public cpp_object<SinkChannel>
		{
		public:

			J2CPP_DECLARE_CLASS

			J2CPP_DECLARE_METHOD(0)
			J2CPP_DECLARE_METHOD(1)

			SinkChannel(jobject jobj)
			: cpp_object<SinkChannel>(jobj)
			{
			}

			cpp_int validOps();
		}; //class SinkChannel

		class SourceChannel;
		class SourceChannel
			: public cpp_object<SourceChannel>
		{
		public:

			J2CPP_DECLARE_CLASS

			J2CPP_DECLARE_METHOD(0)
			J2CPP_DECLARE_METHOD(1)

			SourceChannel(jobject jobj)
			: cpp_object<SourceChannel>(jobj)
			{
			}

			cpp_int validOps();
		}; //class SourceChannel

	} //namespace Pipe_

	class Pipe
		: public cpp_object<Pipe>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)

		typedef Pipe_::SinkChannel SinkChannel;
		typedef Pipe_::SourceChannel SourceChannel;

		Pipe(jobject jobj)
		: cpp_object<Pipe>(jobj)
		{
		}

		static local_ref< java::nio::channels::Pipe > open();
		local_ref< java::nio::channels::Pipe_::SinkChannel > sink();
		local_ref< java::nio::channels::Pipe_::SourceChannel > source();
	}; //class Pipe

} //namespace channels
} //namespace nio
} //namespace java


} //namespace j2cpp

#endif //J2CPP_JAVA_NIO_CHANNELS_PIPE_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_NIO_CHANNELS_PIPE_HPP_IMPL
#define J2CPP_JAVA_NIO_CHANNELS_PIPE_HPP_IMPL

namespace j2cpp {



template <>
local_ref< java::nio::channels::Pipe_::SinkChannel > create< java::nio::channels::Pipe_::SinkChannel>(local_ref< java::nio::channels::spi::SelectorProvider > const &a0)
{
	return local_ref< java::nio::channels::Pipe_::SinkChannel >(
		environment::get().get_jenv()->NewObject(
			get_class<java::nio::channels::Pipe_::SinkChannel::J2CPP_CLASS_NAME>(),
			get_method_id<java::nio::channels::Pipe_::SinkChannel::J2CPP_CLASS_NAME, java::nio::channels::Pipe_::SinkChannel::J2CPP_METHOD_NAME(0), java::nio::channels::Pipe_::SinkChannel::J2CPP_METHOD_SIGNATURE(0), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int java::nio::channels::Pipe_::SinkChannel::validOps()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), false>()
		)
	);
}


J2CPP_DEFINE_CLASS(java::nio::channels::Pipe_::SinkChannel,"java/nio/channels/Pipe$SinkChannel")
J2CPP_DEFINE_METHOD(java::nio::channels::Pipe_::SinkChannel,0,"<init>","(Ljava/nio/channels/spi/SelectorProvider;)V")
J2CPP_DEFINE_METHOD(java::nio::channels::Pipe_::SinkChannel,1,"validOps","()I")

template <>
local_ref< java::nio::channels::Pipe_::SourceChannel > create< java::nio::channels::Pipe_::SourceChannel>(local_ref< java::nio::channels::spi::SelectorProvider > const &a0)
{
	return local_ref< java::nio::channels::Pipe_::SourceChannel >(
		environment::get().get_jenv()->NewObject(
			get_class<java::nio::channels::Pipe_::SourceChannel::J2CPP_CLASS_NAME>(),
			get_method_id<java::nio::channels::Pipe_::SourceChannel::J2CPP_CLASS_NAME, java::nio::channels::Pipe_::SourceChannel::J2CPP_METHOD_NAME(0), java::nio::channels::Pipe_::SourceChannel::J2CPP_METHOD_SIGNATURE(0), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int java::nio::channels::Pipe_::SourceChannel::validOps()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), false>()
		)
	);
}


J2CPP_DEFINE_CLASS(java::nio::channels::Pipe_::SourceChannel,"java/nio/channels/Pipe$SourceChannel")
J2CPP_DEFINE_METHOD(java::nio::channels::Pipe_::SourceChannel,0,"<init>","(Ljava/nio/channels/spi/SelectorProvider;)V")
J2CPP_DEFINE_METHOD(java::nio::channels::Pipe_::SourceChannel,1,"validOps","()I")


template <>
local_ref< java::nio::channels::Pipe > create< java::nio::channels::Pipe>()
{
	return local_ref< java::nio::channels::Pipe >(
		environment::get().get_jenv()->NewObject(
			get_class<java::nio::channels::Pipe::J2CPP_CLASS_NAME>(),
			get_method_id<java::nio::channels::Pipe::J2CPP_CLASS_NAME, java::nio::channels::Pipe::J2CPP_METHOD_NAME(0), java::nio::channels::Pipe::J2CPP_METHOD_SIGNATURE(0), false>()
		)
	);
}

local_ref< java::nio::channels::Pipe > java::nio::channels::Pipe::open()
{
	return local_ref< java::nio::channels::Pipe >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), true>()
		)
	);
}

local_ref< java::nio::channels::Pipe_::SinkChannel > java::nio::channels::Pipe::sink()
{
	return local_ref< java::nio::channels::Pipe_::SinkChannel >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>()
		)
	);
}

local_ref< java::nio::channels::Pipe_::SourceChannel > java::nio::channels::Pipe::source()
{
	return local_ref< java::nio::channels::Pipe_::SourceChannel >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>()
		)
	);
}


J2CPP_DEFINE_CLASS(java::nio::channels::Pipe,"java/nio/channels/Pipe")
J2CPP_DEFINE_METHOD(java::nio::channels::Pipe,0,"<init>","()V")
J2CPP_DEFINE_METHOD(java::nio::channels::Pipe,1,"open","()Ljava/nio/channels/Pipe;")
J2CPP_DEFINE_METHOD(java::nio::channels::Pipe,2,"sink","()Ljava/nio/channels/Pipe$SinkChannel;")
J2CPP_DEFINE_METHOD(java::nio::channels::Pipe,3,"source","()Ljava/nio/channels/Pipe$SourceChannel;")

} //namespace j2cpp

#endif //J2CPP_JAVA_NIO_CHANNELS_PIPE_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
