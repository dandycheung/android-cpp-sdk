/*================================================================================
  code generated by: java2cpp
  class: java.nio.channels.spi.AbstractSelectionKey
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_NIO_CHANNELS_SPI_ABSTRACTSELECTIONKEY_HPP_DECL
#define J2CPP_JAVA_NIO_CHANNELS_SPI_ABSTRACTSELECTIONKEY_HPP_DECL






namespace j2cpp {

namespace java { namespace nio { namespace channels { namespace spi {

	class AbstractSelectionKey;
	class AbstractSelectionKey
		: public cpp_object<AbstractSelectionKey>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)

		AbstractSelectionKey(jobject jobj)
		: cpp_object<AbstractSelectionKey>(jobj)
		{
		}

		cpp_boolean isValid();
		void cancel();
	}; //class AbstractSelectionKey

} //namespace spi
} //namespace channels
} //namespace nio
} //namespace java


} //namespace j2cpp

#endif //J2CPP_JAVA_NIO_CHANNELS_SPI_ABSTRACTSELECTIONKEY_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_NIO_CHANNELS_SPI_ABSTRACTSELECTIONKEY_HPP_IMPL
#define J2CPP_JAVA_NIO_CHANNELS_SPI_ABSTRACTSELECTIONKEY_HPP_IMPL

namespace j2cpp {


template <>
local_ref< java::nio::channels::spi::AbstractSelectionKey > create< java::nio::channels::spi::AbstractSelectionKey>()
{
	return local_ref< java::nio::channels::spi::AbstractSelectionKey >(
		environment::get().get_jenv()->NewObject(
			get_class<java::nio::channels::spi::AbstractSelectionKey::J2CPP_CLASS_NAME>(),
			get_method_id<java::nio::channels::spi::AbstractSelectionKey::J2CPP_CLASS_NAME, java::nio::channels::spi::AbstractSelectionKey::J2CPP_METHOD_NAME(0), java::nio::channels::spi::AbstractSelectionKey::J2CPP_METHOD_SIGNATURE(0), false>()
		)
	);
}

cpp_boolean java::nio::channels::spi::AbstractSelectionKey::isValid()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), false>()
		)
	);
}

void java::nio::channels::spi::AbstractSelectionKey::cancel()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>()
		)
	);
}


J2CPP_DEFINE_CLASS(java::nio::channels::spi::AbstractSelectionKey,"java/nio/channels/spi/AbstractSelectionKey")
J2CPP_DEFINE_METHOD(java::nio::channels::spi::AbstractSelectionKey,0,"<init>","()V")
J2CPP_DEFINE_METHOD(java::nio::channels::spi::AbstractSelectionKey,1,"isValid","()Z")
J2CPP_DEFINE_METHOD(java::nio::channels::spi::AbstractSelectionKey,2,"cancel","()V")

} //namespace j2cpp

#endif //J2CPP_JAVA_NIO_CHANNELS_SPI_ABSTRACTSELECTIONKEY_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
