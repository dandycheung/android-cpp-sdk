/*================================================================================
  code generated by: java2cpp
  class: java.lang.String
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_LANG_STRING_HPP_DECL
#define J2CPP_JAVA_LANG_STRING_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class CharSequence; } } }
namespace j2cpp { namespace java { namespace lang { class StringBuffer; } } }
namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace lang { class StringBuilder; } } }
namespace j2cpp { namespace java { namespace nio { namespace charset { class Charset; } } } }
namespace j2cpp { namespace java { namespace util { class Locale; } } }
namespace j2cpp { namespace java { namespace util { class Comparator; } } }


#include <java/lang/CharSequence.hpp>
#include <java/lang/Object.hpp>
#include <java/lang/StringBuffer.hpp>
#include <java/lang/StringBuilder.hpp>
#include <java/nio/charset/Charset.hpp>
#include <java/util/Comparator.hpp>
#include <java/util/Locale.hpp>


namespace j2cpp {

namespace java { namespace lang {

	class String;
	class String
		: public cpp_object<String>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_METHOD(12)
		J2CPP_DECLARE_METHOD(13)
		J2CPP_DECLARE_METHOD(14)
		J2CPP_DECLARE_METHOD(15)
		J2CPP_DECLARE_METHOD(16)
		J2CPP_DECLARE_METHOD(17)
		J2CPP_DECLARE_METHOD(18)
		J2CPP_DECLARE_METHOD(19)
		J2CPP_DECLARE_METHOD(20)
		J2CPP_DECLARE_METHOD(21)
		J2CPP_DECLARE_METHOD(22)
		J2CPP_DECLARE_METHOD(23)
		J2CPP_DECLARE_METHOD(24)
		J2CPP_DECLARE_METHOD(25)
		J2CPP_DECLARE_METHOD(26)
		J2CPP_DECLARE_METHOD(27)
		J2CPP_DECLARE_METHOD(28)
		J2CPP_DECLARE_METHOD(29)
		J2CPP_DECLARE_METHOD(30)
		J2CPP_DECLARE_METHOD(31)
		J2CPP_DECLARE_METHOD(32)
		J2CPP_DECLARE_METHOD(33)
		J2CPP_DECLARE_METHOD(34)
		J2CPP_DECLARE_METHOD(35)
		J2CPP_DECLARE_METHOD(36)
		J2CPP_DECLARE_METHOD(37)
		J2CPP_DECLARE_METHOD(38)
		J2CPP_DECLARE_METHOD(39)
		J2CPP_DECLARE_METHOD(40)
		J2CPP_DECLARE_METHOD(41)
		J2CPP_DECLARE_METHOD(42)
		J2CPP_DECLARE_METHOD(43)
		J2CPP_DECLARE_METHOD(44)
		J2CPP_DECLARE_METHOD(45)
		J2CPP_DECLARE_METHOD(46)
		J2CPP_DECLARE_METHOD(47)
		J2CPP_DECLARE_METHOD(48)
		J2CPP_DECLARE_METHOD(49)
		J2CPP_DECLARE_METHOD(50)
		J2CPP_DECLARE_METHOD(51)
		J2CPP_DECLARE_METHOD(52)
		J2CPP_DECLARE_METHOD(53)
		J2CPP_DECLARE_METHOD(54)
		J2CPP_DECLARE_METHOD(55)
		J2CPP_DECLARE_METHOD(56)
		J2CPP_DECLARE_METHOD(57)
		J2CPP_DECLARE_METHOD(58)
		J2CPP_DECLARE_METHOD(59)
		J2CPP_DECLARE_METHOD(60)
		J2CPP_DECLARE_METHOD(61)
		J2CPP_DECLARE_METHOD(62)
		J2CPP_DECLARE_METHOD(63)
		J2CPP_DECLARE_METHOD(64)
		J2CPP_DECLARE_METHOD(65)
		J2CPP_DECLARE_METHOD(66)
		J2CPP_DECLARE_METHOD(67)
		J2CPP_DECLARE_METHOD(68)
		J2CPP_DECLARE_METHOD(69)
		J2CPP_DECLARE_METHOD(70)
		J2CPP_DECLARE_METHOD(71)
		J2CPP_DECLARE_METHOD(72)
		J2CPP_DECLARE_METHOD(73)
		J2CPP_DECLARE_METHOD(74)
		J2CPP_DECLARE_METHOD(75)
		J2CPP_DECLARE_METHOD(76)
		J2CPP_DECLARE_METHOD(77)
		J2CPP_DECLARE_METHOD(78)
		J2CPP_DECLARE_METHOD(79)
		J2CPP_DECLARE_METHOD(80)
		J2CPP_DECLARE_METHOD(81)
		J2CPP_DECLARE_FIELD(0)

		String(jobject jobj)
		: cpp_object<String>(jobj)
		{
		}

		cpp_char charAt(cpp_int const&);
		cpp_int compareTo(local_ref< java::lang::String > const&);
		cpp_int compareToIgnoreCase(local_ref< java::lang::String > const&);
		local_ref< java::lang::String > concat(local_ref< java::lang::String > const&);
		static local_ref< java::lang::String > copyValueOf(local_ref< cpp_char_array<1> > const&);
		static local_ref< java::lang::String > copyValueOf(local_ref< cpp_char_array<1> > const&, cpp_int const&, cpp_int const&);
		cpp_boolean endsWith(local_ref< java::lang::String > const&);
		cpp_boolean equals(local_ref< java::lang::Object > const&);
		cpp_boolean equalsIgnoreCase(local_ref< java::lang::String > const&);
		void getBytes(cpp_int const&, cpp_int const&, local_ref< cpp_byte_array<1> > const&, cpp_int const&);
		local_ref< cpp_byte_array<1> > getBytes();
		local_ref< cpp_byte_array<1> > getBytes(local_ref< java::lang::String > const&);
		local_ref< cpp_byte_array<1> > getBytes(local_ref< java::nio::charset::Charset > const&);
		void getChars(cpp_int const&, cpp_int const&, local_ref< cpp_char_array<1> > const&, cpp_int const&);
		cpp_int hashCode();
		cpp_int indexOf(cpp_int const&);
		cpp_int indexOf(cpp_int const&, cpp_int const&);
		cpp_int indexOf(local_ref< java::lang::String > const&);
		cpp_int indexOf(local_ref< java::lang::String > const&, cpp_int const&);
		local_ref< java::lang::String > intern();
		cpp_boolean isEmpty();
		cpp_int lastIndexOf(cpp_int const&);
		cpp_int lastIndexOf(cpp_int const&, cpp_int const&);
		cpp_int lastIndexOf(local_ref< java::lang::String > const&);
		cpp_int lastIndexOf(local_ref< java::lang::String > const&, cpp_int const&);
		cpp_int length();
		cpp_boolean regionMatches(cpp_int const&, local_ref< java::lang::String > const&, cpp_int const&, cpp_int const&);
		cpp_boolean regionMatches(cpp_boolean const&, cpp_int const&, local_ref< java::lang::String > const&, cpp_int const&, cpp_int const&);
		local_ref< java::lang::String > replace(cpp_char const&, cpp_char const&);
		local_ref< java::lang::String > replace(local_ref< java::lang::CharSequence > const&, local_ref< java::lang::CharSequence > const&);
		cpp_boolean startsWith(local_ref< java::lang::String > const&);
		cpp_boolean startsWith(local_ref< java::lang::String > const&, cpp_int const&);
		local_ref< java::lang::String > substring(cpp_int const&);
		local_ref< java::lang::String > substring(cpp_int const&, cpp_int const&);
		local_ref< cpp_char_array<1> > toCharArray();
		local_ref< java::lang::String > toLowerCase();
		local_ref< java::lang::String > toLowerCase(local_ref< java::util::Locale > const&);
		local_ref< java::lang::String > toString();
		local_ref< java::lang::String > toUpperCase();
		local_ref< java::lang::String > toUpperCase(local_ref< java::util::Locale > const&);
		local_ref< java::lang::String > trim();
		static local_ref< java::lang::String > valueOf(local_ref< cpp_char_array<1> > const&);
		static local_ref< java::lang::String > valueOf(local_ref< cpp_char_array<1> > const&, cpp_int const&, cpp_int const&);
		static local_ref< java::lang::String > valueOf(cpp_char const&);
		static local_ref< java::lang::String > valueOf(cpp_double const&);
		static local_ref< java::lang::String > valueOf(cpp_float const&);
		static local_ref< java::lang::String > valueOf(cpp_int const&);
		static local_ref< java::lang::String > valueOf(cpp_long const&);
		static local_ref< java::lang::String > valueOf(local_ref< java::lang::Object > const&);
		static local_ref< java::lang::String > valueOf(cpp_boolean const&);
		cpp_boolean contentEquals(local_ref< java::lang::StringBuffer > const&);
		cpp_boolean contentEquals(local_ref< java::lang::CharSequence > const&);
		cpp_boolean matches(local_ref< java::lang::String > const&);
		local_ref< java::lang::String > replaceAll(local_ref< java::lang::String > const&, local_ref< java::lang::String > const&);
		local_ref< java::lang::String > replaceFirst(local_ref< java::lang::String > const&, local_ref< java::lang::String > const&);
		local_ref< cpp_object_array<java::lang::String, 1> > split(local_ref< java::lang::String > const&);
		local_ref< cpp_object_array<java::lang::String, 1> > split(local_ref< java::lang::String > const&, cpp_int const&);
		local_ref< java::lang::CharSequence > subSequence(cpp_int const&, cpp_int const&);
		cpp_int codePointAt(cpp_int const&);
		cpp_int codePointBefore(cpp_int const&);
		cpp_int codePointCount(cpp_int const&, cpp_int const&);
		cpp_boolean contains(local_ref< java::lang::CharSequence > const&);
		cpp_int offsetByCodePoints(cpp_int const&, cpp_int const&);
		static local_ref< java::lang::String > format(local_ref< java::lang::String > const&, local_ref< cpp_object_array<java::lang::Object, 1> > const&);
		static local_ref< java::lang::String > format(local_ref< java::util::Locale > const&, local_ref< java::lang::String > const&, local_ref< cpp_object_array<java::lang::Object, 1> > const&);
		cpp_int compareTo(local_ref< java::lang::Object > const&);

		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(0), J2CPP_FIELD_SIGNATURE(0), local_ref< java::util::Comparator > > CASE_INSENSITIVE_ORDER;
	}; //class String

} //namespace lang
} //namespace java


} //namespace j2cpp

#endif //J2CPP_JAVA_LANG_STRING_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_LANG_STRING_HPP_IMPL
#define J2CPP_JAVA_LANG_STRING_HPP_IMPL

namespace j2cpp {


template <>
local_ref< java::lang::String > create< java::lang::String>()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->NewObject(
			get_class<java::lang::String::J2CPP_CLASS_NAME>(),
			get_method_id<java::lang::String::J2CPP_CLASS_NAME, java::lang::String::J2CPP_METHOD_NAME(0), java::lang::String::J2CPP_METHOD_SIGNATURE(0), false>()
		)
	);
}

template <>
local_ref< java::lang::String > create< java::lang::String>(local_ref< cpp_byte_array<1> > const &a0)
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->NewObject(
			get_class<java::lang::String::J2CPP_CLASS_NAME>(),
			get_method_id<java::lang::String::J2CPP_CLASS_NAME, java::lang::String::J2CPP_METHOD_NAME(1), java::lang::String::J2CPP_METHOD_SIGNATURE(1), false>(),
			a0.get_jtype()
		)
	);
}

template <>
local_ref< java::lang::String > create< java::lang::String>(local_ref< cpp_byte_array<1> > const &a0, cpp_int const &a1)
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->NewObject(
			get_class<java::lang::String::J2CPP_CLASS_NAME>(),
			get_method_id<java::lang::String::J2CPP_CLASS_NAME, java::lang::String::J2CPP_METHOD_NAME(2), java::lang::String::J2CPP_METHOD_SIGNATURE(2), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

template <>
local_ref< java::lang::String > create< java::lang::String>(local_ref< cpp_byte_array<1> > const &a0, cpp_int const &a1, cpp_int const &a2)
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->NewObject(
			get_class<java::lang::String::J2CPP_CLASS_NAME>(),
			get_method_id<java::lang::String::J2CPP_CLASS_NAME, java::lang::String::J2CPP_METHOD_NAME(3), java::lang::String::J2CPP_METHOD_SIGNATURE(3), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

template <>
local_ref< java::lang::String > create< java::lang::String>(local_ref< cpp_byte_array<1> > const &a0, cpp_int const &a1, cpp_int const &a2, cpp_int const &a3)
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->NewObject(
			get_class<java::lang::String::J2CPP_CLASS_NAME>(),
			get_method_id<java::lang::String::J2CPP_CLASS_NAME, java::lang::String::J2CPP_METHOD_NAME(4), java::lang::String::J2CPP_METHOD_SIGNATURE(4), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype(), a3.get_jtype()
		)
	);
}

template <>
local_ref< java::lang::String > create< java::lang::String>(local_ref< cpp_byte_array<1> > const &a0, cpp_int const &a1, cpp_int const &a2, local_ref< java::lang::String > const &a3)
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->NewObject(
			get_class<java::lang::String::J2CPP_CLASS_NAME>(),
			get_method_id<java::lang::String::J2CPP_CLASS_NAME, java::lang::String::J2CPP_METHOD_NAME(5), java::lang::String::J2CPP_METHOD_SIGNATURE(5), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype(), a3.get_jtype()
		)
	);
}

template <>
local_ref< java::lang::String > create< java::lang::String>(local_ref< cpp_byte_array<1> > const &a0, local_ref< java::lang::String > const &a1)
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->NewObject(
			get_class<java::lang::String::J2CPP_CLASS_NAME>(),
			get_method_id<java::lang::String::J2CPP_CLASS_NAME, java::lang::String::J2CPP_METHOD_NAME(6), java::lang::String::J2CPP_METHOD_SIGNATURE(6), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

template <>
local_ref< java::lang::String > create< java::lang::String>(local_ref< cpp_byte_array<1> > const &a0, cpp_int const &a1, cpp_int const &a2, local_ref< java::nio::charset::Charset > const &a3)
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->NewObject(
			get_class<java::lang::String::J2CPP_CLASS_NAME>(),
			get_method_id<java::lang::String::J2CPP_CLASS_NAME, java::lang::String::J2CPP_METHOD_NAME(7), java::lang::String::J2CPP_METHOD_SIGNATURE(7), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype(), a3.get_jtype()
		)
	);
}

template <>
local_ref< java::lang::String > create< java::lang::String>(local_ref< cpp_byte_array<1> > const &a0, local_ref< java::nio::charset::Charset > const &a1)
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->NewObject(
			get_class<java::lang::String::J2CPP_CLASS_NAME>(),
			get_method_id<java::lang::String::J2CPP_CLASS_NAME, java::lang::String::J2CPP_METHOD_NAME(8), java::lang::String::J2CPP_METHOD_SIGNATURE(8), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

template <>
local_ref< java::lang::String > create< java::lang::String>(local_ref< cpp_char_array<1> > const &a0)
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->NewObject(
			get_class<java::lang::String::J2CPP_CLASS_NAME>(),
			get_method_id<java::lang::String::J2CPP_CLASS_NAME, java::lang::String::J2CPP_METHOD_NAME(9), java::lang::String::J2CPP_METHOD_SIGNATURE(9), false>(),
			a0.get_jtype()
		)
	);
}

template <>
local_ref< java::lang::String > create< java::lang::String>(local_ref< cpp_char_array<1> > const &a0, cpp_int const &a1, cpp_int const &a2)
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->NewObject(
			get_class<java::lang::String::J2CPP_CLASS_NAME>(),
			get_method_id<java::lang::String::J2CPP_CLASS_NAME, java::lang::String::J2CPP_METHOD_NAME(10), java::lang::String::J2CPP_METHOD_SIGNATURE(10), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

template <>
local_ref< java::lang::String > create< java::lang::String>(local_ref< java::lang::String > const &a0)
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->NewObject(
			get_class<java::lang::String::J2CPP_CLASS_NAME>(),
			get_method_id<java::lang::String::J2CPP_CLASS_NAME, java::lang::String::J2CPP_METHOD_NAME(11), java::lang::String::J2CPP_METHOD_SIGNATURE(11), false>(),
			a0.get_jtype()
		)
	);
}

template <>
local_ref< java::lang::String > create< java::lang::String>(local_ref< java::lang::StringBuffer > const &a0)
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->NewObject(
			get_class<java::lang::String::J2CPP_CLASS_NAME>(),
			get_method_id<java::lang::String::J2CPP_CLASS_NAME, java::lang::String::J2CPP_METHOD_NAME(12), java::lang::String::J2CPP_METHOD_SIGNATURE(12), false>(),
			a0.get_jtype()
		)
	);
}

template <>
local_ref< java::lang::String > create< java::lang::String>(local_ref< cpp_int_array<1> > const &a0, cpp_int const &a1, cpp_int const &a2)
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->NewObject(
			get_class<java::lang::String::J2CPP_CLASS_NAME>(),
			get_method_id<java::lang::String::J2CPP_CLASS_NAME, java::lang::String::J2CPP_METHOD_NAME(13), java::lang::String::J2CPP_METHOD_SIGNATURE(13), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

template <>
local_ref< java::lang::String > create< java::lang::String>(local_ref< java::lang::StringBuilder > const &a0)
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->NewObject(
			get_class<java::lang::String::J2CPP_CLASS_NAME>(),
			get_method_id<java::lang::String::J2CPP_CLASS_NAME, java::lang::String::J2CPP_METHOD_NAME(14), java::lang::String::J2CPP_METHOD_SIGNATURE(14), false>(),
			a0.get_jtype()
		)
	);
}

cpp_char java::lang::String::charAt(cpp_int const &a0)
{
	return cpp_char(
		environment::get().get_jenv()->CallCharMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(15), J2CPP_METHOD_SIGNATURE(15), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int java::lang::String::compareTo(local_ref< java::lang::String > const &a0)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(16), J2CPP_METHOD_SIGNATURE(16), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int java::lang::String::compareToIgnoreCase(local_ref< java::lang::String > const &a0)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(17), J2CPP_METHOD_SIGNATURE(17), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::String > java::lang::String::concat(local_ref< java::lang::String > const &a0)
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(18), J2CPP_METHOD_SIGNATURE(18), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::String > java::lang::String::copyValueOf(local_ref< cpp_char_array<1> > const &a0)
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(19), J2CPP_METHOD_SIGNATURE(19), true>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::String > java::lang::String::copyValueOf(local_ref< cpp_char_array<1> > const &a0, cpp_int const &a1, cpp_int const &a2)
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(20), J2CPP_METHOD_SIGNATURE(20), true>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

cpp_boolean java::lang::String::endsWith(local_ref< java::lang::String > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(21), J2CPP_METHOD_SIGNATURE(21), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean java::lang::String::equals(local_ref< java::lang::Object > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(22), J2CPP_METHOD_SIGNATURE(22), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean java::lang::String::equalsIgnoreCase(local_ref< java::lang::String > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(23), J2CPP_METHOD_SIGNATURE(23), false>(),
			a0.get_jtype()
		)
	);
}

void java::lang::String::getBytes(cpp_int const &a0, cpp_int const &a1, local_ref< cpp_byte_array<1> > const &a2, cpp_int const &a3)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(24), J2CPP_METHOD_SIGNATURE(24), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype(), a3.get_jtype()
		)
	);
}

local_ref< cpp_byte_array<1> > java::lang::String::getBytes()
{
	return local_ref< cpp_byte_array<1> >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(25), J2CPP_METHOD_SIGNATURE(25), false>()
		)
	);
}

local_ref< cpp_byte_array<1> > java::lang::String::getBytes(local_ref< java::lang::String > const &a0)
{
	return local_ref< cpp_byte_array<1> >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(26), J2CPP_METHOD_SIGNATURE(26), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< cpp_byte_array<1> > java::lang::String::getBytes(local_ref< java::nio::charset::Charset > const &a0)
{
	return local_ref< cpp_byte_array<1> >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(27), J2CPP_METHOD_SIGNATURE(27), false>(),
			a0.get_jtype()
		)
	);
}

void java::lang::String::getChars(cpp_int const &a0, cpp_int const &a1, local_ref< cpp_char_array<1> > const &a2, cpp_int const &a3)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(28), J2CPP_METHOD_SIGNATURE(28), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype(), a3.get_jtype()
		)
	);
}

cpp_int java::lang::String::hashCode()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(29), J2CPP_METHOD_SIGNATURE(29), false>()
		)
	);
}

cpp_int java::lang::String::indexOf(cpp_int const &a0)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(30), J2CPP_METHOD_SIGNATURE(30), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int java::lang::String::indexOf(cpp_int const &a0, cpp_int const &a1)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(31), J2CPP_METHOD_SIGNATURE(31), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_int java::lang::String::indexOf(local_ref< java::lang::String > const &a0)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(32), J2CPP_METHOD_SIGNATURE(32), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int java::lang::String::indexOf(local_ref< java::lang::String > const &a0, cpp_int const &a1)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(33), J2CPP_METHOD_SIGNATURE(33), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< java::lang::String > java::lang::String::intern()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(34), J2CPP_METHOD_SIGNATURE(34), false>()
		)
	);
}

cpp_boolean java::lang::String::isEmpty()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(35), J2CPP_METHOD_SIGNATURE(35), false>()
		)
	);
}

cpp_int java::lang::String::lastIndexOf(cpp_int const &a0)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(36), J2CPP_METHOD_SIGNATURE(36), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int java::lang::String::lastIndexOf(cpp_int const &a0, cpp_int const &a1)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(37), J2CPP_METHOD_SIGNATURE(37), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_int java::lang::String::lastIndexOf(local_ref< java::lang::String > const &a0)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(38), J2CPP_METHOD_SIGNATURE(38), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int java::lang::String::lastIndexOf(local_ref< java::lang::String > const &a0, cpp_int const &a1)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(39), J2CPP_METHOD_SIGNATURE(39), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_int java::lang::String::length()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(40), J2CPP_METHOD_SIGNATURE(40), false>()
		)
	);
}

cpp_boolean java::lang::String::regionMatches(cpp_int const &a0, local_ref< java::lang::String > const &a1, cpp_int const &a2, cpp_int const &a3)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(41), J2CPP_METHOD_SIGNATURE(41), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype(), a3.get_jtype()
		)
	);
}

cpp_boolean java::lang::String::regionMatches(cpp_boolean const &a0, cpp_int const &a1, local_ref< java::lang::String > const &a2, cpp_int const &a3, cpp_int const &a4)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(42), J2CPP_METHOD_SIGNATURE(42), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype(), a3.get_jtype(), a4.get_jtype()
		)
	);
}

local_ref< java::lang::String > java::lang::String::replace(cpp_char const &a0, cpp_char const &a1)
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(43), J2CPP_METHOD_SIGNATURE(43), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< java::lang::String > java::lang::String::replace(local_ref< java::lang::CharSequence > const &a0, local_ref< java::lang::CharSequence > const &a1)
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(44), J2CPP_METHOD_SIGNATURE(44), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_boolean java::lang::String::startsWith(local_ref< java::lang::String > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(45), J2CPP_METHOD_SIGNATURE(45), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean java::lang::String::startsWith(local_ref< java::lang::String > const &a0, cpp_int const &a1)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(46), J2CPP_METHOD_SIGNATURE(46), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< java::lang::String > java::lang::String::substring(cpp_int const &a0)
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(47), J2CPP_METHOD_SIGNATURE(47), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::String > java::lang::String::substring(cpp_int const &a0, cpp_int const &a1)
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(48), J2CPP_METHOD_SIGNATURE(48), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< cpp_char_array<1> > java::lang::String::toCharArray()
{
	return local_ref< cpp_char_array<1> >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(49), J2CPP_METHOD_SIGNATURE(49), false>()
		)
	);
}

local_ref< java::lang::String > java::lang::String::toLowerCase()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(50), J2CPP_METHOD_SIGNATURE(50), false>()
		)
	);
}

local_ref< java::lang::String > java::lang::String::toLowerCase(local_ref< java::util::Locale > const &a0)
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(51), J2CPP_METHOD_SIGNATURE(51), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::String > java::lang::String::toString()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(52), J2CPP_METHOD_SIGNATURE(52), false>()
		)
	);
}

local_ref< java::lang::String > java::lang::String::toUpperCase()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(53), J2CPP_METHOD_SIGNATURE(53), false>()
		)
	);
}

local_ref< java::lang::String > java::lang::String::toUpperCase(local_ref< java::util::Locale > const &a0)
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(54), J2CPP_METHOD_SIGNATURE(54), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::String > java::lang::String::trim()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(55), J2CPP_METHOD_SIGNATURE(55), false>()
		)
	);
}

local_ref< java::lang::String > java::lang::String::valueOf(local_ref< cpp_char_array<1> > const &a0)
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(56), J2CPP_METHOD_SIGNATURE(56), true>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::String > java::lang::String::valueOf(local_ref< cpp_char_array<1> > const &a0, cpp_int const &a1, cpp_int const &a2)
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(57), J2CPP_METHOD_SIGNATURE(57), true>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

local_ref< java::lang::String > java::lang::String::valueOf(cpp_char const &a0)
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(58), J2CPP_METHOD_SIGNATURE(58), true>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::String > java::lang::String::valueOf(cpp_double const &a0)
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(59), J2CPP_METHOD_SIGNATURE(59), true>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::String > java::lang::String::valueOf(cpp_float const &a0)
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(60), J2CPP_METHOD_SIGNATURE(60), true>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::String > java::lang::String::valueOf(cpp_int const &a0)
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(61), J2CPP_METHOD_SIGNATURE(61), true>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::String > java::lang::String::valueOf(cpp_long const &a0)
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(62), J2CPP_METHOD_SIGNATURE(62), true>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::String > java::lang::String::valueOf(local_ref< java::lang::Object > const &a0)
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(63), J2CPP_METHOD_SIGNATURE(63), true>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::String > java::lang::String::valueOf(cpp_boolean const &a0)
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(64), J2CPP_METHOD_SIGNATURE(64), true>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean java::lang::String::contentEquals(local_ref< java::lang::StringBuffer > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(65), J2CPP_METHOD_SIGNATURE(65), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean java::lang::String::contentEquals(local_ref< java::lang::CharSequence > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(66), J2CPP_METHOD_SIGNATURE(66), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean java::lang::String::matches(local_ref< java::lang::String > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(67), J2CPP_METHOD_SIGNATURE(67), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::String > java::lang::String::replaceAll(local_ref< java::lang::String > const &a0, local_ref< java::lang::String > const &a1)
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(68), J2CPP_METHOD_SIGNATURE(68), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< java::lang::String > java::lang::String::replaceFirst(local_ref< java::lang::String > const &a0, local_ref< java::lang::String > const &a1)
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(69), J2CPP_METHOD_SIGNATURE(69), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< cpp_object_array<java::lang::String, 1> > java::lang::String::split(local_ref< java::lang::String > const &a0)
{
	return local_ref< cpp_object_array<java::lang::String, 1> >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(70), J2CPP_METHOD_SIGNATURE(70), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< cpp_object_array<java::lang::String, 1> > java::lang::String::split(local_ref< java::lang::String > const &a0, cpp_int const &a1)
{
	return local_ref< cpp_object_array<java::lang::String, 1> >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(71), J2CPP_METHOD_SIGNATURE(71), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< java::lang::CharSequence > java::lang::String::subSequence(cpp_int const &a0, cpp_int const &a1)
{
	return local_ref< java::lang::CharSequence >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(72), J2CPP_METHOD_SIGNATURE(72), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_int java::lang::String::codePointAt(cpp_int const &a0)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(73), J2CPP_METHOD_SIGNATURE(73), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int java::lang::String::codePointBefore(cpp_int const &a0)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(74), J2CPP_METHOD_SIGNATURE(74), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int java::lang::String::codePointCount(cpp_int const &a0, cpp_int const &a1)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(75), J2CPP_METHOD_SIGNATURE(75), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_boolean java::lang::String::contains(local_ref< java::lang::CharSequence > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(76), J2CPP_METHOD_SIGNATURE(76), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int java::lang::String::offsetByCodePoints(cpp_int const &a0, cpp_int const &a1)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(77), J2CPP_METHOD_SIGNATURE(77), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< java::lang::String > java::lang::String::format(local_ref< java::lang::String > const &a0, local_ref< cpp_object_array<java::lang::Object, 1> > const &a1)
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(78), J2CPP_METHOD_SIGNATURE(78), true>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< java::lang::String > java::lang::String::format(local_ref< java::util::Locale > const &a0, local_ref< java::lang::String > const &a1, local_ref< cpp_object_array<java::lang::Object, 1> > const &a2)
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(79), J2CPP_METHOD_SIGNATURE(79), true>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

cpp_int java::lang::String::compareTo(local_ref< java::lang::Object > const &a0)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(80), J2CPP_METHOD_SIGNATURE(80), false>(),
			a0.get_jtype()
		)
	);
}


static_field<
	java::lang::String::J2CPP_CLASS_NAME,
	java::lang::String::J2CPP_FIELD_NAME(0),
	java::lang::String::J2CPP_FIELD_SIGNATURE(0),
	local_ref< java::util::Comparator >
> java::lang::String::CASE_INSENSITIVE_ORDER;


J2CPP_DEFINE_CLASS(java::lang::String,"java/lang/String")
J2CPP_DEFINE_METHOD(java::lang::String,0,"<init>","()V")
J2CPP_DEFINE_METHOD(java::lang::String,1,"<init>","([B)V")
J2CPP_DEFINE_METHOD(java::lang::String,2,"<init>","([BI)V")
J2CPP_DEFINE_METHOD(java::lang::String,3,"<init>","([BII)V")
J2CPP_DEFINE_METHOD(java::lang::String,4,"<init>","([BIII)V")
J2CPP_DEFINE_METHOD(java::lang::String,5,"<init>","([BIILjava/lang/String;)V")
J2CPP_DEFINE_METHOD(java::lang::String,6,"<init>","([BLjava/lang/String;)V")
J2CPP_DEFINE_METHOD(java::lang::String,7,"<init>","([BIILjava/nio/charset/Charset;)V")
J2CPP_DEFINE_METHOD(java::lang::String,8,"<init>","([BLjava/nio/charset/Charset;)V")
J2CPP_DEFINE_METHOD(java::lang::String,9,"<init>","([C)V")
J2CPP_DEFINE_METHOD(java::lang::String,10,"<init>","([CII)V")
J2CPP_DEFINE_METHOD(java::lang::String,11,"<init>","(Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(java::lang::String,12,"<init>","(Ljava/lang/StringBuffer;)V")
J2CPP_DEFINE_METHOD(java::lang::String,13,"<init>","([III)V")
J2CPP_DEFINE_METHOD(java::lang::String,14,"<init>","(Ljava/lang/StringBuilder;)V")
J2CPP_DEFINE_METHOD(java::lang::String,15,"charAt","(I)C")
J2CPP_DEFINE_METHOD(java::lang::String,16,"compareTo","(Ljava/lang/String;)I")
J2CPP_DEFINE_METHOD(java::lang::String,17,"compareToIgnoreCase","(Ljava/lang/String;)I")
J2CPP_DEFINE_METHOD(java::lang::String,18,"concat","(Ljava/lang/String;)Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::lang::String,19,"copyValueOf","([C)Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::lang::String,20,"copyValueOf","([CII)Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::lang::String,21,"endsWith","(Ljava/lang/String;)Z")
J2CPP_DEFINE_METHOD(java::lang::String,22,"equals","(Ljava/lang/Object;)Z")
J2CPP_DEFINE_METHOD(java::lang::String,23,"equalsIgnoreCase","(Ljava/lang/String;)Z")
J2CPP_DEFINE_METHOD(java::lang::String,24,"getBytes","(II[BI)V")
J2CPP_DEFINE_METHOD(java::lang::String,25,"getBytes","()[B")
J2CPP_DEFINE_METHOD(java::lang::String,26,"getBytes","(Ljava/lang/String;)[B")
J2CPP_DEFINE_METHOD(java::lang::String,27,"getBytes","(Ljava/nio/charset/Charset;)[B")
J2CPP_DEFINE_METHOD(java::lang::String,28,"getChars","(II[CI)V")
J2CPP_DEFINE_METHOD(java::lang::String,29,"hashCode","()I")
J2CPP_DEFINE_METHOD(java::lang::String,30,"indexOf","(I)I")
J2CPP_DEFINE_METHOD(java::lang::String,31,"indexOf","(II)I")
J2CPP_DEFINE_METHOD(java::lang::String,32,"indexOf","(Ljava/lang/String;)I")
J2CPP_DEFINE_METHOD(java::lang::String,33,"indexOf","(Ljava/lang/String;I)I")
J2CPP_DEFINE_METHOD(java::lang::String,34,"intern","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::lang::String,35,"isEmpty","()Z")
J2CPP_DEFINE_METHOD(java::lang::String,36,"lastIndexOf","(I)I")
J2CPP_DEFINE_METHOD(java::lang::String,37,"lastIndexOf","(II)I")
J2CPP_DEFINE_METHOD(java::lang::String,38,"lastIndexOf","(Ljava/lang/String;)I")
J2CPP_DEFINE_METHOD(java::lang::String,39,"lastIndexOf","(Ljava/lang/String;I)I")
J2CPP_DEFINE_METHOD(java::lang::String,40,"length","()I")
J2CPP_DEFINE_METHOD(java::lang::String,41,"regionMatches","(ILjava/lang/String;II)Z")
J2CPP_DEFINE_METHOD(java::lang::String,42,"regionMatches","(ZILjava/lang/String;II)Z")
J2CPP_DEFINE_METHOD(java::lang::String,43,"replace","(CC)Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::lang::String,44,"replace","(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::lang::String,45,"startsWith","(Ljava/lang/String;)Z")
J2CPP_DEFINE_METHOD(java::lang::String,46,"startsWith","(Ljava/lang/String;I)Z")
J2CPP_DEFINE_METHOD(java::lang::String,47,"substring","(I)Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::lang::String,48,"substring","(II)Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::lang::String,49,"toCharArray","()[C")
J2CPP_DEFINE_METHOD(java::lang::String,50,"toLowerCase","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::lang::String,51,"toLowerCase","(Ljava/util/Locale;)Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::lang::String,52,"toString","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::lang::String,53,"toUpperCase","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::lang::String,54,"toUpperCase","(Ljava/util/Locale;)Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::lang::String,55,"trim","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::lang::String,56,"valueOf","([C)Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::lang::String,57,"valueOf","([CII)Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::lang::String,58,"valueOf","(C)Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::lang::String,59,"valueOf","(D)Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::lang::String,60,"valueOf","(F)Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::lang::String,61,"valueOf","(I)Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::lang::String,62,"valueOf","(J)Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::lang::String,63,"valueOf","(Ljava/lang/Object;)Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::lang::String,64,"valueOf","(Z)Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::lang::String,65,"contentEquals","(Ljava/lang/StringBuffer;)Z")
J2CPP_DEFINE_METHOD(java::lang::String,66,"contentEquals","(Ljava/lang/CharSequence;)Z")
J2CPP_DEFINE_METHOD(java::lang::String,67,"matches","(Ljava/lang/String;)Z")
J2CPP_DEFINE_METHOD(java::lang::String,68,"replaceAll","(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::lang::String,69,"replaceFirst","(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::lang::String,70,"split","(Ljava/lang/String;)[java.lang.String")
J2CPP_DEFINE_METHOD(java::lang::String,71,"split","(Ljava/lang/String;I)[java.lang.String")
J2CPP_DEFINE_METHOD(java::lang::String,72,"subSequence","(II)Ljava/lang/CharSequence;")
J2CPP_DEFINE_METHOD(java::lang::String,73,"codePointAt","(I)I")
J2CPP_DEFINE_METHOD(java::lang::String,74,"codePointBefore","(I)I")
J2CPP_DEFINE_METHOD(java::lang::String,75,"codePointCount","(II)I")
J2CPP_DEFINE_METHOD(java::lang::String,76,"contains","(Ljava/lang/CharSequence;)Z")
J2CPP_DEFINE_METHOD(java::lang::String,77,"offsetByCodePoints","(II)I")
J2CPP_DEFINE_METHOD(java::lang::String,78,"format","(Ljava/lang/String;[java.lang.Object)Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::lang::String,79,"format","(Ljava/util/Locale;Ljava/lang/String;[java.lang.Object)Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::lang::String,80,"compareTo","(Ljava/lang/Object;)I")
J2CPP_DEFINE_METHOD(java::lang::String,81,"<clinit>","()V")
J2CPP_DEFINE_FIELD(java::lang::String,0,"CASE_INSENSITIVE_ORDER","Ljava/util/Comparator;")

} //namespace j2cpp

#endif //J2CPP_JAVA_LANG_STRING_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
