/*================================================================================
  code generated by: java2cpp
  class: java.lang.reflect.Method
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_LANG_REFLECT_METHOD_HPP_DECL
#define J2CPP_JAVA_LANG_REFLECT_METHOD_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace lang { class Class; } } }
namespace j2cpp { namespace java { namespace lang { namespace annotation { class Annotation; } } } }
namespace j2cpp { namespace java { namespace lang { namespace reflect { class TypeVariable; } } } }
namespace j2cpp { namespace java { namespace lang { namespace reflect { class Type; } } } }
namespace j2cpp { namespace java { namespace lang { class Object; } } }


#include <java/lang/Class.hpp>
#include <java/lang/Object.hpp>
#include <java/lang/String.hpp>
#include <java/lang/annotation/Annotation.hpp>
#include <java/lang/reflect/Type.hpp>
#include <java/lang/reflect/TypeVariable.hpp>


namespace j2cpp {

namespace java { namespace lang { namespace reflect {

	class Method;
	class Method
		: public cpp_object<Method>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_METHOD(12)
		J2CPP_DECLARE_METHOD(13)
		J2CPP_DECLARE_METHOD(14)
		J2CPP_DECLARE_METHOD(15)
		J2CPP_DECLARE_METHOD(16)
		J2CPP_DECLARE_METHOD(17)
		J2CPP_DECLARE_METHOD(18)
		J2CPP_DECLARE_METHOD(19)
		J2CPP_DECLARE_METHOD(20)
		J2CPP_DECLARE_METHOD(21)

		Method(jobject jobj)
		: cpp_object<Method>(jobj)
		{
		}

		local_ref< cpp_object_array<java::lang::reflect::TypeVariable, 1> > getTypeParameters();
		local_ref< java::lang::String > toGenericString();
		local_ref< cpp_object_array<java::lang::reflect::Type, 1> > getGenericParameterTypes();
		local_ref< cpp_object_array<java::lang::reflect::Type, 1> > getGenericExceptionTypes();
		local_ref< java::lang::reflect::Type > getGenericReturnType();
		local_ref< cpp_object_array<java::lang::annotation::Annotation, 1> > getDeclaredAnnotations();
		local_ref< cpp_object_array<java::lang::annotation::Annotation, 2> > getParameterAnnotations();
		cpp_boolean isVarArgs();
		cpp_boolean isBridge();
		cpp_boolean isSynthetic();
		local_ref< java::lang::Object > getDefaultValue();
		cpp_boolean equals(local_ref< java::lang::Object > const&);
		local_ref< java::lang::Class > getDeclaringClass();
		local_ref< cpp_object_array<java::lang::Class, 1> > getExceptionTypes();
		cpp_int getModifiers();
		local_ref< java::lang::String > getName();
		local_ref< cpp_object_array<java::lang::Class, 1> > getParameterTypes();
		local_ref< java::lang::Class > getReturnType();
		cpp_int hashCode();
		local_ref< java::lang::Object > invoke(local_ref< java::lang::Object > const&, local_ref< cpp_object_array<java::lang::Object, 1> > const&);
		local_ref< java::lang::String > toString();
	}; //class Method

} //namespace reflect
} //namespace lang
} //namespace java


} //namespace j2cpp

#endif //J2CPP_JAVA_LANG_REFLECT_METHOD_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_LANG_REFLECT_METHOD_HPP_IMPL
#define J2CPP_JAVA_LANG_REFLECT_METHOD_HPP_IMPL

namespace j2cpp {


template <>
local_ref< java::lang::reflect::Method > create< java::lang::reflect::Method>()
{
	return local_ref< java::lang::reflect::Method >(
		environment::get().get_jenv()->NewObject(
			get_class<java::lang::reflect::Method::J2CPP_CLASS_NAME>(),
			get_method_id<java::lang::reflect::Method::J2CPP_CLASS_NAME, java::lang::reflect::Method::J2CPP_METHOD_NAME(0), java::lang::reflect::Method::J2CPP_METHOD_SIGNATURE(0), false>()
		)
	);
}

local_ref< cpp_object_array<java::lang::reflect::TypeVariable, 1> > java::lang::reflect::Method::getTypeParameters()
{
	return local_ref< cpp_object_array<java::lang::reflect::TypeVariable, 1> >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), false>()
		)
	);
}

local_ref< java::lang::String > java::lang::reflect::Method::toGenericString()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>()
		)
	);
}

local_ref< cpp_object_array<java::lang::reflect::Type, 1> > java::lang::reflect::Method::getGenericParameterTypes()
{
	return local_ref< cpp_object_array<java::lang::reflect::Type, 1> >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>()
		)
	);
}

local_ref< cpp_object_array<java::lang::reflect::Type, 1> > java::lang::reflect::Method::getGenericExceptionTypes()
{
	return local_ref< cpp_object_array<java::lang::reflect::Type, 1> >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>()
		)
	);
}

local_ref< java::lang::reflect::Type > java::lang::reflect::Method::getGenericReturnType()
{
	return local_ref< java::lang::reflect::Type >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>()
		)
	);
}

local_ref< cpp_object_array<java::lang::annotation::Annotation, 1> > java::lang::reflect::Method::getDeclaredAnnotations()
{
	return local_ref< cpp_object_array<java::lang::annotation::Annotation, 1> >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>()
		)
	);
}

local_ref< cpp_object_array<java::lang::annotation::Annotation, 2> > java::lang::reflect::Method::getParameterAnnotations()
{
	return local_ref< cpp_object_array<java::lang::annotation::Annotation, 2> >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(7), J2CPP_METHOD_SIGNATURE(7), false>()
		)
	);
}

cpp_boolean java::lang::reflect::Method::isVarArgs()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(8), J2CPP_METHOD_SIGNATURE(8), false>()
		)
	);
}

cpp_boolean java::lang::reflect::Method::isBridge()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(9), J2CPP_METHOD_SIGNATURE(9), false>()
		)
	);
}

cpp_boolean java::lang::reflect::Method::isSynthetic()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(10), J2CPP_METHOD_SIGNATURE(10), false>()
		)
	);
}

local_ref< java::lang::Object > java::lang::reflect::Method::getDefaultValue()
{
	return local_ref< java::lang::Object >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(11), J2CPP_METHOD_SIGNATURE(11), false>()
		)
	);
}

cpp_boolean java::lang::reflect::Method::equals(local_ref< java::lang::Object > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(12), J2CPP_METHOD_SIGNATURE(12), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::Class > java::lang::reflect::Method::getDeclaringClass()
{
	return local_ref< java::lang::Class >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(13), J2CPP_METHOD_SIGNATURE(13), false>()
		)
	);
}

local_ref< cpp_object_array<java::lang::Class, 1> > java::lang::reflect::Method::getExceptionTypes()
{
	return local_ref< cpp_object_array<java::lang::Class, 1> >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(14), J2CPP_METHOD_SIGNATURE(14), false>()
		)
	);
}

cpp_int java::lang::reflect::Method::getModifiers()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(15), J2CPP_METHOD_SIGNATURE(15), false>()
		)
	);
}

local_ref< java::lang::String > java::lang::reflect::Method::getName()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(16), J2CPP_METHOD_SIGNATURE(16), false>()
		)
	);
}

local_ref< cpp_object_array<java::lang::Class, 1> > java::lang::reflect::Method::getParameterTypes()
{
	return local_ref< cpp_object_array<java::lang::Class, 1> >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(17), J2CPP_METHOD_SIGNATURE(17), false>()
		)
	);
}

local_ref< java::lang::Class > java::lang::reflect::Method::getReturnType()
{
	return local_ref< java::lang::Class >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(18), J2CPP_METHOD_SIGNATURE(18), false>()
		)
	);
}

cpp_int java::lang::reflect::Method::hashCode()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(19), J2CPP_METHOD_SIGNATURE(19), false>()
		)
	);
}

local_ref< java::lang::Object > java::lang::reflect::Method::invoke(local_ref< java::lang::Object > const &a0, local_ref< cpp_object_array<java::lang::Object, 1> > const &a1)
{
	return local_ref< java::lang::Object >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(20), J2CPP_METHOD_SIGNATURE(20), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< java::lang::String > java::lang::reflect::Method::toString()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(21), J2CPP_METHOD_SIGNATURE(21), false>()
		)
	);
}


J2CPP_DEFINE_CLASS(java::lang::reflect::Method,"java/lang/reflect/Method")
J2CPP_DEFINE_METHOD(java::lang::reflect::Method,0,"<init>","()V")
J2CPP_DEFINE_METHOD(java::lang::reflect::Method,1,"getTypeParameters","()[java.lang.reflect.TypeVariable")
J2CPP_DEFINE_METHOD(java::lang::reflect::Method,2,"toGenericString","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::lang::reflect::Method,3,"getGenericParameterTypes","()[java.lang.reflect.Type")
J2CPP_DEFINE_METHOD(java::lang::reflect::Method,4,"getGenericExceptionTypes","()[java.lang.reflect.Type")
J2CPP_DEFINE_METHOD(java::lang::reflect::Method,5,"getGenericReturnType","()Ljava/lang/reflect/Type;")
J2CPP_DEFINE_METHOD(java::lang::reflect::Method,6,"getDeclaredAnnotations","()[java.lang.annotation.Annotation")
J2CPP_DEFINE_METHOD(java::lang::reflect::Method,7,"getParameterAnnotations","()[[java.lang.annotation.Annotation")
J2CPP_DEFINE_METHOD(java::lang::reflect::Method,8,"isVarArgs","()Z")
J2CPP_DEFINE_METHOD(java::lang::reflect::Method,9,"isBridge","()Z")
J2CPP_DEFINE_METHOD(java::lang::reflect::Method,10,"isSynthetic","()Z")
J2CPP_DEFINE_METHOD(java::lang::reflect::Method,11,"getDefaultValue","()Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(java::lang::reflect::Method,12,"equals","(Ljava/lang/Object;)Z")
J2CPP_DEFINE_METHOD(java::lang::reflect::Method,13,"getDeclaringClass","()Ljava/lang/Class;")
J2CPP_DEFINE_METHOD(java::lang::reflect::Method,14,"getExceptionTypes","()[java.lang.Class")
J2CPP_DEFINE_METHOD(java::lang::reflect::Method,15,"getModifiers","()I")
J2CPP_DEFINE_METHOD(java::lang::reflect::Method,16,"getName","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::lang::reflect::Method,17,"getParameterTypes","()[java.lang.Class")
J2CPP_DEFINE_METHOD(java::lang::reflect::Method,18,"getReturnType","()Ljava/lang/Class;")
J2CPP_DEFINE_METHOD(java::lang::reflect::Method,19,"hashCode","()I")
J2CPP_DEFINE_METHOD(java::lang::reflect::Method,20,"invoke","(Ljava/lang/Object;[java.lang.Object)Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(java::lang::reflect::Method,21,"toString","()Ljava/lang/String;")

} //namespace j2cpp

#endif //J2CPP_JAVA_LANG_REFLECT_METHOD_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
