/*================================================================================
  code generated by: java2cpp
  class: java.lang.StrictMath
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_LANG_STRICTMATH_HPP_DECL
#define J2CPP_JAVA_LANG_STRICTMATH_HPP_DECL






namespace j2cpp {

namespace java { namespace lang {

	class StrictMath;
	class StrictMath
		: public cpp_object<StrictMath>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_METHOD(12)
		J2CPP_DECLARE_METHOD(13)
		J2CPP_DECLARE_METHOD(14)
		J2CPP_DECLARE_METHOD(15)
		J2CPP_DECLARE_METHOD(16)
		J2CPP_DECLARE_METHOD(17)
		J2CPP_DECLARE_METHOD(18)
		J2CPP_DECLARE_METHOD(19)
		J2CPP_DECLARE_METHOD(20)
		J2CPP_DECLARE_METHOD(21)
		J2CPP_DECLARE_METHOD(22)
		J2CPP_DECLARE_METHOD(23)
		J2CPP_DECLARE_METHOD(24)
		J2CPP_DECLARE_METHOD(25)
		J2CPP_DECLARE_METHOD(26)
		J2CPP_DECLARE_METHOD(27)
		J2CPP_DECLARE_METHOD(28)
		J2CPP_DECLARE_METHOD(29)
		J2CPP_DECLARE_METHOD(30)
		J2CPP_DECLARE_METHOD(31)
		J2CPP_DECLARE_METHOD(32)
		J2CPP_DECLARE_METHOD(33)
		J2CPP_DECLARE_METHOD(34)
		J2CPP_DECLARE_METHOD(35)
		J2CPP_DECLARE_METHOD(36)
		J2CPP_DECLARE_METHOD(37)
		J2CPP_DECLARE_METHOD(38)
		J2CPP_DECLARE_METHOD(39)
		J2CPP_DECLARE_METHOD(40)
		J2CPP_DECLARE_METHOD(41)
		J2CPP_DECLARE_METHOD(42)
		J2CPP_DECLARE_METHOD(43)
		J2CPP_DECLARE_METHOD(44)
		J2CPP_DECLARE_METHOD(45)
		J2CPP_DECLARE_METHOD(46)
		J2CPP_DECLARE_METHOD(47)
		J2CPP_DECLARE_METHOD(48)
		J2CPP_DECLARE_METHOD(49)
		J2CPP_DECLARE_METHOD(50)
		J2CPP_DECLARE_METHOD(51)
		J2CPP_DECLARE_METHOD(52)
		J2CPP_DECLARE_METHOD(53)
		J2CPP_DECLARE_METHOD(54)
		J2CPP_DECLARE_FIELD(0)
		J2CPP_DECLARE_FIELD(1)

		StrictMath(jobject jobj)
		: cpp_object<StrictMath>(jobj)
		{
		}

		static cpp_double abs(cpp_double const&);
		static cpp_float abs(cpp_float const&);
		static cpp_int abs(cpp_int const&);
		static cpp_long abs(cpp_long const&);
		static cpp_double acos(cpp_double const&);
		static cpp_double asin(cpp_double const&);
		static cpp_double atan(cpp_double const&);
		static cpp_double atan2(cpp_double const&, cpp_double const&);
		static cpp_double cbrt(cpp_double const&);
		static cpp_double ceil(cpp_double const&);
		static cpp_double cosh(cpp_double const&);
		static cpp_double cos(cpp_double const&);
		static cpp_double exp(cpp_double const&);
		static cpp_double expm1(cpp_double const&);
		static cpp_double floor(cpp_double const&);
		static cpp_double hypot(cpp_double const&, cpp_double const&);
		static cpp_double IEEEremainder(cpp_double const&, cpp_double const&);
		static cpp_double log(cpp_double const&);
		static cpp_double log10(cpp_double const&);
		static cpp_double log1p(cpp_double const&);
		static cpp_double max(cpp_double const&, cpp_double const&);
		static cpp_float max(cpp_float const&, cpp_float const&);
		static cpp_int max(cpp_int const&, cpp_int const&);
		static cpp_long max(cpp_long const&, cpp_long const&);
		static cpp_double min(cpp_double const&, cpp_double const&);
		static cpp_float min(cpp_float const&, cpp_float const&);
		static cpp_int min(cpp_int const&, cpp_int const&);
		static cpp_long min(cpp_long const&, cpp_long const&);
		static cpp_double pow(cpp_double const&, cpp_double const&);
		static cpp_double random();
		static cpp_double rint(cpp_double const&);
		static cpp_long round(cpp_double const&);
		static cpp_int round(cpp_float const&);
		static cpp_double signum(cpp_double const&);
		static cpp_float signum(cpp_float const&);
		static cpp_double sinh(cpp_double const&);
		static cpp_double sin(cpp_double const&);
		static cpp_double sqrt(cpp_double const&);
		static cpp_double tan(cpp_double const&);
		static cpp_double tanh(cpp_double const&);
		static cpp_double toDegrees(cpp_double const&);
		static cpp_double toRadians(cpp_double const&);
		static cpp_double ulp(cpp_double const&);
		static cpp_float ulp(cpp_float const&);
		static cpp_double copySign(cpp_double const&, cpp_double const&);
		static cpp_float copySign(cpp_float const&, cpp_float const&);
		static cpp_int getExponent(cpp_float const&);
		static cpp_int getExponent(cpp_double const&);
		static cpp_double nextAfter(cpp_double const&, cpp_double const&);
		static cpp_float nextAfter(cpp_float const&, cpp_double const&);
		static cpp_double nextUp(cpp_double const&);
		static cpp_float nextUp(cpp_float const&);
		static cpp_double scalb(cpp_double const&, cpp_int const&);
		static cpp_float scalb(cpp_float const&, cpp_int const&);

		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(0), J2CPP_FIELD_SIGNATURE(0), cpp_double > E;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(1), J2CPP_FIELD_SIGNATURE(1), cpp_double > PI;
	}; //class StrictMath

} //namespace lang
} //namespace java


} //namespace j2cpp

#endif //J2CPP_JAVA_LANG_STRICTMATH_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_LANG_STRICTMATH_HPP_IMPL
#define J2CPP_JAVA_LANG_STRICTMATH_HPP_IMPL

namespace j2cpp {


template <>
local_ref< java::lang::StrictMath > create< java::lang::StrictMath>()
{
	return local_ref< java::lang::StrictMath >(
		environment::get().get_jenv()->NewObject(
			get_class<java::lang::StrictMath::J2CPP_CLASS_NAME>(),
			get_method_id<java::lang::StrictMath::J2CPP_CLASS_NAME, java::lang::StrictMath::J2CPP_METHOD_NAME(0), java::lang::StrictMath::J2CPP_METHOD_SIGNATURE(0), false>()
		)
	);
}

cpp_double java::lang::StrictMath::abs(cpp_double const &a0)
{
	return cpp_double(
		environment::get().get_jenv()->CallStaticDoubleMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), true>(),
			a0.get_jtype()
		)
	);
}

cpp_float java::lang::StrictMath::abs(cpp_float const &a0)
{
	return cpp_float(
		environment::get().get_jenv()->CallStaticFloatMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), true>(),
			a0.get_jtype()
		)
	);
}

cpp_int java::lang::StrictMath::abs(cpp_int const &a0)
{
	return cpp_int(
		environment::get().get_jenv()->CallStaticIntMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), true>(),
			a0.get_jtype()
		)
	);
}

cpp_long java::lang::StrictMath::abs(cpp_long const &a0)
{
	return cpp_long(
		environment::get().get_jenv()->CallStaticLongMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), true>(),
			a0.get_jtype()
		)
	);
}

cpp_double java::lang::StrictMath::acos(cpp_double const &a0)
{
	return cpp_double(
		environment::get().get_jenv()->CallStaticDoubleMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), true>(),
			a0.get_jtype()
		)
	);
}

cpp_double java::lang::StrictMath::asin(cpp_double const &a0)
{
	return cpp_double(
		environment::get().get_jenv()->CallStaticDoubleMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), true>(),
			a0.get_jtype()
		)
	);
}

cpp_double java::lang::StrictMath::atan(cpp_double const &a0)
{
	return cpp_double(
		environment::get().get_jenv()->CallStaticDoubleMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(7), J2CPP_METHOD_SIGNATURE(7), true>(),
			a0.get_jtype()
		)
	);
}

cpp_double java::lang::StrictMath::atan2(cpp_double const &a0, cpp_double const &a1)
{
	return cpp_double(
		environment::get().get_jenv()->CallStaticDoubleMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(8), J2CPP_METHOD_SIGNATURE(8), true>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_double java::lang::StrictMath::cbrt(cpp_double const &a0)
{
	return cpp_double(
		environment::get().get_jenv()->CallStaticDoubleMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(9), J2CPP_METHOD_SIGNATURE(9), true>(),
			a0.get_jtype()
		)
	);
}

cpp_double java::lang::StrictMath::ceil(cpp_double const &a0)
{
	return cpp_double(
		environment::get().get_jenv()->CallStaticDoubleMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(10), J2CPP_METHOD_SIGNATURE(10), true>(),
			a0.get_jtype()
		)
	);
}

cpp_double java::lang::StrictMath::cosh(cpp_double const &a0)
{
	return cpp_double(
		environment::get().get_jenv()->CallStaticDoubleMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(11), J2CPP_METHOD_SIGNATURE(11), true>(),
			a0.get_jtype()
		)
	);
}

cpp_double java::lang::StrictMath::cos(cpp_double const &a0)
{
	return cpp_double(
		environment::get().get_jenv()->CallStaticDoubleMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(12), J2CPP_METHOD_SIGNATURE(12), true>(),
			a0.get_jtype()
		)
	);
}

cpp_double java::lang::StrictMath::exp(cpp_double const &a0)
{
	return cpp_double(
		environment::get().get_jenv()->CallStaticDoubleMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(13), J2CPP_METHOD_SIGNATURE(13), true>(),
			a0.get_jtype()
		)
	);
}

cpp_double java::lang::StrictMath::expm1(cpp_double const &a0)
{
	return cpp_double(
		environment::get().get_jenv()->CallStaticDoubleMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(14), J2CPP_METHOD_SIGNATURE(14), true>(),
			a0.get_jtype()
		)
	);
}

cpp_double java::lang::StrictMath::floor(cpp_double const &a0)
{
	return cpp_double(
		environment::get().get_jenv()->CallStaticDoubleMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(15), J2CPP_METHOD_SIGNATURE(15), true>(),
			a0.get_jtype()
		)
	);
}

cpp_double java::lang::StrictMath::hypot(cpp_double const &a0, cpp_double const &a1)
{
	return cpp_double(
		environment::get().get_jenv()->CallStaticDoubleMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(16), J2CPP_METHOD_SIGNATURE(16), true>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_double java::lang::StrictMath::IEEEremainder(cpp_double const &a0, cpp_double const &a1)
{
	return cpp_double(
		environment::get().get_jenv()->CallStaticDoubleMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(17), J2CPP_METHOD_SIGNATURE(17), true>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_double java::lang::StrictMath::log(cpp_double const &a0)
{
	return cpp_double(
		environment::get().get_jenv()->CallStaticDoubleMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(18), J2CPP_METHOD_SIGNATURE(18), true>(),
			a0.get_jtype()
		)
	);
}

cpp_double java::lang::StrictMath::log10(cpp_double const &a0)
{
	return cpp_double(
		environment::get().get_jenv()->CallStaticDoubleMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(19), J2CPP_METHOD_SIGNATURE(19), true>(),
			a0.get_jtype()
		)
	);
}

cpp_double java::lang::StrictMath::log1p(cpp_double const &a0)
{
	return cpp_double(
		environment::get().get_jenv()->CallStaticDoubleMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(20), J2CPP_METHOD_SIGNATURE(20), true>(),
			a0.get_jtype()
		)
	);
}

cpp_double java::lang::StrictMath::max(cpp_double const &a0, cpp_double const &a1)
{
	return cpp_double(
		environment::get().get_jenv()->CallStaticDoubleMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(21), J2CPP_METHOD_SIGNATURE(21), true>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_float java::lang::StrictMath::max(cpp_float const &a0, cpp_float const &a1)
{
	return cpp_float(
		environment::get().get_jenv()->CallStaticFloatMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(22), J2CPP_METHOD_SIGNATURE(22), true>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_int java::lang::StrictMath::max(cpp_int const &a0, cpp_int const &a1)
{
	return cpp_int(
		environment::get().get_jenv()->CallStaticIntMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(23), J2CPP_METHOD_SIGNATURE(23), true>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_long java::lang::StrictMath::max(cpp_long const &a0, cpp_long const &a1)
{
	return cpp_long(
		environment::get().get_jenv()->CallStaticLongMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(24), J2CPP_METHOD_SIGNATURE(24), true>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_double java::lang::StrictMath::min(cpp_double const &a0, cpp_double const &a1)
{
	return cpp_double(
		environment::get().get_jenv()->CallStaticDoubleMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(25), J2CPP_METHOD_SIGNATURE(25), true>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_float java::lang::StrictMath::min(cpp_float const &a0, cpp_float const &a1)
{
	return cpp_float(
		environment::get().get_jenv()->CallStaticFloatMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(26), J2CPP_METHOD_SIGNATURE(26), true>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_int java::lang::StrictMath::min(cpp_int const &a0, cpp_int const &a1)
{
	return cpp_int(
		environment::get().get_jenv()->CallStaticIntMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(27), J2CPP_METHOD_SIGNATURE(27), true>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_long java::lang::StrictMath::min(cpp_long const &a0, cpp_long const &a1)
{
	return cpp_long(
		environment::get().get_jenv()->CallStaticLongMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(28), J2CPP_METHOD_SIGNATURE(28), true>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_double java::lang::StrictMath::pow(cpp_double const &a0, cpp_double const &a1)
{
	return cpp_double(
		environment::get().get_jenv()->CallStaticDoubleMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(29), J2CPP_METHOD_SIGNATURE(29), true>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_double java::lang::StrictMath::random()
{
	return cpp_double(
		environment::get().get_jenv()->CallStaticDoubleMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(30), J2CPP_METHOD_SIGNATURE(30), true>()
		)
	);
}

cpp_double java::lang::StrictMath::rint(cpp_double const &a0)
{
	return cpp_double(
		environment::get().get_jenv()->CallStaticDoubleMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(31), J2CPP_METHOD_SIGNATURE(31), true>(),
			a0.get_jtype()
		)
	);
}

cpp_long java::lang::StrictMath::round(cpp_double const &a0)
{
	return cpp_long(
		environment::get().get_jenv()->CallStaticLongMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(32), J2CPP_METHOD_SIGNATURE(32), true>(),
			a0.get_jtype()
		)
	);
}

cpp_int java::lang::StrictMath::round(cpp_float const &a0)
{
	return cpp_int(
		environment::get().get_jenv()->CallStaticIntMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(33), J2CPP_METHOD_SIGNATURE(33), true>(),
			a0.get_jtype()
		)
	);
}

cpp_double java::lang::StrictMath::signum(cpp_double const &a0)
{
	return cpp_double(
		environment::get().get_jenv()->CallStaticDoubleMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(34), J2CPP_METHOD_SIGNATURE(34), true>(),
			a0.get_jtype()
		)
	);
}

cpp_float java::lang::StrictMath::signum(cpp_float const &a0)
{
	return cpp_float(
		environment::get().get_jenv()->CallStaticFloatMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(35), J2CPP_METHOD_SIGNATURE(35), true>(),
			a0.get_jtype()
		)
	);
}

cpp_double java::lang::StrictMath::sinh(cpp_double const &a0)
{
	return cpp_double(
		environment::get().get_jenv()->CallStaticDoubleMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(36), J2CPP_METHOD_SIGNATURE(36), true>(),
			a0.get_jtype()
		)
	);
}

cpp_double java::lang::StrictMath::sin(cpp_double const &a0)
{
	return cpp_double(
		environment::get().get_jenv()->CallStaticDoubleMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(37), J2CPP_METHOD_SIGNATURE(37), true>(),
			a0.get_jtype()
		)
	);
}

cpp_double java::lang::StrictMath::sqrt(cpp_double const &a0)
{
	return cpp_double(
		environment::get().get_jenv()->CallStaticDoubleMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(38), J2CPP_METHOD_SIGNATURE(38), true>(),
			a0.get_jtype()
		)
	);
}

cpp_double java::lang::StrictMath::tan(cpp_double const &a0)
{
	return cpp_double(
		environment::get().get_jenv()->CallStaticDoubleMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(39), J2CPP_METHOD_SIGNATURE(39), true>(),
			a0.get_jtype()
		)
	);
}

cpp_double java::lang::StrictMath::tanh(cpp_double const &a0)
{
	return cpp_double(
		environment::get().get_jenv()->CallStaticDoubleMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(40), J2CPP_METHOD_SIGNATURE(40), true>(),
			a0.get_jtype()
		)
	);
}

cpp_double java::lang::StrictMath::toDegrees(cpp_double const &a0)
{
	return cpp_double(
		environment::get().get_jenv()->CallStaticDoubleMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(41), J2CPP_METHOD_SIGNATURE(41), true>(),
			a0.get_jtype()
		)
	);
}

cpp_double java::lang::StrictMath::toRadians(cpp_double const &a0)
{
	return cpp_double(
		environment::get().get_jenv()->CallStaticDoubleMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(42), J2CPP_METHOD_SIGNATURE(42), true>(),
			a0.get_jtype()
		)
	);
}

cpp_double java::lang::StrictMath::ulp(cpp_double const &a0)
{
	return cpp_double(
		environment::get().get_jenv()->CallStaticDoubleMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(43), J2CPP_METHOD_SIGNATURE(43), true>(),
			a0.get_jtype()
		)
	);
}

cpp_float java::lang::StrictMath::ulp(cpp_float const &a0)
{
	return cpp_float(
		environment::get().get_jenv()->CallStaticFloatMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(44), J2CPP_METHOD_SIGNATURE(44), true>(),
			a0.get_jtype()
		)
	);
}

cpp_double java::lang::StrictMath::copySign(cpp_double const &a0, cpp_double const &a1)
{
	return cpp_double(
		environment::get().get_jenv()->CallStaticDoubleMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(45), J2CPP_METHOD_SIGNATURE(45), true>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_float java::lang::StrictMath::copySign(cpp_float const &a0, cpp_float const &a1)
{
	return cpp_float(
		environment::get().get_jenv()->CallStaticFloatMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(46), J2CPP_METHOD_SIGNATURE(46), true>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_int java::lang::StrictMath::getExponent(cpp_float const &a0)
{
	return cpp_int(
		environment::get().get_jenv()->CallStaticIntMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(47), J2CPP_METHOD_SIGNATURE(47), true>(),
			a0.get_jtype()
		)
	);
}

cpp_int java::lang::StrictMath::getExponent(cpp_double const &a0)
{
	return cpp_int(
		environment::get().get_jenv()->CallStaticIntMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(48), J2CPP_METHOD_SIGNATURE(48), true>(),
			a0.get_jtype()
		)
	);
}

cpp_double java::lang::StrictMath::nextAfter(cpp_double const &a0, cpp_double const &a1)
{
	return cpp_double(
		environment::get().get_jenv()->CallStaticDoubleMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(49), J2CPP_METHOD_SIGNATURE(49), true>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_float java::lang::StrictMath::nextAfter(cpp_float const &a0, cpp_double const &a1)
{
	return cpp_float(
		environment::get().get_jenv()->CallStaticFloatMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(50), J2CPP_METHOD_SIGNATURE(50), true>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_double java::lang::StrictMath::nextUp(cpp_double const &a0)
{
	return cpp_double(
		environment::get().get_jenv()->CallStaticDoubleMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(51), J2CPP_METHOD_SIGNATURE(51), true>(),
			a0.get_jtype()
		)
	);
}

cpp_float java::lang::StrictMath::nextUp(cpp_float const &a0)
{
	return cpp_float(
		environment::get().get_jenv()->CallStaticFloatMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(52), J2CPP_METHOD_SIGNATURE(52), true>(),
			a0.get_jtype()
		)
	);
}

cpp_double java::lang::StrictMath::scalb(cpp_double const &a0, cpp_int const &a1)
{
	return cpp_double(
		environment::get().get_jenv()->CallStaticDoubleMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(53), J2CPP_METHOD_SIGNATURE(53), true>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_float java::lang::StrictMath::scalb(cpp_float const &a0, cpp_int const &a1)
{
	return cpp_float(
		environment::get().get_jenv()->CallStaticFloatMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(54), J2CPP_METHOD_SIGNATURE(54), true>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}


static_field<
	java::lang::StrictMath::J2CPP_CLASS_NAME,
	java::lang::StrictMath::J2CPP_FIELD_NAME(0),
	java::lang::StrictMath::J2CPP_FIELD_SIGNATURE(0),
	cpp_double
> java::lang::StrictMath::E;

static_field<
	java::lang::StrictMath::J2CPP_CLASS_NAME,
	java::lang::StrictMath::J2CPP_FIELD_NAME(1),
	java::lang::StrictMath::J2CPP_FIELD_SIGNATURE(1),
	cpp_double
> java::lang::StrictMath::PI;


J2CPP_DEFINE_CLASS(java::lang::StrictMath,"java/lang/StrictMath")
J2CPP_DEFINE_METHOD(java::lang::StrictMath,0,"<init>","()V")
J2CPP_DEFINE_METHOD(java::lang::StrictMath,1,"abs","(D)D")
J2CPP_DEFINE_METHOD(java::lang::StrictMath,2,"abs","(F)F")
J2CPP_DEFINE_METHOD(java::lang::StrictMath,3,"abs","(I)I")
J2CPP_DEFINE_METHOD(java::lang::StrictMath,4,"abs","(J)J")
J2CPP_DEFINE_METHOD(java::lang::StrictMath,5,"acos","(D)D")
J2CPP_DEFINE_METHOD(java::lang::StrictMath,6,"asin","(D)D")
J2CPP_DEFINE_METHOD(java::lang::StrictMath,7,"atan","(D)D")
J2CPP_DEFINE_METHOD(java::lang::StrictMath,8,"atan2","(DD)D")
J2CPP_DEFINE_METHOD(java::lang::StrictMath,9,"cbrt","(D)D")
J2CPP_DEFINE_METHOD(java::lang::StrictMath,10,"ceil","(D)D")
J2CPP_DEFINE_METHOD(java::lang::StrictMath,11,"cosh","(D)D")
J2CPP_DEFINE_METHOD(java::lang::StrictMath,12,"cos","(D)D")
J2CPP_DEFINE_METHOD(java::lang::StrictMath,13,"exp","(D)D")
J2CPP_DEFINE_METHOD(java::lang::StrictMath,14,"expm1","(D)D")
J2CPP_DEFINE_METHOD(java::lang::StrictMath,15,"floor","(D)D")
J2CPP_DEFINE_METHOD(java::lang::StrictMath,16,"hypot","(DD)D")
J2CPP_DEFINE_METHOD(java::lang::StrictMath,17,"IEEEremainder","(DD)D")
J2CPP_DEFINE_METHOD(java::lang::StrictMath,18,"log","(D)D")
J2CPP_DEFINE_METHOD(java::lang::StrictMath,19,"log10","(D)D")
J2CPP_DEFINE_METHOD(java::lang::StrictMath,20,"log1p","(D)D")
J2CPP_DEFINE_METHOD(java::lang::StrictMath,21,"max","(DD)D")
J2CPP_DEFINE_METHOD(java::lang::StrictMath,22,"max","(FF)F")
J2CPP_DEFINE_METHOD(java::lang::StrictMath,23,"max","(II)I")
J2CPP_DEFINE_METHOD(java::lang::StrictMath,24,"max","(JJ)J")
J2CPP_DEFINE_METHOD(java::lang::StrictMath,25,"min","(DD)D")
J2CPP_DEFINE_METHOD(java::lang::StrictMath,26,"min","(FF)F")
J2CPP_DEFINE_METHOD(java::lang::StrictMath,27,"min","(II)I")
J2CPP_DEFINE_METHOD(java::lang::StrictMath,28,"min","(JJ)J")
J2CPP_DEFINE_METHOD(java::lang::StrictMath,29,"pow","(DD)D")
J2CPP_DEFINE_METHOD(java::lang::StrictMath,30,"random","()D")
J2CPP_DEFINE_METHOD(java::lang::StrictMath,31,"rint","(D)D")
J2CPP_DEFINE_METHOD(java::lang::StrictMath,32,"round","(D)J")
J2CPP_DEFINE_METHOD(java::lang::StrictMath,33,"round","(F)I")
J2CPP_DEFINE_METHOD(java::lang::StrictMath,34,"signum","(D)D")
J2CPP_DEFINE_METHOD(java::lang::StrictMath,35,"signum","(F)F")
J2CPP_DEFINE_METHOD(java::lang::StrictMath,36,"sinh","(D)D")
J2CPP_DEFINE_METHOD(java::lang::StrictMath,37,"sin","(D)D")
J2CPP_DEFINE_METHOD(java::lang::StrictMath,38,"sqrt","(D)D")
J2CPP_DEFINE_METHOD(java::lang::StrictMath,39,"tan","(D)D")
J2CPP_DEFINE_METHOD(java::lang::StrictMath,40,"tanh","(D)D")
J2CPP_DEFINE_METHOD(java::lang::StrictMath,41,"toDegrees","(D)D")
J2CPP_DEFINE_METHOD(java::lang::StrictMath,42,"toRadians","(D)D")
J2CPP_DEFINE_METHOD(java::lang::StrictMath,43,"ulp","(D)D")
J2CPP_DEFINE_METHOD(java::lang::StrictMath,44,"ulp","(F)F")
J2CPP_DEFINE_METHOD(java::lang::StrictMath,45,"copySign","(DD)D")
J2CPP_DEFINE_METHOD(java::lang::StrictMath,46,"copySign","(FF)F")
J2CPP_DEFINE_METHOD(java::lang::StrictMath,47,"getExponent","(F)I")
J2CPP_DEFINE_METHOD(java::lang::StrictMath,48,"getExponent","(D)I")
J2CPP_DEFINE_METHOD(java::lang::StrictMath,49,"nextAfter","(DD)D")
J2CPP_DEFINE_METHOD(java::lang::StrictMath,50,"nextAfter","(FD)F")
J2CPP_DEFINE_METHOD(java::lang::StrictMath,51,"nextUp","(D)D")
J2CPP_DEFINE_METHOD(java::lang::StrictMath,52,"nextUp","(F)F")
J2CPP_DEFINE_METHOD(java::lang::StrictMath,53,"scalb","(DI)D")
J2CPP_DEFINE_METHOD(java::lang::StrictMath,54,"scalb","(FI)F")
J2CPP_DEFINE_FIELD(java::lang::StrictMath,0,"E","D")
J2CPP_DEFINE_FIELD(java::lang::StrictMath,1,"PI","D")

} //namespace j2cpp

#endif //J2CPP_JAVA_LANG_STRICTMATH_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
