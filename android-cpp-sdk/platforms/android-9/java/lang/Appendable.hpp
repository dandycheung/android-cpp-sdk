/*================================================================================
  code generated by: java2cpp
  class: java.lang.Appendable
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_LANG_APPENDABLE_HPP_DECL
#define J2CPP_JAVA_LANG_APPENDABLE_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class CharSequence; } } }


#include <java/lang/CharSequence.hpp>


namespace j2cpp {

namespace java { namespace lang {

	class Appendable;
	class Appendable
		: public cpp_object<Appendable>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)

		Appendable(jobject jobj)
		: cpp_object<Appendable>(jobj)
		{
		}

		local_ref< java::lang::Appendable > append(cpp_char const&);
		local_ref< java::lang::Appendable > append(local_ref< java::lang::CharSequence > const&);
		local_ref< java::lang::Appendable > append(local_ref< java::lang::CharSequence > const&, cpp_int const&, cpp_int const&);
	}; //class Appendable

} //namespace lang
} //namespace java


} //namespace j2cpp

#endif //J2CPP_JAVA_LANG_APPENDABLE_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_LANG_APPENDABLE_HPP_IMPL
#define J2CPP_JAVA_LANG_APPENDABLE_HPP_IMPL

namespace j2cpp {


local_ref< java::lang::Appendable > java::lang::Appendable::append(cpp_char const &a0)
{
	return local_ref< java::lang::Appendable >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(0), J2CPP_METHOD_SIGNATURE(0), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::Appendable > java::lang::Appendable::append(local_ref< java::lang::CharSequence > const &a0)
{
	return local_ref< java::lang::Appendable >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::Appendable > java::lang::Appendable::append(local_ref< java::lang::CharSequence > const &a0, cpp_int const &a1, cpp_int const &a2)
{
	return local_ref< java::lang::Appendable >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}


J2CPP_DEFINE_CLASS(java::lang::Appendable,"java/lang/Appendable")
J2CPP_DEFINE_METHOD(java::lang::Appendable,0,"append","(C)Ljava/lang/Appendable;")
J2CPP_DEFINE_METHOD(java::lang::Appendable,1,"append","(Ljava/lang/CharSequence;)Ljava/lang/Appendable;")
J2CPP_DEFINE_METHOD(java::lang::Appendable,2,"append","(Ljava/lang/CharSequence;II)Ljava/lang/Appendable;")

} //namespace j2cpp

#endif //J2CPP_JAVA_LANG_APPENDABLE_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
