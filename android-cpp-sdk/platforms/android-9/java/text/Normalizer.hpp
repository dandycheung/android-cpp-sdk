/*================================================================================
  code generated by: java2cpp
  class: java.text.Normalizer
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_TEXT_NORMALIZER_HPP_DECL
#define J2CPP_JAVA_TEXT_NORMALIZER_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace lang { class CharSequence; } } }
namespace j2cpp { namespace java { namespace text { namespace Normalizer_ { class Form; } } } }


#include <java/lang/CharSequence.hpp>
#include <java/lang/String.hpp>
#include <java/text/Normalizer.hpp>


namespace j2cpp {

namespace java { namespace text {

	class Normalizer;
	namespace Normalizer_ {

		class Form;
		class Form
			: public cpp_object<Form>
		{
		public:

			J2CPP_DECLARE_CLASS

			J2CPP_DECLARE_METHOD(0)
			J2CPP_DECLARE_METHOD(1)
			J2CPP_DECLARE_METHOD(2)
			J2CPP_DECLARE_METHOD(3)
			J2CPP_DECLARE_FIELD(0)
			J2CPP_DECLARE_FIELD(1)
			J2CPP_DECLARE_FIELD(2)
			J2CPP_DECLARE_FIELD(3)
			J2CPP_DECLARE_FIELD(4)

			Form(jobject jobj)
			: cpp_object<Form>(jobj)
			{
			}

			static local_ref< cpp_object_array<java::text::Normalizer_::Form, 1> > values();
			static local_ref< java::text::Normalizer_::Form > valueOf(local_ref< java::lang::String > const&);

			static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(0), J2CPP_FIELD_SIGNATURE(0), local_ref< java::text::Normalizer_::Form > > NFC;
			static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(1), J2CPP_FIELD_SIGNATURE(1), local_ref< java::text::Normalizer_::Form > > NFD;
			static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(2), J2CPP_FIELD_SIGNATURE(2), local_ref< java::text::Normalizer_::Form > > NFKC;
			static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(3), J2CPP_FIELD_SIGNATURE(3), local_ref< java::text::Normalizer_::Form > > NFKD;
		}; //class Form

	} //namespace Normalizer_

	class Normalizer
		: public cpp_object<Normalizer>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)

		typedef Normalizer_::Form Form;

		Normalizer(jobject jobj)
		: cpp_object<Normalizer>(jobj)
		{
		}

		static cpp_boolean isNormalized(local_ref< java::lang::CharSequence > const&, local_ref< java::text::Normalizer_::Form > const&);
		static local_ref< java::lang::String > normalize(local_ref< java::lang::CharSequence > const&, local_ref< java::text::Normalizer_::Form > const&);
	}; //class Normalizer

} //namespace text
} //namespace java


} //namespace j2cpp

#endif //J2CPP_JAVA_TEXT_NORMALIZER_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_TEXT_NORMALIZER_HPP_IMPL
#define J2CPP_JAVA_TEXT_NORMALIZER_HPP_IMPL

namespace j2cpp {



local_ref< cpp_object_array<java::text::Normalizer_::Form, 1> > java::text::Normalizer_::Form::values()
{
	return local_ref< cpp_object_array<java::text::Normalizer_::Form, 1> >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(0), J2CPP_METHOD_SIGNATURE(0), true>()
		)
	);
}

local_ref< java::text::Normalizer_::Form > java::text::Normalizer_::Form::valueOf(local_ref< java::lang::String > const &a0)
{
	return local_ref< java::text::Normalizer_::Form >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), true>(),
			a0.get_jtype()
		)
	);
}

template <>
local_ref< java::text::Normalizer_::Form > create< java::text::Normalizer_::Form>(local_ref< java::lang::String > const &a0, cpp_int const &a1)
{
	return local_ref< java::text::Normalizer_::Form >(
		environment::get().get_jenv()->NewObject(
			get_class<java::text::Normalizer_::Form::J2CPP_CLASS_NAME>(),
			get_method_id<java::text::Normalizer_::Form::J2CPP_CLASS_NAME, java::text::Normalizer_::Form::J2CPP_METHOD_NAME(2), java::text::Normalizer_::Form::J2CPP_METHOD_SIGNATURE(2), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}


static_field<
	java::text::Normalizer_::Form::J2CPP_CLASS_NAME,
	java::text::Normalizer_::Form::J2CPP_FIELD_NAME(0),
	java::text::Normalizer_::Form::J2CPP_FIELD_SIGNATURE(0),
	local_ref< java::text::Normalizer_::Form >
> java::text::Normalizer_::Form::NFC;

static_field<
	java::text::Normalizer_::Form::J2CPP_CLASS_NAME,
	java::text::Normalizer_::Form::J2CPP_FIELD_NAME(1),
	java::text::Normalizer_::Form::J2CPP_FIELD_SIGNATURE(1),
	local_ref< java::text::Normalizer_::Form >
> java::text::Normalizer_::Form::NFD;

static_field<
	java::text::Normalizer_::Form::J2CPP_CLASS_NAME,
	java::text::Normalizer_::Form::J2CPP_FIELD_NAME(2),
	java::text::Normalizer_::Form::J2CPP_FIELD_SIGNATURE(2),
	local_ref< java::text::Normalizer_::Form >
> java::text::Normalizer_::Form::NFKC;

static_field<
	java::text::Normalizer_::Form::J2CPP_CLASS_NAME,
	java::text::Normalizer_::Form::J2CPP_FIELD_NAME(3),
	java::text::Normalizer_::Form::J2CPP_FIELD_SIGNATURE(3),
	local_ref< java::text::Normalizer_::Form >
> java::text::Normalizer_::Form::NFKD;


J2CPP_DEFINE_CLASS(java::text::Normalizer_::Form,"java/text/Normalizer$Form")
J2CPP_DEFINE_METHOD(java::text::Normalizer_::Form,0,"values","()[java.text.Normalizer.Form")
J2CPP_DEFINE_METHOD(java::text::Normalizer_::Form,1,"valueOf","(Ljava/lang/String;)Ljava/text/Normalizer$Form;")
J2CPP_DEFINE_METHOD(java::text::Normalizer_::Form,2,"<init>","(Ljava/lang/String;I)V")
J2CPP_DEFINE_METHOD(java::text::Normalizer_::Form,3,"<clinit>","()V")
J2CPP_DEFINE_FIELD(java::text::Normalizer_::Form,0,"NFC","Ljava/text/Normalizer$Form;")
J2CPP_DEFINE_FIELD(java::text::Normalizer_::Form,1,"NFD","Ljava/text/Normalizer$Form;")
J2CPP_DEFINE_FIELD(java::text::Normalizer_::Form,2,"NFKC","Ljava/text/Normalizer$Form;")
J2CPP_DEFINE_FIELD(java::text::Normalizer_::Form,3,"NFKD","Ljava/text/Normalizer$Form;")
J2CPP_DEFINE_FIELD(java::text::Normalizer_::Form,4,"$VALUES","[java.text.Normalizer.Form")


template <>
local_ref< java::text::Normalizer > create< java::text::Normalizer>()
{
	return local_ref< java::text::Normalizer >(
		environment::get().get_jenv()->NewObject(
			get_class<java::text::Normalizer::J2CPP_CLASS_NAME>(),
			get_method_id<java::text::Normalizer::J2CPP_CLASS_NAME, java::text::Normalizer::J2CPP_METHOD_NAME(0), java::text::Normalizer::J2CPP_METHOD_SIGNATURE(0), false>()
		)
	);
}

cpp_boolean java::text::Normalizer::isNormalized(local_ref< java::lang::CharSequence > const &a0, local_ref< java::text::Normalizer_::Form > const &a1)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallStaticBooleanMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), true>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< java::lang::String > java::text::Normalizer::normalize(local_ref< java::lang::CharSequence > const &a0, local_ref< java::text::Normalizer_::Form > const &a1)
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), true>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}


J2CPP_DEFINE_CLASS(java::text::Normalizer,"java/text/Normalizer")
J2CPP_DEFINE_METHOD(java::text::Normalizer,0,"<init>","()V")
J2CPP_DEFINE_METHOD(java::text::Normalizer,1,"isNormalized","(Ljava/lang/CharSequence;Ljava/text/Normalizer$Form;)Z")
J2CPP_DEFINE_METHOD(java::text::Normalizer,2,"normalize","(Ljava/lang/CharSequence;Ljava/text/Normalizer$Form;)Ljava/lang/String;")

} //namespace j2cpp

#endif //J2CPP_JAVA_TEXT_NORMALIZER_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
