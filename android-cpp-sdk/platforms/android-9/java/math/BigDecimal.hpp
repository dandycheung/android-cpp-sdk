/*================================================================================
  code generated by: java2cpp
  class: java.math.BigDecimal
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_MATH_BIGDECIMAL_HPP_DECL
#define J2CPP_JAVA_MATH_BIGDECIMAL_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace math { class BigInteger; } } }
namespace j2cpp { namespace java { namespace math { class MathContext; } } }
namespace j2cpp { namespace java { namespace math { class RoundingMode; } } }


#include <java/lang/Object.hpp>
#include <java/lang/String.hpp>
#include <java/math/BigInteger.hpp>
#include <java/math/MathContext.hpp>
#include <java/math/RoundingMode.hpp>


namespace j2cpp {

namespace java { namespace math {

	class BigDecimal;
	class BigDecimal
		: public cpp_object<BigDecimal>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_METHOD(12)
		J2CPP_DECLARE_METHOD(13)
		J2CPP_DECLARE_METHOD(14)
		J2CPP_DECLARE_METHOD(15)
		J2CPP_DECLARE_METHOD(16)
		J2CPP_DECLARE_METHOD(17)
		J2CPP_DECLARE_METHOD(18)
		J2CPP_DECLARE_METHOD(19)
		J2CPP_DECLARE_METHOD(20)
		J2CPP_DECLARE_METHOD(21)
		J2CPP_DECLARE_METHOD(22)
		J2CPP_DECLARE_METHOD(23)
		J2CPP_DECLARE_METHOD(24)
		J2CPP_DECLARE_METHOD(25)
		J2CPP_DECLARE_METHOD(26)
		J2CPP_DECLARE_METHOD(27)
		J2CPP_DECLARE_METHOD(28)
		J2CPP_DECLARE_METHOD(29)
		J2CPP_DECLARE_METHOD(30)
		J2CPP_DECLARE_METHOD(31)
		J2CPP_DECLARE_METHOD(32)
		J2CPP_DECLARE_METHOD(33)
		J2CPP_DECLARE_METHOD(34)
		J2CPP_DECLARE_METHOD(35)
		J2CPP_DECLARE_METHOD(36)
		J2CPP_DECLARE_METHOD(37)
		J2CPP_DECLARE_METHOD(38)
		J2CPP_DECLARE_METHOD(39)
		J2CPP_DECLARE_METHOD(40)
		J2CPP_DECLARE_METHOD(41)
		J2CPP_DECLARE_METHOD(42)
		J2CPP_DECLARE_METHOD(43)
		J2CPP_DECLARE_METHOD(44)
		J2CPP_DECLARE_METHOD(45)
		J2CPP_DECLARE_METHOD(46)
		J2CPP_DECLARE_METHOD(47)
		J2CPP_DECLARE_METHOD(48)
		J2CPP_DECLARE_METHOD(49)
		J2CPP_DECLARE_METHOD(50)
		J2CPP_DECLARE_METHOD(51)
		J2CPP_DECLARE_METHOD(52)
		J2CPP_DECLARE_METHOD(53)
		J2CPP_DECLARE_METHOD(54)
		J2CPP_DECLARE_METHOD(55)
		J2CPP_DECLARE_METHOD(56)
		J2CPP_DECLARE_METHOD(57)
		J2CPP_DECLARE_METHOD(58)
		J2CPP_DECLARE_METHOD(59)
		J2CPP_DECLARE_METHOD(60)
		J2CPP_DECLARE_METHOD(61)
		J2CPP_DECLARE_METHOD(62)
		J2CPP_DECLARE_METHOD(63)
		J2CPP_DECLARE_METHOD(64)
		J2CPP_DECLARE_METHOD(65)
		J2CPP_DECLARE_METHOD(66)
		J2CPP_DECLARE_METHOD(67)
		J2CPP_DECLARE_METHOD(68)
		J2CPP_DECLARE_METHOD(69)
		J2CPP_DECLARE_METHOD(70)
		J2CPP_DECLARE_METHOD(71)
		J2CPP_DECLARE_METHOD(72)
		J2CPP_DECLARE_METHOD(73)
		J2CPP_DECLARE_METHOD(74)
		J2CPP_DECLARE_METHOD(75)
		J2CPP_DECLARE_METHOD(76)
		J2CPP_DECLARE_METHOD(77)
		J2CPP_DECLARE_FIELD(0)
		J2CPP_DECLARE_FIELD(1)
		J2CPP_DECLARE_FIELD(2)
		J2CPP_DECLARE_FIELD(3)
		J2CPP_DECLARE_FIELD(4)
		J2CPP_DECLARE_FIELD(5)
		J2CPP_DECLARE_FIELD(6)
		J2CPP_DECLARE_FIELD(7)
		J2CPP_DECLARE_FIELD(8)
		J2CPP_DECLARE_FIELD(9)
		J2CPP_DECLARE_FIELD(10)

		BigDecimal(jobject jobj)
		: cpp_object<BigDecimal>(jobj)
		{
		}

		static local_ref< java::math::BigDecimal > valueOf(cpp_long const&, cpp_int const&);
		static local_ref< java::math::BigDecimal > valueOf(cpp_long const&);
		static local_ref< java::math::BigDecimal > valueOf(cpp_double const&);
		local_ref< java::math::BigDecimal > add(local_ref< java::math::BigDecimal > const&);
		local_ref< java::math::BigDecimal > add(local_ref< java::math::BigDecimal > const&, local_ref< java::math::MathContext > const&);
		local_ref< java::math::BigDecimal > subtract(local_ref< java::math::BigDecimal > const&);
		local_ref< java::math::BigDecimal > subtract(local_ref< java::math::BigDecimal > const&, local_ref< java::math::MathContext > const&);
		local_ref< java::math::BigDecimal > multiply(local_ref< java::math::BigDecimal > const&);
		local_ref< java::math::BigDecimal > multiply(local_ref< java::math::BigDecimal > const&, local_ref< java::math::MathContext > const&);
		local_ref< java::math::BigDecimal > divide(local_ref< java::math::BigDecimal > const&, cpp_int const&, cpp_int const&);
		local_ref< java::math::BigDecimal > divide(local_ref< java::math::BigDecimal > const&, cpp_int const&, local_ref< java::math::RoundingMode > const&);
		local_ref< java::math::BigDecimal > divide(local_ref< java::math::BigDecimal > const&, cpp_int const&);
		local_ref< java::math::BigDecimal > divide(local_ref< java::math::BigDecimal > const&, local_ref< java::math::RoundingMode > const&);
		local_ref< java::math::BigDecimal > divide(local_ref< java::math::BigDecimal > const&);
		local_ref< java::math::BigDecimal > divide(local_ref< java::math::BigDecimal > const&, local_ref< java::math::MathContext > const&);
		local_ref< java::math::BigDecimal > divideToIntegralValue(local_ref< java::math::BigDecimal > const&);
		local_ref< java::math::BigDecimal > divideToIntegralValue(local_ref< java::math::BigDecimal > const&, local_ref< java::math::MathContext > const&);
		local_ref< java::math::BigDecimal > remainder(local_ref< java::math::BigDecimal > const&);
		local_ref< java::math::BigDecimal > remainder(local_ref< java::math::BigDecimal > const&, local_ref< java::math::MathContext > const&);
		local_ref< cpp_object_array<java::math::BigDecimal, 1> > divideAndRemainder(local_ref< java::math::BigDecimal > const&);
		local_ref< cpp_object_array<java::math::BigDecimal, 1> > divideAndRemainder(local_ref< java::math::BigDecimal > const&, local_ref< java::math::MathContext > const&);
		local_ref< java::math::BigDecimal > pow(cpp_int const&);
		local_ref< java::math::BigDecimal > pow(cpp_int const&, local_ref< java::math::MathContext > const&);
		local_ref< java::math::BigDecimal > abs();
		local_ref< java::math::BigDecimal > abs(local_ref< java::math::MathContext > const&);
		local_ref< java::math::BigDecimal > negate();
		local_ref< java::math::BigDecimal > negate(local_ref< java::math::MathContext > const&);
		local_ref< java::math::BigDecimal > plus();
		local_ref< java::math::BigDecimal > plus(local_ref< java::math::MathContext > const&);
		cpp_int signum();
		cpp_int scale();
		cpp_int precision();
		local_ref< java::math::BigInteger > unscaledValue();
		local_ref< java::math::BigDecimal > round(local_ref< java::math::MathContext > const&);
		local_ref< java::math::BigDecimal > setScale(cpp_int const&, local_ref< java::math::RoundingMode > const&);
		local_ref< java::math::BigDecimal > setScale(cpp_int const&, cpp_int const&);
		local_ref< java::math::BigDecimal > setScale(cpp_int const&);
		local_ref< java::math::BigDecimal > movePointLeft(cpp_int const&);
		local_ref< java::math::BigDecimal > movePointRight(cpp_int const&);
		local_ref< java::math::BigDecimal > scaleByPowerOfTen(cpp_int const&);
		local_ref< java::math::BigDecimal > stripTrailingZeros();
		cpp_int compareTo(local_ref< java::math::BigDecimal > const&);
		cpp_boolean equals(local_ref< java::lang::Object > const&);
		local_ref< java::math::BigDecimal > min(local_ref< java::math::BigDecimal > const&);
		local_ref< java::math::BigDecimal > max(local_ref< java::math::BigDecimal > const&);
		cpp_int hashCode();
		local_ref< java::lang::String > toString();
		local_ref< java::lang::String > toEngineeringString();
		local_ref< java::lang::String > toPlainString();
		local_ref< java::math::BigInteger > toBigInteger();
		local_ref< java::math::BigInteger > toBigIntegerExact();
		cpp_long longValue();
		cpp_long longValueExact();
		cpp_int intValue();
		cpp_int intValueExact();
		cpp_short shortValueExact();
		cpp_byte byteValueExact();
		cpp_float floatValue();
		cpp_double doubleValue();
		local_ref< java::math::BigDecimal > ulp();
		cpp_int compareTo(local_ref< java::lang::Object > const&);

		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(0), J2CPP_FIELD_SIGNATURE(0), local_ref< java::math::BigDecimal > > ZERO;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(1), J2CPP_FIELD_SIGNATURE(1), local_ref< java::math::BigDecimal > > ONE;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(2), J2CPP_FIELD_SIGNATURE(2), local_ref< java::math::BigDecimal > > TEN;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(3), J2CPP_FIELD_SIGNATURE(3), cpp_int > ROUND_UP;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(4), J2CPP_FIELD_SIGNATURE(4), cpp_int > ROUND_DOWN;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(5), J2CPP_FIELD_SIGNATURE(5), cpp_int > ROUND_CEILING;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(6), J2CPP_FIELD_SIGNATURE(6), cpp_int > ROUND_FLOOR;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(7), J2CPP_FIELD_SIGNATURE(7), cpp_int > ROUND_HALF_UP;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(8), J2CPP_FIELD_SIGNATURE(8), cpp_int > ROUND_HALF_DOWN;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(9), J2CPP_FIELD_SIGNATURE(9), cpp_int > ROUND_HALF_EVEN;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(10), J2CPP_FIELD_SIGNATURE(10), cpp_int > ROUND_UNNECESSARY;
	}; //class BigDecimal

} //namespace math
} //namespace java


} //namespace j2cpp

#endif //J2CPP_JAVA_MATH_BIGDECIMAL_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_MATH_BIGDECIMAL_HPP_IMPL
#define J2CPP_JAVA_MATH_BIGDECIMAL_HPP_IMPL

namespace j2cpp {


template <>
local_ref< java::math::BigDecimal > create< java::math::BigDecimal>(local_ref< cpp_char_array<1> > const &a0, cpp_int const &a1, cpp_int const &a2)
{
	return local_ref< java::math::BigDecimal >(
		environment::get().get_jenv()->NewObject(
			get_class<java::math::BigDecimal::J2CPP_CLASS_NAME>(),
			get_method_id<java::math::BigDecimal::J2CPP_CLASS_NAME, java::math::BigDecimal::J2CPP_METHOD_NAME(0), java::math::BigDecimal::J2CPP_METHOD_SIGNATURE(0), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

template <>
local_ref< java::math::BigDecimal > create< java::math::BigDecimal>(local_ref< cpp_char_array<1> > const &a0, cpp_int const &a1, cpp_int const &a2, local_ref< java::math::MathContext > const &a3)
{
	return local_ref< java::math::BigDecimal >(
		environment::get().get_jenv()->NewObject(
			get_class<java::math::BigDecimal::J2CPP_CLASS_NAME>(),
			get_method_id<java::math::BigDecimal::J2CPP_CLASS_NAME, java::math::BigDecimal::J2CPP_METHOD_NAME(1), java::math::BigDecimal::J2CPP_METHOD_SIGNATURE(1), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype(), a3.get_jtype()
		)
	);
}

template <>
local_ref< java::math::BigDecimal > create< java::math::BigDecimal>(local_ref< cpp_char_array<1> > const &a0)
{
	return local_ref< java::math::BigDecimal >(
		environment::get().get_jenv()->NewObject(
			get_class<java::math::BigDecimal::J2CPP_CLASS_NAME>(),
			get_method_id<java::math::BigDecimal::J2CPP_CLASS_NAME, java::math::BigDecimal::J2CPP_METHOD_NAME(2), java::math::BigDecimal::J2CPP_METHOD_SIGNATURE(2), false>(),
			a0.get_jtype()
		)
	);
}

template <>
local_ref< java::math::BigDecimal > create< java::math::BigDecimal>(local_ref< cpp_char_array<1> > const &a0, local_ref< java::math::MathContext > const &a1)
{
	return local_ref< java::math::BigDecimal >(
		environment::get().get_jenv()->NewObject(
			get_class<java::math::BigDecimal::J2CPP_CLASS_NAME>(),
			get_method_id<java::math::BigDecimal::J2CPP_CLASS_NAME, java::math::BigDecimal::J2CPP_METHOD_NAME(3), java::math::BigDecimal::J2CPP_METHOD_SIGNATURE(3), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

template <>
local_ref< java::math::BigDecimal > create< java::math::BigDecimal>(local_ref< java::lang::String > const &a0)
{
	return local_ref< java::math::BigDecimal >(
		environment::get().get_jenv()->NewObject(
			get_class<java::math::BigDecimal::J2CPP_CLASS_NAME>(),
			get_method_id<java::math::BigDecimal::J2CPP_CLASS_NAME, java::math::BigDecimal::J2CPP_METHOD_NAME(4), java::math::BigDecimal::J2CPP_METHOD_SIGNATURE(4), false>(),
			a0.get_jtype()
		)
	);
}

template <>
local_ref< java::math::BigDecimal > create< java::math::BigDecimal>(local_ref< java::lang::String > const &a0, local_ref< java::math::MathContext > const &a1)
{
	return local_ref< java::math::BigDecimal >(
		environment::get().get_jenv()->NewObject(
			get_class<java::math::BigDecimal::J2CPP_CLASS_NAME>(),
			get_method_id<java::math::BigDecimal::J2CPP_CLASS_NAME, java::math::BigDecimal::J2CPP_METHOD_NAME(5), java::math::BigDecimal::J2CPP_METHOD_SIGNATURE(5), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

template <>
local_ref< java::math::BigDecimal > create< java::math::BigDecimal>(cpp_double const &a0)
{
	return local_ref< java::math::BigDecimal >(
		environment::get().get_jenv()->NewObject(
			get_class<java::math::BigDecimal::J2CPP_CLASS_NAME>(),
			get_method_id<java::math::BigDecimal::J2CPP_CLASS_NAME, java::math::BigDecimal::J2CPP_METHOD_NAME(6), java::math::BigDecimal::J2CPP_METHOD_SIGNATURE(6), false>(),
			a0.get_jtype()
		)
	);
}

template <>
local_ref< java::math::BigDecimal > create< java::math::BigDecimal>(cpp_double const &a0, local_ref< java::math::MathContext > const &a1)
{
	return local_ref< java::math::BigDecimal >(
		environment::get().get_jenv()->NewObject(
			get_class<java::math::BigDecimal::J2CPP_CLASS_NAME>(),
			get_method_id<java::math::BigDecimal::J2CPP_CLASS_NAME, java::math::BigDecimal::J2CPP_METHOD_NAME(7), java::math::BigDecimal::J2CPP_METHOD_SIGNATURE(7), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

template <>
local_ref< java::math::BigDecimal > create< java::math::BigDecimal>(local_ref< java::math::BigInteger > const &a0)
{
	return local_ref< java::math::BigDecimal >(
		environment::get().get_jenv()->NewObject(
			get_class<java::math::BigDecimal::J2CPP_CLASS_NAME>(),
			get_method_id<java::math::BigDecimal::J2CPP_CLASS_NAME, java::math::BigDecimal::J2CPP_METHOD_NAME(8), java::math::BigDecimal::J2CPP_METHOD_SIGNATURE(8), false>(),
			a0.get_jtype()
		)
	);
}

template <>
local_ref< java::math::BigDecimal > create< java::math::BigDecimal>(local_ref< java::math::BigInteger > const &a0, local_ref< java::math::MathContext > const &a1)
{
	return local_ref< java::math::BigDecimal >(
		environment::get().get_jenv()->NewObject(
			get_class<java::math::BigDecimal::J2CPP_CLASS_NAME>(),
			get_method_id<java::math::BigDecimal::J2CPP_CLASS_NAME, java::math::BigDecimal::J2CPP_METHOD_NAME(9), java::math::BigDecimal::J2CPP_METHOD_SIGNATURE(9), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

template <>
local_ref< java::math::BigDecimal > create< java::math::BigDecimal>(local_ref< java::math::BigInteger > const &a0, cpp_int const &a1)
{
	return local_ref< java::math::BigDecimal >(
		environment::get().get_jenv()->NewObject(
			get_class<java::math::BigDecimal::J2CPP_CLASS_NAME>(),
			get_method_id<java::math::BigDecimal::J2CPP_CLASS_NAME, java::math::BigDecimal::J2CPP_METHOD_NAME(10), java::math::BigDecimal::J2CPP_METHOD_SIGNATURE(10), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

template <>
local_ref< java::math::BigDecimal > create< java::math::BigDecimal>(local_ref< java::math::BigInteger > const &a0, cpp_int const &a1, local_ref< java::math::MathContext > const &a2)
{
	return local_ref< java::math::BigDecimal >(
		environment::get().get_jenv()->NewObject(
			get_class<java::math::BigDecimal::J2CPP_CLASS_NAME>(),
			get_method_id<java::math::BigDecimal::J2CPP_CLASS_NAME, java::math::BigDecimal::J2CPP_METHOD_NAME(11), java::math::BigDecimal::J2CPP_METHOD_SIGNATURE(11), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

template <>
local_ref< java::math::BigDecimal > create< java::math::BigDecimal>(cpp_int const &a0)
{
	return local_ref< java::math::BigDecimal >(
		environment::get().get_jenv()->NewObject(
			get_class<java::math::BigDecimal::J2CPP_CLASS_NAME>(),
			get_method_id<java::math::BigDecimal::J2CPP_CLASS_NAME, java::math::BigDecimal::J2CPP_METHOD_NAME(12), java::math::BigDecimal::J2CPP_METHOD_SIGNATURE(12), false>(),
			a0.get_jtype()
		)
	);
}

template <>
local_ref< java::math::BigDecimal > create< java::math::BigDecimal>(cpp_int const &a0, local_ref< java::math::MathContext > const &a1)
{
	return local_ref< java::math::BigDecimal >(
		environment::get().get_jenv()->NewObject(
			get_class<java::math::BigDecimal::J2CPP_CLASS_NAME>(),
			get_method_id<java::math::BigDecimal::J2CPP_CLASS_NAME, java::math::BigDecimal::J2CPP_METHOD_NAME(13), java::math::BigDecimal::J2CPP_METHOD_SIGNATURE(13), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

template <>
local_ref< java::math::BigDecimal > create< java::math::BigDecimal>(cpp_long const &a0)
{
	return local_ref< java::math::BigDecimal >(
		environment::get().get_jenv()->NewObject(
			get_class<java::math::BigDecimal::J2CPP_CLASS_NAME>(),
			get_method_id<java::math::BigDecimal::J2CPP_CLASS_NAME, java::math::BigDecimal::J2CPP_METHOD_NAME(14), java::math::BigDecimal::J2CPP_METHOD_SIGNATURE(14), false>(),
			a0.get_jtype()
		)
	);
}

template <>
local_ref< java::math::BigDecimal > create< java::math::BigDecimal>(cpp_long const &a0, local_ref< java::math::MathContext > const &a1)
{
	return local_ref< java::math::BigDecimal >(
		environment::get().get_jenv()->NewObject(
			get_class<java::math::BigDecimal::J2CPP_CLASS_NAME>(),
			get_method_id<java::math::BigDecimal::J2CPP_CLASS_NAME, java::math::BigDecimal::J2CPP_METHOD_NAME(15), java::math::BigDecimal::J2CPP_METHOD_SIGNATURE(15), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< java::math::BigDecimal > java::math::BigDecimal::valueOf(cpp_long const &a0, cpp_int const &a1)
{
	return local_ref< java::math::BigDecimal >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(16), J2CPP_METHOD_SIGNATURE(16), true>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< java::math::BigDecimal > java::math::BigDecimal::valueOf(cpp_long const &a0)
{
	return local_ref< java::math::BigDecimal >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(17), J2CPP_METHOD_SIGNATURE(17), true>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::math::BigDecimal > java::math::BigDecimal::valueOf(cpp_double const &a0)
{
	return local_ref< java::math::BigDecimal >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(18), J2CPP_METHOD_SIGNATURE(18), true>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::math::BigDecimal > java::math::BigDecimal::add(local_ref< java::math::BigDecimal > const &a0)
{
	return local_ref< java::math::BigDecimal >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(19), J2CPP_METHOD_SIGNATURE(19), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::math::BigDecimal > java::math::BigDecimal::add(local_ref< java::math::BigDecimal > const &a0, local_ref< java::math::MathContext > const &a1)
{
	return local_ref< java::math::BigDecimal >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(20), J2CPP_METHOD_SIGNATURE(20), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< java::math::BigDecimal > java::math::BigDecimal::subtract(local_ref< java::math::BigDecimal > const &a0)
{
	return local_ref< java::math::BigDecimal >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(21), J2CPP_METHOD_SIGNATURE(21), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::math::BigDecimal > java::math::BigDecimal::subtract(local_ref< java::math::BigDecimal > const &a0, local_ref< java::math::MathContext > const &a1)
{
	return local_ref< java::math::BigDecimal >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(22), J2CPP_METHOD_SIGNATURE(22), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< java::math::BigDecimal > java::math::BigDecimal::multiply(local_ref< java::math::BigDecimal > const &a0)
{
	return local_ref< java::math::BigDecimal >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(23), J2CPP_METHOD_SIGNATURE(23), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::math::BigDecimal > java::math::BigDecimal::multiply(local_ref< java::math::BigDecimal > const &a0, local_ref< java::math::MathContext > const &a1)
{
	return local_ref< java::math::BigDecimal >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(24), J2CPP_METHOD_SIGNATURE(24), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< java::math::BigDecimal > java::math::BigDecimal::divide(local_ref< java::math::BigDecimal > const &a0, cpp_int const &a1, cpp_int const &a2)
{
	return local_ref< java::math::BigDecimal >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(25), J2CPP_METHOD_SIGNATURE(25), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

local_ref< java::math::BigDecimal > java::math::BigDecimal::divide(local_ref< java::math::BigDecimal > const &a0, cpp_int const &a1, local_ref< java::math::RoundingMode > const &a2)
{
	return local_ref< java::math::BigDecimal >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(26), J2CPP_METHOD_SIGNATURE(26), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

local_ref< java::math::BigDecimal > java::math::BigDecimal::divide(local_ref< java::math::BigDecimal > const &a0, cpp_int const &a1)
{
	return local_ref< java::math::BigDecimal >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(27), J2CPP_METHOD_SIGNATURE(27), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< java::math::BigDecimal > java::math::BigDecimal::divide(local_ref< java::math::BigDecimal > const &a0, local_ref< java::math::RoundingMode > const &a1)
{
	return local_ref< java::math::BigDecimal >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(28), J2CPP_METHOD_SIGNATURE(28), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< java::math::BigDecimal > java::math::BigDecimal::divide(local_ref< java::math::BigDecimal > const &a0)
{
	return local_ref< java::math::BigDecimal >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(29), J2CPP_METHOD_SIGNATURE(29), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::math::BigDecimal > java::math::BigDecimal::divide(local_ref< java::math::BigDecimal > const &a0, local_ref< java::math::MathContext > const &a1)
{
	return local_ref< java::math::BigDecimal >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(30), J2CPP_METHOD_SIGNATURE(30), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< java::math::BigDecimal > java::math::BigDecimal::divideToIntegralValue(local_ref< java::math::BigDecimal > const &a0)
{
	return local_ref< java::math::BigDecimal >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(31), J2CPP_METHOD_SIGNATURE(31), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::math::BigDecimal > java::math::BigDecimal::divideToIntegralValue(local_ref< java::math::BigDecimal > const &a0, local_ref< java::math::MathContext > const &a1)
{
	return local_ref< java::math::BigDecimal >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(32), J2CPP_METHOD_SIGNATURE(32), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< java::math::BigDecimal > java::math::BigDecimal::remainder(local_ref< java::math::BigDecimal > const &a0)
{
	return local_ref< java::math::BigDecimal >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(33), J2CPP_METHOD_SIGNATURE(33), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::math::BigDecimal > java::math::BigDecimal::remainder(local_ref< java::math::BigDecimal > const &a0, local_ref< java::math::MathContext > const &a1)
{
	return local_ref< java::math::BigDecimal >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(34), J2CPP_METHOD_SIGNATURE(34), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< cpp_object_array<java::math::BigDecimal, 1> > java::math::BigDecimal::divideAndRemainder(local_ref< java::math::BigDecimal > const &a0)
{
	return local_ref< cpp_object_array<java::math::BigDecimal, 1> >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(35), J2CPP_METHOD_SIGNATURE(35), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< cpp_object_array<java::math::BigDecimal, 1> > java::math::BigDecimal::divideAndRemainder(local_ref< java::math::BigDecimal > const &a0, local_ref< java::math::MathContext > const &a1)
{
	return local_ref< cpp_object_array<java::math::BigDecimal, 1> >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(36), J2CPP_METHOD_SIGNATURE(36), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< java::math::BigDecimal > java::math::BigDecimal::pow(cpp_int const &a0)
{
	return local_ref< java::math::BigDecimal >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(37), J2CPP_METHOD_SIGNATURE(37), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::math::BigDecimal > java::math::BigDecimal::pow(cpp_int const &a0, local_ref< java::math::MathContext > const &a1)
{
	return local_ref< java::math::BigDecimal >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(38), J2CPP_METHOD_SIGNATURE(38), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< java::math::BigDecimal > java::math::BigDecimal::abs()
{
	return local_ref< java::math::BigDecimal >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(39), J2CPP_METHOD_SIGNATURE(39), false>()
		)
	);
}

local_ref< java::math::BigDecimal > java::math::BigDecimal::abs(local_ref< java::math::MathContext > const &a0)
{
	return local_ref< java::math::BigDecimal >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(40), J2CPP_METHOD_SIGNATURE(40), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::math::BigDecimal > java::math::BigDecimal::negate()
{
	return local_ref< java::math::BigDecimal >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(41), J2CPP_METHOD_SIGNATURE(41), false>()
		)
	);
}

local_ref< java::math::BigDecimal > java::math::BigDecimal::negate(local_ref< java::math::MathContext > const &a0)
{
	return local_ref< java::math::BigDecimal >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(42), J2CPP_METHOD_SIGNATURE(42), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::math::BigDecimal > java::math::BigDecimal::plus()
{
	return local_ref< java::math::BigDecimal >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(43), J2CPP_METHOD_SIGNATURE(43), false>()
		)
	);
}

local_ref< java::math::BigDecimal > java::math::BigDecimal::plus(local_ref< java::math::MathContext > const &a0)
{
	return local_ref< java::math::BigDecimal >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(44), J2CPP_METHOD_SIGNATURE(44), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int java::math::BigDecimal::signum()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(45), J2CPP_METHOD_SIGNATURE(45), false>()
		)
	);
}

cpp_int java::math::BigDecimal::scale()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(46), J2CPP_METHOD_SIGNATURE(46), false>()
		)
	);
}

cpp_int java::math::BigDecimal::precision()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(47), J2CPP_METHOD_SIGNATURE(47), false>()
		)
	);
}

local_ref< java::math::BigInteger > java::math::BigDecimal::unscaledValue()
{
	return local_ref< java::math::BigInteger >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(48), J2CPP_METHOD_SIGNATURE(48), false>()
		)
	);
}

local_ref< java::math::BigDecimal > java::math::BigDecimal::round(local_ref< java::math::MathContext > const &a0)
{
	return local_ref< java::math::BigDecimal >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(49), J2CPP_METHOD_SIGNATURE(49), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::math::BigDecimal > java::math::BigDecimal::setScale(cpp_int const &a0, local_ref< java::math::RoundingMode > const &a1)
{
	return local_ref< java::math::BigDecimal >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(50), J2CPP_METHOD_SIGNATURE(50), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< java::math::BigDecimal > java::math::BigDecimal::setScale(cpp_int const &a0, cpp_int const &a1)
{
	return local_ref< java::math::BigDecimal >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(51), J2CPP_METHOD_SIGNATURE(51), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< java::math::BigDecimal > java::math::BigDecimal::setScale(cpp_int const &a0)
{
	return local_ref< java::math::BigDecimal >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(52), J2CPP_METHOD_SIGNATURE(52), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::math::BigDecimal > java::math::BigDecimal::movePointLeft(cpp_int const &a0)
{
	return local_ref< java::math::BigDecimal >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(53), J2CPP_METHOD_SIGNATURE(53), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::math::BigDecimal > java::math::BigDecimal::movePointRight(cpp_int const &a0)
{
	return local_ref< java::math::BigDecimal >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(54), J2CPP_METHOD_SIGNATURE(54), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::math::BigDecimal > java::math::BigDecimal::scaleByPowerOfTen(cpp_int const &a0)
{
	return local_ref< java::math::BigDecimal >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(55), J2CPP_METHOD_SIGNATURE(55), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::math::BigDecimal > java::math::BigDecimal::stripTrailingZeros()
{
	return local_ref< java::math::BigDecimal >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(56), J2CPP_METHOD_SIGNATURE(56), false>()
		)
	);
}

cpp_int java::math::BigDecimal::compareTo(local_ref< java::math::BigDecimal > const &a0)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(57), J2CPP_METHOD_SIGNATURE(57), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean java::math::BigDecimal::equals(local_ref< java::lang::Object > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(58), J2CPP_METHOD_SIGNATURE(58), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::math::BigDecimal > java::math::BigDecimal::min(local_ref< java::math::BigDecimal > const &a0)
{
	return local_ref< java::math::BigDecimal >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(59), J2CPP_METHOD_SIGNATURE(59), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::math::BigDecimal > java::math::BigDecimal::max(local_ref< java::math::BigDecimal > const &a0)
{
	return local_ref< java::math::BigDecimal >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(60), J2CPP_METHOD_SIGNATURE(60), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int java::math::BigDecimal::hashCode()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(61), J2CPP_METHOD_SIGNATURE(61), false>()
		)
	);
}

local_ref< java::lang::String > java::math::BigDecimal::toString()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(62), J2CPP_METHOD_SIGNATURE(62), false>()
		)
	);
}

local_ref< java::lang::String > java::math::BigDecimal::toEngineeringString()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(63), J2CPP_METHOD_SIGNATURE(63), false>()
		)
	);
}

local_ref< java::lang::String > java::math::BigDecimal::toPlainString()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(64), J2CPP_METHOD_SIGNATURE(64), false>()
		)
	);
}

local_ref< java::math::BigInteger > java::math::BigDecimal::toBigInteger()
{
	return local_ref< java::math::BigInteger >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(65), J2CPP_METHOD_SIGNATURE(65), false>()
		)
	);
}

local_ref< java::math::BigInteger > java::math::BigDecimal::toBigIntegerExact()
{
	return local_ref< java::math::BigInteger >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(66), J2CPP_METHOD_SIGNATURE(66), false>()
		)
	);
}

cpp_long java::math::BigDecimal::longValue()
{
	return cpp_long(
		environment::get().get_jenv()->CallLongMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(67), J2CPP_METHOD_SIGNATURE(67), false>()
		)
	);
}

cpp_long java::math::BigDecimal::longValueExact()
{
	return cpp_long(
		environment::get().get_jenv()->CallLongMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(68), J2CPP_METHOD_SIGNATURE(68), false>()
		)
	);
}

cpp_int java::math::BigDecimal::intValue()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(69), J2CPP_METHOD_SIGNATURE(69), false>()
		)
	);
}

cpp_int java::math::BigDecimal::intValueExact()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(70), J2CPP_METHOD_SIGNATURE(70), false>()
		)
	);
}

cpp_short java::math::BigDecimal::shortValueExact()
{
	return cpp_short(
		environment::get().get_jenv()->CallShortMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(71), J2CPP_METHOD_SIGNATURE(71), false>()
		)
	);
}

cpp_byte java::math::BigDecimal::byteValueExact()
{
	return cpp_byte(
		environment::get().get_jenv()->CallByteMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(72), J2CPP_METHOD_SIGNATURE(72), false>()
		)
	);
}

cpp_float java::math::BigDecimal::floatValue()
{
	return cpp_float(
		environment::get().get_jenv()->CallFloatMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(73), J2CPP_METHOD_SIGNATURE(73), false>()
		)
	);
}

cpp_double java::math::BigDecimal::doubleValue()
{
	return cpp_double(
		environment::get().get_jenv()->CallDoubleMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(74), J2CPP_METHOD_SIGNATURE(74), false>()
		)
	);
}

local_ref< java::math::BigDecimal > java::math::BigDecimal::ulp()
{
	return local_ref< java::math::BigDecimal >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(75), J2CPP_METHOD_SIGNATURE(75), false>()
		)
	);
}

cpp_int java::math::BigDecimal::compareTo(local_ref< java::lang::Object > const &a0)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(76), J2CPP_METHOD_SIGNATURE(76), false>(),
			a0.get_jtype()
		)
	);
}


static_field<
	java::math::BigDecimal::J2CPP_CLASS_NAME,
	java::math::BigDecimal::J2CPP_FIELD_NAME(0),
	java::math::BigDecimal::J2CPP_FIELD_SIGNATURE(0),
	local_ref< java::math::BigDecimal >
> java::math::BigDecimal::ZERO;

static_field<
	java::math::BigDecimal::J2CPP_CLASS_NAME,
	java::math::BigDecimal::J2CPP_FIELD_NAME(1),
	java::math::BigDecimal::J2CPP_FIELD_SIGNATURE(1),
	local_ref< java::math::BigDecimal >
> java::math::BigDecimal::ONE;

static_field<
	java::math::BigDecimal::J2CPP_CLASS_NAME,
	java::math::BigDecimal::J2CPP_FIELD_NAME(2),
	java::math::BigDecimal::J2CPP_FIELD_SIGNATURE(2),
	local_ref< java::math::BigDecimal >
> java::math::BigDecimal::TEN;

static_field<
	java::math::BigDecimal::J2CPP_CLASS_NAME,
	java::math::BigDecimal::J2CPP_FIELD_NAME(3),
	java::math::BigDecimal::J2CPP_FIELD_SIGNATURE(3),
	cpp_int
> java::math::BigDecimal::ROUND_UP;

static_field<
	java::math::BigDecimal::J2CPP_CLASS_NAME,
	java::math::BigDecimal::J2CPP_FIELD_NAME(4),
	java::math::BigDecimal::J2CPP_FIELD_SIGNATURE(4),
	cpp_int
> java::math::BigDecimal::ROUND_DOWN;

static_field<
	java::math::BigDecimal::J2CPP_CLASS_NAME,
	java::math::BigDecimal::J2CPP_FIELD_NAME(5),
	java::math::BigDecimal::J2CPP_FIELD_SIGNATURE(5),
	cpp_int
> java::math::BigDecimal::ROUND_CEILING;

static_field<
	java::math::BigDecimal::J2CPP_CLASS_NAME,
	java::math::BigDecimal::J2CPP_FIELD_NAME(6),
	java::math::BigDecimal::J2CPP_FIELD_SIGNATURE(6),
	cpp_int
> java::math::BigDecimal::ROUND_FLOOR;

static_field<
	java::math::BigDecimal::J2CPP_CLASS_NAME,
	java::math::BigDecimal::J2CPP_FIELD_NAME(7),
	java::math::BigDecimal::J2CPP_FIELD_SIGNATURE(7),
	cpp_int
> java::math::BigDecimal::ROUND_HALF_UP;

static_field<
	java::math::BigDecimal::J2CPP_CLASS_NAME,
	java::math::BigDecimal::J2CPP_FIELD_NAME(8),
	java::math::BigDecimal::J2CPP_FIELD_SIGNATURE(8),
	cpp_int
> java::math::BigDecimal::ROUND_HALF_DOWN;

static_field<
	java::math::BigDecimal::J2CPP_CLASS_NAME,
	java::math::BigDecimal::J2CPP_FIELD_NAME(9),
	java::math::BigDecimal::J2CPP_FIELD_SIGNATURE(9),
	cpp_int
> java::math::BigDecimal::ROUND_HALF_EVEN;

static_field<
	java::math::BigDecimal::J2CPP_CLASS_NAME,
	java::math::BigDecimal::J2CPP_FIELD_NAME(10),
	java::math::BigDecimal::J2CPP_FIELD_SIGNATURE(10),
	cpp_int
> java::math::BigDecimal::ROUND_UNNECESSARY;


J2CPP_DEFINE_CLASS(java::math::BigDecimal,"java/math/BigDecimal")
J2CPP_DEFINE_METHOD(java::math::BigDecimal,0,"<init>","([CII)V")
J2CPP_DEFINE_METHOD(java::math::BigDecimal,1,"<init>","([CIILjava/math/MathContext;)V")
J2CPP_DEFINE_METHOD(java::math::BigDecimal,2,"<init>","([C)V")
J2CPP_DEFINE_METHOD(java::math::BigDecimal,3,"<init>","([CLjava/math/MathContext;)V")
J2CPP_DEFINE_METHOD(java::math::BigDecimal,4,"<init>","(Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(java::math::BigDecimal,5,"<init>","(Ljava/lang/String;Ljava/math/MathContext;)V")
J2CPP_DEFINE_METHOD(java::math::BigDecimal,6,"<init>","(D)V")
J2CPP_DEFINE_METHOD(java::math::BigDecimal,7,"<init>","(DLjava/math/MathContext;)V")
J2CPP_DEFINE_METHOD(java::math::BigDecimal,8,"<init>","(Ljava/math/BigInteger;)V")
J2CPP_DEFINE_METHOD(java::math::BigDecimal,9,"<init>","(Ljava/math/BigInteger;Ljava/math/MathContext;)V")
J2CPP_DEFINE_METHOD(java::math::BigDecimal,10,"<init>","(Ljava/math/BigInteger;I)V")
J2CPP_DEFINE_METHOD(java::math::BigDecimal,11,"<init>","(Ljava/math/BigInteger;ILjava/math/MathContext;)V")
J2CPP_DEFINE_METHOD(java::math::BigDecimal,12,"<init>","(I)V")
J2CPP_DEFINE_METHOD(java::math::BigDecimal,13,"<init>","(ILjava/math/MathContext;)V")
J2CPP_DEFINE_METHOD(java::math::BigDecimal,14,"<init>","(J)V")
J2CPP_DEFINE_METHOD(java::math::BigDecimal,15,"<init>","(JLjava/math/MathContext;)V")
J2CPP_DEFINE_METHOD(java::math::BigDecimal,16,"valueOf","(JI)Ljava/math/BigDecimal;")
J2CPP_DEFINE_METHOD(java::math::BigDecimal,17,"valueOf","(J)Ljava/math/BigDecimal;")
J2CPP_DEFINE_METHOD(java::math::BigDecimal,18,"valueOf","(D)Ljava/math/BigDecimal;")
J2CPP_DEFINE_METHOD(java::math::BigDecimal,19,"add","(Ljava/math/BigDecimal;)Ljava/math/BigDecimal;")
J2CPP_DEFINE_METHOD(java::math::BigDecimal,20,"add","(Ljava/math/BigDecimal;Ljava/math/MathContext;)Ljava/math/BigDecimal;")
J2CPP_DEFINE_METHOD(java::math::BigDecimal,21,"subtract","(Ljava/math/BigDecimal;)Ljava/math/BigDecimal;")
J2CPP_DEFINE_METHOD(java::math::BigDecimal,22,"subtract","(Ljava/math/BigDecimal;Ljava/math/MathContext;)Ljava/math/BigDecimal;")
J2CPP_DEFINE_METHOD(java::math::BigDecimal,23,"multiply","(Ljava/math/BigDecimal;)Ljava/math/BigDecimal;")
J2CPP_DEFINE_METHOD(java::math::BigDecimal,24,"multiply","(Ljava/math/BigDecimal;Ljava/math/MathContext;)Ljava/math/BigDecimal;")
J2CPP_DEFINE_METHOD(java::math::BigDecimal,25,"divide","(Ljava/math/BigDecimal;II)Ljava/math/BigDecimal;")
J2CPP_DEFINE_METHOD(java::math::BigDecimal,26,"divide","(Ljava/math/BigDecimal;ILjava/math/RoundingMode;)Ljava/math/BigDecimal;")
J2CPP_DEFINE_METHOD(java::math::BigDecimal,27,"divide","(Ljava/math/BigDecimal;I)Ljava/math/BigDecimal;")
J2CPP_DEFINE_METHOD(java::math::BigDecimal,28,"divide","(Ljava/math/BigDecimal;Ljava/math/RoundingMode;)Ljava/math/BigDecimal;")
J2CPP_DEFINE_METHOD(java::math::BigDecimal,29,"divide","(Ljava/math/BigDecimal;)Ljava/math/BigDecimal;")
J2CPP_DEFINE_METHOD(java::math::BigDecimal,30,"divide","(Ljava/math/BigDecimal;Ljava/math/MathContext;)Ljava/math/BigDecimal;")
J2CPP_DEFINE_METHOD(java::math::BigDecimal,31,"divideToIntegralValue","(Ljava/math/BigDecimal;)Ljava/math/BigDecimal;")
J2CPP_DEFINE_METHOD(java::math::BigDecimal,32,"divideToIntegralValue","(Ljava/math/BigDecimal;Ljava/math/MathContext;)Ljava/math/BigDecimal;")
J2CPP_DEFINE_METHOD(java::math::BigDecimal,33,"remainder","(Ljava/math/BigDecimal;)Ljava/math/BigDecimal;")
J2CPP_DEFINE_METHOD(java::math::BigDecimal,34,"remainder","(Ljava/math/BigDecimal;Ljava/math/MathContext;)Ljava/math/BigDecimal;")
J2CPP_DEFINE_METHOD(java::math::BigDecimal,35,"divideAndRemainder","(Ljava/math/BigDecimal;)[java.math.BigDecimal")
J2CPP_DEFINE_METHOD(java::math::BigDecimal,36,"divideAndRemainder","(Ljava/math/BigDecimal;Ljava/math/MathContext;)[java.math.BigDecimal")
J2CPP_DEFINE_METHOD(java::math::BigDecimal,37,"pow","(I)Ljava/math/BigDecimal;")
J2CPP_DEFINE_METHOD(java::math::BigDecimal,38,"pow","(ILjava/math/MathContext;)Ljava/math/BigDecimal;")
J2CPP_DEFINE_METHOD(java::math::BigDecimal,39,"abs","()Ljava/math/BigDecimal;")
J2CPP_DEFINE_METHOD(java::math::BigDecimal,40,"abs","(Ljava/math/MathContext;)Ljava/math/BigDecimal;")
J2CPP_DEFINE_METHOD(java::math::BigDecimal,41,"negate","()Ljava/math/BigDecimal;")
J2CPP_DEFINE_METHOD(java::math::BigDecimal,42,"negate","(Ljava/math/MathContext;)Ljava/math/BigDecimal;")
J2CPP_DEFINE_METHOD(java::math::BigDecimal,43,"plus","()Ljava/math/BigDecimal;")
J2CPP_DEFINE_METHOD(java::math::BigDecimal,44,"plus","(Ljava/math/MathContext;)Ljava/math/BigDecimal;")
J2CPP_DEFINE_METHOD(java::math::BigDecimal,45,"signum","()I")
J2CPP_DEFINE_METHOD(java::math::BigDecimal,46,"scale","()I")
J2CPP_DEFINE_METHOD(java::math::BigDecimal,47,"precision","()I")
J2CPP_DEFINE_METHOD(java::math::BigDecimal,48,"unscaledValue","()Ljava/math/BigInteger;")
J2CPP_DEFINE_METHOD(java::math::BigDecimal,49,"round","(Ljava/math/MathContext;)Ljava/math/BigDecimal;")
J2CPP_DEFINE_METHOD(java::math::BigDecimal,50,"setScale","(ILjava/math/RoundingMode;)Ljava/math/BigDecimal;")
J2CPP_DEFINE_METHOD(java::math::BigDecimal,51,"setScale","(II)Ljava/math/BigDecimal;")
J2CPP_DEFINE_METHOD(java::math::BigDecimal,52,"setScale","(I)Ljava/math/BigDecimal;")
J2CPP_DEFINE_METHOD(java::math::BigDecimal,53,"movePointLeft","(I)Ljava/math/BigDecimal;")
J2CPP_DEFINE_METHOD(java::math::BigDecimal,54,"movePointRight","(I)Ljava/math/BigDecimal;")
J2CPP_DEFINE_METHOD(java::math::BigDecimal,55,"scaleByPowerOfTen","(I)Ljava/math/BigDecimal;")
J2CPP_DEFINE_METHOD(java::math::BigDecimal,56,"stripTrailingZeros","()Ljava/math/BigDecimal;")
J2CPP_DEFINE_METHOD(java::math::BigDecimal,57,"compareTo","(Ljava/math/BigDecimal;)I")
J2CPP_DEFINE_METHOD(java::math::BigDecimal,58,"equals","(Ljava/lang/Object;)Z")
J2CPP_DEFINE_METHOD(java::math::BigDecimal,59,"min","(Ljava/math/BigDecimal;)Ljava/math/BigDecimal;")
J2CPP_DEFINE_METHOD(java::math::BigDecimal,60,"max","(Ljava/math/BigDecimal;)Ljava/math/BigDecimal;")
J2CPP_DEFINE_METHOD(java::math::BigDecimal,61,"hashCode","()I")
J2CPP_DEFINE_METHOD(java::math::BigDecimal,62,"toString","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::math::BigDecimal,63,"toEngineeringString","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::math::BigDecimal,64,"toPlainString","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::math::BigDecimal,65,"toBigInteger","()Ljava/math/BigInteger;")
J2CPP_DEFINE_METHOD(java::math::BigDecimal,66,"toBigIntegerExact","()Ljava/math/BigInteger;")
J2CPP_DEFINE_METHOD(java::math::BigDecimal,67,"longValue","()J")
J2CPP_DEFINE_METHOD(java::math::BigDecimal,68,"longValueExact","()J")
J2CPP_DEFINE_METHOD(java::math::BigDecimal,69,"intValue","()I")
J2CPP_DEFINE_METHOD(java::math::BigDecimal,70,"intValueExact","()I")
J2CPP_DEFINE_METHOD(java::math::BigDecimal,71,"shortValueExact","()S")
J2CPP_DEFINE_METHOD(java::math::BigDecimal,72,"byteValueExact","()B")
J2CPP_DEFINE_METHOD(java::math::BigDecimal,73,"floatValue","()F")
J2CPP_DEFINE_METHOD(java::math::BigDecimal,74,"doubleValue","()D")
J2CPP_DEFINE_METHOD(java::math::BigDecimal,75,"ulp","()Ljava/math/BigDecimal;")
J2CPP_DEFINE_METHOD(java::math::BigDecimal,76,"compareTo","(Ljava/lang/Object;)I")
J2CPP_DEFINE_METHOD(java::math::BigDecimal,77,"<clinit>","()V")
J2CPP_DEFINE_FIELD(java::math::BigDecimal,0,"ZERO","Ljava/math/BigDecimal;")
J2CPP_DEFINE_FIELD(java::math::BigDecimal,1,"ONE","Ljava/math/BigDecimal;")
J2CPP_DEFINE_FIELD(java::math::BigDecimal,2,"TEN","Ljava/math/BigDecimal;")
J2CPP_DEFINE_FIELD(java::math::BigDecimal,3,"ROUND_UP","I")
J2CPP_DEFINE_FIELD(java::math::BigDecimal,4,"ROUND_DOWN","I")
J2CPP_DEFINE_FIELD(java::math::BigDecimal,5,"ROUND_CEILING","I")
J2CPP_DEFINE_FIELD(java::math::BigDecimal,6,"ROUND_FLOOR","I")
J2CPP_DEFINE_FIELD(java::math::BigDecimal,7,"ROUND_HALF_UP","I")
J2CPP_DEFINE_FIELD(java::math::BigDecimal,8,"ROUND_HALF_DOWN","I")
J2CPP_DEFINE_FIELD(java::math::BigDecimal,9,"ROUND_HALF_EVEN","I")
J2CPP_DEFINE_FIELD(java::math::BigDecimal,10,"ROUND_UNNECESSARY","I")

} //namespace j2cpp

#endif //J2CPP_JAVA_MATH_BIGDECIMAL_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
