/*================================================================================
  code generated by: java2cpp
  author: Zoran Angelov, mailto://baldzar@gmail.com
  class: java.util.LinkedHashMap
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_LINKEDHASHMAP_HPP_DECL
#define J2CPP_JAVA_UTIL_LINKEDHASHMAP_HPP_DECL


namespace j2cpp { namespace java { namespace util { class Map; } } }
namespace j2cpp { namespace java { namespace util { class Set; } } }
namespace j2cpp { namespace java { namespace util { class HashMap; } } }
namespace j2cpp { namespace java { namespace util { class Collection; } } }
namespace j2cpp { namespace java { namespace lang { class Object; } } }


#include <java/lang/Object.hpp>
#include <java/util/Collection.hpp>
#include <java/util/HashMap.hpp>
#include <java/util/Map.hpp>
#include <java/util/Set.hpp>


namespace j2cpp {

namespace java { namespace util {

	class LinkedHashMap;
	class LinkedHashMap
		: public object<LinkedHashMap>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_METHOD(12)

		explicit LinkedHashMap(jobject jobj)
		: object<LinkedHashMap>(jobj)
		{
		}

		operator local_ref<java::util::HashMap>() const;


		LinkedHashMap();
		LinkedHashMap(jint);
		LinkedHashMap(jint, jfloat);
		LinkedHashMap(jint, jfloat, jboolean);
		LinkedHashMap(local_ref< java::util::Map > const&);
		local_ref< java::lang::Object > get(local_ref< java::lang::Object >  const&);
		local_ref< java::lang::Object > put(local_ref< java::lang::Object >  const&, local_ref< java::lang::Object >  const&);
		local_ref< java::util::Set > entrySet();
		local_ref< java::util::Set > keySet();
		local_ref< java::util::Collection > values();
		local_ref< java::lang::Object > remove(local_ref< java::lang::Object >  const&);
		void clear();
	}; //class LinkedHashMap

} //namespace util
} //namespace java

} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_LINKEDHASHMAP_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_LINKEDHASHMAP_HPP_IMPL
#define J2CPP_JAVA_UTIL_LINKEDHASHMAP_HPP_IMPL

namespace j2cpp {



java::util::LinkedHashMap::operator local_ref<java::util::HashMap>() const
{
	return local_ref<java::util::HashMap>(get_jobject());
}


java::util::LinkedHashMap::LinkedHashMap()
: object<java::util::LinkedHashMap>(
	call_new_object<
		java::util::LinkedHashMap::J2CPP_CLASS_NAME,
		java::util::LinkedHashMap::J2CPP_METHOD_NAME(0),
		java::util::LinkedHashMap::J2CPP_METHOD_SIGNATURE(0)>
	()
)
{
}



java::util::LinkedHashMap::LinkedHashMap(jint a0)
: object<java::util::LinkedHashMap>(
	call_new_object<
		java::util::LinkedHashMap::J2CPP_CLASS_NAME,
		java::util::LinkedHashMap::J2CPP_METHOD_NAME(1),
		java::util::LinkedHashMap::J2CPP_METHOD_SIGNATURE(1)>
	(a0)
)
{
}



java::util::LinkedHashMap::LinkedHashMap(jint a0, jfloat a1)
: object<java::util::LinkedHashMap>(
	call_new_object<
		java::util::LinkedHashMap::J2CPP_CLASS_NAME,
		java::util::LinkedHashMap::J2CPP_METHOD_NAME(2),
		java::util::LinkedHashMap::J2CPP_METHOD_SIGNATURE(2)>
	(a0, a1)
)
{
}



java::util::LinkedHashMap::LinkedHashMap(jint a0, jfloat a1, jboolean a2)
: object<java::util::LinkedHashMap>(
	call_new_object<
		java::util::LinkedHashMap::J2CPP_CLASS_NAME,
		java::util::LinkedHashMap::J2CPP_METHOD_NAME(3),
		java::util::LinkedHashMap::J2CPP_METHOD_SIGNATURE(3)>
	(a0, a1, a2)
)
{
}



java::util::LinkedHashMap::LinkedHashMap(local_ref< java::util::Map > const &a0)
: object<java::util::LinkedHashMap>(
	call_new_object<
		java::util::LinkedHashMap::J2CPP_CLASS_NAME,
		java::util::LinkedHashMap::J2CPP_METHOD_NAME(4),
		java::util::LinkedHashMap::J2CPP_METHOD_SIGNATURE(4)>
	(a0)
)
{
}


local_ref< java::lang::Object > java::util::LinkedHashMap::get(local_ref< java::lang::Object > const &a0)
{
	return call_method<
		java::util::LinkedHashMap::J2CPP_CLASS_NAME,
		java::util::LinkedHashMap::J2CPP_METHOD_NAME(5),
		java::util::LinkedHashMap::J2CPP_METHOD_SIGNATURE(5), 
		local_ref< java::lang::Object > >
	(get_jobject(), a0);
}

local_ref< java::lang::Object > java::util::LinkedHashMap::put(local_ref< java::lang::Object > const &a0, local_ref< java::lang::Object > const &a1)
{
	return call_method<
		java::util::LinkedHashMap::J2CPP_CLASS_NAME,
		java::util::LinkedHashMap::J2CPP_METHOD_NAME(6),
		java::util::LinkedHashMap::J2CPP_METHOD_SIGNATURE(6), 
		local_ref< java::lang::Object > >
	(get_jobject(), a0, a1);
}

local_ref< java::util::Set > java::util::LinkedHashMap::entrySet()
{
	return call_method<
		java::util::LinkedHashMap::J2CPP_CLASS_NAME,
		java::util::LinkedHashMap::J2CPP_METHOD_NAME(7),
		java::util::LinkedHashMap::J2CPP_METHOD_SIGNATURE(7), 
		local_ref< java::util::Set > >
	(get_jobject());
}

local_ref< java::util::Set > java::util::LinkedHashMap::keySet()
{
	return call_method<
		java::util::LinkedHashMap::J2CPP_CLASS_NAME,
		java::util::LinkedHashMap::J2CPP_METHOD_NAME(8),
		java::util::LinkedHashMap::J2CPP_METHOD_SIGNATURE(8), 
		local_ref< java::util::Set > >
	(get_jobject());
}

local_ref< java::util::Collection > java::util::LinkedHashMap::values()
{
	return call_method<
		java::util::LinkedHashMap::J2CPP_CLASS_NAME,
		java::util::LinkedHashMap::J2CPP_METHOD_NAME(9),
		java::util::LinkedHashMap::J2CPP_METHOD_SIGNATURE(9), 
		local_ref< java::util::Collection > >
	(get_jobject());
}

local_ref< java::lang::Object > java::util::LinkedHashMap::remove(local_ref< java::lang::Object > const &a0)
{
	return call_method<
		java::util::LinkedHashMap::J2CPP_CLASS_NAME,
		java::util::LinkedHashMap::J2CPP_METHOD_NAME(10),
		java::util::LinkedHashMap::J2CPP_METHOD_SIGNATURE(10), 
		local_ref< java::lang::Object > >
	(get_jobject(), a0);
}


void java::util::LinkedHashMap::clear()
{
	return call_method<
		java::util::LinkedHashMap::J2CPP_CLASS_NAME,
		java::util::LinkedHashMap::J2CPP_METHOD_NAME(12),
		java::util::LinkedHashMap::J2CPP_METHOD_SIGNATURE(12), 
		void >
	(get_jobject());
}


J2CPP_DEFINE_CLASS(java::util::LinkedHashMap,"java/util/LinkedHashMap")
J2CPP_DEFINE_METHOD(java::util::LinkedHashMap,0,"<init>","()V")
J2CPP_DEFINE_METHOD(java::util::LinkedHashMap,1,"<init>","(I)V")
J2CPP_DEFINE_METHOD(java::util::LinkedHashMap,2,"<init>","(IF)V")
J2CPP_DEFINE_METHOD(java::util::LinkedHashMap,3,"<init>","(IFZ)V")
J2CPP_DEFINE_METHOD(java::util::LinkedHashMap,4,"<init>","(Ljava/util/Map;)V")
J2CPP_DEFINE_METHOD(java::util::LinkedHashMap,5,"get","(Ljava/lang/Object;)Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(java::util::LinkedHashMap,6,"put","(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(java::util::LinkedHashMap,7,"entrySet","()Ljava/util/Set;")
J2CPP_DEFINE_METHOD(java::util::LinkedHashMap,8,"keySet","()Ljava/util/Set;")
J2CPP_DEFINE_METHOD(java::util::LinkedHashMap,9,"values","()Ljava/util/Collection;")
J2CPP_DEFINE_METHOD(java::util::LinkedHashMap,10,"remove","(Ljava/lang/Object;)Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(java::util::LinkedHashMap,11,"removeEldestEntry","(Ljava/util/Map$Entry;)Z")
J2CPP_DEFINE_METHOD(java::util::LinkedHashMap,12,"clear","()V")

} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_LINKEDHASHMAP_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
