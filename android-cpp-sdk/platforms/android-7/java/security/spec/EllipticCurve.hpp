/*================================================================================
  code generated by: java2cpp
  class: java.security.spec.EllipticCurve
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_SECURITY_SPEC_ELLIPTICCURVE_HPP_DECL
#define J2CPP_JAVA_SECURITY_SPEC_ELLIPTICCURVE_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace math { class BigInteger; } } }
namespace j2cpp { namespace java { namespace security { namespace spec { class ECField; } } } }


#include <java/lang/Object.hpp>
#include <java/math/BigInteger.hpp>
#include <java/security/spec/ECField.hpp>


namespace j2cpp {

namespace java { namespace security { namespace spec {

	class EllipticCurve;
	class EllipticCurve
		: public cpp_object<EllipticCurve>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)

		EllipticCurve(jobject jobj)
		: cpp_object<EllipticCurve>(jobj)
		{
		}

		local_ref< java::math::BigInteger > getA();
		local_ref< java::math::BigInteger > getB();
		local_ref< java::security::spec::ECField > getField();
		local_ref< cpp_byte_array<1> > getSeed();
		cpp_boolean equals(local_ref< java::lang::Object > const&);
		cpp_int hashCode();
	}; //class EllipticCurve

} //namespace spec
} //namespace security
} //namespace java


} //namespace j2cpp

#endif //J2CPP_JAVA_SECURITY_SPEC_ELLIPTICCURVE_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_SECURITY_SPEC_ELLIPTICCURVE_HPP_IMPL
#define J2CPP_JAVA_SECURITY_SPEC_ELLIPTICCURVE_HPP_IMPL

namespace j2cpp {


template <>
local_ref< java::security::spec::EllipticCurve > create< java::security::spec::EllipticCurve>(local_ref< java::security::spec::ECField > const &a0, local_ref< java::math::BigInteger > const &a1, local_ref< java::math::BigInteger > const &a2, local_ref< cpp_byte_array<1> > const &a3)
{
	return local_ref< java::security::spec::EllipticCurve >(
		environment::get().get_jenv()->NewObject(
			get_class<java::security::spec::EllipticCurve::J2CPP_CLASS_NAME>(),
			get_method_id<java::security::spec::EllipticCurve::J2CPP_CLASS_NAME, java::security::spec::EllipticCurve::J2CPP_METHOD_NAME(0), java::security::spec::EllipticCurve::J2CPP_METHOD_SIGNATURE(0), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype(), a3.get_jtype()
		)
	);
}

template <>
local_ref< java::security::spec::EllipticCurve > create< java::security::spec::EllipticCurve>(local_ref< java::security::spec::ECField > const &a0, local_ref< java::math::BigInteger > const &a1, local_ref< java::math::BigInteger > const &a2)
{
	return local_ref< java::security::spec::EllipticCurve >(
		environment::get().get_jenv()->NewObject(
			get_class<java::security::spec::EllipticCurve::J2CPP_CLASS_NAME>(),
			get_method_id<java::security::spec::EllipticCurve::J2CPP_CLASS_NAME, java::security::spec::EllipticCurve::J2CPP_METHOD_NAME(1), java::security::spec::EllipticCurve::J2CPP_METHOD_SIGNATURE(1), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

local_ref< java::math::BigInteger > java::security::spec::EllipticCurve::getA()
{
	return local_ref< java::math::BigInteger >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>()
		)
	);
}

local_ref< java::math::BigInteger > java::security::spec::EllipticCurve::getB()
{
	return local_ref< java::math::BigInteger >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>()
		)
	);
}

local_ref< java::security::spec::ECField > java::security::spec::EllipticCurve::getField()
{
	return local_ref< java::security::spec::ECField >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>()
		)
	);
}

local_ref< cpp_byte_array<1> > java::security::spec::EllipticCurve::getSeed()
{
	return local_ref< cpp_byte_array<1> >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>()
		)
	);
}

cpp_boolean java::security::spec::EllipticCurve::equals(local_ref< java::lang::Object > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int java::security::spec::EllipticCurve::hashCode()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(7), J2CPP_METHOD_SIGNATURE(7), false>()
		)
	);
}


J2CPP_DEFINE_CLASS(java::security::spec::EllipticCurve,"java/security/spec/EllipticCurve")
J2CPP_DEFINE_METHOD(java::security::spec::EllipticCurve,0,"<init>","(Ljava/security/spec/ECField;Ljava/math/BigInteger;Ljava/math/BigInteger;[B)V")
J2CPP_DEFINE_METHOD(java::security::spec::EllipticCurve,1,"<init>","(Ljava/security/spec/ECField;Ljava/math/BigInteger;Ljava/math/BigInteger;)V")
J2CPP_DEFINE_METHOD(java::security::spec::EllipticCurve,2,"getA","()Ljava/math/BigInteger;")
J2CPP_DEFINE_METHOD(java::security::spec::EllipticCurve,3,"getB","()Ljava/math/BigInteger;")
J2CPP_DEFINE_METHOD(java::security::spec::EllipticCurve,4,"getField","()Ljava/security/spec/ECField;")
J2CPP_DEFINE_METHOD(java::security::spec::EllipticCurve,5,"getSeed","()[B")
J2CPP_DEFINE_METHOD(java::security::spec::EllipticCurve,6,"equals","(Ljava/lang/Object;)Z")
J2CPP_DEFINE_METHOD(java::security::spec::EllipticCurve,7,"hashCode","()I")

} //namespace j2cpp

#endif //J2CPP_JAVA_SECURITY_SPEC_ELLIPTICCURVE_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
