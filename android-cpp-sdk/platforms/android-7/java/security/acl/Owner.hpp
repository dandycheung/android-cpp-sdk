/*================================================================================
  code generated by: java2cpp
  class: java.security.acl.Owner
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_SECURITY_ACL_OWNER_HPP_DECL
#define J2CPP_JAVA_SECURITY_ACL_OWNER_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace security { class Principal; } } }


#include <java/lang/Object.hpp>
#include <java/security/Principal.hpp>


namespace j2cpp {

namespace java { namespace security { namespace acl {

	class Owner;
	class Owner
		: public cpp_object<Owner>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)

		explicit Owner(jobject jobj)
		: cpp_object<Owner>(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;


		cpp_boolean addOwner(local_ref< java::security::Principal > const&, local_ref< java::security::Principal > const&);
		cpp_boolean deleteOwner(local_ref< java::security::Principal > const&, local_ref< java::security::Principal > const&);
		cpp_boolean isOwner(local_ref< java::security::Principal > const&);
	}; //class Owner

} //namespace acl
} //namespace security
} //namespace java

} //namespace j2cpp

#endif //J2CPP_JAVA_SECURITY_ACL_OWNER_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_SECURITY_ACL_OWNER_HPP_IMPL
#define J2CPP_JAVA_SECURITY_ACL_OWNER_HPP_IMPL

namespace j2cpp {



java::security::acl::Owner::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jtype());
}

cpp_boolean java::security::acl::Owner::addOwner(local_ref< java::security::Principal > const &a0, local_ref< java::security::Principal > const &a1)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(0), J2CPP_METHOD_SIGNATURE(0), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_boolean java::security::acl::Owner::deleteOwner(local_ref< java::security::Principal > const &a0, local_ref< java::security::Principal > const &a1)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_boolean java::security::acl::Owner::isOwner(local_ref< java::security::Principal > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>(),
			a0.get_jtype()
		)
	);
}


J2CPP_DEFINE_CLASS(java::security::acl::Owner,"java/security/acl/Owner")
J2CPP_DEFINE_METHOD(java::security::acl::Owner,0,"addOwner","(Ljava/security/Principal;Ljava/security/Principal;)Z")
J2CPP_DEFINE_METHOD(java::security::acl::Owner,1,"deleteOwner","(Ljava/security/Principal;Ljava/security/Principal;)Z")
J2CPP_DEFINE_METHOD(java::security::acl::Owner,2,"isOwner","(Ljava/security/Principal;)Z")

} //namespace j2cpp

#endif //J2CPP_JAVA_SECURITY_ACL_OWNER_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
