/*================================================================================
  code generated by: java2cpp
  class: java.security.acl.Acl
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_SECURITY_ACL_ACL_HPP_DECL
#define J2CPP_JAVA_SECURITY_ACL_ACL_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace security { namespace acl { class AclEntry; } } } }
namespace j2cpp { namespace java { namespace security { namespace acl { class Owner; } } } }
namespace j2cpp { namespace java { namespace security { namespace acl { class Permission; } } } }
namespace j2cpp { namespace java { namespace security { class Principal; } } }
namespace j2cpp { namespace java { namespace util { class Enumeration; } } }


#include <java/lang/Object.hpp>
#include <java/lang/String.hpp>
#include <java/security/Principal.hpp>
#include <java/security/acl/AclEntry.hpp>
#include <java/security/acl/Owner.hpp>
#include <java/security/acl/Permission.hpp>
#include <java/util/Enumeration.hpp>


namespace j2cpp {

namespace java { namespace security { namespace acl {

	class Acl;
	class Acl
		: public cpp_object<Acl>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)

		explicit Acl(jobject jobj)
		: cpp_object<Acl>(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;
		operator local_ref<java::security::acl::Owner>() const;


		void setName(local_ref< java::security::Principal > const&, local_ref< java::lang::String > const&);
		local_ref< java::lang::String > getName();
		cpp_boolean addEntry(local_ref< java::security::Principal > const&, local_ref< java::security::acl::AclEntry > const&);
		cpp_boolean removeEntry(local_ref< java::security::Principal > const&, local_ref< java::security::acl::AclEntry > const&);
		local_ref< java::util::Enumeration > getPermissions(local_ref< java::security::Principal > const&);
		local_ref< java::util::Enumeration > entries();
		cpp_boolean checkPermission(local_ref< java::security::Principal > const&, local_ref< java::security::acl::Permission > const&);
		local_ref< java::lang::String > toString();
	}; //class Acl

} //namespace acl
} //namespace security
} //namespace java

} //namespace j2cpp

#endif //J2CPP_JAVA_SECURITY_ACL_ACL_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_SECURITY_ACL_ACL_HPP_IMPL
#define J2CPP_JAVA_SECURITY_ACL_ACL_HPP_IMPL

namespace j2cpp {



java::security::acl::Acl::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jtype());
}

java::security::acl::Acl::operator local_ref<java::security::acl::Owner>() const
{
	return local_ref<java::security::acl::Owner>(get_jtype());
}

void java::security::acl::Acl::setName(local_ref< java::security::Principal > const &a0, local_ref< java::lang::String > const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(0), J2CPP_METHOD_SIGNATURE(0), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< java::lang::String > java::security::acl::Acl::getName()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), false>()
		)
	);
}

cpp_boolean java::security::acl::Acl::addEntry(local_ref< java::security::Principal > const &a0, local_ref< java::security::acl::AclEntry > const &a1)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_boolean java::security::acl::Acl::removeEntry(local_ref< java::security::Principal > const &a0, local_ref< java::security::acl::AclEntry > const &a1)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< java::util::Enumeration > java::security::acl::Acl::getPermissions(local_ref< java::security::Principal > const &a0)
{
	return local_ref< java::util::Enumeration >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::util::Enumeration > java::security::acl::Acl::entries()
{
	return local_ref< java::util::Enumeration >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>()
		)
	);
}

cpp_boolean java::security::acl::Acl::checkPermission(local_ref< java::security::Principal > const &a0, local_ref< java::security::acl::Permission > const &a1)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< java::lang::String > java::security::acl::Acl::toString()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(7), J2CPP_METHOD_SIGNATURE(7), false>()
		)
	);
}


J2CPP_DEFINE_CLASS(java::security::acl::Acl,"java/security/acl/Acl")
J2CPP_DEFINE_METHOD(java::security::acl::Acl,0,"setName","(Ljava/security/Principal;Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(java::security::acl::Acl,1,"getName","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::security::acl::Acl,2,"addEntry","(Ljava/security/Principal;Ljava/security/acl/AclEntry;)Z")
J2CPP_DEFINE_METHOD(java::security::acl::Acl,3,"removeEntry","(Ljava/security/Principal;Ljava/security/acl/AclEntry;)Z")
J2CPP_DEFINE_METHOD(java::security::acl::Acl,4,"getPermissions","(Ljava/security/Principal;)Ljava/util/Enumeration;")
J2CPP_DEFINE_METHOD(java::security::acl::Acl,5,"entries","()Ljava/util/Enumeration;")
J2CPP_DEFINE_METHOD(java::security::acl::Acl,6,"checkPermission","(Ljava/security/Principal;Ljava/security/acl/Permission;)Z")
J2CPP_DEFINE_METHOD(java::security::acl::Acl,7,"toString","()Ljava/lang/String;")

} //namespace j2cpp

#endif //J2CPP_JAVA_SECURITY_ACL_ACL_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
