/*================================================================================
  code generated by: java2cpp
  class: java.security.CodeSigner
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_SECURITY_CODESIGNER_HPP_DECL
#define J2CPP_JAVA_SECURITY_CODESIGNER_HPP_DECL


namespace j2cpp { namespace java { namespace io { class Serializable; } } }
namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace security { namespace cert { class CertPath; } } } }
namespace j2cpp { namespace java { namespace security { class Timestamp; } } }


#include <java/io/Serializable.hpp>
#include <java/lang/Object.hpp>
#include <java/lang/String.hpp>
#include <java/security/Timestamp.hpp>
#include <java/security/cert/CertPath.hpp>


namespace j2cpp {

namespace java { namespace security {

	class CodeSigner;
	class CodeSigner
		: public cpp_object<CodeSigner>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)

		explicit CodeSigner(jobject jobj)
		: cpp_object<CodeSigner>(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;
		operator local_ref<java::io::Serializable>() const;


		CodeSigner(local_ref< java::security::cert::CertPath > const&, local_ref< java::security::Timestamp > const&);
		cpp_boolean equals(local_ref< java::lang::Object > const&);
		local_ref< java::security::cert::CertPath > getSignerCertPath();
		local_ref< java::security::Timestamp > getTimestamp();
		cpp_int hashCode();
		local_ref< java::lang::String > toString();
	}; //class CodeSigner

} //namespace security
} //namespace java

} //namespace j2cpp

#endif //J2CPP_JAVA_SECURITY_CODESIGNER_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_SECURITY_CODESIGNER_HPP_IMPL
#define J2CPP_JAVA_SECURITY_CODESIGNER_HPP_IMPL

namespace j2cpp {



java::security::CodeSigner::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jtype());
}

java::security::CodeSigner::operator local_ref<java::io::Serializable>() const
{
	return local_ref<java::io::Serializable>(get_jtype());
}


java::security::CodeSigner::CodeSigner(local_ref< java::security::cert::CertPath > const &a0, local_ref< java::security::Timestamp > const &a1)
: cpp_object<java::security::CodeSigner>(
	environment::get().get_jenv()->NewObject(
		get_class<java::security::CodeSigner::J2CPP_CLASS_NAME>(),
		get_method_id<java::security::CodeSigner::J2CPP_CLASS_NAME, java::security::CodeSigner::J2CPP_METHOD_NAME(0), java::security::CodeSigner::J2CPP_METHOD_SIGNATURE(0), false>(),
		a0.get_jtype(), a1.get_jtype()
	)
)
{
}


cpp_boolean java::security::CodeSigner::equals(local_ref< java::lang::Object > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::security::cert::CertPath > java::security::CodeSigner::getSignerCertPath()
{
	return local_ref< java::security::cert::CertPath >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>()
		)
	);
}

local_ref< java::security::Timestamp > java::security::CodeSigner::getTimestamp()
{
	return local_ref< java::security::Timestamp >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>()
		)
	);
}

cpp_int java::security::CodeSigner::hashCode()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>()
		)
	);
}

local_ref< java::lang::String > java::security::CodeSigner::toString()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>()
		)
	);
}


J2CPP_DEFINE_CLASS(java::security::CodeSigner,"java/security/CodeSigner")
J2CPP_DEFINE_METHOD(java::security::CodeSigner,0,"<init>","(Ljava/security/cert/CertPath;Ljava/security/Timestamp;)V")
J2CPP_DEFINE_METHOD(java::security::CodeSigner,1,"equals","(Ljava/lang/Object;)Z")
J2CPP_DEFINE_METHOD(java::security::CodeSigner,2,"getSignerCertPath","()Ljava/security/cert/CertPath;")
J2CPP_DEFINE_METHOD(java::security::CodeSigner,3,"getTimestamp","()Ljava/security/Timestamp;")
J2CPP_DEFINE_METHOD(java::security::CodeSigner,4,"hashCode","()I")
J2CPP_DEFINE_METHOD(java::security::CodeSigner,5,"toString","()Ljava/lang/String;")

} //namespace j2cpp

#endif //J2CPP_JAVA_SECURITY_CODESIGNER_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
