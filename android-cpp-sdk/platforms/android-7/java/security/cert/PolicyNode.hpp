/*================================================================================
  code generated by: java2cpp
  class: java.security.cert.PolicyNode
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_SECURITY_CERT_POLICYNODE_HPP_DECL
#define J2CPP_JAVA_SECURITY_CERT_POLICYNODE_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace util { class Set; } } }
namespace j2cpp { namespace java { namespace util { class Iterator; } } }


#include <java/lang/Object.hpp>
#include <java/lang/String.hpp>
#include <java/util/Iterator.hpp>
#include <java/util/Set.hpp>


namespace j2cpp {

namespace java { namespace security { namespace cert {

	class PolicyNode;
	class PolicyNode
		: public cpp_object<PolicyNode>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)

		explicit PolicyNode(jobject jobj)
		: cpp_object<PolicyNode>(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;


		local_ref< java::util::Iterator > getChildren();
		cpp_int getDepth();
		local_ref< java::util::Set > getExpectedPolicies();
		local_ref< java::security::cert::PolicyNode > getParent();
		local_ref< java::util::Set > getPolicyQualifiers();
		local_ref< java::lang::String > getValidPolicy();
		cpp_boolean isCritical();
	}; //class PolicyNode

} //namespace cert
} //namespace security
} //namespace java

} //namespace j2cpp

#endif //J2CPP_JAVA_SECURITY_CERT_POLICYNODE_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_SECURITY_CERT_POLICYNODE_HPP_IMPL
#define J2CPP_JAVA_SECURITY_CERT_POLICYNODE_HPP_IMPL

namespace j2cpp {



java::security::cert::PolicyNode::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jtype());
}

local_ref< java::util::Iterator > java::security::cert::PolicyNode::getChildren()
{
	return local_ref< java::util::Iterator >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(0), J2CPP_METHOD_SIGNATURE(0), false>()
		)
	);
}

cpp_int java::security::cert::PolicyNode::getDepth()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), false>()
		)
	);
}

local_ref< java::util::Set > java::security::cert::PolicyNode::getExpectedPolicies()
{
	return local_ref< java::util::Set >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>()
		)
	);
}

local_ref< java::security::cert::PolicyNode > java::security::cert::PolicyNode::getParent()
{
	return local_ref< java::security::cert::PolicyNode >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>()
		)
	);
}

local_ref< java::util::Set > java::security::cert::PolicyNode::getPolicyQualifiers()
{
	return local_ref< java::util::Set >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>()
		)
	);
}

local_ref< java::lang::String > java::security::cert::PolicyNode::getValidPolicy()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>()
		)
	);
}

cpp_boolean java::security::cert::PolicyNode::isCritical()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>()
		)
	);
}


J2CPP_DEFINE_CLASS(java::security::cert::PolicyNode,"java/security/cert/PolicyNode")
J2CPP_DEFINE_METHOD(java::security::cert::PolicyNode,0,"getChildren","()Ljava/util/Iterator;")
J2CPP_DEFINE_METHOD(java::security::cert::PolicyNode,1,"getDepth","()I")
J2CPP_DEFINE_METHOD(java::security::cert::PolicyNode,2,"getExpectedPolicies","()Ljava/util/Set;")
J2CPP_DEFINE_METHOD(java::security::cert::PolicyNode,3,"getParent","()Ljava/security/cert/PolicyNode;")
J2CPP_DEFINE_METHOD(java::security::cert::PolicyNode,4,"getPolicyQualifiers","()Ljava/util/Set;")
J2CPP_DEFINE_METHOD(java::security::cert::PolicyNode,5,"getValidPolicy","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::security::cert::PolicyNode,6,"isCritical","()Z")

} //namespace j2cpp

#endif //J2CPP_JAVA_SECURITY_CERT_POLICYNODE_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
