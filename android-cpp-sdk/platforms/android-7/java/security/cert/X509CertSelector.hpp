/*================================================================================
  code generated by: java2cpp
  class: java.security.cert.X509CertSelector
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_SECURITY_CERT_X509CERTSELECTOR_HPP_DECL
#define J2CPP_JAVA_SECURITY_CERT_X509CERTSELECTOR_HPP_DECL


namespace j2cpp { namespace javax { namespace security { namespace auth { namespace x500 { class X500Principal; } } } } }
namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace math { class BigInteger; } } }
namespace j2cpp { namespace java { namespace security { class PublicKey; } } }
namespace j2cpp { namespace java { namespace security { namespace cert { class Certificate; } } } }
namespace j2cpp { namespace java { namespace security { namespace cert { class X509Certificate; } } } }
namespace j2cpp { namespace java { namespace util { class Set; } } }
namespace j2cpp { namespace java { namespace util { class Date; } } }
namespace j2cpp { namespace java { namespace util { class Collection; } } }


#include <java/lang/Object.hpp>
#include <java/lang/String.hpp>
#include <java/math/BigInteger.hpp>
#include <java/security/PublicKey.hpp>
#include <java/security/cert/Certificate.hpp>
#include <java/security/cert/X509Certificate.hpp>
#include <java/util/Collection.hpp>
#include <java/util/Date.hpp>
#include <java/util/Set.hpp>
#include <javax/security/auth/x500/X500Principal.hpp>


namespace j2cpp {

namespace java { namespace security { namespace cert {

	class X509CertSelector;
	class X509CertSelector
		: public cpp_object<X509CertSelector>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_METHOD(12)
		J2CPP_DECLARE_METHOD(13)
		J2CPP_DECLARE_METHOD(14)
		J2CPP_DECLARE_METHOD(15)
		J2CPP_DECLARE_METHOD(16)
		J2CPP_DECLARE_METHOD(17)
		J2CPP_DECLARE_METHOD(18)
		J2CPP_DECLARE_METHOD(19)
		J2CPP_DECLARE_METHOD(20)
		J2CPP_DECLARE_METHOD(21)
		J2CPP_DECLARE_METHOD(22)
		J2CPP_DECLARE_METHOD(23)
		J2CPP_DECLARE_METHOD(24)
		J2CPP_DECLARE_METHOD(25)
		J2CPP_DECLARE_METHOD(26)
		J2CPP_DECLARE_METHOD(27)
		J2CPP_DECLARE_METHOD(28)
		J2CPP_DECLARE_METHOD(29)
		J2CPP_DECLARE_METHOD(30)
		J2CPP_DECLARE_METHOD(31)
		J2CPP_DECLARE_METHOD(32)
		J2CPP_DECLARE_METHOD(33)
		J2CPP_DECLARE_METHOD(34)
		J2CPP_DECLARE_METHOD(35)
		J2CPP_DECLARE_METHOD(36)
		J2CPP_DECLARE_METHOD(37)
		J2CPP_DECLARE_METHOD(38)
		J2CPP_DECLARE_METHOD(39)
		J2CPP_DECLARE_METHOD(40)
		J2CPP_DECLARE_METHOD(41)
		J2CPP_DECLARE_METHOD(42)
		J2CPP_DECLARE_METHOD(43)
		J2CPP_DECLARE_METHOD(44)
		J2CPP_DECLARE_METHOD(45)
		J2CPP_DECLARE_METHOD(46)
		J2CPP_DECLARE_METHOD(47)
		J2CPP_DECLARE_METHOD(48)
		J2CPP_DECLARE_METHOD(49)
		J2CPP_DECLARE_METHOD(50)
		J2CPP_DECLARE_METHOD(51)
		J2CPP_DECLARE_METHOD(52)

		X509CertSelector(jobject jobj)
		: cpp_object<X509CertSelector>(jobj)
		{
		}

		void setCertificate(local_ref< java::security::cert::X509Certificate > const&);
		local_ref< java::security::cert::X509Certificate > getCertificate();
		void setSerialNumber(local_ref< java::math::BigInteger > const&);
		local_ref< java::math::BigInteger > getSerialNumber();
		void setIssuer(local_ref< javax::security::auth::x500::X500Principal > const&);
		local_ref< javax::security::auth::x500::X500Principal > getIssuer();
		void setIssuer(local_ref< java::lang::String > const&);
		local_ref< java::lang::String > getIssuerAsString();
		void setIssuer(local_ref< cpp_byte_array<1> > const&);
		local_ref< cpp_byte_array<1> > getIssuerAsBytes();
		void setSubject(local_ref< javax::security::auth::x500::X500Principal > const&);
		local_ref< javax::security::auth::x500::X500Principal > getSubject();
		void setSubject(local_ref< java::lang::String > const&);
		local_ref< java::lang::String > getSubjectAsString();
		void setSubject(local_ref< cpp_byte_array<1> > const&);
		local_ref< cpp_byte_array<1> > getSubjectAsBytes();
		void setSubjectKeyIdentifier(local_ref< cpp_byte_array<1> > const&);
		local_ref< cpp_byte_array<1> > getSubjectKeyIdentifier();
		void setAuthorityKeyIdentifier(local_ref< cpp_byte_array<1> > const&);
		local_ref< cpp_byte_array<1> > getAuthorityKeyIdentifier();
		void setCertificateValid(local_ref< java::util::Date > const&);
		local_ref< java::util::Date > getCertificateValid();
		void setPrivateKeyValid(local_ref< java::util::Date > const&);
		local_ref< java::util::Date > getPrivateKeyValid();
		void setSubjectPublicKeyAlgID(local_ref< java::lang::String > const&);
		local_ref< java::lang::String > getSubjectPublicKeyAlgID();
		void setSubjectPublicKey(local_ref< java::security::PublicKey > const&);
		void setSubjectPublicKey(local_ref< cpp_byte_array<1> > const&);
		local_ref< java::security::PublicKey > getSubjectPublicKey();
		void setKeyUsage(local_ref< cpp_boolean_array<1> > const&);
		local_ref< cpp_boolean_array<1> > getKeyUsage();
		void setExtendedKeyUsage(local_ref< java::util::Set > const&);
		local_ref< java::util::Set > getExtendedKeyUsage();
		void setMatchAllSubjectAltNames(cpp_boolean const&);
		cpp_boolean getMatchAllSubjectAltNames();
		void setSubjectAlternativeNames(local_ref< java::util::Collection > const&);
		void addSubjectAlternativeName(cpp_int const&, local_ref< java::lang::String > const&);
		void addSubjectAlternativeName(cpp_int const&, local_ref< cpp_byte_array<1> > const&);
		local_ref< java::util::Collection > getSubjectAlternativeNames();
		void setNameConstraints(local_ref< cpp_byte_array<1> > const&);
		local_ref< cpp_byte_array<1> > getNameConstraints();
		void setBasicConstraints(cpp_int const&);
		cpp_int getBasicConstraints();
		void setPolicy(local_ref< java::util::Set > const&);
		local_ref< java::util::Set > getPolicy();
		void setPathToNames(local_ref< java::util::Collection > const&);
		void addPathToName(cpp_int const&, local_ref< java::lang::String > const&);
		void addPathToName(cpp_int const&, local_ref< cpp_byte_array<1> > const&);
		local_ref< java::util::Collection > getPathToNames();
		local_ref< java::lang::String > toString();
		cpp_boolean match(local_ref< java::security::cert::Certificate > const&);
		local_ref< java::lang::Object > clone();
	}; //class X509CertSelector

} //namespace cert
} //namespace security
} //namespace java


} //namespace j2cpp

#endif //J2CPP_JAVA_SECURITY_CERT_X509CERTSELECTOR_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_SECURITY_CERT_X509CERTSELECTOR_HPP_IMPL
#define J2CPP_JAVA_SECURITY_CERT_X509CERTSELECTOR_HPP_IMPL

namespace j2cpp {


template <>
local_ref< java::security::cert::X509CertSelector > create< java::security::cert::X509CertSelector>()
{
	return local_ref< java::security::cert::X509CertSelector >(
		environment::get().get_jenv()->NewObject(
			get_class<java::security::cert::X509CertSelector::J2CPP_CLASS_NAME>(),
			get_method_id<java::security::cert::X509CertSelector::J2CPP_CLASS_NAME, java::security::cert::X509CertSelector::J2CPP_METHOD_NAME(0), java::security::cert::X509CertSelector::J2CPP_METHOD_SIGNATURE(0), false>()
		)
	);
}

void java::security::cert::X509CertSelector::setCertificate(local_ref< java::security::cert::X509Certificate > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::security::cert::X509Certificate > java::security::cert::X509CertSelector::getCertificate()
{
	return local_ref< java::security::cert::X509Certificate >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>()
		)
	);
}

void java::security::cert::X509CertSelector::setSerialNumber(local_ref< java::math::BigInteger > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::math::BigInteger > java::security::cert::X509CertSelector::getSerialNumber()
{
	return local_ref< java::math::BigInteger >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>()
		)
	);
}

void java::security::cert::X509CertSelector::setIssuer(local_ref< javax::security::auth::x500::X500Principal > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< javax::security::auth::x500::X500Principal > java::security::cert::X509CertSelector::getIssuer()
{
	return local_ref< javax::security::auth::x500::X500Principal >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>()
		)
	);
}

void java::security::cert::X509CertSelector::setIssuer(local_ref< java::lang::String > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(7), J2CPP_METHOD_SIGNATURE(7), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::String > java::security::cert::X509CertSelector::getIssuerAsString()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(8), J2CPP_METHOD_SIGNATURE(8), false>()
		)
	);
}

void java::security::cert::X509CertSelector::setIssuer(local_ref< cpp_byte_array<1> > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(9), J2CPP_METHOD_SIGNATURE(9), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< cpp_byte_array<1> > java::security::cert::X509CertSelector::getIssuerAsBytes()
{
	return local_ref< cpp_byte_array<1> >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(10), J2CPP_METHOD_SIGNATURE(10), false>()
		)
	);
}

void java::security::cert::X509CertSelector::setSubject(local_ref< javax::security::auth::x500::X500Principal > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(11), J2CPP_METHOD_SIGNATURE(11), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< javax::security::auth::x500::X500Principal > java::security::cert::X509CertSelector::getSubject()
{
	return local_ref< javax::security::auth::x500::X500Principal >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(12), J2CPP_METHOD_SIGNATURE(12), false>()
		)
	);
}

void java::security::cert::X509CertSelector::setSubject(local_ref< java::lang::String > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(13), J2CPP_METHOD_SIGNATURE(13), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::String > java::security::cert::X509CertSelector::getSubjectAsString()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(14), J2CPP_METHOD_SIGNATURE(14), false>()
		)
	);
}

void java::security::cert::X509CertSelector::setSubject(local_ref< cpp_byte_array<1> > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(15), J2CPP_METHOD_SIGNATURE(15), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< cpp_byte_array<1> > java::security::cert::X509CertSelector::getSubjectAsBytes()
{
	return local_ref< cpp_byte_array<1> >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(16), J2CPP_METHOD_SIGNATURE(16), false>()
		)
	);
}

void java::security::cert::X509CertSelector::setSubjectKeyIdentifier(local_ref< cpp_byte_array<1> > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(17), J2CPP_METHOD_SIGNATURE(17), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< cpp_byte_array<1> > java::security::cert::X509CertSelector::getSubjectKeyIdentifier()
{
	return local_ref< cpp_byte_array<1> >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(18), J2CPP_METHOD_SIGNATURE(18), false>()
		)
	);
}

void java::security::cert::X509CertSelector::setAuthorityKeyIdentifier(local_ref< cpp_byte_array<1> > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(19), J2CPP_METHOD_SIGNATURE(19), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< cpp_byte_array<1> > java::security::cert::X509CertSelector::getAuthorityKeyIdentifier()
{
	return local_ref< cpp_byte_array<1> >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(20), J2CPP_METHOD_SIGNATURE(20), false>()
		)
	);
}

void java::security::cert::X509CertSelector::setCertificateValid(local_ref< java::util::Date > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(21), J2CPP_METHOD_SIGNATURE(21), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::util::Date > java::security::cert::X509CertSelector::getCertificateValid()
{
	return local_ref< java::util::Date >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(22), J2CPP_METHOD_SIGNATURE(22), false>()
		)
	);
}

void java::security::cert::X509CertSelector::setPrivateKeyValid(local_ref< java::util::Date > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(23), J2CPP_METHOD_SIGNATURE(23), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::util::Date > java::security::cert::X509CertSelector::getPrivateKeyValid()
{
	return local_ref< java::util::Date >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(24), J2CPP_METHOD_SIGNATURE(24), false>()
		)
	);
}

void java::security::cert::X509CertSelector::setSubjectPublicKeyAlgID(local_ref< java::lang::String > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(25), J2CPP_METHOD_SIGNATURE(25), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::String > java::security::cert::X509CertSelector::getSubjectPublicKeyAlgID()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(26), J2CPP_METHOD_SIGNATURE(26), false>()
		)
	);
}

void java::security::cert::X509CertSelector::setSubjectPublicKey(local_ref< java::security::PublicKey > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(27), J2CPP_METHOD_SIGNATURE(27), false>(),
			a0.get_jtype()
		)
	);
}

void java::security::cert::X509CertSelector::setSubjectPublicKey(local_ref< cpp_byte_array<1> > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(28), J2CPP_METHOD_SIGNATURE(28), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::security::PublicKey > java::security::cert::X509CertSelector::getSubjectPublicKey()
{
	return local_ref< java::security::PublicKey >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(29), J2CPP_METHOD_SIGNATURE(29), false>()
		)
	);
}

void java::security::cert::X509CertSelector::setKeyUsage(local_ref< cpp_boolean_array<1> > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(30), J2CPP_METHOD_SIGNATURE(30), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< cpp_boolean_array<1> > java::security::cert::X509CertSelector::getKeyUsage()
{
	return local_ref< cpp_boolean_array<1> >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(31), J2CPP_METHOD_SIGNATURE(31), false>()
		)
	);
}

void java::security::cert::X509CertSelector::setExtendedKeyUsage(local_ref< java::util::Set > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(32), J2CPP_METHOD_SIGNATURE(32), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::util::Set > java::security::cert::X509CertSelector::getExtendedKeyUsage()
{
	return local_ref< java::util::Set >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(33), J2CPP_METHOD_SIGNATURE(33), false>()
		)
	);
}

void java::security::cert::X509CertSelector::setMatchAllSubjectAltNames(cpp_boolean const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(34), J2CPP_METHOD_SIGNATURE(34), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean java::security::cert::X509CertSelector::getMatchAllSubjectAltNames()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(35), J2CPP_METHOD_SIGNATURE(35), false>()
		)
	);
}

void java::security::cert::X509CertSelector::setSubjectAlternativeNames(local_ref< java::util::Collection > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(36), J2CPP_METHOD_SIGNATURE(36), false>(),
			a0.get_jtype()
		)
	);
}

void java::security::cert::X509CertSelector::addSubjectAlternativeName(cpp_int const &a0, local_ref< java::lang::String > const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(37), J2CPP_METHOD_SIGNATURE(37), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void java::security::cert::X509CertSelector::addSubjectAlternativeName(cpp_int const &a0, local_ref< cpp_byte_array<1> > const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(38), J2CPP_METHOD_SIGNATURE(38), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< java::util::Collection > java::security::cert::X509CertSelector::getSubjectAlternativeNames()
{
	return local_ref< java::util::Collection >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(39), J2CPP_METHOD_SIGNATURE(39), false>()
		)
	);
}

void java::security::cert::X509CertSelector::setNameConstraints(local_ref< cpp_byte_array<1> > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(40), J2CPP_METHOD_SIGNATURE(40), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< cpp_byte_array<1> > java::security::cert::X509CertSelector::getNameConstraints()
{
	return local_ref< cpp_byte_array<1> >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(41), J2CPP_METHOD_SIGNATURE(41), false>()
		)
	);
}

void java::security::cert::X509CertSelector::setBasicConstraints(cpp_int const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(42), J2CPP_METHOD_SIGNATURE(42), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int java::security::cert::X509CertSelector::getBasicConstraints()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(43), J2CPP_METHOD_SIGNATURE(43), false>()
		)
	);
}

void java::security::cert::X509CertSelector::setPolicy(local_ref< java::util::Set > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(44), J2CPP_METHOD_SIGNATURE(44), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::util::Set > java::security::cert::X509CertSelector::getPolicy()
{
	return local_ref< java::util::Set >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(45), J2CPP_METHOD_SIGNATURE(45), false>()
		)
	);
}

void java::security::cert::X509CertSelector::setPathToNames(local_ref< java::util::Collection > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(46), J2CPP_METHOD_SIGNATURE(46), false>(),
			a0.get_jtype()
		)
	);
}

void java::security::cert::X509CertSelector::addPathToName(cpp_int const &a0, local_ref< java::lang::String > const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(47), J2CPP_METHOD_SIGNATURE(47), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void java::security::cert::X509CertSelector::addPathToName(cpp_int const &a0, local_ref< cpp_byte_array<1> > const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(48), J2CPP_METHOD_SIGNATURE(48), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< java::util::Collection > java::security::cert::X509CertSelector::getPathToNames()
{
	return local_ref< java::util::Collection >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(49), J2CPP_METHOD_SIGNATURE(49), false>()
		)
	);
}

local_ref< java::lang::String > java::security::cert::X509CertSelector::toString()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(50), J2CPP_METHOD_SIGNATURE(50), false>()
		)
	);
}

cpp_boolean java::security::cert::X509CertSelector::match(local_ref< java::security::cert::Certificate > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(51), J2CPP_METHOD_SIGNATURE(51), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::Object > java::security::cert::X509CertSelector::clone()
{
	return local_ref< java::lang::Object >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(52), J2CPP_METHOD_SIGNATURE(52), false>()
		)
	);
}


J2CPP_DEFINE_CLASS(java::security::cert::X509CertSelector,"java/security/cert/X509CertSelector")
J2CPP_DEFINE_METHOD(java::security::cert::X509CertSelector,0,"<init>","()V")
J2CPP_DEFINE_METHOD(java::security::cert::X509CertSelector,1,"setCertificate","(Ljava/security/cert/X509Certificate;)V")
J2CPP_DEFINE_METHOD(java::security::cert::X509CertSelector,2,"getCertificate","()Ljava/security/cert/X509Certificate;")
J2CPP_DEFINE_METHOD(java::security::cert::X509CertSelector,3,"setSerialNumber","(Ljava/math/BigInteger;)V")
J2CPP_DEFINE_METHOD(java::security::cert::X509CertSelector,4,"getSerialNumber","()Ljava/math/BigInteger;")
J2CPP_DEFINE_METHOD(java::security::cert::X509CertSelector,5,"setIssuer","(Ljavax/security/auth/x500/X500Principal;)V")
J2CPP_DEFINE_METHOD(java::security::cert::X509CertSelector,6,"getIssuer","()Ljavax/security/auth/x500/X500Principal;")
J2CPP_DEFINE_METHOD(java::security::cert::X509CertSelector,7,"setIssuer","(Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(java::security::cert::X509CertSelector,8,"getIssuerAsString","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::security::cert::X509CertSelector,9,"setIssuer","([B)V")
J2CPP_DEFINE_METHOD(java::security::cert::X509CertSelector,10,"getIssuerAsBytes","()[B")
J2CPP_DEFINE_METHOD(java::security::cert::X509CertSelector,11,"setSubject","(Ljavax/security/auth/x500/X500Principal;)V")
J2CPP_DEFINE_METHOD(java::security::cert::X509CertSelector,12,"getSubject","()Ljavax/security/auth/x500/X500Principal;")
J2CPP_DEFINE_METHOD(java::security::cert::X509CertSelector,13,"setSubject","(Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(java::security::cert::X509CertSelector,14,"getSubjectAsString","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::security::cert::X509CertSelector,15,"setSubject","([B)V")
J2CPP_DEFINE_METHOD(java::security::cert::X509CertSelector,16,"getSubjectAsBytes","()[B")
J2CPP_DEFINE_METHOD(java::security::cert::X509CertSelector,17,"setSubjectKeyIdentifier","([B)V")
J2CPP_DEFINE_METHOD(java::security::cert::X509CertSelector,18,"getSubjectKeyIdentifier","()[B")
J2CPP_DEFINE_METHOD(java::security::cert::X509CertSelector,19,"setAuthorityKeyIdentifier","([B)V")
J2CPP_DEFINE_METHOD(java::security::cert::X509CertSelector,20,"getAuthorityKeyIdentifier","()[B")
J2CPP_DEFINE_METHOD(java::security::cert::X509CertSelector,21,"setCertificateValid","(Ljava/util/Date;)V")
J2CPP_DEFINE_METHOD(java::security::cert::X509CertSelector,22,"getCertificateValid","()Ljava/util/Date;")
J2CPP_DEFINE_METHOD(java::security::cert::X509CertSelector,23,"setPrivateKeyValid","(Ljava/util/Date;)V")
J2CPP_DEFINE_METHOD(java::security::cert::X509CertSelector,24,"getPrivateKeyValid","()Ljava/util/Date;")
J2CPP_DEFINE_METHOD(java::security::cert::X509CertSelector,25,"setSubjectPublicKeyAlgID","(Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(java::security::cert::X509CertSelector,26,"getSubjectPublicKeyAlgID","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::security::cert::X509CertSelector,27,"setSubjectPublicKey","(Ljava/security/PublicKey;)V")
J2CPP_DEFINE_METHOD(java::security::cert::X509CertSelector,28,"setSubjectPublicKey","([B)V")
J2CPP_DEFINE_METHOD(java::security::cert::X509CertSelector,29,"getSubjectPublicKey","()Ljava/security/PublicKey;")
J2CPP_DEFINE_METHOD(java::security::cert::X509CertSelector,30,"setKeyUsage","([Z)V")
J2CPP_DEFINE_METHOD(java::security::cert::X509CertSelector,31,"getKeyUsage","()[Z")
J2CPP_DEFINE_METHOD(java::security::cert::X509CertSelector,32,"setExtendedKeyUsage","(Ljava/util/Set;)V")
J2CPP_DEFINE_METHOD(java::security::cert::X509CertSelector,33,"getExtendedKeyUsage","()Ljava/util/Set;")
J2CPP_DEFINE_METHOD(java::security::cert::X509CertSelector,34,"setMatchAllSubjectAltNames","(Z)V")
J2CPP_DEFINE_METHOD(java::security::cert::X509CertSelector,35,"getMatchAllSubjectAltNames","()Z")
J2CPP_DEFINE_METHOD(java::security::cert::X509CertSelector,36,"setSubjectAlternativeNames","(Ljava/util/Collection;)V")
J2CPP_DEFINE_METHOD(java::security::cert::X509CertSelector,37,"addSubjectAlternativeName","(ILjava/lang/String;)V")
J2CPP_DEFINE_METHOD(java::security::cert::X509CertSelector,38,"addSubjectAlternativeName","(I[B)V")
J2CPP_DEFINE_METHOD(java::security::cert::X509CertSelector,39,"getSubjectAlternativeNames","()Ljava/util/Collection;")
J2CPP_DEFINE_METHOD(java::security::cert::X509CertSelector,40,"setNameConstraints","([B)V")
J2CPP_DEFINE_METHOD(java::security::cert::X509CertSelector,41,"getNameConstraints","()[B")
J2CPP_DEFINE_METHOD(java::security::cert::X509CertSelector,42,"setBasicConstraints","(I)V")
J2CPP_DEFINE_METHOD(java::security::cert::X509CertSelector,43,"getBasicConstraints","()I")
J2CPP_DEFINE_METHOD(java::security::cert::X509CertSelector,44,"setPolicy","(Ljava/util/Set;)V")
J2CPP_DEFINE_METHOD(java::security::cert::X509CertSelector,45,"getPolicy","()Ljava/util/Set;")
J2CPP_DEFINE_METHOD(java::security::cert::X509CertSelector,46,"setPathToNames","(Ljava/util/Collection;)V")
J2CPP_DEFINE_METHOD(java::security::cert::X509CertSelector,47,"addPathToName","(ILjava/lang/String;)V")
J2CPP_DEFINE_METHOD(java::security::cert::X509CertSelector,48,"addPathToName","(I[B)V")
J2CPP_DEFINE_METHOD(java::security::cert::X509CertSelector,49,"getPathToNames","()Ljava/util/Collection;")
J2CPP_DEFINE_METHOD(java::security::cert::X509CertSelector,50,"toString","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::security::cert::X509CertSelector,51,"match","(Ljava/security/cert/Certificate;)Z")
J2CPP_DEFINE_METHOD(java::security::cert::X509CertSelector,52,"clone","()Ljava/lang/Object;")

} //namespace j2cpp

#endif //J2CPP_JAVA_SECURITY_CERT_X509CERTSELECTOR_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
