/*================================================================================
  code generated by: java2cpp
  class: java.security.DigestOutputStream
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_SECURITY_DIGESTOUTPUTSTREAM_HPP_DECL
#define J2CPP_JAVA_SECURITY_DIGESTOUTPUTSTREAM_HPP_DECL


namespace j2cpp { namespace java { namespace io { class FilterOutputStream; } } }
namespace j2cpp { namespace java { namespace io { class OutputStream; } } }
namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace security { class MessageDigest; } } }


#include <java/io/FilterOutputStream.hpp>
#include <java/io/OutputStream.hpp>
#include <java/lang/String.hpp>
#include <java/security/MessageDigest.hpp>


namespace j2cpp {

namespace java { namespace security {

	class DigestOutputStream;
	class DigestOutputStream
		: public cpp_object<DigestOutputStream>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_FIELD(0)

		explicit DigestOutputStream(jobject jobj)
		: cpp_object<DigestOutputStream>(jobj)
		{
		}

		operator local_ref<java::io::FilterOutputStream>() const;


		DigestOutputStream(local_ref< java::io::OutputStream > const&, local_ref< java::security::MessageDigest > const&);
		local_ref< java::security::MessageDigest > getMessageDigest();
		void setMessageDigest(local_ref< java::security::MessageDigest > const&);
		void write(cpp_int const&);
		void write(local_ref< cpp_byte_array<1> > const&, cpp_int const&, cpp_int const&);
		void on(cpp_boolean const&);
		local_ref< java::lang::String > toString();

	}; //class DigestOutputStream

} //namespace security
} //namespace java

} //namespace j2cpp

#endif //J2CPP_JAVA_SECURITY_DIGESTOUTPUTSTREAM_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_SECURITY_DIGESTOUTPUTSTREAM_HPP_IMPL
#define J2CPP_JAVA_SECURITY_DIGESTOUTPUTSTREAM_HPP_IMPL

namespace j2cpp {



java::security::DigestOutputStream::operator local_ref<java::io::FilterOutputStream>() const
{
	return local_ref<java::io::FilterOutputStream>(get_jtype());
}


java::security::DigestOutputStream::DigestOutputStream(local_ref< java::io::OutputStream > const &a0, local_ref< java::security::MessageDigest > const &a1)
: cpp_object<java::security::DigestOutputStream>(
	environment::get().get_jenv()->NewObject(
		get_class<java::security::DigestOutputStream::J2CPP_CLASS_NAME>(),
		get_method_id<java::security::DigestOutputStream::J2CPP_CLASS_NAME, java::security::DigestOutputStream::J2CPP_METHOD_NAME(0), java::security::DigestOutputStream::J2CPP_METHOD_SIGNATURE(0), false>(),
		a0.get_jtype(), a1.get_jtype()
	)
)
{
}


local_ref< java::security::MessageDigest > java::security::DigestOutputStream::getMessageDigest()
{
	return local_ref< java::security::MessageDigest >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), false>()
		)
	);
}

void java::security::DigestOutputStream::setMessageDigest(local_ref< java::security::MessageDigest > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>(),
			a0.get_jtype()
		)
	);
}

void java::security::DigestOutputStream::write(cpp_int const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>(),
			a0.get_jtype()
		)
	);
}

void java::security::DigestOutputStream::write(local_ref< cpp_byte_array<1> > const &a0, cpp_int const &a1, cpp_int const &a2)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

void java::security::DigestOutputStream::on(cpp_boolean const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::String > java::security::DigestOutputStream::toString()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>()
		)
	);
}



J2CPP_DEFINE_CLASS(java::security::DigestOutputStream,"java/security/DigestOutputStream")
J2CPP_DEFINE_METHOD(java::security::DigestOutputStream,0,"<init>","(Ljava/io/OutputStream;Ljava/security/MessageDigest;)V")
J2CPP_DEFINE_METHOD(java::security::DigestOutputStream,1,"getMessageDigest","()Ljava/security/MessageDigest;")
J2CPP_DEFINE_METHOD(java::security::DigestOutputStream,2,"setMessageDigest","(Ljava/security/MessageDigest;)V")
J2CPP_DEFINE_METHOD(java::security::DigestOutputStream,3,"write","(I)V")
J2CPP_DEFINE_METHOD(java::security::DigestOutputStream,4,"write","([BII)V")
J2CPP_DEFINE_METHOD(java::security::DigestOutputStream,5,"on","(Z)V")
J2CPP_DEFINE_METHOD(java::security::DigestOutputStream,6,"toString","()Ljava/lang/String;")
J2CPP_DEFINE_FIELD(java::security::DigestOutputStream,0,"digest","Ljava/security/MessageDigest;")

} //namespace j2cpp

#endif //J2CPP_JAVA_SECURITY_DIGESTOUTPUTSTREAM_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
