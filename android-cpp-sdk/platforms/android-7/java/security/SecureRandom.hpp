/*================================================================================
  code generated by: java2cpp
  class: java.security.SecureRandom
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_SECURITY_SECURERANDOM_HPP_DECL
#define J2CPP_JAVA_SECURITY_SECURERANDOM_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace security { class Provider; } } }
namespace j2cpp { namespace java { namespace util { class Random; } } }


#include <java/lang/String.hpp>
#include <java/security/Provider.hpp>
#include <java/util/Random.hpp>


namespace j2cpp {

namespace java { namespace security {

	class SecureRandom;
	class SecureRandom
		: public cpp_object<SecureRandom>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_METHOD(12)
		J2CPP_DECLARE_METHOD(13)

		explicit SecureRandom(jobject jobj)
		: cpp_object<SecureRandom>(jobj)
		{
		}

		operator local_ref<java::util::Random>() const;


		SecureRandom();
		SecureRandom(local_ref< cpp_byte_array<1> > const&);
		static local_ref< java::security::SecureRandom > getInstance(local_ref< java::lang::String > const&);
		static local_ref< java::security::SecureRandom > getInstance(local_ref< java::lang::String > const&, local_ref< java::lang::String > const&);
		static local_ref< java::security::SecureRandom > getInstance(local_ref< java::lang::String > const&, local_ref< java::security::Provider > const&);
		local_ref< java::security::Provider > getProvider();
		local_ref< java::lang::String > getAlgorithm();
		void setSeed(local_ref< cpp_byte_array<1> > const&);
		void setSeed(cpp_long const&);
		void nextBytes(local_ref< cpp_byte_array<1> > const&);
		static local_ref< cpp_byte_array<1> > getSeed(cpp_int const&);
		local_ref< cpp_byte_array<1> > generateSeed(cpp_int const&);
	}; //class SecureRandom

} //namespace security
} //namespace java

} //namespace j2cpp

#endif //J2CPP_JAVA_SECURITY_SECURERANDOM_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_SECURITY_SECURERANDOM_HPP_IMPL
#define J2CPP_JAVA_SECURITY_SECURERANDOM_HPP_IMPL

namespace j2cpp {



java::security::SecureRandom::operator local_ref<java::util::Random>() const
{
	return local_ref<java::util::Random>(get_jtype());
}


java::security::SecureRandom::SecureRandom()
: cpp_object<java::security::SecureRandom>(
	environment::get().get_jenv()->NewObject(
		get_class<java::security::SecureRandom::J2CPP_CLASS_NAME>(),
		get_method_id<java::security::SecureRandom::J2CPP_CLASS_NAME, java::security::SecureRandom::J2CPP_METHOD_NAME(0), java::security::SecureRandom::J2CPP_METHOD_SIGNATURE(0), false>()
	)
)
{
}



java::security::SecureRandom::SecureRandom(local_ref< cpp_byte_array<1> > const &a0)
: cpp_object<java::security::SecureRandom>(
	environment::get().get_jenv()->NewObject(
		get_class<java::security::SecureRandom::J2CPP_CLASS_NAME>(),
		get_method_id<java::security::SecureRandom::J2CPP_CLASS_NAME, java::security::SecureRandom::J2CPP_METHOD_NAME(1), java::security::SecureRandom::J2CPP_METHOD_SIGNATURE(1), false>(),
		a0.get_jtype()
	)
)
{
}



local_ref< java::security::SecureRandom > java::security::SecureRandom::getInstance(local_ref< java::lang::String > const &a0)
{
	return local_ref< java::security::SecureRandom >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), true>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::security::SecureRandom > java::security::SecureRandom::getInstance(local_ref< java::lang::String > const &a0, local_ref< java::lang::String > const &a1)
{
	return local_ref< java::security::SecureRandom >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), true>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< java::security::SecureRandom > java::security::SecureRandom::getInstance(local_ref< java::lang::String > const &a0, local_ref< java::security::Provider > const &a1)
{
	return local_ref< java::security::SecureRandom >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), true>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< java::security::Provider > java::security::SecureRandom::getProvider()
{
	return local_ref< java::security::Provider >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>()
		)
	);
}

local_ref< java::lang::String > java::security::SecureRandom::getAlgorithm()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(7), J2CPP_METHOD_SIGNATURE(7), false>()
		)
	);
}

void java::security::SecureRandom::setSeed(local_ref< cpp_byte_array<1> > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(8), J2CPP_METHOD_SIGNATURE(8), false>(),
			a0.get_jtype()
		)
	);
}

void java::security::SecureRandom::setSeed(cpp_long const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(9), J2CPP_METHOD_SIGNATURE(9), false>(),
			a0.get_jtype()
		)
	);
}

void java::security::SecureRandom::nextBytes(local_ref< cpp_byte_array<1> > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(10), J2CPP_METHOD_SIGNATURE(10), false>(),
			a0.get_jtype()
		)
	);
}


local_ref< cpp_byte_array<1> > java::security::SecureRandom::getSeed(cpp_int const &a0)
{
	return local_ref< cpp_byte_array<1> >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(12), J2CPP_METHOD_SIGNATURE(12), true>(),
			a0.get_jtype()
		)
	);
}

local_ref< cpp_byte_array<1> > java::security::SecureRandom::generateSeed(cpp_int const &a0)
{
	return local_ref< cpp_byte_array<1> >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(13), J2CPP_METHOD_SIGNATURE(13), false>(),
			a0.get_jtype()
		)
	);
}


J2CPP_DEFINE_CLASS(java::security::SecureRandom,"java/security/SecureRandom")
J2CPP_DEFINE_METHOD(java::security::SecureRandom,0,"<init>","()V")
J2CPP_DEFINE_METHOD(java::security::SecureRandom,1,"<init>","([B)V")
J2CPP_DEFINE_METHOD(java::security::SecureRandom,2,"<init>","(Ljava/security/SecureRandomSpi;Ljava/security/Provider;)V")
J2CPP_DEFINE_METHOD(java::security::SecureRandom,3,"getInstance","(Ljava/lang/String;)Ljava/security/SecureRandom;")
J2CPP_DEFINE_METHOD(java::security::SecureRandom,4,"getInstance","(Ljava/lang/String;Ljava/lang/String;)Ljava/security/SecureRandom;")
J2CPP_DEFINE_METHOD(java::security::SecureRandom,5,"getInstance","(Ljava/lang/String;Ljava/security/Provider;)Ljava/security/SecureRandom;")
J2CPP_DEFINE_METHOD(java::security::SecureRandom,6,"getProvider","()Ljava/security/Provider;")
J2CPP_DEFINE_METHOD(java::security::SecureRandom,7,"getAlgorithm","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::security::SecureRandom,8,"setSeed","([B)V")
J2CPP_DEFINE_METHOD(java::security::SecureRandom,9,"setSeed","(J)V")
J2CPP_DEFINE_METHOD(java::security::SecureRandom,10,"nextBytes","([B)V")
J2CPP_DEFINE_METHOD(java::security::SecureRandom,11,"next","(I)I")
J2CPP_DEFINE_METHOD(java::security::SecureRandom,12,"getSeed","(I)[B")
J2CPP_DEFINE_METHOD(java::security::SecureRandom,13,"generateSeed","(I)[B")

} //namespace j2cpp

#endif //J2CPP_JAVA_SECURITY_SECURERANDOM_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
