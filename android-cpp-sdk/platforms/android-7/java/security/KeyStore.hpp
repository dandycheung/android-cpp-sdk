/*================================================================================
  code generated by: java2cpp
  class: java.security.KeyStore
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_SECURITY_KEYSTORE_HPP_DECL
#define J2CPP_JAVA_SECURITY_KEYSTORE_HPP_DECL


namespace j2cpp { namespace javax { namespace security { namespace auth { namespace callback { class CallbackHandler; } } } } }
namespace j2cpp { namespace javax { namespace security { namespace auth { class Destroyable; } } } }
namespace j2cpp { namespace javax { namespace crypto { class SecretKey; } } }
namespace j2cpp { namespace java { namespace io { class File; } } }
namespace j2cpp { namespace java { namespace io { class InputStream; } } }
namespace j2cpp { namespace java { namespace io { class OutputStream; } } }
namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace lang { class Class; } } }
namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace security { class Provider; } } }
namespace j2cpp { namespace java { namespace security { namespace KeyStore_ { class LoadStoreParameter; } } } }
namespace j2cpp { namespace java { namespace security { namespace KeyStore_ { class ProtectionParameter; } } } }
namespace j2cpp { namespace java { namespace security { class Key; } } }
namespace j2cpp { namespace java { namespace security { class PrivateKey; } } }
namespace j2cpp { namespace java { namespace security { namespace KeyStore_ { class Builder; } } } }
namespace j2cpp { namespace java { namespace security { namespace cert { class Certificate; } } } }
namespace j2cpp { namespace java { namespace security { namespace KeyStore_ { class Entry; } } } }
namespace j2cpp { namespace java { namespace util { class Date; } } }
namespace j2cpp { namespace java { namespace util { class Enumeration; } } }


#include <java/io/File.hpp>
#include <java/io/InputStream.hpp>
#include <java/io/OutputStream.hpp>
#include <java/lang/Class.hpp>
#include <java/lang/Object.hpp>
#include <java/lang/String.hpp>
#include <java/security/Key.hpp>
#include <java/security/KeyStore.hpp>
#include <java/security/PrivateKey.hpp>
#include <java/security/Provider.hpp>
#include <java/security/cert/Certificate.hpp>
#include <java/util/Date.hpp>
#include <java/util/Enumeration.hpp>
#include <javax/crypto/SecretKey.hpp>
#include <javax/security/auth/Destroyable.hpp>
#include <javax/security/auth/callback/CallbackHandler.hpp>


namespace j2cpp {

namespace java { namespace security {

	class KeyStore;
	namespace KeyStore_ {

		class LoadStoreParameter;
		class LoadStoreParameter
			: public cpp_object<LoadStoreParameter>
		{
		public:

			J2CPP_DECLARE_CLASS

			J2CPP_DECLARE_METHOD(0)

			explicit LoadStoreParameter(jobject jobj)
			: cpp_object<LoadStoreParameter>(jobj)
			{
			}

			operator local_ref<java::lang::Object>() const;


			local_ref< java::security::KeyStore_::ProtectionParameter > getProtectionParameter();
		}; //class LoadStoreParameter

		class ProtectionParameter;
		class ProtectionParameter
			: public cpp_object<ProtectionParameter>
		{
		public:

			J2CPP_DECLARE_CLASS


			explicit ProtectionParameter(jobject jobj)
			: cpp_object<ProtectionParameter>(jobj)
			{
			}

			operator local_ref<java::lang::Object>() const;

		}; //class ProtectionParameter

		class PrivateKeyEntry;
		class PrivateKeyEntry
			: public cpp_object<PrivateKeyEntry>
		{
		public:

			J2CPP_DECLARE_CLASS

			J2CPP_DECLARE_METHOD(0)
			J2CPP_DECLARE_METHOD(1)
			J2CPP_DECLARE_METHOD(2)
			J2CPP_DECLARE_METHOD(3)
			J2CPP_DECLARE_METHOD(4)

			explicit PrivateKeyEntry(jobject jobj)
			: cpp_object<PrivateKeyEntry>(jobj)
			{
			}

			operator local_ref<java::lang::Object>() const;
			operator local_ref<java::security::KeyStore_::Entry>() const;


			PrivateKeyEntry(local_ref< java::security::PrivateKey > const&, local_ref< cpp_object_array<java::security::cert::Certificate, 1> > const&);
			local_ref< java::security::PrivateKey > getPrivateKey();
			local_ref< cpp_object_array<java::security::cert::Certificate, 1> > getCertificateChain();
			local_ref< java::security::cert::Certificate > getCertificate();
			local_ref< java::lang::String > toString();
		}; //class PrivateKeyEntry

		class CallbackHandlerProtection;
		class CallbackHandlerProtection
			: public cpp_object<CallbackHandlerProtection>
		{
		public:

			J2CPP_DECLARE_CLASS

			J2CPP_DECLARE_METHOD(0)
			J2CPP_DECLARE_METHOD(1)

			explicit CallbackHandlerProtection(jobject jobj)
			: cpp_object<CallbackHandlerProtection>(jobj)
			{
			}

			operator local_ref<java::lang::Object>() const;
			operator local_ref<java::security::KeyStore_::ProtectionParameter>() const;


			CallbackHandlerProtection(local_ref< javax::security::auth::callback::CallbackHandler > const&);
			local_ref< javax::security::auth::callback::CallbackHandler > getCallbackHandler();
		}; //class CallbackHandlerProtection

		class TrustedCertificateEntry;
		class TrustedCertificateEntry
			: public cpp_object<TrustedCertificateEntry>
		{
		public:

			J2CPP_DECLARE_CLASS

			J2CPP_DECLARE_METHOD(0)
			J2CPP_DECLARE_METHOD(1)
			J2CPP_DECLARE_METHOD(2)

			explicit TrustedCertificateEntry(jobject jobj)
			: cpp_object<TrustedCertificateEntry>(jobj)
			{
			}

			operator local_ref<java::lang::Object>() const;
			operator local_ref<java::security::KeyStore_::Entry>() const;


			TrustedCertificateEntry(local_ref< java::security::cert::Certificate > const&);
			local_ref< java::security::cert::Certificate > getTrustedCertificate();
			local_ref< java::lang::String > toString();
		}; //class TrustedCertificateEntry

		class Builder;
		class Builder
			: public cpp_object<Builder>
		{
		public:

			J2CPP_DECLARE_CLASS

			J2CPP_DECLARE_METHOD(0)
			J2CPP_DECLARE_METHOD(1)
			J2CPP_DECLARE_METHOD(2)
			J2CPP_DECLARE_METHOD(3)
			J2CPP_DECLARE_METHOD(4)
			J2CPP_DECLARE_METHOD(5)

			explicit Builder(jobject jobj)
			: cpp_object<Builder>(jobj)
			{
			}

			operator local_ref<java::lang::Object>() const;


			local_ref< java::security::KeyStore > getKeyStore();
			local_ref< java::security::KeyStore_::ProtectionParameter > getProtectionParameter(local_ref< java::lang::String > const&);
			static local_ref< java::security::KeyStore_::Builder > newInstance(local_ref< java::security::KeyStore > const&, local_ref< java::security::KeyStore_::ProtectionParameter > const&);
			static local_ref< java::security::KeyStore_::Builder > newInstance(local_ref< java::lang::String > const&, local_ref< java::security::Provider > const&, local_ref< java::io::File > const&, local_ref< java::security::KeyStore_::ProtectionParameter > const&);
			static local_ref< java::security::KeyStore_::Builder > newInstance(local_ref< java::lang::String > const&, local_ref< java::security::Provider > const&, local_ref< java::security::KeyStore_::ProtectionParameter > const&);
		}; //class Builder

		class PasswordProtection;
		class PasswordProtection
			: public cpp_object<PasswordProtection>
		{
		public:

			J2CPP_DECLARE_CLASS

			J2CPP_DECLARE_METHOD(0)
			J2CPP_DECLARE_METHOD(1)
			J2CPP_DECLARE_METHOD(2)
			J2CPP_DECLARE_METHOD(3)

			explicit PasswordProtection(jobject jobj)
			: cpp_object<PasswordProtection>(jobj)
			{
			}

			operator local_ref<java::lang::Object>() const;
			operator local_ref<java::security::KeyStore_::ProtectionParameter>() const;
			operator local_ref<javax::security::auth::Destroyable>() const;


			PasswordProtection(local_ref< cpp_char_array<1> > const&);
			local_ref< cpp_char_array<1> > getPassword();
			void destroy();
			cpp_boolean isDestroyed();
		}; //class PasswordProtection

		class SecretKeyEntry;
		class SecretKeyEntry
			: public cpp_object<SecretKeyEntry>
		{
		public:

			J2CPP_DECLARE_CLASS

			J2CPP_DECLARE_METHOD(0)
			J2CPP_DECLARE_METHOD(1)
			J2CPP_DECLARE_METHOD(2)

			explicit SecretKeyEntry(jobject jobj)
			: cpp_object<SecretKeyEntry>(jobj)
			{
			}

			operator local_ref<java::lang::Object>() const;
			operator local_ref<java::security::KeyStore_::Entry>() const;


			SecretKeyEntry(local_ref< javax::crypto::SecretKey > const&);
			local_ref< javax::crypto::SecretKey > getSecretKey();
			local_ref< java::lang::String > toString();
		}; //class SecretKeyEntry

		class Entry;
		class Entry
			: public cpp_object<Entry>
		{
		public:

			J2CPP_DECLARE_CLASS


			explicit Entry(jobject jobj)
			: cpp_object<Entry>(jobj)
			{
			}

			operator local_ref<java::lang::Object>() const;

		}; //class Entry

	} //namespace KeyStore_

	class KeyStore
		: public cpp_object<KeyStore>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_METHOD(12)
		J2CPP_DECLARE_METHOD(13)
		J2CPP_DECLARE_METHOD(14)
		J2CPP_DECLARE_METHOD(15)
		J2CPP_DECLARE_METHOD(16)
		J2CPP_DECLARE_METHOD(17)
		J2CPP_DECLARE_METHOD(18)
		J2CPP_DECLARE_METHOD(19)
		J2CPP_DECLARE_METHOD(20)
		J2CPP_DECLARE_METHOD(21)
		J2CPP_DECLARE_METHOD(22)
		J2CPP_DECLARE_METHOD(23)
		J2CPP_DECLARE_METHOD(24)
		J2CPP_DECLARE_METHOD(25)
		J2CPP_DECLARE_METHOD(26)
		J2CPP_DECLARE_METHOD(27)

		typedef KeyStore_::LoadStoreParameter LoadStoreParameter;
		typedef KeyStore_::ProtectionParameter ProtectionParameter;
		typedef KeyStore_::PrivateKeyEntry PrivateKeyEntry;
		typedef KeyStore_::CallbackHandlerProtection CallbackHandlerProtection;
		typedef KeyStore_::TrustedCertificateEntry TrustedCertificateEntry;
		typedef KeyStore_::Builder Builder;
		typedef KeyStore_::PasswordProtection PasswordProtection;
		typedef KeyStore_::SecretKeyEntry SecretKeyEntry;
		typedef KeyStore_::Entry Entry;

		explicit KeyStore(jobject jobj)
		: cpp_object<KeyStore>(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;


		static local_ref< java::security::KeyStore > getInstance(local_ref< java::lang::String > const&);
		static local_ref< java::security::KeyStore > getInstance(local_ref< java::lang::String > const&, local_ref< java::lang::String > const&);
		static local_ref< java::security::KeyStore > getInstance(local_ref< java::lang::String > const&, local_ref< java::security::Provider > const&);
		static local_ref< java::lang::String > getDefaultType();
		local_ref< java::security::Provider > getProvider();
		local_ref< java::lang::String > getType();
		local_ref< java::security::Key > getKey(local_ref< java::lang::String > const&, local_ref< cpp_char_array<1> > const&);
		local_ref< cpp_object_array<java::security::cert::Certificate, 1> > getCertificateChain(local_ref< java::lang::String > const&);
		local_ref< java::security::cert::Certificate > getCertificate(local_ref< java::lang::String > const&);
		local_ref< java::util::Date > getCreationDate(local_ref< java::lang::String > const&);
		void setKeyEntry(local_ref< java::lang::String > const&, local_ref< java::security::Key > const&, local_ref< cpp_char_array<1> > const&, local_ref< cpp_object_array<java::security::cert::Certificate, 1> > const&);
		void setKeyEntry(local_ref< java::lang::String > const&, local_ref< cpp_byte_array<1> > const&, local_ref< cpp_object_array<java::security::cert::Certificate, 1> > const&);
		void setCertificateEntry(local_ref< java::lang::String > const&, local_ref< java::security::cert::Certificate > const&);
		void deleteEntry(local_ref< java::lang::String > const&);
		local_ref< java::util::Enumeration > aliases();
		cpp_boolean containsAlias(local_ref< java::lang::String > const&);
		cpp_int size();
		cpp_boolean isKeyEntry(local_ref< java::lang::String > const&);
		cpp_boolean isCertificateEntry(local_ref< java::lang::String > const&);
		local_ref< java::lang::String > getCertificateAlias(local_ref< java::security::cert::Certificate > const&);
		void store(local_ref< java::io::OutputStream > const&, local_ref< cpp_char_array<1> > const&);
		void store(local_ref< java::security::KeyStore_::LoadStoreParameter > const&);
		void load(local_ref< java::io::InputStream > const&, local_ref< cpp_char_array<1> > const&);
		void load(local_ref< java::security::KeyStore_::LoadStoreParameter > const&);
		local_ref< java::security::KeyStore_::Entry > getEntry(local_ref< java::lang::String > const&, local_ref< java::security::KeyStore_::ProtectionParameter > const&);
		void setEntry(local_ref< java::lang::String > const&, local_ref< java::security::KeyStore_::Entry > const&, local_ref< java::security::KeyStore_::ProtectionParameter > const&);
		cpp_boolean entryInstanceOf(local_ref< java::lang::String > const&, local_ref< java::lang::Class > const&);
	}; //class KeyStore

} //namespace security
} //namespace java

} //namespace j2cpp

#endif //J2CPP_JAVA_SECURITY_KEYSTORE_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_SECURITY_KEYSTORE_HPP_IMPL
#define J2CPP_JAVA_SECURITY_KEYSTORE_HPP_IMPL

namespace j2cpp {




java::security::KeyStore_::LoadStoreParameter::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jtype());
}

local_ref< java::security::KeyStore_::ProtectionParameter > java::security::KeyStore_::LoadStoreParameter::getProtectionParameter()
{
	return local_ref< java::security::KeyStore_::ProtectionParameter >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(0), J2CPP_METHOD_SIGNATURE(0), false>()
		)
	);
}


J2CPP_DEFINE_CLASS(java::security::KeyStore_::LoadStoreParameter,"java/security/KeyStore$LoadStoreParameter")
J2CPP_DEFINE_METHOD(java::security::KeyStore_::LoadStoreParameter,0,"getProtectionParameter","()Ljava/security/KeyStore$ProtectionParameter;")


java::security::KeyStore_::ProtectionParameter::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jtype());
}

J2CPP_DEFINE_CLASS(java::security::KeyStore_::ProtectionParameter,"java/security/KeyStore$ProtectionParameter")


java::security::KeyStore_::PrivateKeyEntry::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jtype());
}

java::security::KeyStore_::PrivateKeyEntry::operator local_ref<java::security::KeyStore_::Entry>() const
{
	return local_ref<java::security::KeyStore_::Entry>(get_jtype());
}


java::security::KeyStore_::PrivateKeyEntry::PrivateKeyEntry(local_ref< java::security::PrivateKey > const &a0, local_ref< cpp_object_array<java::security::cert::Certificate, 1> > const &a1)
: cpp_object<java::security::KeyStore_::PrivateKeyEntry>(
	environment::get().get_jenv()->NewObject(
		get_class<java::security::KeyStore_::PrivateKeyEntry::J2CPP_CLASS_NAME>(),
		get_method_id<java::security::KeyStore_::PrivateKeyEntry::J2CPP_CLASS_NAME, java::security::KeyStore_::PrivateKeyEntry::J2CPP_METHOD_NAME(0), java::security::KeyStore_::PrivateKeyEntry::J2CPP_METHOD_SIGNATURE(0), false>(),
		a0.get_jtype(), a1.get_jtype()
	)
)
{
}


local_ref< java::security::PrivateKey > java::security::KeyStore_::PrivateKeyEntry::getPrivateKey()
{
	return local_ref< java::security::PrivateKey >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), false>()
		)
	);
}

local_ref< cpp_object_array<java::security::cert::Certificate, 1> > java::security::KeyStore_::PrivateKeyEntry::getCertificateChain()
{
	return local_ref< cpp_object_array<java::security::cert::Certificate, 1> >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>()
		)
	);
}

local_ref< java::security::cert::Certificate > java::security::KeyStore_::PrivateKeyEntry::getCertificate()
{
	return local_ref< java::security::cert::Certificate >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>()
		)
	);
}

local_ref< java::lang::String > java::security::KeyStore_::PrivateKeyEntry::toString()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>()
		)
	);
}


J2CPP_DEFINE_CLASS(java::security::KeyStore_::PrivateKeyEntry,"java/security/KeyStore$PrivateKeyEntry")
J2CPP_DEFINE_METHOD(java::security::KeyStore_::PrivateKeyEntry,0,"<init>","(Ljava/security/PrivateKey;[java.security.cert.Certificate)V")
J2CPP_DEFINE_METHOD(java::security::KeyStore_::PrivateKeyEntry,1,"getPrivateKey","()Ljava/security/PrivateKey;")
J2CPP_DEFINE_METHOD(java::security::KeyStore_::PrivateKeyEntry,2,"getCertificateChain","()[java.security.cert.Certificate")
J2CPP_DEFINE_METHOD(java::security::KeyStore_::PrivateKeyEntry,3,"getCertificate","()Ljava/security/cert/Certificate;")
J2CPP_DEFINE_METHOD(java::security::KeyStore_::PrivateKeyEntry,4,"toString","()Ljava/lang/String;")


java::security::KeyStore_::CallbackHandlerProtection::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jtype());
}

java::security::KeyStore_::CallbackHandlerProtection::operator local_ref<java::security::KeyStore_::ProtectionParameter>() const
{
	return local_ref<java::security::KeyStore_::ProtectionParameter>(get_jtype());
}


java::security::KeyStore_::CallbackHandlerProtection::CallbackHandlerProtection(local_ref< javax::security::auth::callback::CallbackHandler > const &a0)
: cpp_object<java::security::KeyStore_::CallbackHandlerProtection>(
	environment::get().get_jenv()->NewObject(
		get_class<java::security::KeyStore_::CallbackHandlerProtection::J2CPP_CLASS_NAME>(),
		get_method_id<java::security::KeyStore_::CallbackHandlerProtection::J2CPP_CLASS_NAME, java::security::KeyStore_::CallbackHandlerProtection::J2CPP_METHOD_NAME(0), java::security::KeyStore_::CallbackHandlerProtection::J2CPP_METHOD_SIGNATURE(0), false>(),
		a0.get_jtype()
	)
)
{
}


local_ref< javax::security::auth::callback::CallbackHandler > java::security::KeyStore_::CallbackHandlerProtection::getCallbackHandler()
{
	return local_ref< javax::security::auth::callback::CallbackHandler >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), false>()
		)
	);
}


J2CPP_DEFINE_CLASS(java::security::KeyStore_::CallbackHandlerProtection,"java/security/KeyStore$CallbackHandlerProtection")
J2CPP_DEFINE_METHOD(java::security::KeyStore_::CallbackHandlerProtection,0,"<init>","(Ljavax/security/auth/callback/CallbackHandler;)V")
J2CPP_DEFINE_METHOD(java::security::KeyStore_::CallbackHandlerProtection,1,"getCallbackHandler","()Ljavax/security/auth/callback/CallbackHandler;")


java::security::KeyStore_::TrustedCertificateEntry::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jtype());
}

java::security::KeyStore_::TrustedCertificateEntry::operator local_ref<java::security::KeyStore_::Entry>() const
{
	return local_ref<java::security::KeyStore_::Entry>(get_jtype());
}


java::security::KeyStore_::TrustedCertificateEntry::TrustedCertificateEntry(local_ref< java::security::cert::Certificate > const &a0)
: cpp_object<java::security::KeyStore_::TrustedCertificateEntry>(
	environment::get().get_jenv()->NewObject(
		get_class<java::security::KeyStore_::TrustedCertificateEntry::J2CPP_CLASS_NAME>(),
		get_method_id<java::security::KeyStore_::TrustedCertificateEntry::J2CPP_CLASS_NAME, java::security::KeyStore_::TrustedCertificateEntry::J2CPP_METHOD_NAME(0), java::security::KeyStore_::TrustedCertificateEntry::J2CPP_METHOD_SIGNATURE(0), false>(),
		a0.get_jtype()
	)
)
{
}


local_ref< java::security::cert::Certificate > java::security::KeyStore_::TrustedCertificateEntry::getTrustedCertificate()
{
	return local_ref< java::security::cert::Certificate >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), false>()
		)
	);
}

local_ref< java::lang::String > java::security::KeyStore_::TrustedCertificateEntry::toString()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>()
		)
	);
}


J2CPP_DEFINE_CLASS(java::security::KeyStore_::TrustedCertificateEntry,"java/security/KeyStore$TrustedCertificateEntry")
J2CPP_DEFINE_METHOD(java::security::KeyStore_::TrustedCertificateEntry,0,"<init>","(Ljava/security/cert/Certificate;)V")
J2CPP_DEFINE_METHOD(java::security::KeyStore_::TrustedCertificateEntry,1,"getTrustedCertificate","()Ljava/security/cert/Certificate;")
J2CPP_DEFINE_METHOD(java::security::KeyStore_::TrustedCertificateEntry,2,"toString","()Ljava/lang/String;")


java::security::KeyStore_::Builder::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jtype());
}


local_ref< java::security::KeyStore > java::security::KeyStore_::Builder::getKeyStore()
{
	return local_ref< java::security::KeyStore >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), false>()
		)
	);
}

local_ref< java::security::KeyStore_::ProtectionParameter > java::security::KeyStore_::Builder::getProtectionParameter(local_ref< java::lang::String > const &a0)
{
	return local_ref< java::security::KeyStore_::ProtectionParameter >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::security::KeyStore_::Builder > java::security::KeyStore_::Builder::newInstance(local_ref< java::security::KeyStore > const &a0, local_ref< java::security::KeyStore_::ProtectionParameter > const &a1)
{
	return local_ref< java::security::KeyStore_::Builder >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), true>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< java::security::KeyStore_::Builder > java::security::KeyStore_::Builder::newInstance(local_ref< java::lang::String > const &a0, local_ref< java::security::Provider > const &a1, local_ref< java::io::File > const &a2, local_ref< java::security::KeyStore_::ProtectionParameter > const &a3)
{
	return local_ref< java::security::KeyStore_::Builder >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), true>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype(), a3.get_jtype()
		)
	);
}

local_ref< java::security::KeyStore_::Builder > java::security::KeyStore_::Builder::newInstance(local_ref< java::lang::String > const &a0, local_ref< java::security::Provider > const &a1, local_ref< java::security::KeyStore_::ProtectionParameter > const &a2)
{
	return local_ref< java::security::KeyStore_::Builder >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), true>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}


J2CPP_DEFINE_CLASS(java::security::KeyStore_::Builder,"java/security/KeyStore$Builder")
J2CPP_DEFINE_METHOD(java::security::KeyStore_::Builder,0,"<init>","()V")
J2CPP_DEFINE_METHOD(java::security::KeyStore_::Builder,1,"getKeyStore","()Ljava/security/KeyStore;")
J2CPP_DEFINE_METHOD(java::security::KeyStore_::Builder,2,"getProtectionParameter","(Ljava/lang/String;)Ljava/security/KeyStore$ProtectionParameter;")
J2CPP_DEFINE_METHOD(java::security::KeyStore_::Builder,3,"newInstance","(Ljava/security/KeyStore;Ljava/security/KeyStore$ProtectionParameter;)Ljava/security/KeyStore$Builder;")
J2CPP_DEFINE_METHOD(java::security::KeyStore_::Builder,4,"newInstance","(Ljava/lang/String;Ljava/security/Provider;Ljava/io/File;Ljava/security/KeyStore$ProtectionParameter;)Ljava/security/KeyStore$Builder;")
J2CPP_DEFINE_METHOD(java::security::KeyStore_::Builder,5,"newInstance","(Ljava/lang/String;Ljava/security/Provider;Ljava/security/KeyStore$ProtectionParameter;)Ljava/security/KeyStore$Builder;")


java::security::KeyStore_::PasswordProtection::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jtype());
}

java::security::KeyStore_::PasswordProtection::operator local_ref<java::security::KeyStore_::ProtectionParameter>() const
{
	return local_ref<java::security::KeyStore_::ProtectionParameter>(get_jtype());
}

java::security::KeyStore_::PasswordProtection::operator local_ref<javax::security::auth::Destroyable>() const
{
	return local_ref<javax::security::auth::Destroyable>(get_jtype());
}


java::security::KeyStore_::PasswordProtection::PasswordProtection(local_ref< cpp_char_array<1> > const &a0)
: cpp_object<java::security::KeyStore_::PasswordProtection>(
	environment::get().get_jenv()->NewObject(
		get_class<java::security::KeyStore_::PasswordProtection::J2CPP_CLASS_NAME>(),
		get_method_id<java::security::KeyStore_::PasswordProtection::J2CPP_CLASS_NAME, java::security::KeyStore_::PasswordProtection::J2CPP_METHOD_NAME(0), java::security::KeyStore_::PasswordProtection::J2CPP_METHOD_SIGNATURE(0), false>(),
		a0.get_jtype()
	)
)
{
}


local_ref< cpp_char_array<1> > java::security::KeyStore_::PasswordProtection::getPassword()
{
	return local_ref< cpp_char_array<1> >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), false>()
		)
	);
}

void java::security::KeyStore_::PasswordProtection::destroy()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>()
		)
	);
}

cpp_boolean java::security::KeyStore_::PasswordProtection::isDestroyed()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>()
		)
	);
}


J2CPP_DEFINE_CLASS(java::security::KeyStore_::PasswordProtection,"java/security/KeyStore$PasswordProtection")
J2CPP_DEFINE_METHOD(java::security::KeyStore_::PasswordProtection,0,"<init>","([C)V")
J2CPP_DEFINE_METHOD(java::security::KeyStore_::PasswordProtection,1,"getPassword","()[C")
J2CPP_DEFINE_METHOD(java::security::KeyStore_::PasswordProtection,2,"destroy","()V")
J2CPP_DEFINE_METHOD(java::security::KeyStore_::PasswordProtection,3,"isDestroyed","()Z")


java::security::KeyStore_::SecretKeyEntry::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jtype());
}

java::security::KeyStore_::SecretKeyEntry::operator local_ref<java::security::KeyStore_::Entry>() const
{
	return local_ref<java::security::KeyStore_::Entry>(get_jtype());
}


java::security::KeyStore_::SecretKeyEntry::SecretKeyEntry(local_ref< javax::crypto::SecretKey > const &a0)
: cpp_object<java::security::KeyStore_::SecretKeyEntry>(
	environment::get().get_jenv()->NewObject(
		get_class<java::security::KeyStore_::SecretKeyEntry::J2CPP_CLASS_NAME>(),
		get_method_id<java::security::KeyStore_::SecretKeyEntry::J2CPP_CLASS_NAME, java::security::KeyStore_::SecretKeyEntry::J2CPP_METHOD_NAME(0), java::security::KeyStore_::SecretKeyEntry::J2CPP_METHOD_SIGNATURE(0), false>(),
		a0.get_jtype()
	)
)
{
}


local_ref< javax::crypto::SecretKey > java::security::KeyStore_::SecretKeyEntry::getSecretKey()
{
	return local_ref< javax::crypto::SecretKey >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), false>()
		)
	);
}

local_ref< java::lang::String > java::security::KeyStore_::SecretKeyEntry::toString()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>()
		)
	);
}


J2CPP_DEFINE_CLASS(java::security::KeyStore_::SecretKeyEntry,"java/security/KeyStore$SecretKeyEntry")
J2CPP_DEFINE_METHOD(java::security::KeyStore_::SecretKeyEntry,0,"<init>","(Ljavax/crypto/SecretKey;)V")
J2CPP_DEFINE_METHOD(java::security::KeyStore_::SecretKeyEntry,1,"getSecretKey","()Ljavax/crypto/SecretKey;")
J2CPP_DEFINE_METHOD(java::security::KeyStore_::SecretKeyEntry,2,"toString","()Ljava/lang/String;")


java::security::KeyStore_::Entry::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jtype());
}

J2CPP_DEFINE_CLASS(java::security::KeyStore_::Entry,"java/security/KeyStore$Entry")



java::security::KeyStore::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jtype());
}


local_ref< java::security::KeyStore > java::security::KeyStore::getInstance(local_ref< java::lang::String > const &a0)
{
	return local_ref< java::security::KeyStore >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), true>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::security::KeyStore > java::security::KeyStore::getInstance(local_ref< java::lang::String > const &a0, local_ref< java::lang::String > const &a1)
{
	return local_ref< java::security::KeyStore >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), true>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< java::security::KeyStore > java::security::KeyStore::getInstance(local_ref< java::lang::String > const &a0, local_ref< java::security::Provider > const &a1)
{
	return local_ref< java::security::KeyStore >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), true>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< java::lang::String > java::security::KeyStore::getDefaultType()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), true>()
		)
	);
}

local_ref< java::security::Provider > java::security::KeyStore::getProvider()
{
	return local_ref< java::security::Provider >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>()
		)
	);
}

local_ref< java::lang::String > java::security::KeyStore::getType()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>()
		)
	);
}

local_ref< java::security::Key > java::security::KeyStore::getKey(local_ref< java::lang::String > const &a0, local_ref< cpp_char_array<1> > const &a1)
{
	return local_ref< java::security::Key >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(7), J2CPP_METHOD_SIGNATURE(7), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< cpp_object_array<java::security::cert::Certificate, 1> > java::security::KeyStore::getCertificateChain(local_ref< java::lang::String > const &a0)
{
	return local_ref< cpp_object_array<java::security::cert::Certificate, 1> >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(8), J2CPP_METHOD_SIGNATURE(8), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::security::cert::Certificate > java::security::KeyStore::getCertificate(local_ref< java::lang::String > const &a0)
{
	return local_ref< java::security::cert::Certificate >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(9), J2CPP_METHOD_SIGNATURE(9), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::util::Date > java::security::KeyStore::getCreationDate(local_ref< java::lang::String > const &a0)
{
	return local_ref< java::util::Date >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(10), J2CPP_METHOD_SIGNATURE(10), false>(),
			a0.get_jtype()
		)
	);
}

void java::security::KeyStore::setKeyEntry(local_ref< java::lang::String > const &a0, local_ref< java::security::Key > const &a1, local_ref< cpp_char_array<1> > const &a2, local_ref< cpp_object_array<java::security::cert::Certificate, 1> > const &a3)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(11), J2CPP_METHOD_SIGNATURE(11), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype(), a3.get_jtype()
		)
	);
}

void java::security::KeyStore::setKeyEntry(local_ref< java::lang::String > const &a0, local_ref< cpp_byte_array<1> > const &a1, local_ref< cpp_object_array<java::security::cert::Certificate, 1> > const &a2)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(12), J2CPP_METHOD_SIGNATURE(12), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

void java::security::KeyStore::setCertificateEntry(local_ref< java::lang::String > const &a0, local_ref< java::security::cert::Certificate > const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(13), J2CPP_METHOD_SIGNATURE(13), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void java::security::KeyStore::deleteEntry(local_ref< java::lang::String > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(14), J2CPP_METHOD_SIGNATURE(14), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::util::Enumeration > java::security::KeyStore::aliases()
{
	return local_ref< java::util::Enumeration >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(15), J2CPP_METHOD_SIGNATURE(15), false>()
		)
	);
}

cpp_boolean java::security::KeyStore::containsAlias(local_ref< java::lang::String > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(16), J2CPP_METHOD_SIGNATURE(16), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int java::security::KeyStore::size()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(17), J2CPP_METHOD_SIGNATURE(17), false>()
		)
	);
}

cpp_boolean java::security::KeyStore::isKeyEntry(local_ref< java::lang::String > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(18), J2CPP_METHOD_SIGNATURE(18), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean java::security::KeyStore::isCertificateEntry(local_ref< java::lang::String > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(19), J2CPP_METHOD_SIGNATURE(19), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::String > java::security::KeyStore::getCertificateAlias(local_ref< java::security::cert::Certificate > const &a0)
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(20), J2CPP_METHOD_SIGNATURE(20), false>(),
			a0.get_jtype()
		)
	);
}

void java::security::KeyStore::store(local_ref< java::io::OutputStream > const &a0, local_ref< cpp_char_array<1> > const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(21), J2CPP_METHOD_SIGNATURE(21), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void java::security::KeyStore::store(local_ref< java::security::KeyStore_::LoadStoreParameter > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(22), J2CPP_METHOD_SIGNATURE(22), false>(),
			a0.get_jtype()
		)
	);
}

void java::security::KeyStore::load(local_ref< java::io::InputStream > const &a0, local_ref< cpp_char_array<1> > const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(23), J2CPP_METHOD_SIGNATURE(23), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void java::security::KeyStore::load(local_ref< java::security::KeyStore_::LoadStoreParameter > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(24), J2CPP_METHOD_SIGNATURE(24), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::security::KeyStore_::Entry > java::security::KeyStore::getEntry(local_ref< java::lang::String > const &a0, local_ref< java::security::KeyStore_::ProtectionParameter > const &a1)
{
	return local_ref< java::security::KeyStore_::Entry >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(25), J2CPP_METHOD_SIGNATURE(25), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void java::security::KeyStore::setEntry(local_ref< java::lang::String > const &a0, local_ref< java::security::KeyStore_::Entry > const &a1, local_ref< java::security::KeyStore_::ProtectionParameter > const &a2)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(26), J2CPP_METHOD_SIGNATURE(26), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

cpp_boolean java::security::KeyStore::entryInstanceOf(local_ref< java::lang::String > const &a0, local_ref< java::lang::Class > const &a1)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(27), J2CPP_METHOD_SIGNATURE(27), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}


J2CPP_DEFINE_CLASS(java::security::KeyStore,"java/security/KeyStore")
J2CPP_DEFINE_METHOD(java::security::KeyStore,0,"<init>","(Ljava/security/KeyStoreSpi;Ljava/security/Provider;Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(java::security::KeyStore,1,"getInstance","(Ljava/lang/String;)Ljava/security/KeyStore;")
J2CPP_DEFINE_METHOD(java::security::KeyStore,2,"getInstance","(Ljava/lang/String;Ljava/lang/String;)Ljava/security/KeyStore;")
J2CPP_DEFINE_METHOD(java::security::KeyStore,3,"getInstance","(Ljava/lang/String;Ljava/security/Provider;)Ljava/security/KeyStore;")
J2CPP_DEFINE_METHOD(java::security::KeyStore,4,"getDefaultType","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::security::KeyStore,5,"getProvider","()Ljava/security/Provider;")
J2CPP_DEFINE_METHOD(java::security::KeyStore,6,"getType","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::security::KeyStore,7,"getKey","(Ljava/lang/String;[C)Ljava/security/Key;")
J2CPP_DEFINE_METHOD(java::security::KeyStore,8,"getCertificateChain","(Ljava/lang/String;)[java.security.cert.Certificate")
J2CPP_DEFINE_METHOD(java::security::KeyStore,9,"getCertificate","(Ljava/lang/String;)Ljava/security/cert/Certificate;")
J2CPP_DEFINE_METHOD(java::security::KeyStore,10,"getCreationDate","(Ljava/lang/String;)Ljava/util/Date;")
J2CPP_DEFINE_METHOD(java::security::KeyStore,11,"setKeyEntry","(Ljava/lang/String;Ljava/security/Key;[C[java.security.cert.Certificate)V")
J2CPP_DEFINE_METHOD(java::security::KeyStore,12,"setKeyEntry","(Ljava/lang/String;[B[java.security.cert.Certificate)V")
J2CPP_DEFINE_METHOD(java::security::KeyStore,13,"setCertificateEntry","(Ljava/lang/String;Ljava/security/cert/Certificate;)V")
J2CPP_DEFINE_METHOD(java::security::KeyStore,14,"deleteEntry","(Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(java::security::KeyStore,15,"aliases","()Ljava/util/Enumeration;")
J2CPP_DEFINE_METHOD(java::security::KeyStore,16,"containsAlias","(Ljava/lang/String;)Z")
J2CPP_DEFINE_METHOD(java::security::KeyStore,17,"size","()I")
J2CPP_DEFINE_METHOD(java::security::KeyStore,18,"isKeyEntry","(Ljava/lang/String;)Z")
J2CPP_DEFINE_METHOD(java::security::KeyStore,19,"isCertificateEntry","(Ljava/lang/String;)Z")
J2CPP_DEFINE_METHOD(java::security::KeyStore,20,"getCertificateAlias","(Ljava/security/cert/Certificate;)Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::security::KeyStore,21,"store","(Ljava/io/OutputStream;[C)V")
J2CPP_DEFINE_METHOD(java::security::KeyStore,22,"store","(Ljava/security/KeyStore$LoadStoreParameter;)V")
J2CPP_DEFINE_METHOD(java::security::KeyStore,23,"load","(Ljava/io/InputStream;[C)V")
J2CPP_DEFINE_METHOD(java::security::KeyStore,24,"load","(Ljava/security/KeyStore$LoadStoreParameter;)V")
J2CPP_DEFINE_METHOD(java::security::KeyStore,25,"getEntry","(Ljava/lang/String;Ljava/security/KeyStore$ProtectionParameter;)Ljava/security/KeyStore$Entry;")
J2CPP_DEFINE_METHOD(java::security::KeyStore,26,"setEntry","(Ljava/lang/String;Ljava/security/KeyStore$Entry;Ljava/security/KeyStore$ProtectionParameter;)V")
J2CPP_DEFINE_METHOD(java::security::KeyStore,27,"entryInstanceOf","(Ljava/lang/String;Ljava/lang/Class;)Z")

} //namespace j2cpp

#endif //J2CPP_JAVA_SECURITY_KEYSTORE_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
