/*================================================================================
  code generated by: java2cpp
  class: java.text.Bidi
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_TEXT_BIDI_HPP_DECL
#define J2CPP_JAVA_TEXT_BIDI_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace text { class AttributedCharacterIterator; } } }


#include <java/lang/Object.hpp>
#include <java/lang/String.hpp>
#include <java/text/AttributedCharacterIterator.hpp>


namespace j2cpp {

namespace java { namespace text {

	class Bidi;
	class Bidi
		: public cpp_object<Bidi>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_METHOD(12)
		J2CPP_DECLARE_METHOD(13)
		J2CPP_DECLARE_METHOD(14)
		J2CPP_DECLARE_METHOD(15)
		J2CPP_DECLARE_METHOD(16)
		J2CPP_DECLARE_METHOD(17)
		J2CPP_DECLARE_FIELD(0)
		J2CPP_DECLARE_FIELD(1)
		J2CPP_DECLARE_FIELD(2)
		J2CPP_DECLARE_FIELD(3)

		explicit Bidi(jobject jobj)
		: cpp_object<Bidi>(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;


		Bidi(local_ref< java::text::AttributedCharacterIterator > const&);
		Bidi(local_ref< cpp_char_array<1> > const&, cpp_int const&, local_ref< cpp_byte_array<1> > const&, cpp_int const&, cpp_int const&, cpp_int const&);
		Bidi(local_ref< java::lang::String > const&, cpp_int const&);
		cpp_boolean baseIsLeftToRight();
		local_ref< java::text::Bidi > createLineBidi(cpp_int const&, cpp_int const&);
		cpp_int getBaseLevel();
		cpp_int getLength();
		cpp_int getLevelAt(cpp_int const&);
		cpp_int getRunCount();
		cpp_int getRunLevel(cpp_int const&);
		cpp_int getRunLimit(cpp_int const&);
		cpp_int getRunStart(cpp_int const&);
		cpp_boolean isLeftToRight();
		cpp_boolean isMixed();
		cpp_boolean isRightToLeft();
		static void reorderVisually(local_ref< cpp_byte_array<1> > const&, cpp_int const&, local_ref< cpp_object_array<java::lang::Object, 1> > const&, cpp_int const&, cpp_int const&);
		static cpp_boolean requiresBidi(local_ref< cpp_char_array<1> > const&, cpp_int const&, cpp_int const&);
		local_ref< java::lang::String > toString();

		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(0), J2CPP_FIELD_SIGNATURE(0), cpp_int > DIRECTION_DEFAULT_LEFT_TO_RIGHT;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(1), J2CPP_FIELD_SIGNATURE(1), cpp_int > DIRECTION_DEFAULT_RIGHT_TO_LEFT;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(2), J2CPP_FIELD_SIGNATURE(2), cpp_int > DIRECTION_LEFT_TO_RIGHT;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(3), J2CPP_FIELD_SIGNATURE(3), cpp_int > DIRECTION_RIGHT_TO_LEFT;
	}; //class Bidi

} //namespace text
} //namespace java

} //namespace j2cpp

#endif //J2CPP_JAVA_TEXT_BIDI_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_TEXT_BIDI_HPP_IMPL
#define J2CPP_JAVA_TEXT_BIDI_HPP_IMPL

namespace j2cpp {



java::text::Bidi::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jtype());
}


java::text::Bidi::Bidi(local_ref< java::text::AttributedCharacterIterator > const &a0)
: cpp_object<java::text::Bidi>(
	environment::get().get_jenv()->NewObject(
		get_class<java::text::Bidi::J2CPP_CLASS_NAME>(),
		get_method_id<java::text::Bidi::J2CPP_CLASS_NAME, java::text::Bidi::J2CPP_METHOD_NAME(0), java::text::Bidi::J2CPP_METHOD_SIGNATURE(0), false>(),
		a0.get_jtype()
	)
)
{
}



java::text::Bidi::Bidi(local_ref< cpp_char_array<1> > const &a0, cpp_int const &a1, local_ref< cpp_byte_array<1> > const &a2, cpp_int const &a3, cpp_int const &a4, cpp_int const &a5)
: cpp_object<java::text::Bidi>(
	environment::get().get_jenv()->NewObject(
		get_class<java::text::Bidi::J2CPP_CLASS_NAME>(),
		get_method_id<java::text::Bidi::J2CPP_CLASS_NAME, java::text::Bidi::J2CPP_METHOD_NAME(1), java::text::Bidi::J2CPP_METHOD_SIGNATURE(1), false>(),
		a0.get_jtype(), a1.get_jtype(), a2.get_jtype(), a3.get_jtype(), a4.get_jtype(), a5.get_jtype()
	)
)
{
}



java::text::Bidi::Bidi(local_ref< java::lang::String > const &a0, cpp_int const &a1)
: cpp_object<java::text::Bidi>(
	environment::get().get_jenv()->NewObject(
		get_class<java::text::Bidi::J2CPP_CLASS_NAME>(),
		get_method_id<java::text::Bidi::J2CPP_CLASS_NAME, java::text::Bidi::J2CPP_METHOD_NAME(2), java::text::Bidi::J2CPP_METHOD_SIGNATURE(2), false>(),
		a0.get_jtype(), a1.get_jtype()
	)
)
{
}


cpp_boolean java::text::Bidi::baseIsLeftToRight()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>()
		)
	);
}

local_ref< java::text::Bidi > java::text::Bidi::createLineBidi(cpp_int const &a0, cpp_int const &a1)
{
	return local_ref< java::text::Bidi >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_int java::text::Bidi::getBaseLevel()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>()
		)
	);
}

cpp_int java::text::Bidi::getLength()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>()
		)
	);
}

cpp_int java::text::Bidi::getLevelAt(cpp_int const &a0)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(7), J2CPP_METHOD_SIGNATURE(7), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int java::text::Bidi::getRunCount()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(8), J2CPP_METHOD_SIGNATURE(8), false>()
		)
	);
}

cpp_int java::text::Bidi::getRunLevel(cpp_int const &a0)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(9), J2CPP_METHOD_SIGNATURE(9), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int java::text::Bidi::getRunLimit(cpp_int const &a0)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(10), J2CPP_METHOD_SIGNATURE(10), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int java::text::Bidi::getRunStart(cpp_int const &a0)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(11), J2CPP_METHOD_SIGNATURE(11), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean java::text::Bidi::isLeftToRight()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(12), J2CPP_METHOD_SIGNATURE(12), false>()
		)
	);
}

cpp_boolean java::text::Bidi::isMixed()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(13), J2CPP_METHOD_SIGNATURE(13), false>()
		)
	);
}

cpp_boolean java::text::Bidi::isRightToLeft()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(14), J2CPP_METHOD_SIGNATURE(14), false>()
		)
	);
}

void java::text::Bidi::reorderVisually(local_ref< cpp_byte_array<1> > const &a0, cpp_int const &a1, local_ref< cpp_object_array<java::lang::Object, 1> > const &a2, cpp_int const &a3, cpp_int const &a4)
{
	return void(
		environment::get().get_jenv()->CallStaticVoidMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(15), J2CPP_METHOD_SIGNATURE(15), true>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype(), a3.get_jtype(), a4.get_jtype()
		)
	);
}

cpp_boolean java::text::Bidi::requiresBidi(local_ref< cpp_char_array<1> > const &a0, cpp_int const &a1, cpp_int const &a2)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallStaticBooleanMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(16), J2CPP_METHOD_SIGNATURE(16), true>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

local_ref< java::lang::String > java::text::Bidi::toString()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(17), J2CPP_METHOD_SIGNATURE(17), false>()
		)
	);
}


static_field<
	java::text::Bidi::J2CPP_CLASS_NAME,
	java::text::Bidi::J2CPP_FIELD_NAME(0),
	java::text::Bidi::J2CPP_FIELD_SIGNATURE(0),
	cpp_int
> java::text::Bidi::DIRECTION_DEFAULT_LEFT_TO_RIGHT;

static_field<
	java::text::Bidi::J2CPP_CLASS_NAME,
	java::text::Bidi::J2CPP_FIELD_NAME(1),
	java::text::Bidi::J2CPP_FIELD_SIGNATURE(1),
	cpp_int
> java::text::Bidi::DIRECTION_DEFAULT_RIGHT_TO_LEFT;

static_field<
	java::text::Bidi::J2CPP_CLASS_NAME,
	java::text::Bidi::J2CPP_FIELD_NAME(2),
	java::text::Bidi::J2CPP_FIELD_SIGNATURE(2),
	cpp_int
> java::text::Bidi::DIRECTION_LEFT_TO_RIGHT;

static_field<
	java::text::Bidi::J2CPP_CLASS_NAME,
	java::text::Bidi::J2CPP_FIELD_NAME(3),
	java::text::Bidi::J2CPP_FIELD_SIGNATURE(3),
	cpp_int
> java::text::Bidi::DIRECTION_RIGHT_TO_LEFT;


J2CPP_DEFINE_CLASS(java::text::Bidi,"java/text/Bidi")
J2CPP_DEFINE_METHOD(java::text::Bidi,0,"<init>","(Ljava/text/AttributedCharacterIterator;)V")
J2CPP_DEFINE_METHOD(java::text::Bidi,1,"<init>","([CI[BIII)V")
J2CPP_DEFINE_METHOD(java::text::Bidi,2,"<init>","(Ljava/lang/String;I)V")
J2CPP_DEFINE_METHOD(java::text::Bidi,3,"baseIsLeftToRight","()Z")
J2CPP_DEFINE_METHOD(java::text::Bidi,4,"createLineBidi","(II)Ljava/text/Bidi;")
J2CPP_DEFINE_METHOD(java::text::Bidi,5,"getBaseLevel","()I")
J2CPP_DEFINE_METHOD(java::text::Bidi,6,"getLength","()I")
J2CPP_DEFINE_METHOD(java::text::Bidi,7,"getLevelAt","(I)I")
J2CPP_DEFINE_METHOD(java::text::Bidi,8,"getRunCount","()I")
J2CPP_DEFINE_METHOD(java::text::Bidi,9,"getRunLevel","(I)I")
J2CPP_DEFINE_METHOD(java::text::Bidi,10,"getRunLimit","(I)I")
J2CPP_DEFINE_METHOD(java::text::Bidi,11,"getRunStart","(I)I")
J2CPP_DEFINE_METHOD(java::text::Bidi,12,"isLeftToRight","()Z")
J2CPP_DEFINE_METHOD(java::text::Bidi,13,"isMixed","()Z")
J2CPP_DEFINE_METHOD(java::text::Bidi,14,"isRightToLeft","()Z")
J2CPP_DEFINE_METHOD(java::text::Bidi,15,"reorderVisually","([BI[java.lang.ObjectII)V")
J2CPP_DEFINE_METHOD(java::text::Bidi,16,"requiresBidi","([CII)Z")
J2CPP_DEFINE_METHOD(java::text::Bidi,17,"toString","()Ljava/lang/String;")
J2CPP_DEFINE_FIELD(java::text::Bidi,0,"DIRECTION_DEFAULT_LEFT_TO_RIGHT","I")
J2CPP_DEFINE_FIELD(java::text::Bidi,1,"DIRECTION_DEFAULT_RIGHT_TO_LEFT","I")
J2CPP_DEFINE_FIELD(java::text::Bidi,2,"DIRECTION_LEFT_TO_RIGHT","I")
J2CPP_DEFINE_FIELD(java::text::Bidi,3,"DIRECTION_RIGHT_TO_LEFT","I")

} //namespace j2cpp

#endif //J2CPP_JAVA_TEXT_BIDI_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
