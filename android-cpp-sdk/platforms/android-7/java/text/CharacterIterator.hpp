/*================================================================================
  code generated by: java2cpp
  class: java.text.CharacterIterator
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_TEXT_CHARACTERITERATOR_HPP_DECL
#define J2CPP_JAVA_TEXT_CHARACTERITERATOR_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace lang { class Cloneable; } } }


#include <java/lang/Cloneable.hpp>
#include <java/lang/Object.hpp>


namespace j2cpp {

namespace java { namespace text {

	class CharacterIterator;
	class CharacterIterator
		: public cpp_object<CharacterIterator>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_FIELD(0)

		explicit CharacterIterator(jobject jobj)
		: cpp_object<CharacterIterator>(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;
		operator local_ref<java::lang::Cloneable>() const;


		local_ref< java::lang::Object > clone();
		cpp_char current();
		cpp_char first();
		cpp_int getBeginIndex();
		cpp_int getEndIndex();
		cpp_int getIndex();
		cpp_char last();
		cpp_char next();
		cpp_char previous();
		cpp_char setIndex(cpp_int const&);

		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(0), J2CPP_FIELD_SIGNATURE(0), cpp_char > DONE;
	}; //class CharacterIterator

} //namespace text
} //namespace java

} //namespace j2cpp

#endif //J2CPP_JAVA_TEXT_CHARACTERITERATOR_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_TEXT_CHARACTERITERATOR_HPP_IMPL
#define J2CPP_JAVA_TEXT_CHARACTERITERATOR_HPP_IMPL

namespace j2cpp {



java::text::CharacterIterator::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jtype());
}

java::text::CharacterIterator::operator local_ref<java::lang::Cloneable>() const
{
	return local_ref<java::lang::Cloneable>(get_jtype());
}

local_ref< java::lang::Object > java::text::CharacterIterator::clone()
{
	return local_ref< java::lang::Object >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(0), J2CPP_METHOD_SIGNATURE(0), false>()
		)
	);
}

cpp_char java::text::CharacterIterator::current()
{
	return cpp_char(
		environment::get().get_jenv()->CallCharMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), false>()
		)
	);
}

cpp_char java::text::CharacterIterator::first()
{
	return cpp_char(
		environment::get().get_jenv()->CallCharMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>()
		)
	);
}

cpp_int java::text::CharacterIterator::getBeginIndex()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>()
		)
	);
}

cpp_int java::text::CharacterIterator::getEndIndex()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>()
		)
	);
}

cpp_int java::text::CharacterIterator::getIndex()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>()
		)
	);
}

cpp_char java::text::CharacterIterator::last()
{
	return cpp_char(
		environment::get().get_jenv()->CallCharMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>()
		)
	);
}

cpp_char java::text::CharacterIterator::next()
{
	return cpp_char(
		environment::get().get_jenv()->CallCharMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(7), J2CPP_METHOD_SIGNATURE(7), false>()
		)
	);
}

cpp_char java::text::CharacterIterator::previous()
{
	return cpp_char(
		environment::get().get_jenv()->CallCharMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(8), J2CPP_METHOD_SIGNATURE(8), false>()
		)
	);
}

cpp_char java::text::CharacterIterator::setIndex(cpp_int const &a0)
{
	return cpp_char(
		environment::get().get_jenv()->CallCharMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(9), J2CPP_METHOD_SIGNATURE(9), false>(),
			a0.get_jtype()
		)
	);
}


static_field<
	java::text::CharacterIterator::J2CPP_CLASS_NAME,
	java::text::CharacterIterator::J2CPP_FIELD_NAME(0),
	java::text::CharacterIterator::J2CPP_FIELD_SIGNATURE(0),
	cpp_char
> java::text::CharacterIterator::DONE;


J2CPP_DEFINE_CLASS(java::text::CharacterIterator,"java/text/CharacterIterator")
J2CPP_DEFINE_METHOD(java::text::CharacterIterator,0,"clone","()Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(java::text::CharacterIterator,1,"current","()C")
J2CPP_DEFINE_METHOD(java::text::CharacterIterator,2,"first","()C")
J2CPP_DEFINE_METHOD(java::text::CharacterIterator,3,"getBeginIndex","()I")
J2CPP_DEFINE_METHOD(java::text::CharacterIterator,4,"getEndIndex","()I")
J2CPP_DEFINE_METHOD(java::text::CharacterIterator,5,"getIndex","()I")
J2CPP_DEFINE_METHOD(java::text::CharacterIterator,6,"last","()C")
J2CPP_DEFINE_METHOD(java::text::CharacterIterator,7,"next","()C")
J2CPP_DEFINE_METHOD(java::text::CharacterIterator,8,"previous","()C")
J2CPP_DEFINE_METHOD(java::text::CharacterIterator,9,"setIndex","(I)C")
J2CPP_DEFINE_FIELD(java::text::CharacterIterator,0,"DONE","C")

} //namespace j2cpp

#endif //J2CPP_JAVA_TEXT_CHARACTERITERATOR_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
