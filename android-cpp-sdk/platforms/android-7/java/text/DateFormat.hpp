/*================================================================================
  code generated by: java2cpp
  class: java.text.DateFormat
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_TEXT_DATEFORMAT_HPP_DECL
#define J2CPP_JAVA_TEXT_DATEFORMAT_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace lang { class StringBuffer; } } }
namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace text { class Format; } } }
namespace j2cpp { namespace java { namespace text { namespace Format_ { class Field; } } } }
namespace j2cpp { namespace java { namespace text { class NumberFormat; } } }
namespace j2cpp { namespace java { namespace text { class ParsePosition; } } }
namespace j2cpp { namespace java { namespace text { namespace DateFormat_ { class Field; } } } }
namespace j2cpp { namespace java { namespace text { class FieldPosition; } } }
namespace j2cpp { namespace java { namespace util { class Locale; } } }
namespace j2cpp { namespace java { namespace util { class Date; } } }
namespace j2cpp { namespace java { namespace util { class Calendar; } } }
namespace j2cpp { namespace java { namespace util { class TimeZone; } } }


#include <java/lang/Object.hpp>
#include <java/lang/String.hpp>
#include <java/lang/StringBuffer.hpp>
#include <java/text/DateFormat.hpp>
#include <java/text/FieldPosition.hpp>
#include <java/text/Format.hpp>
#include <java/text/NumberFormat.hpp>
#include <java/text/ParsePosition.hpp>
#include <java/util/Calendar.hpp>
#include <java/util/Date.hpp>
#include <java/util/Locale.hpp>
#include <java/util/TimeZone.hpp>


namespace j2cpp {

namespace java { namespace text {

	class DateFormat;
	namespace DateFormat_ {

		class Field;
		class Field
			: public cpp_object<Field>
		{
		public:

			J2CPP_DECLARE_CLASS

			J2CPP_DECLARE_METHOD(0)
			J2CPP_DECLARE_METHOD(1)
			J2CPP_DECLARE_METHOD(2)
			J2CPP_DECLARE_METHOD(3)
			J2CPP_DECLARE_METHOD(4)
			J2CPP_DECLARE_FIELD(0)
			J2CPP_DECLARE_FIELD(1)
			J2CPP_DECLARE_FIELD(2)
			J2CPP_DECLARE_FIELD(3)
			J2CPP_DECLARE_FIELD(4)
			J2CPP_DECLARE_FIELD(5)
			J2CPP_DECLARE_FIELD(6)
			J2CPP_DECLARE_FIELD(7)
			J2CPP_DECLARE_FIELD(8)
			J2CPP_DECLARE_FIELD(9)
			J2CPP_DECLARE_FIELD(10)
			J2CPP_DECLARE_FIELD(11)
			J2CPP_DECLARE_FIELD(12)
			J2CPP_DECLARE_FIELD(13)
			J2CPP_DECLARE_FIELD(14)
			J2CPP_DECLARE_FIELD(15)
			J2CPP_DECLARE_FIELD(16)
			J2CPP_DECLARE_FIELD(17)

			explicit Field(jobject jobj)
			: cpp_object<Field>(jobj)
			{
			}

			operator local_ref<java::text::Format_::Field>() const;


			cpp_int getCalendarField();
			static local_ref< java::text::DateFormat_::Field > ofCalendarField(cpp_int const&);

			static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(0), J2CPP_FIELD_SIGNATURE(0), local_ref< java::text::DateFormat_::Field > > ERA;
			static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(1), J2CPP_FIELD_SIGNATURE(1), local_ref< java::text::DateFormat_::Field > > YEAR;
			static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(2), J2CPP_FIELD_SIGNATURE(2), local_ref< java::text::DateFormat_::Field > > MONTH;
			static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(3), J2CPP_FIELD_SIGNATURE(3), local_ref< java::text::DateFormat_::Field > > HOUR_OF_DAY0;
			static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(4), J2CPP_FIELD_SIGNATURE(4), local_ref< java::text::DateFormat_::Field > > HOUR_OF_DAY1;
			static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(5), J2CPP_FIELD_SIGNATURE(5), local_ref< java::text::DateFormat_::Field > > MINUTE;
			static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(6), J2CPP_FIELD_SIGNATURE(6), local_ref< java::text::DateFormat_::Field > > SECOND;
			static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(7), J2CPP_FIELD_SIGNATURE(7), local_ref< java::text::DateFormat_::Field > > MILLISECOND;
			static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(8), J2CPP_FIELD_SIGNATURE(8), local_ref< java::text::DateFormat_::Field > > DAY_OF_WEEK;
			static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(9), J2CPP_FIELD_SIGNATURE(9), local_ref< java::text::DateFormat_::Field > > DAY_OF_MONTH;
			static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(10), J2CPP_FIELD_SIGNATURE(10), local_ref< java::text::DateFormat_::Field > > DAY_OF_YEAR;
			static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(11), J2CPP_FIELD_SIGNATURE(11), local_ref< java::text::DateFormat_::Field > > DAY_OF_WEEK_IN_MONTH;
			static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(12), J2CPP_FIELD_SIGNATURE(12), local_ref< java::text::DateFormat_::Field > > WEEK_OF_YEAR;
			static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(13), J2CPP_FIELD_SIGNATURE(13), local_ref< java::text::DateFormat_::Field > > WEEK_OF_MONTH;
			static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(14), J2CPP_FIELD_SIGNATURE(14), local_ref< java::text::DateFormat_::Field > > AM_PM;
			static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(15), J2CPP_FIELD_SIGNATURE(15), local_ref< java::text::DateFormat_::Field > > HOUR0;
			static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(16), J2CPP_FIELD_SIGNATURE(16), local_ref< java::text::DateFormat_::Field > > HOUR1;
			static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(17), J2CPP_FIELD_SIGNATURE(17), local_ref< java::text::DateFormat_::Field > > TIME_ZONE;
		}; //class Field

	} //namespace DateFormat_

	class DateFormat
		: public cpp_object<DateFormat>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_METHOD(12)
		J2CPP_DECLARE_METHOD(13)
		J2CPP_DECLARE_METHOD(14)
		J2CPP_DECLARE_METHOD(15)
		J2CPP_DECLARE_METHOD(16)
		J2CPP_DECLARE_METHOD(17)
		J2CPP_DECLARE_METHOD(18)
		J2CPP_DECLARE_METHOD(19)
		J2CPP_DECLARE_METHOD(20)
		J2CPP_DECLARE_METHOD(21)
		J2CPP_DECLARE_METHOD(22)
		J2CPP_DECLARE_METHOD(23)
		J2CPP_DECLARE_METHOD(24)
		J2CPP_DECLARE_METHOD(25)
		J2CPP_DECLARE_METHOD(26)
		J2CPP_DECLARE_METHOD(27)
		J2CPP_DECLARE_METHOD(28)
		J2CPP_DECLARE_FIELD(0)
		J2CPP_DECLARE_FIELD(1)
		J2CPP_DECLARE_FIELD(2)
		J2CPP_DECLARE_FIELD(3)
		J2CPP_DECLARE_FIELD(4)
		J2CPP_DECLARE_FIELD(5)
		J2CPP_DECLARE_FIELD(6)
		J2CPP_DECLARE_FIELD(7)
		J2CPP_DECLARE_FIELD(8)
		J2CPP_DECLARE_FIELD(9)
		J2CPP_DECLARE_FIELD(10)
		J2CPP_DECLARE_FIELD(11)
		J2CPP_DECLARE_FIELD(12)
		J2CPP_DECLARE_FIELD(13)
		J2CPP_DECLARE_FIELD(14)
		J2CPP_DECLARE_FIELD(15)
		J2CPP_DECLARE_FIELD(16)
		J2CPP_DECLARE_FIELD(17)
		J2CPP_DECLARE_FIELD(18)
		J2CPP_DECLARE_FIELD(19)
		J2CPP_DECLARE_FIELD(20)
		J2CPP_DECLARE_FIELD(21)
		J2CPP_DECLARE_FIELD(22)
		J2CPP_DECLARE_FIELD(23)
		J2CPP_DECLARE_FIELD(24)

		typedef DateFormat_::Field Field;

		explicit DateFormat(jobject jobj)
		: cpp_object<DateFormat>(jobj)
		{
		}

		operator local_ref<java::text::Format>() const;


		local_ref< java::lang::Object > clone();
		cpp_boolean equals(local_ref< java::lang::Object > const&);
		local_ref< java::lang::StringBuffer > format(local_ref< java::lang::Object > const&, local_ref< java::lang::StringBuffer > const&, local_ref< java::text::FieldPosition > const&);
		local_ref< java::lang::String > format(local_ref< java::util::Date > const&);
		local_ref< java::lang::StringBuffer > format(local_ref< java::util::Date > const&, local_ref< java::lang::StringBuffer > const&, local_ref< java::text::FieldPosition > const&);
		static local_ref< cpp_object_array<java::util::Locale, 1> > getAvailableLocales();
		local_ref< java::util::Calendar > getCalendar();
		static local_ref< java::text::DateFormat > getDateInstance();
		static local_ref< java::text::DateFormat > getDateInstance(cpp_int const&);
		static local_ref< java::text::DateFormat > getDateInstance(cpp_int const&, local_ref< java::util::Locale > const&);
		static local_ref< java::text::DateFormat > getDateTimeInstance();
		static local_ref< java::text::DateFormat > getDateTimeInstance(cpp_int const&, cpp_int const&);
		static local_ref< java::text::DateFormat > getDateTimeInstance(cpp_int const&, cpp_int const&, local_ref< java::util::Locale > const&);
		static local_ref< java::text::DateFormat > getInstance();
		local_ref< java::text::NumberFormat > getNumberFormat();
		static local_ref< java::text::DateFormat > getTimeInstance();
		static local_ref< java::text::DateFormat > getTimeInstance(cpp_int const&);
		static local_ref< java::text::DateFormat > getTimeInstance(cpp_int const&, local_ref< java::util::Locale > const&);
		local_ref< java::util::TimeZone > getTimeZone();
		cpp_int hashCode();
		cpp_boolean isLenient();
		local_ref< java::util::Date > parse(local_ref< java::lang::String > const&);
		local_ref< java::util::Date > parse(local_ref< java::lang::String > const&, local_ref< java::text::ParsePosition > const&);
		local_ref< java::lang::Object > parseObject(local_ref< java::lang::String > const&, local_ref< java::text::ParsePosition > const&);
		void setCalendar(local_ref< java::util::Calendar > const&);
		void setLenient(cpp_boolean const&);
		void setNumberFormat(local_ref< java::text::NumberFormat > const&);
		void setTimeZone(local_ref< java::util::TimeZone > const&);

		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(2), J2CPP_FIELD_SIGNATURE(2), cpp_int > DEFAULT;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(3), J2CPP_FIELD_SIGNATURE(3), cpp_int > FULL;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(4), J2CPP_FIELD_SIGNATURE(4), cpp_int > LONG;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(5), J2CPP_FIELD_SIGNATURE(5), cpp_int > MEDIUM;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(6), J2CPP_FIELD_SIGNATURE(6), cpp_int > SHORT;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(7), J2CPP_FIELD_SIGNATURE(7), cpp_int > ERA_FIELD;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(8), J2CPP_FIELD_SIGNATURE(8), cpp_int > YEAR_FIELD;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(9), J2CPP_FIELD_SIGNATURE(9), cpp_int > MONTH_FIELD;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(10), J2CPP_FIELD_SIGNATURE(10), cpp_int > DATE_FIELD;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(11), J2CPP_FIELD_SIGNATURE(11), cpp_int > HOUR_OF_DAY1_FIELD;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(12), J2CPP_FIELD_SIGNATURE(12), cpp_int > HOUR_OF_DAY0_FIELD;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(13), J2CPP_FIELD_SIGNATURE(13), cpp_int > MINUTE_FIELD;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(14), J2CPP_FIELD_SIGNATURE(14), cpp_int > SECOND_FIELD;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(15), J2CPP_FIELD_SIGNATURE(15), cpp_int > MILLISECOND_FIELD;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(16), J2CPP_FIELD_SIGNATURE(16), cpp_int > DAY_OF_WEEK_FIELD;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(17), J2CPP_FIELD_SIGNATURE(17), cpp_int > DAY_OF_YEAR_FIELD;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(18), J2CPP_FIELD_SIGNATURE(18), cpp_int > DAY_OF_WEEK_IN_MONTH_FIELD;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(19), J2CPP_FIELD_SIGNATURE(19), cpp_int > WEEK_OF_YEAR_FIELD;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(20), J2CPP_FIELD_SIGNATURE(20), cpp_int > WEEK_OF_MONTH_FIELD;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(21), J2CPP_FIELD_SIGNATURE(21), cpp_int > AM_PM_FIELD;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(22), J2CPP_FIELD_SIGNATURE(22), cpp_int > HOUR1_FIELD;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(23), J2CPP_FIELD_SIGNATURE(23), cpp_int > HOUR0_FIELD;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(24), J2CPP_FIELD_SIGNATURE(24), cpp_int > TIMEZONE_FIELD;
	}; //class DateFormat

} //namespace text
} //namespace java

} //namespace j2cpp

#endif //J2CPP_JAVA_TEXT_DATEFORMAT_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_TEXT_DATEFORMAT_HPP_IMPL
#define J2CPP_JAVA_TEXT_DATEFORMAT_HPP_IMPL

namespace j2cpp {




java::text::DateFormat_::Field::operator local_ref<java::text::Format_::Field>() const
{
	return local_ref<java::text::Format_::Field>(get_jtype());
}


cpp_int java::text::DateFormat_::Field::getCalendarField()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), false>()
		)
	);
}

local_ref< java::text::DateFormat_::Field > java::text::DateFormat_::Field::ofCalendarField(cpp_int const &a0)
{
	return local_ref< java::text::DateFormat_::Field >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), true>(),
			a0.get_jtype()
		)
	);
}




static_field<
	java::text::DateFormat_::Field::J2CPP_CLASS_NAME,
	java::text::DateFormat_::Field::J2CPP_FIELD_NAME(0),
	java::text::DateFormat_::Field::J2CPP_FIELD_SIGNATURE(0),
	local_ref< java::text::DateFormat_::Field >
> java::text::DateFormat_::Field::ERA;

static_field<
	java::text::DateFormat_::Field::J2CPP_CLASS_NAME,
	java::text::DateFormat_::Field::J2CPP_FIELD_NAME(1),
	java::text::DateFormat_::Field::J2CPP_FIELD_SIGNATURE(1),
	local_ref< java::text::DateFormat_::Field >
> java::text::DateFormat_::Field::YEAR;

static_field<
	java::text::DateFormat_::Field::J2CPP_CLASS_NAME,
	java::text::DateFormat_::Field::J2CPP_FIELD_NAME(2),
	java::text::DateFormat_::Field::J2CPP_FIELD_SIGNATURE(2),
	local_ref< java::text::DateFormat_::Field >
> java::text::DateFormat_::Field::MONTH;

static_field<
	java::text::DateFormat_::Field::J2CPP_CLASS_NAME,
	java::text::DateFormat_::Field::J2CPP_FIELD_NAME(3),
	java::text::DateFormat_::Field::J2CPP_FIELD_SIGNATURE(3),
	local_ref< java::text::DateFormat_::Field >
> java::text::DateFormat_::Field::HOUR_OF_DAY0;

static_field<
	java::text::DateFormat_::Field::J2CPP_CLASS_NAME,
	java::text::DateFormat_::Field::J2CPP_FIELD_NAME(4),
	java::text::DateFormat_::Field::J2CPP_FIELD_SIGNATURE(4),
	local_ref< java::text::DateFormat_::Field >
> java::text::DateFormat_::Field::HOUR_OF_DAY1;

static_field<
	java::text::DateFormat_::Field::J2CPP_CLASS_NAME,
	java::text::DateFormat_::Field::J2CPP_FIELD_NAME(5),
	java::text::DateFormat_::Field::J2CPP_FIELD_SIGNATURE(5),
	local_ref< java::text::DateFormat_::Field >
> java::text::DateFormat_::Field::MINUTE;

static_field<
	java::text::DateFormat_::Field::J2CPP_CLASS_NAME,
	java::text::DateFormat_::Field::J2CPP_FIELD_NAME(6),
	java::text::DateFormat_::Field::J2CPP_FIELD_SIGNATURE(6),
	local_ref< java::text::DateFormat_::Field >
> java::text::DateFormat_::Field::SECOND;

static_field<
	java::text::DateFormat_::Field::J2CPP_CLASS_NAME,
	java::text::DateFormat_::Field::J2CPP_FIELD_NAME(7),
	java::text::DateFormat_::Field::J2CPP_FIELD_SIGNATURE(7),
	local_ref< java::text::DateFormat_::Field >
> java::text::DateFormat_::Field::MILLISECOND;

static_field<
	java::text::DateFormat_::Field::J2CPP_CLASS_NAME,
	java::text::DateFormat_::Field::J2CPP_FIELD_NAME(8),
	java::text::DateFormat_::Field::J2CPP_FIELD_SIGNATURE(8),
	local_ref< java::text::DateFormat_::Field >
> java::text::DateFormat_::Field::DAY_OF_WEEK;

static_field<
	java::text::DateFormat_::Field::J2CPP_CLASS_NAME,
	java::text::DateFormat_::Field::J2CPP_FIELD_NAME(9),
	java::text::DateFormat_::Field::J2CPP_FIELD_SIGNATURE(9),
	local_ref< java::text::DateFormat_::Field >
> java::text::DateFormat_::Field::DAY_OF_MONTH;

static_field<
	java::text::DateFormat_::Field::J2CPP_CLASS_NAME,
	java::text::DateFormat_::Field::J2CPP_FIELD_NAME(10),
	java::text::DateFormat_::Field::J2CPP_FIELD_SIGNATURE(10),
	local_ref< java::text::DateFormat_::Field >
> java::text::DateFormat_::Field::DAY_OF_YEAR;

static_field<
	java::text::DateFormat_::Field::J2CPP_CLASS_NAME,
	java::text::DateFormat_::Field::J2CPP_FIELD_NAME(11),
	java::text::DateFormat_::Field::J2CPP_FIELD_SIGNATURE(11),
	local_ref< java::text::DateFormat_::Field >
> java::text::DateFormat_::Field::DAY_OF_WEEK_IN_MONTH;

static_field<
	java::text::DateFormat_::Field::J2CPP_CLASS_NAME,
	java::text::DateFormat_::Field::J2CPP_FIELD_NAME(12),
	java::text::DateFormat_::Field::J2CPP_FIELD_SIGNATURE(12),
	local_ref< java::text::DateFormat_::Field >
> java::text::DateFormat_::Field::WEEK_OF_YEAR;

static_field<
	java::text::DateFormat_::Field::J2CPP_CLASS_NAME,
	java::text::DateFormat_::Field::J2CPP_FIELD_NAME(13),
	java::text::DateFormat_::Field::J2CPP_FIELD_SIGNATURE(13),
	local_ref< java::text::DateFormat_::Field >
> java::text::DateFormat_::Field::WEEK_OF_MONTH;

static_field<
	java::text::DateFormat_::Field::J2CPP_CLASS_NAME,
	java::text::DateFormat_::Field::J2CPP_FIELD_NAME(14),
	java::text::DateFormat_::Field::J2CPP_FIELD_SIGNATURE(14),
	local_ref< java::text::DateFormat_::Field >
> java::text::DateFormat_::Field::AM_PM;

static_field<
	java::text::DateFormat_::Field::J2CPP_CLASS_NAME,
	java::text::DateFormat_::Field::J2CPP_FIELD_NAME(15),
	java::text::DateFormat_::Field::J2CPP_FIELD_SIGNATURE(15),
	local_ref< java::text::DateFormat_::Field >
> java::text::DateFormat_::Field::HOUR0;

static_field<
	java::text::DateFormat_::Field::J2CPP_CLASS_NAME,
	java::text::DateFormat_::Field::J2CPP_FIELD_NAME(16),
	java::text::DateFormat_::Field::J2CPP_FIELD_SIGNATURE(16),
	local_ref< java::text::DateFormat_::Field >
> java::text::DateFormat_::Field::HOUR1;

static_field<
	java::text::DateFormat_::Field::J2CPP_CLASS_NAME,
	java::text::DateFormat_::Field::J2CPP_FIELD_NAME(17),
	java::text::DateFormat_::Field::J2CPP_FIELD_SIGNATURE(17),
	local_ref< java::text::DateFormat_::Field >
> java::text::DateFormat_::Field::TIME_ZONE;


J2CPP_DEFINE_CLASS(java::text::DateFormat_::Field,"java/text/DateFormat$Field")
J2CPP_DEFINE_METHOD(java::text::DateFormat_::Field,0,"<init>","(Ljava/lang/String;I)V")
J2CPP_DEFINE_METHOD(java::text::DateFormat_::Field,1,"getCalendarField","()I")
J2CPP_DEFINE_METHOD(java::text::DateFormat_::Field,2,"ofCalendarField","(I)Ljava/text/DateFormat$Field;")
J2CPP_DEFINE_METHOD(java::text::DateFormat_::Field,3,"readResolve","()Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(java::text::DateFormat_::Field,4,"<clinit>","()V")
J2CPP_DEFINE_FIELD(java::text::DateFormat_::Field,0,"ERA","Ljava/text/DateFormat$Field;")
J2CPP_DEFINE_FIELD(java::text::DateFormat_::Field,1,"YEAR","Ljava/text/DateFormat$Field;")
J2CPP_DEFINE_FIELD(java::text::DateFormat_::Field,2,"MONTH","Ljava/text/DateFormat$Field;")
J2CPP_DEFINE_FIELD(java::text::DateFormat_::Field,3,"HOUR_OF_DAY0","Ljava/text/DateFormat$Field;")
J2CPP_DEFINE_FIELD(java::text::DateFormat_::Field,4,"HOUR_OF_DAY1","Ljava/text/DateFormat$Field;")
J2CPP_DEFINE_FIELD(java::text::DateFormat_::Field,5,"MINUTE","Ljava/text/DateFormat$Field;")
J2CPP_DEFINE_FIELD(java::text::DateFormat_::Field,6,"SECOND","Ljava/text/DateFormat$Field;")
J2CPP_DEFINE_FIELD(java::text::DateFormat_::Field,7,"MILLISECOND","Ljava/text/DateFormat$Field;")
J2CPP_DEFINE_FIELD(java::text::DateFormat_::Field,8,"DAY_OF_WEEK","Ljava/text/DateFormat$Field;")
J2CPP_DEFINE_FIELD(java::text::DateFormat_::Field,9,"DAY_OF_MONTH","Ljava/text/DateFormat$Field;")
J2CPP_DEFINE_FIELD(java::text::DateFormat_::Field,10,"DAY_OF_YEAR","Ljava/text/DateFormat$Field;")
J2CPP_DEFINE_FIELD(java::text::DateFormat_::Field,11,"DAY_OF_WEEK_IN_MONTH","Ljava/text/DateFormat$Field;")
J2CPP_DEFINE_FIELD(java::text::DateFormat_::Field,12,"WEEK_OF_YEAR","Ljava/text/DateFormat$Field;")
J2CPP_DEFINE_FIELD(java::text::DateFormat_::Field,13,"WEEK_OF_MONTH","Ljava/text/DateFormat$Field;")
J2CPP_DEFINE_FIELD(java::text::DateFormat_::Field,14,"AM_PM","Ljava/text/DateFormat$Field;")
J2CPP_DEFINE_FIELD(java::text::DateFormat_::Field,15,"HOUR0","Ljava/text/DateFormat$Field;")
J2CPP_DEFINE_FIELD(java::text::DateFormat_::Field,16,"HOUR1","Ljava/text/DateFormat$Field;")
J2CPP_DEFINE_FIELD(java::text::DateFormat_::Field,17,"TIME_ZONE","Ljava/text/DateFormat$Field;")



java::text::DateFormat::operator local_ref<java::text::Format>() const
{
	return local_ref<java::text::Format>(get_jtype());
}


local_ref< java::lang::Object > java::text::DateFormat::clone()
{
	return local_ref< java::lang::Object >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), false>()
		)
	);
}

cpp_boolean java::text::DateFormat::equals(local_ref< java::lang::Object > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::StringBuffer > java::text::DateFormat::format(local_ref< java::lang::Object > const &a0, local_ref< java::lang::StringBuffer > const &a1, local_ref< java::text::FieldPosition > const &a2)
{
	return local_ref< java::lang::StringBuffer >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

local_ref< java::lang::String > java::text::DateFormat::format(local_ref< java::util::Date > const &a0)
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::StringBuffer > java::text::DateFormat::format(local_ref< java::util::Date > const &a0, local_ref< java::lang::StringBuffer > const &a1, local_ref< java::text::FieldPosition > const &a2)
{
	return local_ref< java::lang::StringBuffer >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

local_ref< cpp_object_array<java::util::Locale, 1> > java::text::DateFormat::getAvailableLocales()
{
	return local_ref< cpp_object_array<java::util::Locale, 1> >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), true>()
		)
	);
}

local_ref< java::util::Calendar > java::text::DateFormat::getCalendar()
{
	return local_ref< java::util::Calendar >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(7), J2CPP_METHOD_SIGNATURE(7), false>()
		)
	);
}

local_ref< java::text::DateFormat > java::text::DateFormat::getDateInstance()
{
	return local_ref< java::text::DateFormat >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(8), J2CPP_METHOD_SIGNATURE(8), true>()
		)
	);
}

local_ref< java::text::DateFormat > java::text::DateFormat::getDateInstance(cpp_int const &a0)
{
	return local_ref< java::text::DateFormat >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(9), J2CPP_METHOD_SIGNATURE(9), true>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::text::DateFormat > java::text::DateFormat::getDateInstance(cpp_int const &a0, local_ref< java::util::Locale > const &a1)
{
	return local_ref< java::text::DateFormat >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(10), J2CPP_METHOD_SIGNATURE(10), true>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< java::text::DateFormat > java::text::DateFormat::getDateTimeInstance()
{
	return local_ref< java::text::DateFormat >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(11), J2CPP_METHOD_SIGNATURE(11), true>()
		)
	);
}

local_ref< java::text::DateFormat > java::text::DateFormat::getDateTimeInstance(cpp_int const &a0, cpp_int const &a1)
{
	return local_ref< java::text::DateFormat >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(12), J2CPP_METHOD_SIGNATURE(12), true>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< java::text::DateFormat > java::text::DateFormat::getDateTimeInstance(cpp_int const &a0, cpp_int const &a1, local_ref< java::util::Locale > const &a2)
{
	return local_ref< java::text::DateFormat >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(13), J2CPP_METHOD_SIGNATURE(13), true>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

local_ref< java::text::DateFormat > java::text::DateFormat::getInstance()
{
	return local_ref< java::text::DateFormat >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(14), J2CPP_METHOD_SIGNATURE(14), true>()
		)
	);
}

local_ref< java::text::NumberFormat > java::text::DateFormat::getNumberFormat()
{
	return local_ref< java::text::NumberFormat >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(15), J2CPP_METHOD_SIGNATURE(15), false>()
		)
	);
}

local_ref< java::text::DateFormat > java::text::DateFormat::getTimeInstance()
{
	return local_ref< java::text::DateFormat >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(16), J2CPP_METHOD_SIGNATURE(16), true>()
		)
	);
}

local_ref< java::text::DateFormat > java::text::DateFormat::getTimeInstance(cpp_int const &a0)
{
	return local_ref< java::text::DateFormat >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(17), J2CPP_METHOD_SIGNATURE(17), true>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::text::DateFormat > java::text::DateFormat::getTimeInstance(cpp_int const &a0, local_ref< java::util::Locale > const &a1)
{
	return local_ref< java::text::DateFormat >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(18), J2CPP_METHOD_SIGNATURE(18), true>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< java::util::TimeZone > java::text::DateFormat::getTimeZone()
{
	return local_ref< java::util::TimeZone >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(19), J2CPP_METHOD_SIGNATURE(19), false>()
		)
	);
}

cpp_int java::text::DateFormat::hashCode()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(20), J2CPP_METHOD_SIGNATURE(20), false>()
		)
	);
}

cpp_boolean java::text::DateFormat::isLenient()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(21), J2CPP_METHOD_SIGNATURE(21), false>()
		)
	);
}

local_ref< java::util::Date > java::text::DateFormat::parse(local_ref< java::lang::String > const &a0)
{
	return local_ref< java::util::Date >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(22), J2CPP_METHOD_SIGNATURE(22), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::util::Date > java::text::DateFormat::parse(local_ref< java::lang::String > const &a0, local_ref< java::text::ParsePosition > const &a1)
{
	return local_ref< java::util::Date >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(23), J2CPP_METHOD_SIGNATURE(23), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< java::lang::Object > java::text::DateFormat::parseObject(local_ref< java::lang::String > const &a0, local_ref< java::text::ParsePosition > const &a1)
{
	return local_ref< java::lang::Object >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(24), J2CPP_METHOD_SIGNATURE(24), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void java::text::DateFormat::setCalendar(local_ref< java::util::Calendar > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(25), J2CPP_METHOD_SIGNATURE(25), false>(),
			a0.get_jtype()
		)
	);
}

void java::text::DateFormat::setLenient(cpp_boolean const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(26), J2CPP_METHOD_SIGNATURE(26), false>(),
			a0.get_jtype()
		)
	);
}

void java::text::DateFormat::setNumberFormat(local_ref< java::text::NumberFormat > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(27), J2CPP_METHOD_SIGNATURE(27), false>(),
			a0.get_jtype()
		)
	);
}

void java::text::DateFormat::setTimeZone(local_ref< java::util::TimeZone > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(28), J2CPP_METHOD_SIGNATURE(28), false>(),
			a0.get_jtype()
		)
	);
}


static_field<
	java::text::DateFormat::J2CPP_CLASS_NAME,
	java::text::DateFormat::J2CPP_FIELD_NAME(2),
	java::text::DateFormat::J2CPP_FIELD_SIGNATURE(2),
	cpp_int
> java::text::DateFormat::DEFAULT;

static_field<
	java::text::DateFormat::J2CPP_CLASS_NAME,
	java::text::DateFormat::J2CPP_FIELD_NAME(3),
	java::text::DateFormat::J2CPP_FIELD_SIGNATURE(3),
	cpp_int
> java::text::DateFormat::FULL;

static_field<
	java::text::DateFormat::J2CPP_CLASS_NAME,
	java::text::DateFormat::J2CPP_FIELD_NAME(4),
	java::text::DateFormat::J2CPP_FIELD_SIGNATURE(4),
	cpp_int
> java::text::DateFormat::LONG;

static_field<
	java::text::DateFormat::J2CPP_CLASS_NAME,
	java::text::DateFormat::J2CPP_FIELD_NAME(5),
	java::text::DateFormat::J2CPP_FIELD_SIGNATURE(5),
	cpp_int
> java::text::DateFormat::MEDIUM;

static_field<
	java::text::DateFormat::J2CPP_CLASS_NAME,
	java::text::DateFormat::J2CPP_FIELD_NAME(6),
	java::text::DateFormat::J2CPP_FIELD_SIGNATURE(6),
	cpp_int
> java::text::DateFormat::SHORT;

static_field<
	java::text::DateFormat::J2CPP_CLASS_NAME,
	java::text::DateFormat::J2CPP_FIELD_NAME(7),
	java::text::DateFormat::J2CPP_FIELD_SIGNATURE(7),
	cpp_int
> java::text::DateFormat::ERA_FIELD;

static_field<
	java::text::DateFormat::J2CPP_CLASS_NAME,
	java::text::DateFormat::J2CPP_FIELD_NAME(8),
	java::text::DateFormat::J2CPP_FIELD_SIGNATURE(8),
	cpp_int
> java::text::DateFormat::YEAR_FIELD;

static_field<
	java::text::DateFormat::J2CPP_CLASS_NAME,
	java::text::DateFormat::J2CPP_FIELD_NAME(9),
	java::text::DateFormat::J2CPP_FIELD_SIGNATURE(9),
	cpp_int
> java::text::DateFormat::MONTH_FIELD;

static_field<
	java::text::DateFormat::J2CPP_CLASS_NAME,
	java::text::DateFormat::J2CPP_FIELD_NAME(10),
	java::text::DateFormat::J2CPP_FIELD_SIGNATURE(10),
	cpp_int
> java::text::DateFormat::DATE_FIELD;

static_field<
	java::text::DateFormat::J2CPP_CLASS_NAME,
	java::text::DateFormat::J2CPP_FIELD_NAME(11),
	java::text::DateFormat::J2CPP_FIELD_SIGNATURE(11),
	cpp_int
> java::text::DateFormat::HOUR_OF_DAY1_FIELD;

static_field<
	java::text::DateFormat::J2CPP_CLASS_NAME,
	java::text::DateFormat::J2CPP_FIELD_NAME(12),
	java::text::DateFormat::J2CPP_FIELD_SIGNATURE(12),
	cpp_int
> java::text::DateFormat::HOUR_OF_DAY0_FIELD;

static_field<
	java::text::DateFormat::J2CPP_CLASS_NAME,
	java::text::DateFormat::J2CPP_FIELD_NAME(13),
	java::text::DateFormat::J2CPP_FIELD_SIGNATURE(13),
	cpp_int
> java::text::DateFormat::MINUTE_FIELD;

static_field<
	java::text::DateFormat::J2CPP_CLASS_NAME,
	java::text::DateFormat::J2CPP_FIELD_NAME(14),
	java::text::DateFormat::J2CPP_FIELD_SIGNATURE(14),
	cpp_int
> java::text::DateFormat::SECOND_FIELD;

static_field<
	java::text::DateFormat::J2CPP_CLASS_NAME,
	java::text::DateFormat::J2CPP_FIELD_NAME(15),
	java::text::DateFormat::J2CPP_FIELD_SIGNATURE(15),
	cpp_int
> java::text::DateFormat::MILLISECOND_FIELD;

static_field<
	java::text::DateFormat::J2CPP_CLASS_NAME,
	java::text::DateFormat::J2CPP_FIELD_NAME(16),
	java::text::DateFormat::J2CPP_FIELD_SIGNATURE(16),
	cpp_int
> java::text::DateFormat::DAY_OF_WEEK_FIELD;

static_field<
	java::text::DateFormat::J2CPP_CLASS_NAME,
	java::text::DateFormat::J2CPP_FIELD_NAME(17),
	java::text::DateFormat::J2CPP_FIELD_SIGNATURE(17),
	cpp_int
> java::text::DateFormat::DAY_OF_YEAR_FIELD;

static_field<
	java::text::DateFormat::J2CPP_CLASS_NAME,
	java::text::DateFormat::J2CPP_FIELD_NAME(18),
	java::text::DateFormat::J2CPP_FIELD_SIGNATURE(18),
	cpp_int
> java::text::DateFormat::DAY_OF_WEEK_IN_MONTH_FIELD;

static_field<
	java::text::DateFormat::J2CPP_CLASS_NAME,
	java::text::DateFormat::J2CPP_FIELD_NAME(19),
	java::text::DateFormat::J2CPP_FIELD_SIGNATURE(19),
	cpp_int
> java::text::DateFormat::WEEK_OF_YEAR_FIELD;

static_field<
	java::text::DateFormat::J2CPP_CLASS_NAME,
	java::text::DateFormat::J2CPP_FIELD_NAME(20),
	java::text::DateFormat::J2CPP_FIELD_SIGNATURE(20),
	cpp_int
> java::text::DateFormat::WEEK_OF_MONTH_FIELD;

static_field<
	java::text::DateFormat::J2CPP_CLASS_NAME,
	java::text::DateFormat::J2CPP_FIELD_NAME(21),
	java::text::DateFormat::J2CPP_FIELD_SIGNATURE(21),
	cpp_int
> java::text::DateFormat::AM_PM_FIELD;

static_field<
	java::text::DateFormat::J2CPP_CLASS_NAME,
	java::text::DateFormat::J2CPP_FIELD_NAME(22),
	java::text::DateFormat::J2CPP_FIELD_SIGNATURE(22),
	cpp_int
> java::text::DateFormat::HOUR1_FIELD;

static_field<
	java::text::DateFormat::J2CPP_CLASS_NAME,
	java::text::DateFormat::J2CPP_FIELD_NAME(23),
	java::text::DateFormat::J2CPP_FIELD_SIGNATURE(23),
	cpp_int
> java::text::DateFormat::HOUR0_FIELD;

static_field<
	java::text::DateFormat::J2CPP_CLASS_NAME,
	java::text::DateFormat::J2CPP_FIELD_NAME(24),
	java::text::DateFormat::J2CPP_FIELD_SIGNATURE(24),
	cpp_int
> java::text::DateFormat::TIMEZONE_FIELD;


J2CPP_DEFINE_CLASS(java::text::DateFormat,"java/text/DateFormat")
J2CPP_DEFINE_METHOD(java::text::DateFormat,0,"<init>","()V")
J2CPP_DEFINE_METHOD(java::text::DateFormat,1,"clone","()Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(java::text::DateFormat,2,"equals","(Ljava/lang/Object;)Z")
J2CPP_DEFINE_METHOD(java::text::DateFormat,3,"format","(Ljava/lang/Object;Ljava/lang/StringBuffer;Ljava/text/FieldPosition;)Ljava/lang/StringBuffer;")
J2CPP_DEFINE_METHOD(java::text::DateFormat,4,"format","(Ljava/util/Date;)Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::text::DateFormat,5,"format","(Ljava/util/Date;Ljava/lang/StringBuffer;Ljava/text/FieldPosition;)Ljava/lang/StringBuffer;")
J2CPP_DEFINE_METHOD(java::text::DateFormat,6,"getAvailableLocales","()[java.util.Locale")
J2CPP_DEFINE_METHOD(java::text::DateFormat,7,"getCalendar","()Ljava/util/Calendar;")
J2CPP_DEFINE_METHOD(java::text::DateFormat,8,"getDateInstance","()Ljava/text/DateFormat;")
J2CPP_DEFINE_METHOD(java::text::DateFormat,9,"getDateInstance","(I)Ljava/text/DateFormat;")
J2CPP_DEFINE_METHOD(java::text::DateFormat,10,"getDateInstance","(ILjava/util/Locale;)Ljava/text/DateFormat;")
J2CPP_DEFINE_METHOD(java::text::DateFormat,11,"getDateTimeInstance","()Ljava/text/DateFormat;")
J2CPP_DEFINE_METHOD(java::text::DateFormat,12,"getDateTimeInstance","(II)Ljava/text/DateFormat;")
J2CPP_DEFINE_METHOD(java::text::DateFormat,13,"getDateTimeInstance","(IILjava/util/Locale;)Ljava/text/DateFormat;")
J2CPP_DEFINE_METHOD(java::text::DateFormat,14,"getInstance","()Ljava/text/DateFormat;")
J2CPP_DEFINE_METHOD(java::text::DateFormat,15,"getNumberFormat","()Ljava/text/NumberFormat;")
J2CPP_DEFINE_METHOD(java::text::DateFormat,16,"getTimeInstance","()Ljava/text/DateFormat;")
J2CPP_DEFINE_METHOD(java::text::DateFormat,17,"getTimeInstance","(I)Ljava/text/DateFormat;")
J2CPP_DEFINE_METHOD(java::text::DateFormat,18,"getTimeInstance","(ILjava/util/Locale;)Ljava/text/DateFormat;")
J2CPP_DEFINE_METHOD(java::text::DateFormat,19,"getTimeZone","()Ljava/util/TimeZone;")
J2CPP_DEFINE_METHOD(java::text::DateFormat,20,"hashCode","()I")
J2CPP_DEFINE_METHOD(java::text::DateFormat,21,"isLenient","()Z")
J2CPP_DEFINE_METHOD(java::text::DateFormat,22,"parse","(Ljava/lang/String;)Ljava/util/Date;")
J2CPP_DEFINE_METHOD(java::text::DateFormat,23,"parse","(Ljava/lang/String;Ljava/text/ParsePosition;)Ljava/util/Date;")
J2CPP_DEFINE_METHOD(java::text::DateFormat,24,"parseObject","(Ljava/lang/String;Ljava/text/ParsePosition;)Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(java::text::DateFormat,25,"setCalendar","(Ljava/util/Calendar;)V")
J2CPP_DEFINE_METHOD(java::text::DateFormat,26,"setLenient","(Z)V")
J2CPP_DEFINE_METHOD(java::text::DateFormat,27,"setNumberFormat","(Ljava/text/NumberFormat;)V")
J2CPP_DEFINE_METHOD(java::text::DateFormat,28,"setTimeZone","(Ljava/util/TimeZone;)V")
J2CPP_DEFINE_FIELD(java::text::DateFormat,0,"calendar","Ljava/util/Calendar;")
J2CPP_DEFINE_FIELD(java::text::DateFormat,1,"numberFormat","Ljava/text/NumberFormat;")
J2CPP_DEFINE_FIELD(java::text::DateFormat,2,"DEFAULT","I")
J2CPP_DEFINE_FIELD(java::text::DateFormat,3,"FULL","I")
J2CPP_DEFINE_FIELD(java::text::DateFormat,4,"LONG","I")
J2CPP_DEFINE_FIELD(java::text::DateFormat,5,"MEDIUM","I")
J2CPP_DEFINE_FIELD(java::text::DateFormat,6,"SHORT","I")
J2CPP_DEFINE_FIELD(java::text::DateFormat,7,"ERA_FIELD","I")
J2CPP_DEFINE_FIELD(java::text::DateFormat,8,"YEAR_FIELD","I")
J2CPP_DEFINE_FIELD(java::text::DateFormat,9,"MONTH_FIELD","I")
J2CPP_DEFINE_FIELD(java::text::DateFormat,10,"DATE_FIELD","I")
J2CPP_DEFINE_FIELD(java::text::DateFormat,11,"HOUR_OF_DAY1_FIELD","I")
J2CPP_DEFINE_FIELD(java::text::DateFormat,12,"HOUR_OF_DAY0_FIELD","I")
J2CPP_DEFINE_FIELD(java::text::DateFormat,13,"MINUTE_FIELD","I")
J2CPP_DEFINE_FIELD(java::text::DateFormat,14,"SECOND_FIELD","I")
J2CPP_DEFINE_FIELD(java::text::DateFormat,15,"MILLISECOND_FIELD","I")
J2CPP_DEFINE_FIELD(java::text::DateFormat,16,"DAY_OF_WEEK_FIELD","I")
J2CPP_DEFINE_FIELD(java::text::DateFormat,17,"DAY_OF_YEAR_FIELD","I")
J2CPP_DEFINE_FIELD(java::text::DateFormat,18,"DAY_OF_WEEK_IN_MONTH_FIELD","I")
J2CPP_DEFINE_FIELD(java::text::DateFormat,19,"WEEK_OF_YEAR_FIELD","I")
J2CPP_DEFINE_FIELD(java::text::DateFormat,20,"WEEK_OF_MONTH_FIELD","I")
J2CPP_DEFINE_FIELD(java::text::DateFormat,21,"AM_PM_FIELD","I")
J2CPP_DEFINE_FIELD(java::text::DateFormat,22,"HOUR1_FIELD","I")
J2CPP_DEFINE_FIELD(java::text::DateFormat,23,"HOUR0_FIELD","I")
J2CPP_DEFINE_FIELD(java::text::DateFormat,24,"TIMEZONE_FIELD","I")

} //namespace j2cpp

#endif //J2CPP_JAVA_TEXT_DATEFORMAT_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
