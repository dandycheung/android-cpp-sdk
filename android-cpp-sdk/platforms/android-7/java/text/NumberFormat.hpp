/*================================================================================
  code generated by: java2cpp
  class: java.text.NumberFormat
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_TEXT_NUMBERFORMAT_HPP_DECL
#define J2CPP_JAVA_TEXT_NUMBERFORMAT_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace lang { class StringBuffer; } } }
namespace j2cpp { namespace java { namespace lang { class Number; } } }
namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace text { class Format; } } }
namespace j2cpp { namespace java { namespace text { namespace Format_ { class Field; } } } }
namespace j2cpp { namespace java { namespace text { namespace NumberFormat_ { class Field; } } } }
namespace j2cpp { namespace java { namespace text { class ParsePosition; } } }
namespace j2cpp { namespace java { namespace text { class FieldPosition; } } }
namespace j2cpp { namespace java { namespace util { class Currency; } } }
namespace j2cpp { namespace java { namespace util { class Locale; } } }


#include <java/lang/Number.hpp>
#include <java/lang/Object.hpp>
#include <java/lang/String.hpp>
#include <java/lang/StringBuffer.hpp>
#include <java/text/FieldPosition.hpp>
#include <java/text/Format.hpp>
#include <java/text/NumberFormat.hpp>
#include <java/text/ParsePosition.hpp>
#include <java/util/Currency.hpp>
#include <java/util/Locale.hpp>


namespace j2cpp {

namespace java { namespace text {

	class NumberFormat;
	namespace NumberFormat_ {

		class Field;
		class Field
			: public cpp_object<Field>
		{
		public:

			J2CPP_DECLARE_CLASS

			J2CPP_DECLARE_METHOD(0)
			J2CPP_DECLARE_METHOD(1)
			J2CPP_DECLARE_METHOD(2)
			J2CPP_DECLARE_FIELD(0)
			J2CPP_DECLARE_FIELD(1)
			J2CPP_DECLARE_FIELD(2)
			J2CPP_DECLARE_FIELD(3)
			J2CPP_DECLARE_FIELD(4)
			J2CPP_DECLARE_FIELD(5)
			J2CPP_DECLARE_FIELD(6)
			J2CPP_DECLARE_FIELD(7)
			J2CPP_DECLARE_FIELD(8)
			J2CPP_DECLARE_FIELD(9)
			J2CPP_DECLARE_FIELD(10)

			explicit Field(jobject jobj)
			: cpp_object<Field>(jobj)
			{
			}

			operator local_ref<java::text::Format_::Field>() const;



			static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(0), J2CPP_FIELD_SIGNATURE(0), local_ref< java::text::NumberFormat_::Field > > SIGN;
			static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(1), J2CPP_FIELD_SIGNATURE(1), local_ref< java::text::NumberFormat_::Field > > INTEGER;
			static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(2), J2CPP_FIELD_SIGNATURE(2), local_ref< java::text::NumberFormat_::Field > > FRACTION;
			static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(3), J2CPP_FIELD_SIGNATURE(3), local_ref< java::text::NumberFormat_::Field > > EXPONENT;
			static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(4), J2CPP_FIELD_SIGNATURE(4), local_ref< java::text::NumberFormat_::Field > > EXPONENT_SIGN;
			static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(5), J2CPP_FIELD_SIGNATURE(5), local_ref< java::text::NumberFormat_::Field > > EXPONENT_SYMBOL;
			static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(6), J2CPP_FIELD_SIGNATURE(6), local_ref< java::text::NumberFormat_::Field > > DECIMAL_SEPARATOR;
			static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(7), J2CPP_FIELD_SIGNATURE(7), local_ref< java::text::NumberFormat_::Field > > GROUPING_SEPARATOR;
			static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(8), J2CPP_FIELD_SIGNATURE(8), local_ref< java::text::NumberFormat_::Field > > PERCENT;
			static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(9), J2CPP_FIELD_SIGNATURE(9), local_ref< java::text::NumberFormat_::Field > > PERMILLE;
			static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(10), J2CPP_FIELD_SIGNATURE(10), local_ref< java::text::NumberFormat_::Field > > CURRENCY;
		}; //class Field

	} //namespace NumberFormat_

	class NumberFormat
		: public cpp_object<NumberFormat>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_METHOD(12)
		J2CPP_DECLARE_METHOD(13)
		J2CPP_DECLARE_METHOD(14)
		J2CPP_DECLARE_METHOD(15)
		J2CPP_DECLARE_METHOD(16)
		J2CPP_DECLARE_METHOD(17)
		J2CPP_DECLARE_METHOD(18)
		J2CPP_DECLARE_METHOD(19)
		J2CPP_DECLARE_METHOD(20)
		J2CPP_DECLARE_METHOD(21)
		J2CPP_DECLARE_METHOD(22)
		J2CPP_DECLARE_METHOD(23)
		J2CPP_DECLARE_METHOD(24)
		J2CPP_DECLARE_METHOD(25)
		J2CPP_DECLARE_METHOD(26)
		J2CPP_DECLARE_METHOD(27)
		J2CPP_DECLARE_METHOD(28)
		J2CPP_DECLARE_METHOD(29)
		J2CPP_DECLARE_METHOD(30)
		J2CPP_DECLARE_METHOD(31)
		J2CPP_DECLARE_METHOD(32)
		J2CPP_DECLARE_METHOD(33)
		J2CPP_DECLARE_METHOD(34)
		J2CPP_DECLARE_METHOD(35)
		J2CPP_DECLARE_METHOD(36)
		J2CPP_DECLARE_FIELD(0)
		J2CPP_DECLARE_FIELD(1)

		typedef NumberFormat_::Field Field;

		explicit NumberFormat(jobject jobj)
		: cpp_object<NumberFormat>(jobj)
		{
		}

		operator local_ref<java::text::Format>() const;


		NumberFormat();
		local_ref< java::lang::Object > clone();
		cpp_boolean equals(local_ref< java::lang::Object > const&);
		local_ref< java::lang::String > format(cpp_double const&);
		local_ref< java::lang::StringBuffer > format(cpp_double const&, local_ref< java::lang::StringBuffer > const&, local_ref< java::text::FieldPosition > const&);
		local_ref< java::lang::String > format(cpp_long const&);
		local_ref< java::lang::StringBuffer > format(cpp_long const&, local_ref< java::lang::StringBuffer > const&, local_ref< java::text::FieldPosition > const&);
		local_ref< java::lang::StringBuffer > format(local_ref< java::lang::Object > const&, local_ref< java::lang::StringBuffer > const&, local_ref< java::text::FieldPosition > const&);
		static local_ref< cpp_object_array<java::util::Locale, 1> > getAvailableLocales();
		local_ref< java::util::Currency > getCurrency();
		static local_ref< java::text::NumberFormat > getCurrencyInstance();
		static local_ref< java::text::NumberFormat > getCurrencyInstance(local_ref< java::util::Locale > const&);
		static local_ref< java::text::NumberFormat > getIntegerInstance();
		static local_ref< java::text::NumberFormat > getIntegerInstance(local_ref< java::util::Locale > const&);
		static local_ref< java::text::NumberFormat > getInstance();
		static local_ref< java::text::NumberFormat > getInstance(local_ref< java::util::Locale > const&);
		cpp_int getMaximumFractionDigits();
		cpp_int getMaximumIntegerDigits();
		cpp_int getMinimumFractionDigits();
		cpp_int getMinimumIntegerDigits();
		static local_ref< java::text::NumberFormat > getNumberInstance();
		static local_ref< java::text::NumberFormat > getNumberInstance(local_ref< java::util::Locale > const&);
		static local_ref< java::text::NumberFormat > getPercentInstance();
		static local_ref< java::text::NumberFormat > getPercentInstance(local_ref< java::util::Locale > const&);
		cpp_int hashCode();
		cpp_boolean isGroupingUsed();
		cpp_boolean isParseIntegerOnly();
		local_ref< java::lang::Number > parse(local_ref< java::lang::String > const&);
		local_ref< java::lang::Number > parse(local_ref< java::lang::String > const&, local_ref< java::text::ParsePosition > const&);
		local_ref< java::lang::Object > parseObject(local_ref< java::lang::String > const&, local_ref< java::text::ParsePosition > const&);
		void setCurrency(local_ref< java::util::Currency > const&);
		void setGroupingUsed(cpp_boolean const&);
		void setMaximumFractionDigits(cpp_int const&);
		void setMaximumIntegerDigits(cpp_int const&);
		void setMinimumFractionDigits(cpp_int const&);
		void setMinimumIntegerDigits(cpp_int const&);
		void setParseIntegerOnly(cpp_boolean const&);

		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(0), J2CPP_FIELD_SIGNATURE(0), cpp_int > INTEGER_FIELD;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(1), J2CPP_FIELD_SIGNATURE(1), cpp_int > FRACTION_FIELD;
	}; //class NumberFormat

} //namespace text
} //namespace java

} //namespace j2cpp

#endif //J2CPP_JAVA_TEXT_NUMBERFORMAT_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_TEXT_NUMBERFORMAT_HPP_IMPL
#define J2CPP_JAVA_TEXT_NUMBERFORMAT_HPP_IMPL

namespace j2cpp {




java::text::NumberFormat_::Field::operator local_ref<java::text::Format_::Field>() const
{
	return local_ref<java::text::Format_::Field>(get_jtype());
}





static_field<
	java::text::NumberFormat_::Field::J2CPP_CLASS_NAME,
	java::text::NumberFormat_::Field::J2CPP_FIELD_NAME(0),
	java::text::NumberFormat_::Field::J2CPP_FIELD_SIGNATURE(0),
	local_ref< java::text::NumberFormat_::Field >
> java::text::NumberFormat_::Field::SIGN;

static_field<
	java::text::NumberFormat_::Field::J2CPP_CLASS_NAME,
	java::text::NumberFormat_::Field::J2CPP_FIELD_NAME(1),
	java::text::NumberFormat_::Field::J2CPP_FIELD_SIGNATURE(1),
	local_ref< java::text::NumberFormat_::Field >
> java::text::NumberFormat_::Field::INTEGER;

static_field<
	java::text::NumberFormat_::Field::J2CPP_CLASS_NAME,
	java::text::NumberFormat_::Field::J2CPP_FIELD_NAME(2),
	java::text::NumberFormat_::Field::J2CPP_FIELD_SIGNATURE(2),
	local_ref< java::text::NumberFormat_::Field >
> java::text::NumberFormat_::Field::FRACTION;

static_field<
	java::text::NumberFormat_::Field::J2CPP_CLASS_NAME,
	java::text::NumberFormat_::Field::J2CPP_FIELD_NAME(3),
	java::text::NumberFormat_::Field::J2CPP_FIELD_SIGNATURE(3),
	local_ref< java::text::NumberFormat_::Field >
> java::text::NumberFormat_::Field::EXPONENT;

static_field<
	java::text::NumberFormat_::Field::J2CPP_CLASS_NAME,
	java::text::NumberFormat_::Field::J2CPP_FIELD_NAME(4),
	java::text::NumberFormat_::Field::J2CPP_FIELD_SIGNATURE(4),
	local_ref< java::text::NumberFormat_::Field >
> java::text::NumberFormat_::Field::EXPONENT_SIGN;

static_field<
	java::text::NumberFormat_::Field::J2CPP_CLASS_NAME,
	java::text::NumberFormat_::Field::J2CPP_FIELD_NAME(5),
	java::text::NumberFormat_::Field::J2CPP_FIELD_SIGNATURE(5),
	local_ref< java::text::NumberFormat_::Field >
> java::text::NumberFormat_::Field::EXPONENT_SYMBOL;

static_field<
	java::text::NumberFormat_::Field::J2CPP_CLASS_NAME,
	java::text::NumberFormat_::Field::J2CPP_FIELD_NAME(6),
	java::text::NumberFormat_::Field::J2CPP_FIELD_SIGNATURE(6),
	local_ref< java::text::NumberFormat_::Field >
> java::text::NumberFormat_::Field::DECIMAL_SEPARATOR;

static_field<
	java::text::NumberFormat_::Field::J2CPP_CLASS_NAME,
	java::text::NumberFormat_::Field::J2CPP_FIELD_NAME(7),
	java::text::NumberFormat_::Field::J2CPP_FIELD_SIGNATURE(7),
	local_ref< java::text::NumberFormat_::Field >
> java::text::NumberFormat_::Field::GROUPING_SEPARATOR;

static_field<
	java::text::NumberFormat_::Field::J2CPP_CLASS_NAME,
	java::text::NumberFormat_::Field::J2CPP_FIELD_NAME(8),
	java::text::NumberFormat_::Field::J2CPP_FIELD_SIGNATURE(8),
	local_ref< java::text::NumberFormat_::Field >
> java::text::NumberFormat_::Field::PERCENT;

static_field<
	java::text::NumberFormat_::Field::J2CPP_CLASS_NAME,
	java::text::NumberFormat_::Field::J2CPP_FIELD_NAME(9),
	java::text::NumberFormat_::Field::J2CPP_FIELD_SIGNATURE(9),
	local_ref< java::text::NumberFormat_::Field >
> java::text::NumberFormat_::Field::PERMILLE;

static_field<
	java::text::NumberFormat_::Field::J2CPP_CLASS_NAME,
	java::text::NumberFormat_::Field::J2CPP_FIELD_NAME(10),
	java::text::NumberFormat_::Field::J2CPP_FIELD_SIGNATURE(10),
	local_ref< java::text::NumberFormat_::Field >
> java::text::NumberFormat_::Field::CURRENCY;


J2CPP_DEFINE_CLASS(java::text::NumberFormat_::Field,"java/text/NumberFormat$Field")
J2CPP_DEFINE_METHOD(java::text::NumberFormat_::Field,0,"<init>","(Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(java::text::NumberFormat_::Field,1,"readResolve","()Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(java::text::NumberFormat_::Field,2,"<clinit>","()V")
J2CPP_DEFINE_FIELD(java::text::NumberFormat_::Field,0,"SIGN","Ljava/text/NumberFormat$Field;")
J2CPP_DEFINE_FIELD(java::text::NumberFormat_::Field,1,"INTEGER","Ljava/text/NumberFormat$Field;")
J2CPP_DEFINE_FIELD(java::text::NumberFormat_::Field,2,"FRACTION","Ljava/text/NumberFormat$Field;")
J2CPP_DEFINE_FIELD(java::text::NumberFormat_::Field,3,"EXPONENT","Ljava/text/NumberFormat$Field;")
J2CPP_DEFINE_FIELD(java::text::NumberFormat_::Field,4,"EXPONENT_SIGN","Ljava/text/NumberFormat$Field;")
J2CPP_DEFINE_FIELD(java::text::NumberFormat_::Field,5,"EXPONENT_SYMBOL","Ljava/text/NumberFormat$Field;")
J2CPP_DEFINE_FIELD(java::text::NumberFormat_::Field,6,"DECIMAL_SEPARATOR","Ljava/text/NumberFormat$Field;")
J2CPP_DEFINE_FIELD(java::text::NumberFormat_::Field,7,"GROUPING_SEPARATOR","Ljava/text/NumberFormat$Field;")
J2CPP_DEFINE_FIELD(java::text::NumberFormat_::Field,8,"PERCENT","Ljava/text/NumberFormat$Field;")
J2CPP_DEFINE_FIELD(java::text::NumberFormat_::Field,9,"PERMILLE","Ljava/text/NumberFormat$Field;")
J2CPP_DEFINE_FIELD(java::text::NumberFormat_::Field,10,"CURRENCY","Ljava/text/NumberFormat$Field;")



java::text::NumberFormat::operator local_ref<java::text::Format>() const
{
	return local_ref<java::text::Format>(get_jtype());
}


java::text::NumberFormat::NumberFormat()
: cpp_object<java::text::NumberFormat>(
	environment::get().get_jenv()->NewObject(
		get_class<java::text::NumberFormat::J2CPP_CLASS_NAME>(),
		get_method_id<java::text::NumberFormat::J2CPP_CLASS_NAME, java::text::NumberFormat::J2CPP_METHOD_NAME(0), java::text::NumberFormat::J2CPP_METHOD_SIGNATURE(0), false>()
	)
)
{
}


local_ref< java::lang::Object > java::text::NumberFormat::clone()
{
	return local_ref< java::lang::Object >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), false>()
		)
	);
}

cpp_boolean java::text::NumberFormat::equals(local_ref< java::lang::Object > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::String > java::text::NumberFormat::format(cpp_double const &a0)
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::StringBuffer > java::text::NumberFormat::format(cpp_double const &a0, local_ref< java::lang::StringBuffer > const &a1, local_ref< java::text::FieldPosition > const &a2)
{
	return local_ref< java::lang::StringBuffer >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

local_ref< java::lang::String > java::text::NumberFormat::format(cpp_long const &a0)
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::StringBuffer > java::text::NumberFormat::format(cpp_long const &a0, local_ref< java::lang::StringBuffer > const &a1, local_ref< java::text::FieldPosition > const &a2)
{
	return local_ref< java::lang::StringBuffer >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

local_ref< java::lang::StringBuffer > java::text::NumberFormat::format(local_ref< java::lang::Object > const &a0, local_ref< java::lang::StringBuffer > const &a1, local_ref< java::text::FieldPosition > const &a2)
{
	return local_ref< java::lang::StringBuffer >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(7), J2CPP_METHOD_SIGNATURE(7), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

local_ref< cpp_object_array<java::util::Locale, 1> > java::text::NumberFormat::getAvailableLocales()
{
	return local_ref< cpp_object_array<java::util::Locale, 1> >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(8), J2CPP_METHOD_SIGNATURE(8), true>()
		)
	);
}

local_ref< java::util::Currency > java::text::NumberFormat::getCurrency()
{
	return local_ref< java::util::Currency >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(9), J2CPP_METHOD_SIGNATURE(9), false>()
		)
	);
}

local_ref< java::text::NumberFormat > java::text::NumberFormat::getCurrencyInstance()
{
	return local_ref< java::text::NumberFormat >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(10), J2CPP_METHOD_SIGNATURE(10), true>()
		)
	);
}

local_ref< java::text::NumberFormat > java::text::NumberFormat::getCurrencyInstance(local_ref< java::util::Locale > const &a0)
{
	return local_ref< java::text::NumberFormat >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(11), J2CPP_METHOD_SIGNATURE(11), true>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::text::NumberFormat > java::text::NumberFormat::getIntegerInstance()
{
	return local_ref< java::text::NumberFormat >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(12), J2CPP_METHOD_SIGNATURE(12), true>()
		)
	);
}

local_ref< java::text::NumberFormat > java::text::NumberFormat::getIntegerInstance(local_ref< java::util::Locale > const &a0)
{
	return local_ref< java::text::NumberFormat >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(13), J2CPP_METHOD_SIGNATURE(13), true>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::text::NumberFormat > java::text::NumberFormat::getInstance()
{
	return local_ref< java::text::NumberFormat >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(14), J2CPP_METHOD_SIGNATURE(14), true>()
		)
	);
}

local_ref< java::text::NumberFormat > java::text::NumberFormat::getInstance(local_ref< java::util::Locale > const &a0)
{
	return local_ref< java::text::NumberFormat >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(15), J2CPP_METHOD_SIGNATURE(15), true>(),
			a0.get_jtype()
		)
	);
}

cpp_int java::text::NumberFormat::getMaximumFractionDigits()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(16), J2CPP_METHOD_SIGNATURE(16), false>()
		)
	);
}

cpp_int java::text::NumberFormat::getMaximumIntegerDigits()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(17), J2CPP_METHOD_SIGNATURE(17), false>()
		)
	);
}

cpp_int java::text::NumberFormat::getMinimumFractionDigits()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(18), J2CPP_METHOD_SIGNATURE(18), false>()
		)
	);
}

cpp_int java::text::NumberFormat::getMinimumIntegerDigits()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(19), J2CPP_METHOD_SIGNATURE(19), false>()
		)
	);
}

local_ref< java::text::NumberFormat > java::text::NumberFormat::getNumberInstance()
{
	return local_ref< java::text::NumberFormat >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(20), J2CPP_METHOD_SIGNATURE(20), true>()
		)
	);
}

local_ref< java::text::NumberFormat > java::text::NumberFormat::getNumberInstance(local_ref< java::util::Locale > const &a0)
{
	return local_ref< java::text::NumberFormat >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(21), J2CPP_METHOD_SIGNATURE(21), true>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::text::NumberFormat > java::text::NumberFormat::getPercentInstance()
{
	return local_ref< java::text::NumberFormat >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(22), J2CPP_METHOD_SIGNATURE(22), true>()
		)
	);
}

local_ref< java::text::NumberFormat > java::text::NumberFormat::getPercentInstance(local_ref< java::util::Locale > const &a0)
{
	return local_ref< java::text::NumberFormat >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(23), J2CPP_METHOD_SIGNATURE(23), true>(),
			a0.get_jtype()
		)
	);
}

cpp_int java::text::NumberFormat::hashCode()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(24), J2CPP_METHOD_SIGNATURE(24), false>()
		)
	);
}

cpp_boolean java::text::NumberFormat::isGroupingUsed()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(25), J2CPP_METHOD_SIGNATURE(25), false>()
		)
	);
}

cpp_boolean java::text::NumberFormat::isParseIntegerOnly()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(26), J2CPP_METHOD_SIGNATURE(26), false>()
		)
	);
}

local_ref< java::lang::Number > java::text::NumberFormat::parse(local_ref< java::lang::String > const &a0)
{
	return local_ref< java::lang::Number >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(27), J2CPP_METHOD_SIGNATURE(27), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::Number > java::text::NumberFormat::parse(local_ref< java::lang::String > const &a0, local_ref< java::text::ParsePosition > const &a1)
{
	return local_ref< java::lang::Number >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(28), J2CPP_METHOD_SIGNATURE(28), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< java::lang::Object > java::text::NumberFormat::parseObject(local_ref< java::lang::String > const &a0, local_ref< java::text::ParsePosition > const &a1)
{
	return local_ref< java::lang::Object >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(29), J2CPP_METHOD_SIGNATURE(29), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void java::text::NumberFormat::setCurrency(local_ref< java::util::Currency > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(30), J2CPP_METHOD_SIGNATURE(30), false>(),
			a0.get_jtype()
		)
	);
}

void java::text::NumberFormat::setGroupingUsed(cpp_boolean const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(31), J2CPP_METHOD_SIGNATURE(31), false>(),
			a0.get_jtype()
		)
	);
}

void java::text::NumberFormat::setMaximumFractionDigits(cpp_int const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(32), J2CPP_METHOD_SIGNATURE(32), false>(),
			a0.get_jtype()
		)
	);
}

void java::text::NumberFormat::setMaximumIntegerDigits(cpp_int const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(33), J2CPP_METHOD_SIGNATURE(33), false>(),
			a0.get_jtype()
		)
	);
}

void java::text::NumberFormat::setMinimumFractionDigits(cpp_int const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(34), J2CPP_METHOD_SIGNATURE(34), false>(),
			a0.get_jtype()
		)
	);
}

void java::text::NumberFormat::setMinimumIntegerDigits(cpp_int const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(35), J2CPP_METHOD_SIGNATURE(35), false>(),
			a0.get_jtype()
		)
	);
}

void java::text::NumberFormat::setParseIntegerOnly(cpp_boolean const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(36), J2CPP_METHOD_SIGNATURE(36), false>(),
			a0.get_jtype()
		)
	);
}


static_field<
	java::text::NumberFormat::J2CPP_CLASS_NAME,
	java::text::NumberFormat::J2CPP_FIELD_NAME(0),
	java::text::NumberFormat::J2CPP_FIELD_SIGNATURE(0),
	cpp_int
> java::text::NumberFormat::INTEGER_FIELD;

static_field<
	java::text::NumberFormat::J2CPP_CLASS_NAME,
	java::text::NumberFormat::J2CPP_FIELD_NAME(1),
	java::text::NumberFormat::J2CPP_FIELD_SIGNATURE(1),
	cpp_int
> java::text::NumberFormat::FRACTION_FIELD;


J2CPP_DEFINE_CLASS(java::text::NumberFormat,"java/text/NumberFormat")
J2CPP_DEFINE_METHOD(java::text::NumberFormat,0,"<init>","()V")
J2CPP_DEFINE_METHOD(java::text::NumberFormat,1,"clone","()Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(java::text::NumberFormat,2,"equals","(Ljava/lang/Object;)Z")
J2CPP_DEFINE_METHOD(java::text::NumberFormat,3,"format","(D)Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::text::NumberFormat,4,"format","(DLjava/lang/StringBuffer;Ljava/text/FieldPosition;)Ljava/lang/StringBuffer;")
J2CPP_DEFINE_METHOD(java::text::NumberFormat,5,"format","(J)Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::text::NumberFormat,6,"format","(JLjava/lang/StringBuffer;Ljava/text/FieldPosition;)Ljava/lang/StringBuffer;")
J2CPP_DEFINE_METHOD(java::text::NumberFormat,7,"format","(Ljava/lang/Object;Ljava/lang/StringBuffer;Ljava/text/FieldPosition;)Ljava/lang/StringBuffer;")
J2CPP_DEFINE_METHOD(java::text::NumberFormat,8,"getAvailableLocales","()[java.util.Locale")
J2CPP_DEFINE_METHOD(java::text::NumberFormat,9,"getCurrency","()Ljava/util/Currency;")
J2CPP_DEFINE_METHOD(java::text::NumberFormat,10,"getCurrencyInstance","()Ljava/text/NumberFormat;")
J2CPP_DEFINE_METHOD(java::text::NumberFormat,11,"getCurrencyInstance","(Ljava/util/Locale;)Ljava/text/NumberFormat;")
J2CPP_DEFINE_METHOD(java::text::NumberFormat,12,"getIntegerInstance","()Ljava/text/NumberFormat;")
J2CPP_DEFINE_METHOD(java::text::NumberFormat,13,"getIntegerInstance","(Ljava/util/Locale;)Ljava/text/NumberFormat;")
J2CPP_DEFINE_METHOD(java::text::NumberFormat,14,"getInstance","()Ljava/text/NumberFormat;")
J2CPP_DEFINE_METHOD(java::text::NumberFormat,15,"getInstance","(Ljava/util/Locale;)Ljava/text/NumberFormat;")
J2CPP_DEFINE_METHOD(java::text::NumberFormat,16,"getMaximumFractionDigits","()I")
J2CPP_DEFINE_METHOD(java::text::NumberFormat,17,"getMaximumIntegerDigits","()I")
J2CPP_DEFINE_METHOD(java::text::NumberFormat,18,"getMinimumFractionDigits","()I")
J2CPP_DEFINE_METHOD(java::text::NumberFormat,19,"getMinimumIntegerDigits","()I")
J2CPP_DEFINE_METHOD(java::text::NumberFormat,20,"getNumberInstance","()Ljava/text/NumberFormat;")
J2CPP_DEFINE_METHOD(java::text::NumberFormat,21,"getNumberInstance","(Ljava/util/Locale;)Ljava/text/NumberFormat;")
J2CPP_DEFINE_METHOD(java::text::NumberFormat,22,"getPercentInstance","()Ljava/text/NumberFormat;")
J2CPP_DEFINE_METHOD(java::text::NumberFormat,23,"getPercentInstance","(Ljava/util/Locale;)Ljava/text/NumberFormat;")
J2CPP_DEFINE_METHOD(java::text::NumberFormat,24,"hashCode","()I")
J2CPP_DEFINE_METHOD(java::text::NumberFormat,25,"isGroupingUsed","()Z")
J2CPP_DEFINE_METHOD(java::text::NumberFormat,26,"isParseIntegerOnly","()Z")
J2CPP_DEFINE_METHOD(java::text::NumberFormat,27,"parse","(Ljava/lang/String;)Ljava/lang/Number;")
J2CPP_DEFINE_METHOD(java::text::NumberFormat,28,"parse","(Ljava/lang/String;Ljava/text/ParsePosition;)Ljava/lang/Number;")
J2CPP_DEFINE_METHOD(java::text::NumberFormat,29,"parseObject","(Ljava/lang/String;Ljava/text/ParsePosition;)Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(java::text::NumberFormat,30,"setCurrency","(Ljava/util/Currency;)V")
J2CPP_DEFINE_METHOD(java::text::NumberFormat,31,"setGroupingUsed","(Z)V")
J2CPP_DEFINE_METHOD(java::text::NumberFormat,32,"setMaximumFractionDigits","(I)V")
J2CPP_DEFINE_METHOD(java::text::NumberFormat,33,"setMaximumIntegerDigits","(I)V")
J2CPP_DEFINE_METHOD(java::text::NumberFormat,34,"setMinimumFractionDigits","(I)V")
J2CPP_DEFINE_METHOD(java::text::NumberFormat,35,"setMinimumIntegerDigits","(I)V")
J2CPP_DEFINE_METHOD(java::text::NumberFormat,36,"setParseIntegerOnly","(Z)V")
J2CPP_DEFINE_FIELD(java::text::NumberFormat,0,"INTEGER_FIELD","I")
J2CPP_DEFINE_FIELD(java::text::NumberFormat,1,"FRACTION_FIELD","I")

} //namespace j2cpp

#endif //J2CPP_JAVA_TEXT_NUMBERFORMAT_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
