/*================================================================================
  code generated by: java2cpp
  class: java.text.ChoiceFormat
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_TEXT_CHOICEFORMAT_HPP_DECL
#define J2CPP_JAVA_TEXT_CHOICEFORMAT_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace lang { class StringBuffer; } } }
namespace j2cpp { namespace java { namespace lang { class Number; } } }
namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace text { class NumberFormat; } } }
namespace j2cpp { namespace java { namespace text { class ParsePosition; } } }
namespace j2cpp { namespace java { namespace text { class FieldPosition; } } }


#include <java/lang/Number.hpp>
#include <java/lang/Object.hpp>
#include <java/lang/String.hpp>
#include <java/lang/StringBuffer.hpp>
#include <java/text/FieldPosition.hpp>
#include <java/text/NumberFormat.hpp>
#include <java/text/ParsePosition.hpp>


namespace j2cpp {

namespace java { namespace text {

	class ChoiceFormat;
	class ChoiceFormat
		: public cpp_object<ChoiceFormat>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_METHOD(12)
		J2CPP_DECLARE_METHOD(13)
		J2CPP_DECLARE_METHOD(14)
		J2CPP_DECLARE_METHOD(15)

		explicit ChoiceFormat(jobject jobj)
		: cpp_object<ChoiceFormat>(jobj)
		{
		}

		operator local_ref<java::text::NumberFormat>() const;


		ChoiceFormat(local_ref< cpp_double_array<1> > const&, local_ref< cpp_object_array<java::lang::String, 1> > const&);
		ChoiceFormat(local_ref< java::lang::String > const&);
		void applyPattern(local_ref< java::lang::String > const&);
		local_ref< java::lang::Object > clone();
		cpp_boolean equals(local_ref< java::lang::Object > const&);
		local_ref< java::lang::StringBuffer > format(cpp_double const&, local_ref< java::lang::StringBuffer > const&, local_ref< java::text::FieldPosition > const&);
		local_ref< java::lang::StringBuffer > format(cpp_long const&, local_ref< java::lang::StringBuffer > const&, local_ref< java::text::FieldPosition > const&);
		local_ref< cpp_object_array<java::lang::Object, 1> > getFormats();
		local_ref< cpp_double_array<1> > getLimits();
		cpp_int hashCode();
		static cpp_double nextDouble(cpp_double const&);
		static cpp_double nextDouble(cpp_double const&, cpp_boolean const&);
		local_ref< java::lang::Number > parse(local_ref< java::lang::String > const&, local_ref< java::text::ParsePosition > const&);
		static cpp_double previousDouble(cpp_double const&);
		void setChoices(local_ref< cpp_double_array<1> > const&, local_ref< cpp_object_array<java::lang::String, 1> > const&);
		local_ref< java::lang::String > toPattern();
	}; //class ChoiceFormat

} //namespace text
} //namespace java

} //namespace j2cpp

#endif //J2CPP_JAVA_TEXT_CHOICEFORMAT_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_TEXT_CHOICEFORMAT_HPP_IMPL
#define J2CPP_JAVA_TEXT_CHOICEFORMAT_HPP_IMPL

namespace j2cpp {



java::text::ChoiceFormat::operator local_ref<java::text::NumberFormat>() const
{
	return local_ref<java::text::NumberFormat>(get_jtype());
}


java::text::ChoiceFormat::ChoiceFormat(local_ref< cpp_double_array<1> > const &a0, local_ref< cpp_object_array<java::lang::String, 1> > const &a1)
: cpp_object<java::text::ChoiceFormat>(
	environment::get().get_jenv()->NewObject(
		get_class<java::text::ChoiceFormat::J2CPP_CLASS_NAME>(),
		get_method_id<java::text::ChoiceFormat::J2CPP_CLASS_NAME, java::text::ChoiceFormat::J2CPP_METHOD_NAME(0), java::text::ChoiceFormat::J2CPP_METHOD_SIGNATURE(0), false>(),
		a0.get_jtype(), a1.get_jtype()
	)
)
{
}



java::text::ChoiceFormat::ChoiceFormat(local_ref< java::lang::String > const &a0)
: cpp_object<java::text::ChoiceFormat>(
	environment::get().get_jenv()->NewObject(
		get_class<java::text::ChoiceFormat::J2CPP_CLASS_NAME>(),
		get_method_id<java::text::ChoiceFormat::J2CPP_CLASS_NAME, java::text::ChoiceFormat::J2CPP_METHOD_NAME(1), java::text::ChoiceFormat::J2CPP_METHOD_SIGNATURE(1), false>(),
		a0.get_jtype()
	)
)
{
}


void java::text::ChoiceFormat::applyPattern(local_ref< java::lang::String > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::Object > java::text::ChoiceFormat::clone()
{
	return local_ref< java::lang::Object >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>()
		)
	);
}

cpp_boolean java::text::ChoiceFormat::equals(local_ref< java::lang::Object > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::StringBuffer > java::text::ChoiceFormat::format(cpp_double const &a0, local_ref< java::lang::StringBuffer > const &a1, local_ref< java::text::FieldPosition > const &a2)
{
	return local_ref< java::lang::StringBuffer >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

local_ref< java::lang::StringBuffer > java::text::ChoiceFormat::format(cpp_long const &a0, local_ref< java::lang::StringBuffer > const &a1, local_ref< java::text::FieldPosition > const &a2)
{
	return local_ref< java::lang::StringBuffer >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

local_ref< cpp_object_array<java::lang::Object, 1> > java::text::ChoiceFormat::getFormats()
{
	return local_ref< cpp_object_array<java::lang::Object, 1> >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(7), J2CPP_METHOD_SIGNATURE(7), false>()
		)
	);
}

local_ref< cpp_double_array<1> > java::text::ChoiceFormat::getLimits()
{
	return local_ref< cpp_double_array<1> >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(8), J2CPP_METHOD_SIGNATURE(8), false>()
		)
	);
}

cpp_int java::text::ChoiceFormat::hashCode()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(9), J2CPP_METHOD_SIGNATURE(9), false>()
		)
	);
}

cpp_double java::text::ChoiceFormat::nextDouble(cpp_double const &a0)
{
	return cpp_double(
		environment::get().get_jenv()->CallStaticDoubleMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(10), J2CPP_METHOD_SIGNATURE(10), true>(),
			a0.get_jtype()
		)
	);
}

cpp_double java::text::ChoiceFormat::nextDouble(cpp_double const &a0, cpp_boolean const &a1)
{
	return cpp_double(
		environment::get().get_jenv()->CallStaticDoubleMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(11), J2CPP_METHOD_SIGNATURE(11), true>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< java::lang::Number > java::text::ChoiceFormat::parse(local_ref< java::lang::String > const &a0, local_ref< java::text::ParsePosition > const &a1)
{
	return local_ref< java::lang::Number >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(12), J2CPP_METHOD_SIGNATURE(12), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_double java::text::ChoiceFormat::previousDouble(cpp_double const &a0)
{
	return cpp_double(
		environment::get().get_jenv()->CallStaticDoubleMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(13), J2CPP_METHOD_SIGNATURE(13), true>(),
			a0.get_jtype()
		)
	);
}

void java::text::ChoiceFormat::setChoices(local_ref< cpp_double_array<1> > const &a0, local_ref< cpp_object_array<java::lang::String, 1> > const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(14), J2CPP_METHOD_SIGNATURE(14), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< java::lang::String > java::text::ChoiceFormat::toPattern()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(15), J2CPP_METHOD_SIGNATURE(15), false>()
		)
	);
}


J2CPP_DEFINE_CLASS(java::text::ChoiceFormat,"java/text/ChoiceFormat")
J2CPP_DEFINE_METHOD(java::text::ChoiceFormat,0,"<init>","([D[java.lang.String)V")
J2CPP_DEFINE_METHOD(java::text::ChoiceFormat,1,"<init>","(Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(java::text::ChoiceFormat,2,"applyPattern","(Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(java::text::ChoiceFormat,3,"clone","()Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(java::text::ChoiceFormat,4,"equals","(Ljava/lang/Object;)Z")
J2CPP_DEFINE_METHOD(java::text::ChoiceFormat,5,"format","(DLjava/lang/StringBuffer;Ljava/text/FieldPosition;)Ljava/lang/StringBuffer;")
J2CPP_DEFINE_METHOD(java::text::ChoiceFormat,6,"format","(JLjava/lang/StringBuffer;Ljava/text/FieldPosition;)Ljava/lang/StringBuffer;")
J2CPP_DEFINE_METHOD(java::text::ChoiceFormat,7,"getFormats","()[java.lang.Object")
J2CPP_DEFINE_METHOD(java::text::ChoiceFormat,8,"getLimits","()[D")
J2CPP_DEFINE_METHOD(java::text::ChoiceFormat,9,"hashCode","()I")
J2CPP_DEFINE_METHOD(java::text::ChoiceFormat,10,"nextDouble","(D)D")
J2CPP_DEFINE_METHOD(java::text::ChoiceFormat,11,"nextDouble","(DZ)D")
J2CPP_DEFINE_METHOD(java::text::ChoiceFormat,12,"parse","(Ljava/lang/String;Ljava/text/ParsePosition;)Ljava/lang/Number;")
J2CPP_DEFINE_METHOD(java::text::ChoiceFormat,13,"previousDouble","(D)D")
J2CPP_DEFINE_METHOD(java::text::ChoiceFormat,14,"setChoices","([D[java.lang.String)V")
J2CPP_DEFINE_METHOD(java::text::ChoiceFormat,15,"toPattern","()Ljava/lang/String;")

} //namespace j2cpp

#endif //J2CPP_JAVA_TEXT_CHOICEFORMAT_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
