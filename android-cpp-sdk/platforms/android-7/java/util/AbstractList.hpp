/*================================================================================
  code generated by: java2cpp
  class: java.util.AbstractList
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_ABSTRACTLIST_HPP_DECL
#define J2CPP_JAVA_UTIL_ABSTRACTLIST_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace util { class Iterator; } } }
namespace j2cpp { namespace java { namespace util { class ListIterator; } } }
namespace j2cpp { namespace java { namespace util { class Collection; } } }
namespace j2cpp { namespace java { namespace util { class List; } } }


#include <java/lang/Object.hpp>
#include <java/util/Collection.hpp>
#include <java/util/Iterator.hpp>
#include <java/util/List.hpp>
#include <java/util/ListIterator.hpp>


namespace j2cpp {

namespace java { namespace util {

	class AbstractList;
	class AbstractList
		: public cpp_object<AbstractList>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_METHOD(12)
		J2CPP_DECLARE_METHOD(13)
		J2CPP_DECLARE_METHOD(14)
		J2CPP_DECLARE_METHOD(15)
		J2CPP_DECLARE_METHOD(16)
		J2CPP_DECLARE_FIELD(0)

		AbstractList(jobject jobj)
		: cpp_object<AbstractList>(jobj)
		{
		}

		void add(cpp_int const&, local_ref< java::lang::Object > const&);
		cpp_boolean add(local_ref< java::lang::Object > const&);
		cpp_boolean addAll(cpp_int const&, local_ref< java::util::Collection > const&);
		void clear();
		cpp_boolean equals(local_ref< java::lang::Object > const&);
		local_ref< java::lang::Object > get(cpp_int const&);
		cpp_int hashCode();
		cpp_int indexOf(local_ref< java::lang::Object > const&);
		local_ref< java::util::Iterator > iterator();
		cpp_int lastIndexOf(local_ref< java::lang::Object > const&);
		local_ref< java::util::ListIterator > listIterator();
		local_ref< java::util::ListIterator > listIterator(cpp_int const&);
		local_ref< java::lang::Object > remove(cpp_int const&);
		local_ref< java::lang::Object > set(cpp_int const&, local_ref< java::lang::Object > const&);
		local_ref< java::util::List > subList(cpp_int const&, cpp_int const&);

	}; //class AbstractList

} //namespace util
} //namespace java


} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_ABSTRACTLIST_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_ABSTRACTLIST_HPP_IMPL
#define J2CPP_JAVA_UTIL_ABSTRACTLIST_HPP_IMPL

namespace j2cpp {


template <>
local_ref< java::util::AbstractList > create< java::util::AbstractList>()
{
	return local_ref< java::util::AbstractList >(
		environment::get().get_jenv()->NewObject(
			get_class<java::util::AbstractList::J2CPP_CLASS_NAME>(),
			get_method_id<java::util::AbstractList::J2CPP_CLASS_NAME, java::util::AbstractList::J2CPP_METHOD_NAME(0), java::util::AbstractList::J2CPP_METHOD_SIGNATURE(0), false>()
		)
	);
}

void java::util::AbstractList::add(cpp_int const &a0, local_ref< java::lang::Object > const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_boolean java::util::AbstractList::add(local_ref< java::lang::Object > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean java::util::AbstractList::addAll(cpp_int const &a0, local_ref< java::util::Collection > const &a1)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void java::util::AbstractList::clear()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>()
		)
	);
}

cpp_boolean java::util::AbstractList::equals(local_ref< java::lang::Object > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::Object > java::util::AbstractList::get(cpp_int const &a0)
{
	return local_ref< java::lang::Object >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int java::util::AbstractList::hashCode()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(7), J2CPP_METHOD_SIGNATURE(7), false>()
		)
	);
}

cpp_int java::util::AbstractList::indexOf(local_ref< java::lang::Object > const &a0)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(8), J2CPP_METHOD_SIGNATURE(8), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::util::Iterator > java::util::AbstractList::iterator()
{
	return local_ref< java::util::Iterator >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(9), J2CPP_METHOD_SIGNATURE(9), false>()
		)
	);
}

cpp_int java::util::AbstractList::lastIndexOf(local_ref< java::lang::Object > const &a0)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(10), J2CPP_METHOD_SIGNATURE(10), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::util::ListIterator > java::util::AbstractList::listIterator()
{
	return local_ref< java::util::ListIterator >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(11), J2CPP_METHOD_SIGNATURE(11), false>()
		)
	);
}

local_ref< java::util::ListIterator > java::util::AbstractList::listIterator(cpp_int const &a0)
{
	return local_ref< java::util::ListIterator >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(12), J2CPP_METHOD_SIGNATURE(12), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::Object > java::util::AbstractList::remove(cpp_int const &a0)
{
	return local_ref< java::lang::Object >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(13), J2CPP_METHOD_SIGNATURE(13), false>(),
			a0.get_jtype()
		)
	);
}


local_ref< java::lang::Object > java::util::AbstractList::set(cpp_int const &a0, local_ref< java::lang::Object > const &a1)
{
	return local_ref< java::lang::Object >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(15), J2CPP_METHOD_SIGNATURE(15), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< java::util::List > java::util::AbstractList::subList(cpp_int const &a0, cpp_int const &a1)
{
	return local_ref< java::util::List >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(16), J2CPP_METHOD_SIGNATURE(16), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}



J2CPP_DEFINE_CLASS(java::util::AbstractList,"java/util/AbstractList")
J2CPP_DEFINE_METHOD(java::util::AbstractList,0,"<init>","()V")
J2CPP_DEFINE_METHOD(java::util::AbstractList,1,"add","(ILjava/lang/Object;)V")
J2CPP_DEFINE_METHOD(java::util::AbstractList,2,"add","(Ljava/lang/Object;)Z")
J2CPP_DEFINE_METHOD(java::util::AbstractList,3,"addAll","(ILjava/util/Collection;)Z")
J2CPP_DEFINE_METHOD(java::util::AbstractList,4,"clear","()V")
J2CPP_DEFINE_METHOD(java::util::AbstractList,5,"equals","(Ljava/lang/Object;)Z")
J2CPP_DEFINE_METHOD(java::util::AbstractList,6,"get","(I)Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(java::util::AbstractList,7,"hashCode","()I")
J2CPP_DEFINE_METHOD(java::util::AbstractList,8,"indexOf","(Ljava/lang/Object;)I")
J2CPP_DEFINE_METHOD(java::util::AbstractList,9,"iterator","()Ljava/util/Iterator;")
J2CPP_DEFINE_METHOD(java::util::AbstractList,10,"lastIndexOf","(Ljava/lang/Object;)I")
J2CPP_DEFINE_METHOD(java::util::AbstractList,11,"listIterator","()Ljava/util/ListIterator;")
J2CPP_DEFINE_METHOD(java::util::AbstractList,12,"listIterator","(I)Ljava/util/ListIterator;")
J2CPP_DEFINE_METHOD(java::util::AbstractList,13,"remove","(I)Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(java::util::AbstractList,14,"removeRange","(II)V")
J2CPP_DEFINE_METHOD(java::util::AbstractList,15,"set","(ILjava/lang/Object;)Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(java::util::AbstractList,16,"subList","(II)Ljava/util/List;")
J2CPP_DEFINE_FIELD(java::util::AbstractList,0,"modCount","I")

} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_ABSTRACTLIST_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
