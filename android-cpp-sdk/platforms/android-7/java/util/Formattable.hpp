/*================================================================================
  code generated by: java2cpp
  class: java.util.Formattable
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_FORMATTABLE_HPP_DECL
#define J2CPP_JAVA_UTIL_FORMATTABLE_HPP_DECL


namespace j2cpp { namespace java { namespace util { class Formatter; } } }


#include <java/util/Formatter.hpp>


namespace j2cpp {

namespace java { namespace util {

	class Formattable;
	class Formattable
		: public cpp_object<Formattable>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)

		Formattable(jobject jobj)
		: cpp_object<Formattable>(jobj)
		{
		}

		void formatTo(local_ref< java::util::Formatter > const&, cpp_int const&, cpp_int const&, cpp_int const&);
	}; //class Formattable

} //namespace util
} //namespace java


} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_FORMATTABLE_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_FORMATTABLE_HPP_IMPL
#define J2CPP_JAVA_UTIL_FORMATTABLE_HPP_IMPL

namespace j2cpp {


void java::util::Formattable::formatTo(local_ref< java::util::Formatter > const &a0, cpp_int const &a1, cpp_int const &a2, cpp_int const &a3)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(0), J2CPP_METHOD_SIGNATURE(0), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype(), a3.get_jtype()
		)
	);
}


J2CPP_DEFINE_CLASS(java::util::Formattable,"java/util/Formattable")
J2CPP_DEFINE_METHOD(java::util::Formattable,0,"formatTo","(Ljava/util/Formatter;III)V")

} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_FORMATTABLE_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
