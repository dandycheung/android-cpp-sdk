/*================================================================================
  code generated by: java2cpp
  class: java.util.logging.SocketHandler
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_LOGGING_SOCKETHANDLER_HPP_DECL
#define J2CPP_JAVA_UTIL_LOGGING_SOCKETHANDLER_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace util { namespace logging { class StreamHandler; } } } }
namespace j2cpp { namespace java { namespace util { namespace logging { class LogRecord; } } } }


#include <java/lang/String.hpp>
#include <java/util/logging/LogRecord.hpp>
#include <java/util/logging/StreamHandler.hpp>


namespace j2cpp {

namespace java { namespace util { namespace logging {

	class SocketHandler;
	class SocketHandler
		: public cpp_object<SocketHandler>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)

		explicit SocketHandler(jobject jobj)
		: cpp_object<SocketHandler>(jobj)
		{
		}

		operator local_ref<java::util::logging::StreamHandler>() const;


		SocketHandler();
		SocketHandler(local_ref< java::lang::String > const&, cpp_int const&);
		void close();
		void publish(local_ref< java::util::logging::LogRecord > const&);
	}; //class SocketHandler

} //namespace logging
} //namespace util
} //namespace java

} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_LOGGING_SOCKETHANDLER_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_LOGGING_SOCKETHANDLER_HPP_IMPL
#define J2CPP_JAVA_UTIL_LOGGING_SOCKETHANDLER_HPP_IMPL

namespace j2cpp {



java::util::logging::SocketHandler::operator local_ref<java::util::logging::StreamHandler>() const
{
	return local_ref<java::util::logging::StreamHandler>(get_jtype());
}


java::util::logging::SocketHandler::SocketHandler()
: cpp_object<java::util::logging::SocketHandler>(
	environment::get().get_jenv()->NewObject(
		get_class<java::util::logging::SocketHandler::J2CPP_CLASS_NAME>(),
		get_method_id<java::util::logging::SocketHandler::J2CPP_CLASS_NAME, java::util::logging::SocketHandler::J2CPP_METHOD_NAME(0), java::util::logging::SocketHandler::J2CPP_METHOD_SIGNATURE(0), false>()
	)
)
{
}



java::util::logging::SocketHandler::SocketHandler(local_ref< java::lang::String > const &a0, cpp_int const &a1)
: cpp_object<java::util::logging::SocketHandler>(
	environment::get().get_jenv()->NewObject(
		get_class<java::util::logging::SocketHandler::J2CPP_CLASS_NAME>(),
		get_method_id<java::util::logging::SocketHandler::J2CPP_CLASS_NAME, java::util::logging::SocketHandler::J2CPP_METHOD_NAME(1), java::util::logging::SocketHandler::J2CPP_METHOD_SIGNATURE(1), false>(),
		a0.get_jtype(), a1.get_jtype()
	)
)
{
}


void java::util::logging::SocketHandler::close()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>()
		)
	);
}

void java::util::logging::SocketHandler::publish(local_ref< java::util::logging::LogRecord > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>(),
			a0.get_jtype()
		)
	);
}


J2CPP_DEFINE_CLASS(java::util::logging::SocketHandler,"java/util/logging/SocketHandler")
J2CPP_DEFINE_METHOD(java::util::logging::SocketHandler,0,"<init>","()V")
J2CPP_DEFINE_METHOD(java::util::logging::SocketHandler,1,"<init>","(Ljava/lang/String;I)V")
J2CPP_DEFINE_METHOD(java::util::logging::SocketHandler,2,"close","()V")
J2CPP_DEFINE_METHOD(java::util::logging::SocketHandler,3,"publish","(Ljava/util/logging/LogRecord;)V")

} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_LOGGING_SOCKETHANDLER_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
