/*================================================================================
  code generated by: java2cpp
  class: java.util.logging.SimpleFormatter
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_LOGGING_SIMPLEFORMATTER_HPP_DECL
#define J2CPP_JAVA_UTIL_LOGGING_SIMPLEFORMATTER_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace util { namespace logging { class Formatter; } } } }
namespace j2cpp { namespace java { namespace util { namespace logging { class LogRecord; } } } }


#include <java/lang/String.hpp>
#include <java/util/logging/Formatter.hpp>
#include <java/util/logging/LogRecord.hpp>


namespace j2cpp {

namespace java { namespace util { namespace logging {

	class SimpleFormatter;
	class SimpleFormatter
		: public cpp_object<SimpleFormatter>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)

		explicit SimpleFormatter(jobject jobj)
		: cpp_object<SimpleFormatter>(jobj)
		{
		}

		operator local_ref<java::util::logging::Formatter>() const;


		SimpleFormatter();
		local_ref< java::lang::String > format(local_ref< java::util::logging::LogRecord > const&);
	}; //class SimpleFormatter

} //namespace logging
} //namespace util
} //namespace java

} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_LOGGING_SIMPLEFORMATTER_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_LOGGING_SIMPLEFORMATTER_HPP_IMPL
#define J2CPP_JAVA_UTIL_LOGGING_SIMPLEFORMATTER_HPP_IMPL

namespace j2cpp {



java::util::logging::SimpleFormatter::operator local_ref<java::util::logging::Formatter>() const
{
	return local_ref<java::util::logging::Formatter>(get_jtype());
}


java::util::logging::SimpleFormatter::SimpleFormatter()
: cpp_object<java::util::logging::SimpleFormatter>(
	environment::get().get_jenv()->NewObject(
		get_class<java::util::logging::SimpleFormatter::J2CPP_CLASS_NAME>(),
		get_method_id<java::util::logging::SimpleFormatter::J2CPP_CLASS_NAME, java::util::logging::SimpleFormatter::J2CPP_METHOD_NAME(0), java::util::logging::SimpleFormatter::J2CPP_METHOD_SIGNATURE(0), false>()
	)
)
{
}


local_ref< java::lang::String > java::util::logging::SimpleFormatter::format(local_ref< java::util::logging::LogRecord > const &a0)
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), false>(),
			a0.get_jtype()
		)
	);
}


J2CPP_DEFINE_CLASS(java::util::logging::SimpleFormatter,"java/util/logging/SimpleFormatter")
J2CPP_DEFINE_METHOD(java::util::logging::SimpleFormatter,0,"<init>","()V")
J2CPP_DEFINE_METHOD(java::util::logging::SimpleFormatter,1,"format","(Ljava/util/logging/LogRecord;)Ljava/lang/String;")

} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_LOGGING_SIMPLEFORMATTER_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
