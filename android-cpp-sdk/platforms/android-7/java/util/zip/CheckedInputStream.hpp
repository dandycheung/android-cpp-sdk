/*================================================================================
  code generated by: java2cpp
  class: java.util.zip.CheckedInputStream
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_ZIP_CHECKEDINPUTSTREAM_HPP_DECL
#define J2CPP_JAVA_UTIL_ZIP_CHECKEDINPUTSTREAM_HPP_DECL


namespace j2cpp { namespace java { namespace io { class InputStream; } } }
namespace j2cpp { namespace java { namespace util { namespace zip { class Checksum; } } } }


#include <java/io/InputStream.hpp>
#include <java/util/zip/Checksum.hpp>


namespace j2cpp {

namespace java { namespace util { namespace zip {

	class CheckedInputStream;
	class CheckedInputStream
		: public cpp_object<CheckedInputStream>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)

		CheckedInputStream(jobject jobj)
		: cpp_object<CheckedInputStream>(jobj)
		{
		}

		cpp_int read();
		cpp_int read(local_ref< cpp_byte_array<1> > const&, cpp_int const&, cpp_int const&);
		local_ref< java::util::zip::Checksum > getChecksum();
		cpp_long skip(cpp_long const&);
	}; //class CheckedInputStream

} //namespace zip
} //namespace util
} //namespace java


} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_ZIP_CHECKEDINPUTSTREAM_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_ZIP_CHECKEDINPUTSTREAM_HPP_IMPL
#define J2CPP_JAVA_UTIL_ZIP_CHECKEDINPUTSTREAM_HPP_IMPL

namespace j2cpp {


template <>
local_ref< java::util::zip::CheckedInputStream > create< java::util::zip::CheckedInputStream>(local_ref< java::io::InputStream > const &a0, local_ref< java::util::zip::Checksum > const &a1)
{
	return local_ref< java::util::zip::CheckedInputStream >(
		environment::get().get_jenv()->NewObject(
			get_class<java::util::zip::CheckedInputStream::J2CPP_CLASS_NAME>(),
			get_method_id<java::util::zip::CheckedInputStream::J2CPP_CLASS_NAME, java::util::zip::CheckedInputStream::J2CPP_METHOD_NAME(0), java::util::zip::CheckedInputStream::J2CPP_METHOD_SIGNATURE(0), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_int java::util::zip::CheckedInputStream::read()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), false>()
		)
	);
}

cpp_int java::util::zip::CheckedInputStream::read(local_ref< cpp_byte_array<1> > const &a0, cpp_int const &a1, cpp_int const &a2)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

local_ref< java::util::zip::Checksum > java::util::zip::CheckedInputStream::getChecksum()
{
	return local_ref< java::util::zip::Checksum >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>()
		)
	);
}

cpp_long java::util::zip::CheckedInputStream::skip(cpp_long const &a0)
{
	return cpp_long(
		environment::get().get_jenv()->CallLongMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>(),
			a0.get_jtype()
		)
	);
}


J2CPP_DEFINE_CLASS(java::util::zip::CheckedInputStream,"java/util/zip/CheckedInputStream")
J2CPP_DEFINE_METHOD(java::util::zip::CheckedInputStream,0,"<init>","(Ljava/io/InputStream;Ljava/util/zip/Checksum;)V")
J2CPP_DEFINE_METHOD(java::util::zip::CheckedInputStream,1,"read","()I")
J2CPP_DEFINE_METHOD(java::util::zip::CheckedInputStream,2,"read","([BII)I")
J2CPP_DEFINE_METHOD(java::util::zip::CheckedInputStream,3,"getChecksum","()Ljava/util/zip/Checksum;")
J2CPP_DEFINE_METHOD(java::util::zip::CheckedInputStream,4,"skip","(J)J")

} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_ZIP_CHECKEDINPUTSTREAM_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
