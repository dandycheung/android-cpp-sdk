/*================================================================================
  code generated by: java2cpp
  class: java.util.zip.InflaterInputStream
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_ZIP_INFLATERINPUTSTREAM_HPP_DECL
#define J2CPP_JAVA_UTIL_ZIP_INFLATERINPUTSTREAM_HPP_DECL


namespace j2cpp { namespace java { namespace io { class FilterInputStream; } } }
namespace j2cpp { namespace java { namespace io { class InputStream; } } }
namespace j2cpp { namespace java { namespace util { namespace zip { class Inflater; } } } }


#include <java/io/FilterInputStream.hpp>
#include <java/io/InputStream.hpp>
#include <java/util/zip/Inflater.hpp>


namespace j2cpp {

namespace java { namespace util { namespace zip {

	class InflaterInputStream;
	class InflaterInputStream
		: public cpp_object<InflaterInputStream>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_FIELD(0)
		J2CPP_DECLARE_FIELD(1)
		J2CPP_DECLARE_FIELD(2)

		explicit InflaterInputStream(jobject jobj)
		: cpp_object<InflaterInputStream>(jobj)
		{
		}

		operator local_ref<java::io::FilterInputStream>() const;


		InflaterInputStream(local_ref< java::io::InputStream > const&);
		InflaterInputStream(local_ref< java::io::InputStream > const&, local_ref< java::util::zip::Inflater > const&);
		InflaterInputStream(local_ref< java::io::InputStream > const&, local_ref< java::util::zip::Inflater > const&, cpp_int const&);
		cpp_int read();
		cpp_int read(local_ref< cpp_byte_array<1> > const&, cpp_int const&, cpp_int const&);
		cpp_long skip(cpp_long const&);
		cpp_int available();
		void close();
		void mark(cpp_int const&);
		void reset();
		cpp_boolean markSupported();

	}; //class InflaterInputStream

} //namespace zip
} //namespace util
} //namespace java

} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_ZIP_INFLATERINPUTSTREAM_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_ZIP_INFLATERINPUTSTREAM_HPP_IMPL
#define J2CPP_JAVA_UTIL_ZIP_INFLATERINPUTSTREAM_HPP_IMPL

namespace j2cpp {



java::util::zip::InflaterInputStream::operator local_ref<java::io::FilterInputStream>() const
{
	return local_ref<java::io::FilterInputStream>(get_jtype());
}


java::util::zip::InflaterInputStream::InflaterInputStream(local_ref< java::io::InputStream > const &a0)
: cpp_object<java::util::zip::InflaterInputStream>(
	environment::get().get_jenv()->NewObject(
		get_class<java::util::zip::InflaterInputStream::J2CPP_CLASS_NAME>(),
		get_method_id<java::util::zip::InflaterInputStream::J2CPP_CLASS_NAME, java::util::zip::InflaterInputStream::J2CPP_METHOD_NAME(0), java::util::zip::InflaterInputStream::J2CPP_METHOD_SIGNATURE(0), false>(),
		a0.get_jtype()
	)
)
{
}



java::util::zip::InflaterInputStream::InflaterInputStream(local_ref< java::io::InputStream > const &a0, local_ref< java::util::zip::Inflater > const &a1)
: cpp_object<java::util::zip::InflaterInputStream>(
	environment::get().get_jenv()->NewObject(
		get_class<java::util::zip::InflaterInputStream::J2CPP_CLASS_NAME>(),
		get_method_id<java::util::zip::InflaterInputStream::J2CPP_CLASS_NAME, java::util::zip::InflaterInputStream::J2CPP_METHOD_NAME(1), java::util::zip::InflaterInputStream::J2CPP_METHOD_SIGNATURE(1), false>(),
		a0.get_jtype(), a1.get_jtype()
	)
)
{
}



java::util::zip::InflaterInputStream::InflaterInputStream(local_ref< java::io::InputStream > const &a0, local_ref< java::util::zip::Inflater > const &a1, cpp_int const &a2)
: cpp_object<java::util::zip::InflaterInputStream>(
	environment::get().get_jenv()->NewObject(
		get_class<java::util::zip::InflaterInputStream::J2CPP_CLASS_NAME>(),
		get_method_id<java::util::zip::InflaterInputStream::J2CPP_CLASS_NAME, java::util::zip::InflaterInputStream::J2CPP_METHOD_NAME(2), java::util::zip::InflaterInputStream::J2CPP_METHOD_SIGNATURE(2), false>(),
		a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
	)
)
{
}


cpp_int java::util::zip::InflaterInputStream::read()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>()
		)
	);
}

cpp_int java::util::zip::InflaterInputStream::read(local_ref< cpp_byte_array<1> > const &a0, cpp_int const &a1, cpp_int const &a2)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}


cpp_long java::util::zip::InflaterInputStream::skip(cpp_long const &a0)
{
	return cpp_long(
		environment::get().get_jenv()->CallLongMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int java::util::zip::InflaterInputStream::available()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(7), J2CPP_METHOD_SIGNATURE(7), false>()
		)
	);
}

void java::util::zip::InflaterInputStream::close()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(8), J2CPP_METHOD_SIGNATURE(8), false>()
		)
	);
}

void java::util::zip::InflaterInputStream::mark(cpp_int const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(9), J2CPP_METHOD_SIGNATURE(9), false>(),
			a0.get_jtype()
		)
	);
}

void java::util::zip::InflaterInputStream::reset()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(10), J2CPP_METHOD_SIGNATURE(10), false>()
		)
	);
}

cpp_boolean java::util::zip::InflaterInputStream::markSupported()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(11), J2CPP_METHOD_SIGNATURE(11), false>()
		)
	);
}



J2CPP_DEFINE_CLASS(java::util::zip::InflaterInputStream,"java/util/zip/InflaterInputStream")
J2CPP_DEFINE_METHOD(java::util::zip::InflaterInputStream,0,"<init>","(Ljava/io/InputStream;)V")
J2CPP_DEFINE_METHOD(java::util::zip::InflaterInputStream,1,"<init>","(Ljava/io/InputStream;Ljava/util/zip/Inflater;)V")
J2CPP_DEFINE_METHOD(java::util::zip::InflaterInputStream,2,"<init>","(Ljava/io/InputStream;Ljava/util/zip/Inflater;I)V")
J2CPP_DEFINE_METHOD(java::util::zip::InflaterInputStream,3,"read","()I")
J2CPP_DEFINE_METHOD(java::util::zip::InflaterInputStream,4,"read","([BII)I")
J2CPP_DEFINE_METHOD(java::util::zip::InflaterInputStream,5,"fill","()V")
J2CPP_DEFINE_METHOD(java::util::zip::InflaterInputStream,6,"skip","(J)J")
J2CPP_DEFINE_METHOD(java::util::zip::InflaterInputStream,7,"available","()I")
J2CPP_DEFINE_METHOD(java::util::zip::InflaterInputStream,8,"close","()V")
J2CPP_DEFINE_METHOD(java::util::zip::InflaterInputStream,9,"mark","(I)V")
J2CPP_DEFINE_METHOD(java::util::zip::InflaterInputStream,10,"reset","()V")
J2CPP_DEFINE_METHOD(java::util::zip::InflaterInputStream,11,"markSupported","()Z")
J2CPP_DEFINE_FIELD(java::util::zip::InflaterInputStream,0,"inf","Ljava/util/zip/Inflater;")
J2CPP_DEFINE_FIELD(java::util::zip::InflaterInputStream,1,"buf","[B")
J2CPP_DEFINE_FIELD(java::util::zip::InflaterInputStream,2,"len","I")

} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_ZIP_INFLATERINPUTSTREAM_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
