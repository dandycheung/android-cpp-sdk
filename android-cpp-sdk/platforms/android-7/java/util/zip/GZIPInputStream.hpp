/*================================================================================
  code generated by: java2cpp
  class: java.util.zip.GZIPInputStream
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_ZIP_GZIPINPUTSTREAM_HPP_DECL
#define J2CPP_JAVA_UTIL_ZIP_GZIPINPUTSTREAM_HPP_DECL


namespace j2cpp { namespace java { namespace io { class InputStream; } } }
namespace j2cpp { namespace java { namespace util { namespace zip { class InflaterInputStream; } } } }


#include <java/io/InputStream.hpp>
#include <java/util/zip/InflaterInputStream.hpp>


namespace j2cpp {

namespace java { namespace util { namespace zip {

	class GZIPInputStream;
	class GZIPInputStream
		: public cpp_object<GZIPInputStream>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_FIELD(0)
		J2CPP_DECLARE_FIELD(1)
		J2CPP_DECLARE_FIELD(2)

		explicit GZIPInputStream(jobject jobj)
		: cpp_object<GZIPInputStream>(jobj)
		{
		}

		operator local_ref<java::util::zip::InflaterInputStream>() const;


		GZIPInputStream(local_ref< java::io::InputStream > const&);
		GZIPInputStream(local_ref< java::io::InputStream > const&, cpp_int const&);
		void close();
		cpp_int read(local_ref< cpp_byte_array<1> > const&, cpp_int const&, cpp_int const&);

		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(0), J2CPP_FIELD_SIGNATURE(0), cpp_int > GZIP_MAGIC;
	}; //class GZIPInputStream

} //namespace zip
} //namespace util
} //namespace java

} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_ZIP_GZIPINPUTSTREAM_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_ZIP_GZIPINPUTSTREAM_HPP_IMPL
#define J2CPP_JAVA_UTIL_ZIP_GZIPINPUTSTREAM_HPP_IMPL

namespace j2cpp {



java::util::zip::GZIPInputStream::operator local_ref<java::util::zip::InflaterInputStream>() const
{
	return local_ref<java::util::zip::InflaterInputStream>(get_jtype());
}


java::util::zip::GZIPInputStream::GZIPInputStream(local_ref< java::io::InputStream > const &a0)
: cpp_object<java::util::zip::GZIPInputStream>(
	environment::get().get_jenv()->NewObject(
		get_class<java::util::zip::GZIPInputStream::J2CPP_CLASS_NAME>(),
		get_method_id<java::util::zip::GZIPInputStream::J2CPP_CLASS_NAME, java::util::zip::GZIPInputStream::J2CPP_METHOD_NAME(0), java::util::zip::GZIPInputStream::J2CPP_METHOD_SIGNATURE(0), false>(),
		a0.get_jtype()
	)
)
{
}



java::util::zip::GZIPInputStream::GZIPInputStream(local_ref< java::io::InputStream > const &a0, cpp_int const &a1)
: cpp_object<java::util::zip::GZIPInputStream>(
	environment::get().get_jenv()->NewObject(
		get_class<java::util::zip::GZIPInputStream::J2CPP_CLASS_NAME>(),
		get_method_id<java::util::zip::GZIPInputStream::J2CPP_CLASS_NAME, java::util::zip::GZIPInputStream::J2CPP_METHOD_NAME(1), java::util::zip::GZIPInputStream::J2CPP_METHOD_SIGNATURE(1), false>(),
		a0.get_jtype(), a1.get_jtype()
	)
)
{
}


void java::util::zip::GZIPInputStream::close()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>()
		)
	);
}

cpp_int java::util::zip::GZIPInputStream::read(local_ref< cpp_byte_array<1> > const &a0, cpp_int const &a1, cpp_int const &a2)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}


static_field<
	java::util::zip::GZIPInputStream::J2CPP_CLASS_NAME,
	java::util::zip::GZIPInputStream::J2CPP_FIELD_NAME(0),
	java::util::zip::GZIPInputStream::J2CPP_FIELD_SIGNATURE(0),
	cpp_int
> java::util::zip::GZIPInputStream::GZIP_MAGIC;


J2CPP_DEFINE_CLASS(java::util::zip::GZIPInputStream,"java/util/zip/GZIPInputStream")
J2CPP_DEFINE_METHOD(java::util::zip::GZIPInputStream,0,"<init>","(Ljava/io/InputStream;)V")
J2CPP_DEFINE_METHOD(java::util::zip::GZIPInputStream,1,"<init>","(Ljava/io/InputStream;I)V")
J2CPP_DEFINE_METHOD(java::util::zip::GZIPInputStream,2,"close","()V")
J2CPP_DEFINE_METHOD(java::util::zip::GZIPInputStream,3,"read","([BII)I")
J2CPP_DEFINE_FIELD(java::util::zip::GZIPInputStream,0,"GZIP_MAGIC","I")
J2CPP_DEFINE_FIELD(java::util::zip::GZIPInputStream,1,"crc","Ljava/util/zip/CRC32;")
J2CPP_DEFINE_FIELD(java::util::zip::GZIPInputStream,2,"eos","Z")

} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_ZIP_GZIPINPUTSTREAM_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
