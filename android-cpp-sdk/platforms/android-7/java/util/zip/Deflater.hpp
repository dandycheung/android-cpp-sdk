/*================================================================================
  code generated by: java2cpp
  class: java.util.zip.Deflater
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_ZIP_DEFLATER_HPP_DECL
#define J2CPP_JAVA_UTIL_ZIP_DEFLATER_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class Object; } } }


#include <java/lang/Object.hpp>


namespace j2cpp {

namespace java { namespace util { namespace zip {

	class Deflater;
	class Deflater
		: public cpp_object<Deflater>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_METHOD(12)
		J2CPP_DECLARE_METHOD(13)
		J2CPP_DECLARE_METHOD(14)
		J2CPP_DECLARE_METHOD(15)
		J2CPP_DECLARE_METHOD(16)
		J2CPP_DECLARE_METHOD(17)
		J2CPP_DECLARE_METHOD(18)
		J2CPP_DECLARE_METHOD(19)
		J2CPP_DECLARE_METHOD(20)
		J2CPP_DECLARE_METHOD(21)
		J2CPP_DECLARE_FIELD(0)
		J2CPP_DECLARE_FIELD(1)
		J2CPP_DECLARE_FIELD(2)
		J2CPP_DECLARE_FIELD(3)
		J2CPP_DECLARE_FIELD(4)
		J2CPP_DECLARE_FIELD(5)
		J2CPP_DECLARE_FIELD(6)
		J2CPP_DECLARE_FIELD(7)

		explicit Deflater(jobject jobj)
		: cpp_object<Deflater>(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;


		Deflater();
		Deflater(cpp_int const&);
		Deflater(cpp_int const&, cpp_boolean const&);
		cpp_int deflate(local_ref< cpp_byte_array<1> > const&);
		cpp_int deflate(local_ref< cpp_byte_array<1> > const&, cpp_int const&, cpp_int const&);
		void end();
		void finish();
		cpp_boolean finished();
		cpp_int getAdler();
		cpp_int getTotalIn();
		cpp_int getTotalOut();
		cpp_boolean needsInput();
		void reset();
		void setDictionary(local_ref< cpp_byte_array<1> > const&);
		void setDictionary(local_ref< cpp_byte_array<1> > const&, cpp_int const&, cpp_int const&);
		void setInput(local_ref< cpp_byte_array<1> > const&);
		void setInput(local_ref< cpp_byte_array<1> > const&, cpp_int const&, cpp_int const&);
		void setLevel(cpp_int const&);
		void setStrategy(cpp_int const&);
		cpp_long getBytesRead();
		cpp_long getBytesWritten();

		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(0), J2CPP_FIELD_SIGNATURE(0), cpp_int > BEST_COMPRESSION;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(1), J2CPP_FIELD_SIGNATURE(1), cpp_int > BEST_SPEED;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(2), J2CPP_FIELD_SIGNATURE(2), cpp_int > DEFAULT_COMPRESSION;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(3), J2CPP_FIELD_SIGNATURE(3), cpp_int > DEFAULT_STRATEGY;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(4), J2CPP_FIELD_SIGNATURE(4), cpp_int > DEFLATED;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(5), J2CPP_FIELD_SIGNATURE(5), cpp_int > FILTERED;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(6), J2CPP_FIELD_SIGNATURE(6), cpp_int > HUFFMAN_ONLY;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(7), J2CPP_FIELD_SIGNATURE(7), cpp_int > NO_COMPRESSION;
	}; //class Deflater

} //namespace zip
} //namespace util
} //namespace java

} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_ZIP_DEFLATER_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_ZIP_DEFLATER_HPP_IMPL
#define J2CPP_JAVA_UTIL_ZIP_DEFLATER_HPP_IMPL

namespace j2cpp {



java::util::zip::Deflater::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jtype());
}


java::util::zip::Deflater::Deflater()
: cpp_object<java::util::zip::Deflater>(
	environment::get().get_jenv()->NewObject(
		get_class<java::util::zip::Deflater::J2CPP_CLASS_NAME>(),
		get_method_id<java::util::zip::Deflater::J2CPP_CLASS_NAME, java::util::zip::Deflater::J2CPP_METHOD_NAME(0), java::util::zip::Deflater::J2CPP_METHOD_SIGNATURE(0), false>()
	)
)
{
}



java::util::zip::Deflater::Deflater(cpp_int const &a0)
: cpp_object<java::util::zip::Deflater>(
	environment::get().get_jenv()->NewObject(
		get_class<java::util::zip::Deflater::J2CPP_CLASS_NAME>(),
		get_method_id<java::util::zip::Deflater::J2CPP_CLASS_NAME, java::util::zip::Deflater::J2CPP_METHOD_NAME(1), java::util::zip::Deflater::J2CPP_METHOD_SIGNATURE(1), false>(),
		a0.get_jtype()
	)
)
{
}



java::util::zip::Deflater::Deflater(cpp_int const &a0, cpp_boolean const &a1)
: cpp_object<java::util::zip::Deflater>(
	environment::get().get_jenv()->NewObject(
		get_class<java::util::zip::Deflater::J2CPP_CLASS_NAME>(),
		get_method_id<java::util::zip::Deflater::J2CPP_CLASS_NAME, java::util::zip::Deflater::J2CPP_METHOD_NAME(2), java::util::zip::Deflater::J2CPP_METHOD_SIGNATURE(2), false>(),
		a0.get_jtype(), a1.get_jtype()
	)
)
{
}


cpp_int java::util::zip::Deflater::deflate(local_ref< cpp_byte_array<1> > const &a0)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int java::util::zip::Deflater::deflate(local_ref< cpp_byte_array<1> > const &a0, cpp_int const &a1, cpp_int const &a2)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

void java::util::zip::Deflater::end()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>()
		)
	);
}


void java::util::zip::Deflater::finish()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(7), J2CPP_METHOD_SIGNATURE(7), false>()
		)
	);
}

cpp_boolean java::util::zip::Deflater::finished()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(8), J2CPP_METHOD_SIGNATURE(8), false>()
		)
	);
}

cpp_int java::util::zip::Deflater::getAdler()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(9), J2CPP_METHOD_SIGNATURE(9), false>()
		)
	);
}

cpp_int java::util::zip::Deflater::getTotalIn()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(10), J2CPP_METHOD_SIGNATURE(10), false>()
		)
	);
}

cpp_int java::util::zip::Deflater::getTotalOut()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(11), J2CPP_METHOD_SIGNATURE(11), false>()
		)
	);
}

cpp_boolean java::util::zip::Deflater::needsInput()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(12), J2CPP_METHOD_SIGNATURE(12), false>()
		)
	);
}

void java::util::zip::Deflater::reset()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(13), J2CPP_METHOD_SIGNATURE(13), false>()
		)
	);
}

void java::util::zip::Deflater::setDictionary(local_ref< cpp_byte_array<1> > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(14), J2CPP_METHOD_SIGNATURE(14), false>(),
			a0.get_jtype()
		)
	);
}

void java::util::zip::Deflater::setDictionary(local_ref< cpp_byte_array<1> > const &a0, cpp_int const &a1, cpp_int const &a2)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(15), J2CPP_METHOD_SIGNATURE(15), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

void java::util::zip::Deflater::setInput(local_ref< cpp_byte_array<1> > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(16), J2CPP_METHOD_SIGNATURE(16), false>(),
			a0.get_jtype()
		)
	);
}

void java::util::zip::Deflater::setInput(local_ref< cpp_byte_array<1> > const &a0, cpp_int const &a1, cpp_int const &a2)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(17), J2CPP_METHOD_SIGNATURE(17), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

void java::util::zip::Deflater::setLevel(cpp_int const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(18), J2CPP_METHOD_SIGNATURE(18), false>(),
			a0.get_jtype()
		)
	);
}

void java::util::zip::Deflater::setStrategy(cpp_int const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(19), J2CPP_METHOD_SIGNATURE(19), false>(),
			a0.get_jtype()
		)
	);
}

cpp_long java::util::zip::Deflater::getBytesRead()
{
	return cpp_long(
		environment::get().get_jenv()->CallLongMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(20), J2CPP_METHOD_SIGNATURE(20), false>()
		)
	);
}

cpp_long java::util::zip::Deflater::getBytesWritten()
{
	return cpp_long(
		environment::get().get_jenv()->CallLongMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(21), J2CPP_METHOD_SIGNATURE(21), false>()
		)
	);
}


static_field<
	java::util::zip::Deflater::J2CPP_CLASS_NAME,
	java::util::zip::Deflater::J2CPP_FIELD_NAME(0),
	java::util::zip::Deflater::J2CPP_FIELD_SIGNATURE(0),
	cpp_int
> java::util::zip::Deflater::BEST_COMPRESSION;

static_field<
	java::util::zip::Deflater::J2CPP_CLASS_NAME,
	java::util::zip::Deflater::J2CPP_FIELD_NAME(1),
	java::util::zip::Deflater::J2CPP_FIELD_SIGNATURE(1),
	cpp_int
> java::util::zip::Deflater::BEST_SPEED;

static_field<
	java::util::zip::Deflater::J2CPP_CLASS_NAME,
	java::util::zip::Deflater::J2CPP_FIELD_NAME(2),
	java::util::zip::Deflater::J2CPP_FIELD_SIGNATURE(2),
	cpp_int
> java::util::zip::Deflater::DEFAULT_COMPRESSION;

static_field<
	java::util::zip::Deflater::J2CPP_CLASS_NAME,
	java::util::zip::Deflater::J2CPP_FIELD_NAME(3),
	java::util::zip::Deflater::J2CPP_FIELD_SIGNATURE(3),
	cpp_int
> java::util::zip::Deflater::DEFAULT_STRATEGY;

static_field<
	java::util::zip::Deflater::J2CPP_CLASS_NAME,
	java::util::zip::Deflater::J2CPP_FIELD_NAME(4),
	java::util::zip::Deflater::J2CPP_FIELD_SIGNATURE(4),
	cpp_int
> java::util::zip::Deflater::DEFLATED;

static_field<
	java::util::zip::Deflater::J2CPP_CLASS_NAME,
	java::util::zip::Deflater::J2CPP_FIELD_NAME(5),
	java::util::zip::Deflater::J2CPP_FIELD_SIGNATURE(5),
	cpp_int
> java::util::zip::Deflater::FILTERED;

static_field<
	java::util::zip::Deflater::J2CPP_CLASS_NAME,
	java::util::zip::Deflater::J2CPP_FIELD_NAME(6),
	java::util::zip::Deflater::J2CPP_FIELD_SIGNATURE(6),
	cpp_int
> java::util::zip::Deflater::HUFFMAN_ONLY;

static_field<
	java::util::zip::Deflater::J2CPP_CLASS_NAME,
	java::util::zip::Deflater::J2CPP_FIELD_NAME(7),
	java::util::zip::Deflater::J2CPP_FIELD_SIGNATURE(7),
	cpp_int
> java::util::zip::Deflater::NO_COMPRESSION;


J2CPP_DEFINE_CLASS(java::util::zip::Deflater,"java/util/zip/Deflater")
J2CPP_DEFINE_METHOD(java::util::zip::Deflater,0,"<init>","()V")
J2CPP_DEFINE_METHOD(java::util::zip::Deflater,1,"<init>","(I)V")
J2CPP_DEFINE_METHOD(java::util::zip::Deflater,2,"<init>","(IZ)V")
J2CPP_DEFINE_METHOD(java::util::zip::Deflater,3,"deflate","([B)I")
J2CPP_DEFINE_METHOD(java::util::zip::Deflater,4,"deflate","([BII)I")
J2CPP_DEFINE_METHOD(java::util::zip::Deflater,5,"end","()V")
J2CPP_DEFINE_METHOD(java::util::zip::Deflater,6,"finalize","()V")
J2CPP_DEFINE_METHOD(java::util::zip::Deflater,7,"finish","()V")
J2CPP_DEFINE_METHOD(java::util::zip::Deflater,8,"finished","()Z")
J2CPP_DEFINE_METHOD(java::util::zip::Deflater,9,"getAdler","()I")
J2CPP_DEFINE_METHOD(java::util::zip::Deflater,10,"getTotalIn","()I")
J2CPP_DEFINE_METHOD(java::util::zip::Deflater,11,"getTotalOut","()I")
J2CPP_DEFINE_METHOD(java::util::zip::Deflater,12,"needsInput","()Z")
J2CPP_DEFINE_METHOD(java::util::zip::Deflater,13,"reset","()V")
J2CPP_DEFINE_METHOD(java::util::zip::Deflater,14,"setDictionary","([B)V")
J2CPP_DEFINE_METHOD(java::util::zip::Deflater,15,"setDictionary","([BII)V")
J2CPP_DEFINE_METHOD(java::util::zip::Deflater,16,"setInput","([B)V")
J2CPP_DEFINE_METHOD(java::util::zip::Deflater,17,"setInput","([BII)V")
J2CPP_DEFINE_METHOD(java::util::zip::Deflater,18,"setLevel","(I)V")
J2CPP_DEFINE_METHOD(java::util::zip::Deflater,19,"setStrategy","(I)V")
J2CPP_DEFINE_METHOD(java::util::zip::Deflater,20,"getBytesRead","()J")
J2CPP_DEFINE_METHOD(java::util::zip::Deflater,21,"getBytesWritten","()J")
J2CPP_DEFINE_FIELD(java::util::zip::Deflater,0,"BEST_COMPRESSION","I")
J2CPP_DEFINE_FIELD(java::util::zip::Deflater,1,"BEST_SPEED","I")
J2CPP_DEFINE_FIELD(java::util::zip::Deflater,2,"DEFAULT_COMPRESSION","I")
J2CPP_DEFINE_FIELD(java::util::zip::Deflater,3,"DEFAULT_STRATEGY","I")
J2CPP_DEFINE_FIELD(java::util::zip::Deflater,4,"DEFLATED","I")
J2CPP_DEFINE_FIELD(java::util::zip::Deflater,5,"FILTERED","I")
J2CPP_DEFINE_FIELD(java::util::zip::Deflater,6,"HUFFMAN_ONLY","I")
J2CPP_DEFINE_FIELD(java::util::zip::Deflater,7,"NO_COMPRESSION","I")

} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_ZIP_DEFLATER_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
