/*================================================================================
  code generated by: java2cpp
  class: java.util.Hashtable
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_HASHTABLE_HPP_DECL
#define J2CPP_JAVA_UTIL_HASHTABLE_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace util { class Set; } } }
namespace j2cpp { namespace java { namespace util { class Map; } } }
namespace j2cpp { namespace java { namespace util { class Enumeration; } } }
namespace j2cpp { namespace java { namespace util { class Collection; } } }


#include <java/lang/Object.hpp>
#include <java/lang/String.hpp>
#include <java/util/Collection.hpp>
#include <java/util/Enumeration.hpp>
#include <java/util/Map.hpp>
#include <java/util/Set.hpp>


namespace j2cpp {

namespace java { namespace util {

	class Hashtable;
	class Hashtable
		: public cpp_object<Hashtable>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_METHOD(12)
		J2CPP_DECLARE_METHOD(13)
		J2CPP_DECLARE_METHOD(14)
		J2CPP_DECLARE_METHOD(15)
		J2CPP_DECLARE_METHOD(16)
		J2CPP_DECLARE_METHOD(17)
		J2CPP_DECLARE_METHOD(18)
		J2CPP_DECLARE_METHOD(19)
		J2CPP_DECLARE_METHOD(20)
		J2CPP_DECLARE_METHOD(21)
		J2CPP_DECLARE_METHOD(22)
		J2CPP_DECLARE_METHOD(23)

		Hashtable(jobject jobj)
		: cpp_object<Hashtable>(jobj)
		{
		}

		local_ref< java::lang::Object > clone();
		cpp_boolean isEmpty();
		cpp_int size();
		local_ref< java::lang::Object > get(local_ref< java::lang::Object > const&);
		cpp_boolean containsKey(local_ref< java::lang::Object > const&);
		cpp_boolean containsValue(local_ref< java::lang::Object > const&);
		cpp_boolean contains(local_ref< java::lang::Object > const&);
		local_ref< java::lang::Object > put(local_ref< java::lang::Object > const&, local_ref< java::lang::Object > const&);
		void putAll(local_ref< java::util::Map > const&);
		local_ref< java::lang::Object > remove(local_ref< java::lang::Object > const&);
		void clear();
		local_ref< java::util::Set > keySet();
		local_ref< java::util::Collection > values();
		local_ref< java::util::Set > entrySet();
		local_ref< java::util::Enumeration > keys();
		local_ref< java::util::Enumeration > elements();
		cpp_boolean equals(local_ref< java::lang::Object > const&);
		cpp_int hashCode();
		local_ref< java::lang::String > toString();
	}; //class Hashtable

} //namespace util
} //namespace java


} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_HASHTABLE_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_HASHTABLE_HPP_IMPL
#define J2CPP_JAVA_UTIL_HASHTABLE_HPP_IMPL

namespace j2cpp {


template <>
local_ref< java::util::Hashtable > create< java::util::Hashtable>()
{
	return local_ref< java::util::Hashtable >(
		environment::get().get_jenv()->NewObject(
			get_class<java::util::Hashtable::J2CPP_CLASS_NAME>(),
			get_method_id<java::util::Hashtable::J2CPP_CLASS_NAME, java::util::Hashtable::J2CPP_METHOD_NAME(0), java::util::Hashtable::J2CPP_METHOD_SIGNATURE(0), false>()
		)
	);
}

template <>
local_ref< java::util::Hashtable > create< java::util::Hashtable>(cpp_int const &a0)
{
	return local_ref< java::util::Hashtable >(
		environment::get().get_jenv()->NewObject(
			get_class<java::util::Hashtable::J2CPP_CLASS_NAME>(),
			get_method_id<java::util::Hashtable::J2CPP_CLASS_NAME, java::util::Hashtable::J2CPP_METHOD_NAME(1), java::util::Hashtable::J2CPP_METHOD_SIGNATURE(1), false>(),
			a0.get_jtype()
		)
	);
}

template <>
local_ref< java::util::Hashtable > create< java::util::Hashtable>(cpp_int const &a0, cpp_float const &a1)
{
	return local_ref< java::util::Hashtable >(
		environment::get().get_jenv()->NewObject(
			get_class<java::util::Hashtable::J2CPP_CLASS_NAME>(),
			get_method_id<java::util::Hashtable::J2CPP_CLASS_NAME, java::util::Hashtable::J2CPP_METHOD_NAME(2), java::util::Hashtable::J2CPP_METHOD_SIGNATURE(2), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

template <>
local_ref< java::util::Hashtable > create< java::util::Hashtable>(local_ref< java::util::Map > const &a0)
{
	return local_ref< java::util::Hashtable >(
		environment::get().get_jenv()->NewObject(
			get_class<java::util::Hashtable::J2CPP_CLASS_NAME>(),
			get_method_id<java::util::Hashtable::J2CPP_CLASS_NAME, java::util::Hashtable::J2CPP_METHOD_NAME(3), java::util::Hashtable::J2CPP_METHOD_SIGNATURE(3), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::Object > java::util::Hashtable::clone()
{
	return local_ref< java::lang::Object >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>()
		)
	);
}

cpp_boolean java::util::Hashtable::isEmpty()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>()
		)
	);
}

cpp_int java::util::Hashtable::size()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>()
		)
	);
}

local_ref< java::lang::Object > java::util::Hashtable::get(local_ref< java::lang::Object > const &a0)
{
	return local_ref< java::lang::Object >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(7), J2CPP_METHOD_SIGNATURE(7), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean java::util::Hashtable::containsKey(local_ref< java::lang::Object > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(8), J2CPP_METHOD_SIGNATURE(8), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean java::util::Hashtable::containsValue(local_ref< java::lang::Object > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(9), J2CPP_METHOD_SIGNATURE(9), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean java::util::Hashtable::contains(local_ref< java::lang::Object > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(10), J2CPP_METHOD_SIGNATURE(10), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::Object > java::util::Hashtable::put(local_ref< java::lang::Object > const &a0, local_ref< java::lang::Object > const &a1)
{
	return local_ref< java::lang::Object >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(11), J2CPP_METHOD_SIGNATURE(11), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void java::util::Hashtable::putAll(local_ref< java::util::Map > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(12), J2CPP_METHOD_SIGNATURE(12), false>(),
			a0.get_jtype()
		)
	);
}


local_ref< java::lang::Object > java::util::Hashtable::remove(local_ref< java::lang::Object > const &a0)
{
	return local_ref< java::lang::Object >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(14), J2CPP_METHOD_SIGNATURE(14), false>(),
			a0.get_jtype()
		)
	);
}

void java::util::Hashtable::clear()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(15), J2CPP_METHOD_SIGNATURE(15), false>()
		)
	);
}

local_ref< java::util::Set > java::util::Hashtable::keySet()
{
	return local_ref< java::util::Set >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(16), J2CPP_METHOD_SIGNATURE(16), false>()
		)
	);
}

local_ref< java::util::Collection > java::util::Hashtable::values()
{
	return local_ref< java::util::Collection >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(17), J2CPP_METHOD_SIGNATURE(17), false>()
		)
	);
}

local_ref< java::util::Set > java::util::Hashtable::entrySet()
{
	return local_ref< java::util::Set >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(18), J2CPP_METHOD_SIGNATURE(18), false>()
		)
	);
}

local_ref< java::util::Enumeration > java::util::Hashtable::keys()
{
	return local_ref< java::util::Enumeration >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(19), J2CPP_METHOD_SIGNATURE(19), false>()
		)
	);
}

local_ref< java::util::Enumeration > java::util::Hashtable::elements()
{
	return local_ref< java::util::Enumeration >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(20), J2CPP_METHOD_SIGNATURE(20), false>()
		)
	);
}

cpp_boolean java::util::Hashtable::equals(local_ref< java::lang::Object > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(21), J2CPP_METHOD_SIGNATURE(21), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int java::util::Hashtable::hashCode()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(22), J2CPP_METHOD_SIGNATURE(22), false>()
		)
	);
}

local_ref< java::lang::String > java::util::Hashtable::toString()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(23), J2CPP_METHOD_SIGNATURE(23), false>()
		)
	);
}


J2CPP_DEFINE_CLASS(java::util::Hashtable,"java/util/Hashtable")
J2CPP_DEFINE_METHOD(java::util::Hashtable,0,"<init>","()V")
J2CPP_DEFINE_METHOD(java::util::Hashtable,1,"<init>","(I)V")
J2CPP_DEFINE_METHOD(java::util::Hashtable,2,"<init>","(IF)V")
J2CPP_DEFINE_METHOD(java::util::Hashtable,3,"<init>","(Ljava/util/Map;)V")
J2CPP_DEFINE_METHOD(java::util::Hashtable,4,"clone","()Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(java::util::Hashtable,5,"isEmpty","()Z")
J2CPP_DEFINE_METHOD(java::util::Hashtable,6,"size","()I")
J2CPP_DEFINE_METHOD(java::util::Hashtable,7,"get","(Ljava/lang/Object;)Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(java::util::Hashtable,8,"containsKey","(Ljava/lang/Object;)Z")
J2CPP_DEFINE_METHOD(java::util::Hashtable,9,"containsValue","(Ljava/lang/Object;)Z")
J2CPP_DEFINE_METHOD(java::util::Hashtable,10,"contains","(Ljava/lang/Object;)Z")
J2CPP_DEFINE_METHOD(java::util::Hashtable,11,"put","(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(java::util::Hashtable,12,"putAll","(Ljava/util/Map;)V")
J2CPP_DEFINE_METHOD(java::util::Hashtable,13,"rehash","()V")
J2CPP_DEFINE_METHOD(java::util::Hashtable,14,"remove","(Ljava/lang/Object;)Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(java::util::Hashtable,15,"clear","()V")
J2CPP_DEFINE_METHOD(java::util::Hashtable,16,"keySet","()Ljava/util/Set;")
J2CPP_DEFINE_METHOD(java::util::Hashtable,17,"values","()Ljava/util/Collection;")
J2CPP_DEFINE_METHOD(java::util::Hashtable,18,"entrySet","()Ljava/util/Set;")
J2CPP_DEFINE_METHOD(java::util::Hashtable,19,"keys","()Ljava/util/Enumeration;")
J2CPP_DEFINE_METHOD(java::util::Hashtable,20,"elements","()Ljava/util/Enumeration;")
J2CPP_DEFINE_METHOD(java::util::Hashtable,21,"equals","(Ljava/lang/Object;)Z")
J2CPP_DEFINE_METHOD(java::util::Hashtable,22,"hashCode","()I")
J2CPP_DEFINE_METHOD(java::util::Hashtable,23,"toString","()Ljava/lang/String;")

} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_HASHTABLE_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
