/*================================================================================
  code generated by: java2cpp
  class: java.util.SimpleTimeZone
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_SIMPLETIMEZONE_HPP_DECL
#define J2CPP_JAVA_UTIL_SIMPLETIMEZONE_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace util { class Date; } } }
namespace j2cpp { namespace java { namespace util { class TimeZone; } } }


#include <java/lang/Object.hpp>
#include <java/lang/String.hpp>
#include <java/util/Date.hpp>
#include <java/util/TimeZone.hpp>


namespace j2cpp {

namespace java { namespace util {

	class SimpleTimeZone;
	class SimpleTimeZone
		: public cpp_object<SimpleTimeZone>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_METHOD(12)
		J2CPP_DECLARE_METHOD(13)
		J2CPP_DECLARE_METHOD(14)
		J2CPP_DECLARE_METHOD(15)
		J2CPP_DECLARE_METHOD(16)
		J2CPP_DECLARE_METHOD(17)
		J2CPP_DECLARE_METHOD(18)
		J2CPP_DECLARE_METHOD(19)
		J2CPP_DECLARE_METHOD(20)
		J2CPP_DECLARE_METHOD(21)
		J2CPP_DECLARE_METHOD(22)
		J2CPP_DECLARE_METHOD(23)
		J2CPP_DECLARE_FIELD(0)
		J2CPP_DECLARE_FIELD(1)
		J2CPP_DECLARE_FIELD(2)

		explicit SimpleTimeZone(jobject jobj)
		: cpp_object<SimpleTimeZone>(jobj)
		{
		}

		operator local_ref<java::util::TimeZone>() const;


		SimpleTimeZone(cpp_int const&, local_ref< java::lang::String > const&);
		SimpleTimeZone(cpp_int const&, local_ref< java::lang::String > const&, cpp_int const&, cpp_int const&, cpp_int const&, cpp_int const&, cpp_int const&, cpp_int const&, cpp_int const&, cpp_int const&);
		SimpleTimeZone(cpp_int const&, local_ref< java::lang::String > const&, cpp_int const&, cpp_int const&, cpp_int const&, cpp_int const&, cpp_int const&, cpp_int const&, cpp_int const&, cpp_int const&, cpp_int const&);
		SimpleTimeZone(cpp_int const&, local_ref< java::lang::String > const&, cpp_int const&, cpp_int const&, cpp_int const&, cpp_int const&, cpp_int const&, cpp_int const&, cpp_int const&, cpp_int const&, cpp_int const&, cpp_int const&, cpp_int const&);
		local_ref< java::lang::Object > clone();
		cpp_boolean equals(local_ref< java::lang::Object > const&);
		cpp_int getDSTSavings();
		cpp_int getOffset(cpp_int const&, cpp_int const&, cpp_int const&, cpp_int const&, cpp_int const&, cpp_int const&);
		cpp_int getOffset(cpp_long const&);
		cpp_int getRawOffset();
		cpp_int hashCode();
		cpp_boolean hasSameRules(local_ref< java::util::TimeZone > const&);
		cpp_boolean inDaylightTime(local_ref< java::util::Date > const&);
		void setDSTSavings(cpp_int const&);
		void setEndRule(cpp_int const&, cpp_int const&, cpp_int const&);
		void setEndRule(cpp_int const&, cpp_int const&, cpp_int const&, cpp_int const&);
		void setEndRule(cpp_int const&, cpp_int const&, cpp_int const&, cpp_int const&, cpp_boolean const&);
		void setRawOffset(cpp_int const&);
		void setStartRule(cpp_int const&, cpp_int const&, cpp_int const&);
		void setStartRule(cpp_int const&, cpp_int const&, cpp_int const&, cpp_int const&);
		void setStartRule(cpp_int const&, cpp_int const&, cpp_int const&, cpp_int const&, cpp_boolean const&);
		void setStartYear(cpp_int const&);
		local_ref< java::lang::String > toString();
		cpp_boolean useDaylightTime();

		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(0), J2CPP_FIELD_SIGNATURE(0), cpp_int > UTC_TIME;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(1), J2CPP_FIELD_SIGNATURE(1), cpp_int > STANDARD_TIME;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(2), J2CPP_FIELD_SIGNATURE(2), cpp_int > WALL_TIME;
	}; //class SimpleTimeZone

} //namespace util
} //namespace java

} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_SIMPLETIMEZONE_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_SIMPLETIMEZONE_HPP_IMPL
#define J2CPP_JAVA_UTIL_SIMPLETIMEZONE_HPP_IMPL

namespace j2cpp {



java::util::SimpleTimeZone::operator local_ref<java::util::TimeZone>() const
{
	return local_ref<java::util::TimeZone>(get_jtype());
}


java::util::SimpleTimeZone::SimpleTimeZone(cpp_int const &a0, local_ref< java::lang::String > const &a1)
: cpp_object<java::util::SimpleTimeZone>(
	environment::get().get_jenv()->NewObject(
		get_class<java::util::SimpleTimeZone::J2CPP_CLASS_NAME>(),
		get_method_id<java::util::SimpleTimeZone::J2CPP_CLASS_NAME, java::util::SimpleTimeZone::J2CPP_METHOD_NAME(0), java::util::SimpleTimeZone::J2CPP_METHOD_SIGNATURE(0), false>(),
		a0.get_jtype(), a1.get_jtype()
	)
)
{
}



java::util::SimpleTimeZone::SimpleTimeZone(cpp_int const &a0, local_ref< java::lang::String > const &a1, cpp_int const &a2, cpp_int const &a3, cpp_int const &a4, cpp_int const &a5, cpp_int const &a6, cpp_int const &a7, cpp_int const &a8, cpp_int const &a9)
: cpp_object<java::util::SimpleTimeZone>(
	environment::get().get_jenv()->NewObject(
		get_class<java::util::SimpleTimeZone::J2CPP_CLASS_NAME>(),
		get_method_id<java::util::SimpleTimeZone::J2CPP_CLASS_NAME, java::util::SimpleTimeZone::J2CPP_METHOD_NAME(1), java::util::SimpleTimeZone::J2CPP_METHOD_SIGNATURE(1), false>(),
		a0.get_jtype(), a1.get_jtype(), a2.get_jtype(), a3.get_jtype(), a4.get_jtype(), a5.get_jtype(), a6.get_jtype(), a7.get_jtype(), a8.get_jtype(), a9.get_jtype()
	)
)
{
}



java::util::SimpleTimeZone::SimpleTimeZone(cpp_int const &a0, local_ref< java::lang::String > const &a1, cpp_int const &a2, cpp_int const &a3, cpp_int const &a4, cpp_int const &a5, cpp_int const &a6, cpp_int const &a7, cpp_int const &a8, cpp_int const &a9, cpp_int const &a10)
: cpp_object<java::util::SimpleTimeZone>(
	environment::get().get_jenv()->NewObject(
		get_class<java::util::SimpleTimeZone::J2CPP_CLASS_NAME>(),
		get_method_id<java::util::SimpleTimeZone::J2CPP_CLASS_NAME, java::util::SimpleTimeZone::J2CPP_METHOD_NAME(2), java::util::SimpleTimeZone::J2CPP_METHOD_SIGNATURE(2), false>(),
		a0.get_jtype(), a1.get_jtype(), a2.get_jtype(), a3.get_jtype(), a4.get_jtype(), a5.get_jtype(), a6.get_jtype(), a7.get_jtype(), a8.get_jtype(), a9.get_jtype(), a10.get_jtype()
	)
)
{
}



java::util::SimpleTimeZone::SimpleTimeZone(cpp_int const &a0, local_ref< java::lang::String > const &a1, cpp_int const &a2, cpp_int const &a3, cpp_int const &a4, cpp_int const &a5, cpp_int const &a6, cpp_int const &a7, cpp_int const &a8, cpp_int const &a9, cpp_int const &a10, cpp_int const &a11, cpp_int const &a12)
: cpp_object<java::util::SimpleTimeZone>(
	environment::get().get_jenv()->NewObject(
		get_class<java::util::SimpleTimeZone::J2CPP_CLASS_NAME>(),
		get_method_id<java::util::SimpleTimeZone::J2CPP_CLASS_NAME, java::util::SimpleTimeZone::J2CPP_METHOD_NAME(3), java::util::SimpleTimeZone::J2CPP_METHOD_SIGNATURE(3), false>(),
		a0.get_jtype(), a1.get_jtype(), a2.get_jtype(), a3.get_jtype(), a4.get_jtype(), a5.get_jtype(), a6.get_jtype(), a7.get_jtype(), a8.get_jtype(), a9.get_jtype(), a10.get_jtype(), a11.get_jtype(), a12.get_jtype()
	)
)
{
}


local_ref< java::lang::Object > java::util::SimpleTimeZone::clone()
{
	return local_ref< java::lang::Object >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>()
		)
	);
}

cpp_boolean java::util::SimpleTimeZone::equals(local_ref< java::lang::Object > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int java::util::SimpleTimeZone::getDSTSavings()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>()
		)
	);
}

cpp_int java::util::SimpleTimeZone::getOffset(cpp_int const &a0, cpp_int const &a1, cpp_int const &a2, cpp_int const &a3, cpp_int const &a4, cpp_int const &a5)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(7), J2CPP_METHOD_SIGNATURE(7), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype(), a3.get_jtype(), a4.get_jtype(), a5.get_jtype()
		)
	);
}

cpp_int java::util::SimpleTimeZone::getOffset(cpp_long const &a0)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(8), J2CPP_METHOD_SIGNATURE(8), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int java::util::SimpleTimeZone::getRawOffset()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(9), J2CPP_METHOD_SIGNATURE(9), false>()
		)
	);
}

cpp_int java::util::SimpleTimeZone::hashCode()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(10), J2CPP_METHOD_SIGNATURE(10), false>()
		)
	);
}

cpp_boolean java::util::SimpleTimeZone::hasSameRules(local_ref< java::util::TimeZone > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(11), J2CPP_METHOD_SIGNATURE(11), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean java::util::SimpleTimeZone::inDaylightTime(local_ref< java::util::Date > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(12), J2CPP_METHOD_SIGNATURE(12), false>(),
			a0.get_jtype()
		)
	);
}

void java::util::SimpleTimeZone::setDSTSavings(cpp_int const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(13), J2CPP_METHOD_SIGNATURE(13), false>(),
			a0.get_jtype()
		)
	);
}

void java::util::SimpleTimeZone::setEndRule(cpp_int const &a0, cpp_int const &a1, cpp_int const &a2)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(14), J2CPP_METHOD_SIGNATURE(14), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

void java::util::SimpleTimeZone::setEndRule(cpp_int const &a0, cpp_int const &a1, cpp_int const &a2, cpp_int const &a3)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(15), J2CPP_METHOD_SIGNATURE(15), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype(), a3.get_jtype()
		)
	);
}

void java::util::SimpleTimeZone::setEndRule(cpp_int const &a0, cpp_int const &a1, cpp_int const &a2, cpp_int const &a3, cpp_boolean const &a4)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(16), J2CPP_METHOD_SIGNATURE(16), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype(), a3.get_jtype(), a4.get_jtype()
		)
	);
}

void java::util::SimpleTimeZone::setRawOffset(cpp_int const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(17), J2CPP_METHOD_SIGNATURE(17), false>(),
			a0.get_jtype()
		)
	);
}

void java::util::SimpleTimeZone::setStartRule(cpp_int const &a0, cpp_int const &a1, cpp_int const &a2)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(18), J2CPP_METHOD_SIGNATURE(18), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

void java::util::SimpleTimeZone::setStartRule(cpp_int const &a0, cpp_int const &a1, cpp_int const &a2, cpp_int const &a3)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(19), J2CPP_METHOD_SIGNATURE(19), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype(), a3.get_jtype()
		)
	);
}

void java::util::SimpleTimeZone::setStartRule(cpp_int const &a0, cpp_int const &a1, cpp_int const &a2, cpp_int const &a3, cpp_boolean const &a4)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(20), J2CPP_METHOD_SIGNATURE(20), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype(), a3.get_jtype(), a4.get_jtype()
		)
	);
}

void java::util::SimpleTimeZone::setStartYear(cpp_int const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(21), J2CPP_METHOD_SIGNATURE(21), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::String > java::util::SimpleTimeZone::toString()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(22), J2CPP_METHOD_SIGNATURE(22), false>()
		)
	);
}

cpp_boolean java::util::SimpleTimeZone::useDaylightTime()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(23), J2CPP_METHOD_SIGNATURE(23), false>()
		)
	);
}


static_field<
	java::util::SimpleTimeZone::J2CPP_CLASS_NAME,
	java::util::SimpleTimeZone::J2CPP_FIELD_NAME(0),
	java::util::SimpleTimeZone::J2CPP_FIELD_SIGNATURE(0),
	cpp_int
> java::util::SimpleTimeZone::UTC_TIME;

static_field<
	java::util::SimpleTimeZone::J2CPP_CLASS_NAME,
	java::util::SimpleTimeZone::J2CPP_FIELD_NAME(1),
	java::util::SimpleTimeZone::J2CPP_FIELD_SIGNATURE(1),
	cpp_int
> java::util::SimpleTimeZone::STANDARD_TIME;

static_field<
	java::util::SimpleTimeZone::J2CPP_CLASS_NAME,
	java::util::SimpleTimeZone::J2CPP_FIELD_NAME(2),
	java::util::SimpleTimeZone::J2CPP_FIELD_SIGNATURE(2),
	cpp_int
> java::util::SimpleTimeZone::WALL_TIME;


J2CPP_DEFINE_CLASS(java::util::SimpleTimeZone,"java/util/SimpleTimeZone")
J2CPP_DEFINE_METHOD(java::util::SimpleTimeZone,0,"<init>","(ILjava/lang/String;)V")
J2CPP_DEFINE_METHOD(java::util::SimpleTimeZone,1,"<init>","(ILjava/lang/String;IIIIIIII)V")
J2CPP_DEFINE_METHOD(java::util::SimpleTimeZone,2,"<init>","(ILjava/lang/String;IIIIIIIII)V")
J2CPP_DEFINE_METHOD(java::util::SimpleTimeZone,3,"<init>","(ILjava/lang/String;IIIIIIIIIII)V")
J2CPP_DEFINE_METHOD(java::util::SimpleTimeZone,4,"clone","()Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(java::util::SimpleTimeZone,5,"equals","(Ljava/lang/Object;)Z")
J2CPP_DEFINE_METHOD(java::util::SimpleTimeZone,6,"getDSTSavings","()I")
J2CPP_DEFINE_METHOD(java::util::SimpleTimeZone,7,"getOffset","(IIIIII)I")
J2CPP_DEFINE_METHOD(java::util::SimpleTimeZone,8,"getOffset","(J)I")
J2CPP_DEFINE_METHOD(java::util::SimpleTimeZone,9,"getRawOffset","()I")
J2CPP_DEFINE_METHOD(java::util::SimpleTimeZone,10,"hashCode","()I")
J2CPP_DEFINE_METHOD(java::util::SimpleTimeZone,11,"hasSameRules","(Ljava/util/TimeZone;)Z")
J2CPP_DEFINE_METHOD(java::util::SimpleTimeZone,12,"inDaylightTime","(Ljava/util/Date;)Z")
J2CPP_DEFINE_METHOD(java::util::SimpleTimeZone,13,"setDSTSavings","(I)V")
J2CPP_DEFINE_METHOD(java::util::SimpleTimeZone,14,"setEndRule","(III)V")
J2CPP_DEFINE_METHOD(java::util::SimpleTimeZone,15,"setEndRule","(IIII)V")
J2CPP_DEFINE_METHOD(java::util::SimpleTimeZone,16,"setEndRule","(IIIIZ)V")
J2CPP_DEFINE_METHOD(java::util::SimpleTimeZone,17,"setRawOffset","(I)V")
J2CPP_DEFINE_METHOD(java::util::SimpleTimeZone,18,"setStartRule","(III)V")
J2CPP_DEFINE_METHOD(java::util::SimpleTimeZone,19,"setStartRule","(IIII)V")
J2CPP_DEFINE_METHOD(java::util::SimpleTimeZone,20,"setStartRule","(IIIIZ)V")
J2CPP_DEFINE_METHOD(java::util::SimpleTimeZone,21,"setStartYear","(I)V")
J2CPP_DEFINE_METHOD(java::util::SimpleTimeZone,22,"toString","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::util::SimpleTimeZone,23,"useDaylightTime","()Z")
J2CPP_DEFINE_FIELD(java::util::SimpleTimeZone,0,"UTC_TIME","I")
J2CPP_DEFINE_FIELD(java::util::SimpleTimeZone,1,"STANDARD_TIME","I")
J2CPP_DEFINE_FIELD(java::util::SimpleTimeZone,2,"WALL_TIME","I")

} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_SIMPLETIMEZONE_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
