/*================================================================================
  code generated by: java2cpp
  class: java.util.LinkedHashSet
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_LINKEDHASHSET_HPP_DECL
#define J2CPP_JAVA_UTIL_LINKEDHASHSET_HPP_DECL


namespace j2cpp { namespace java { namespace util { class Collection; } } }


#include <java/util/Collection.hpp>


namespace j2cpp {

namespace java { namespace util {

	class LinkedHashSet;
	class LinkedHashSet
		: public cpp_object<LinkedHashSet>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)

		LinkedHashSet(jobject jobj)
		: cpp_object<LinkedHashSet>(jobj)
		{
		}

	}; //class LinkedHashSet

} //namespace util
} //namespace java


} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_LINKEDHASHSET_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_LINKEDHASHSET_HPP_IMPL
#define J2CPP_JAVA_UTIL_LINKEDHASHSET_HPP_IMPL

namespace j2cpp {


template <>
local_ref< java::util::LinkedHashSet > create< java::util::LinkedHashSet>()
{
	return local_ref< java::util::LinkedHashSet >(
		environment::get().get_jenv()->NewObject(
			get_class<java::util::LinkedHashSet::J2CPP_CLASS_NAME>(),
			get_method_id<java::util::LinkedHashSet::J2CPP_CLASS_NAME, java::util::LinkedHashSet::J2CPP_METHOD_NAME(0), java::util::LinkedHashSet::J2CPP_METHOD_SIGNATURE(0), false>()
		)
	);
}

template <>
local_ref< java::util::LinkedHashSet > create< java::util::LinkedHashSet>(cpp_int const &a0)
{
	return local_ref< java::util::LinkedHashSet >(
		environment::get().get_jenv()->NewObject(
			get_class<java::util::LinkedHashSet::J2CPP_CLASS_NAME>(),
			get_method_id<java::util::LinkedHashSet::J2CPP_CLASS_NAME, java::util::LinkedHashSet::J2CPP_METHOD_NAME(1), java::util::LinkedHashSet::J2CPP_METHOD_SIGNATURE(1), false>(),
			a0.get_jtype()
		)
	);
}

template <>
local_ref< java::util::LinkedHashSet > create< java::util::LinkedHashSet>(cpp_int const &a0, cpp_float const &a1)
{
	return local_ref< java::util::LinkedHashSet >(
		environment::get().get_jenv()->NewObject(
			get_class<java::util::LinkedHashSet::J2CPP_CLASS_NAME>(),
			get_method_id<java::util::LinkedHashSet::J2CPP_CLASS_NAME, java::util::LinkedHashSet::J2CPP_METHOD_NAME(2), java::util::LinkedHashSet::J2CPP_METHOD_SIGNATURE(2), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

template <>
local_ref< java::util::LinkedHashSet > create< java::util::LinkedHashSet>(local_ref< java::util::Collection > const &a0)
{
	return local_ref< java::util::LinkedHashSet >(
		environment::get().get_jenv()->NewObject(
			get_class<java::util::LinkedHashSet::J2CPP_CLASS_NAME>(),
			get_method_id<java::util::LinkedHashSet::J2CPP_CLASS_NAME, java::util::LinkedHashSet::J2CPP_METHOD_NAME(3), java::util::LinkedHashSet::J2CPP_METHOD_SIGNATURE(3), false>(),
			a0.get_jtype()
		)
	);
}


J2CPP_DEFINE_CLASS(java::util::LinkedHashSet,"java/util/LinkedHashSet")
J2CPP_DEFINE_METHOD(java::util::LinkedHashSet,0,"<init>","()V")
J2CPP_DEFINE_METHOD(java::util::LinkedHashSet,1,"<init>","(I)V")
J2CPP_DEFINE_METHOD(java::util::LinkedHashSet,2,"<init>","(IF)V")
J2CPP_DEFINE_METHOD(java::util::LinkedHashSet,3,"<init>","(Ljava/util/Collection;)V")

} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_LINKEDHASHSET_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
