/*================================================================================
  code generated by: java2cpp
  class: java.util.concurrent.ScheduledExecutorService
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_CONCURRENT_SCHEDULEDEXECUTORSERVICE_HPP_DECL
#define J2CPP_JAVA_UTIL_CONCURRENT_SCHEDULEDEXECUTORSERVICE_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class Runnable; } } }
namespace j2cpp { namespace java { namespace util { namespace concurrent { class Callable; } } } }
namespace j2cpp { namespace java { namespace util { namespace concurrent { class ScheduledFuture; } } } }
namespace j2cpp { namespace java { namespace util { namespace concurrent { class TimeUnit; } } } }


#include <java/lang/Runnable.hpp>
#include <java/util/concurrent/Callable.hpp>
#include <java/util/concurrent/ScheduledFuture.hpp>
#include <java/util/concurrent/TimeUnit.hpp>


namespace j2cpp {

namespace java { namespace util { namespace concurrent {

	class ScheduledExecutorService;
	class ScheduledExecutorService
		: public cpp_object<ScheduledExecutorService>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)

		ScheduledExecutorService(jobject jobj)
		: cpp_object<ScheduledExecutorService>(jobj)
		{
		}

		local_ref< java::util::concurrent::ScheduledFuture > schedule(local_ref< java::lang::Runnable > const&, cpp_long const&, local_ref< java::util::concurrent::TimeUnit > const&);
		local_ref< java::util::concurrent::ScheduledFuture > schedule(local_ref< java::util::concurrent::Callable > const&, cpp_long const&, local_ref< java::util::concurrent::TimeUnit > const&);
		local_ref< java::util::concurrent::ScheduledFuture > scheduleAtFixedRate(local_ref< java::lang::Runnable > const&, cpp_long const&, cpp_long const&, local_ref< java::util::concurrent::TimeUnit > const&);
		local_ref< java::util::concurrent::ScheduledFuture > scheduleWithFixedDelay(local_ref< java::lang::Runnable > const&, cpp_long const&, cpp_long const&, local_ref< java::util::concurrent::TimeUnit > const&);
	}; //class ScheduledExecutorService

} //namespace concurrent
} //namespace util
} //namespace java


} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_CONCURRENT_SCHEDULEDEXECUTORSERVICE_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_CONCURRENT_SCHEDULEDEXECUTORSERVICE_HPP_IMPL
#define J2CPP_JAVA_UTIL_CONCURRENT_SCHEDULEDEXECUTORSERVICE_HPP_IMPL

namespace j2cpp {


local_ref< java::util::concurrent::ScheduledFuture > java::util::concurrent::ScheduledExecutorService::schedule(local_ref< java::lang::Runnable > const &a0, cpp_long const &a1, local_ref< java::util::concurrent::TimeUnit > const &a2)
{
	return local_ref< java::util::concurrent::ScheduledFuture >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(0), J2CPP_METHOD_SIGNATURE(0), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

local_ref< java::util::concurrent::ScheduledFuture > java::util::concurrent::ScheduledExecutorService::schedule(local_ref< java::util::concurrent::Callable > const &a0, cpp_long const &a1, local_ref< java::util::concurrent::TimeUnit > const &a2)
{
	return local_ref< java::util::concurrent::ScheduledFuture >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

local_ref< java::util::concurrent::ScheduledFuture > java::util::concurrent::ScheduledExecutorService::scheduleAtFixedRate(local_ref< java::lang::Runnable > const &a0, cpp_long const &a1, cpp_long const &a2, local_ref< java::util::concurrent::TimeUnit > const &a3)
{
	return local_ref< java::util::concurrent::ScheduledFuture >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype(), a3.get_jtype()
		)
	);
}

local_ref< java::util::concurrent::ScheduledFuture > java::util::concurrent::ScheduledExecutorService::scheduleWithFixedDelay(local_ref< java::lang::Runnable > const &a0, cpp_long const &a1, cpp_long const &a2, local_ref< java::util::concurrent::TimeUnit > const &a3)
{
	return local_ref< java::util::concurrent::ScheduledFuture >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype(), a3.get_jtype()
		)
	);
}


J2CPP_DEFINE_CLASS(java::util::concurrent::ScheduledExecutorService,"java/util/concurrent/ScheduledExecutorService")
J2CPP_DEFINE_METHOD(java::util::concurrent::ScheduledExecutorService,0,"schedule","(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Ljava/util/concurrent/ScheduledFuture;")
J2CPP_DEFINE_METHOD(java::util::concurrent::ScheduledExecutorService,1,"schedule","(Ljava/util/concurrent/Callable;JLjava/util/concurrent/TimeUnit;)Ljava/util/concurrent/ScheduledFuture;")
J2CPP_DEFINE_METHOD(java::util::concurrent::ScheduledExecutorService,2,"scheduleAtFixedRate","(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Ljava/util/concurrent/ScheduledFuture;")
J2CPP_DEFINE_METHOD(java::util::concurrent::ScheduledExecutorService,3,"scheduleWithFixedDelay","(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Ljava/util/concurrent/ScheduledFuture;")

} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_CONCURRENT_SCHEDULEDEXECUTORSERVICE_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
