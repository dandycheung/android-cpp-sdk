/*================================================================================
  code generated by: java2cpp
  class: java.util.concurrent.ConcurrentLinkedQueue
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_CONCURRENT_CONCURRENTLINKEDQUEUE_HPP_DECL
#define J2CPP_JAVA_UTIL_CONCURRENT_CONCURRENTLINKEDQUEUE_HPP_DECL


namespace j2cpp { namespace java { namespace io { class Serializable; } } }
namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace util { class AbstractQueue; } } }
namespace j2cpp { namespace java { namespace util { class Iterator; } } }
namespace j2cpp { namespace java { namespace util { class Queue; } } }
namespace j2cpp { namespace java { namespace util { class Collection; } } }


#include <java/io/Serializable.hpp>
#include <java/lang/Object.hpp>
#include <java/util/AbstractQueue.hpp>
#include <java/util/Collection.hpp>
#include <java/util/Iterator.hpp>
#include <java/util/Queue.hpp>


namespace j2cpp {

namespace java { namespace util { namespace concurrent {

	class ConcurrentLinkedQueue;
	class ConcurrentLinkedQueue
		: public cpp_object<ConcurrentLinkedQueue>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_METHOD(12)

		explicit ConcurrentLinkedQueue(jobject jobj)
		: cpp_object<ConcurrentLinkedQueue>(jobj)
		{
		}

		operator local_ref<java::util::AbstractQueue>() const;
		operator local_ref<java::util::Queue>() const;
		operator local_ref<java::io::Serializable>() const;


		ConcurrentLinkedQueue();
		ConcurrentLinkedQueue(local_ref< java::util::Collection > const&);
		cpp_boolean add(local_ref< java::lang::Object > const&);
		cpp_boolean offer(local_ref< java::lang::Object > const&);
		local_ref< java::lang::Object > poll();
		local_ref< java::lang::Object > peek();
		cpp_boolean isEmpty();
		cpp_int size();
		cpp_boolean contains(local_ref< java::lang::Object > const&);
		cpp_boolean remove(local_ref< java::lang::Object > const&);
		local_ref< cpp_object_array<java::lang::Object, 1> > toArray();
		local_ref< cpp_object_array<java::lang::Object, 1> > toArray(local_ref< cpp_object_array<java::lang::Object, 1> > const&);
		local_ref< java::util::Iterator > iterator();
	}; //class ConcurrentLinkedQueue

} //namespace concurrent
} //namespace util
} //namespace java

} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_CONCURRENT_CONCURRENTLINKEDQUEUE_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_CONCURRENT_CONCURRENTLINKEDQUEUE_HPP_IMPL
#define J2CPP_JAVA_UTIL_CONCURRENT_CONCURRENTLINKEDQUEUE_HPP_IMPL

namespace j2cpp {



java::util::concurrent::ConcurrentLinkedQueue::operator local_ref<java::util::AbstractQueue>() const
{
	return local_ref<java::util::AbstractQueue>(get_jtype());
}

java::util::concurrent::ConcurrentLinkedQueue::operator local_ref<java::util::Queue>() const
{
	return local_ref<java::util::Queue>(get_jtype());
}

java::util::concurrent::ConcurrentLinkedQueue::operator local_ref<java::io::Serializable>() const
{
	return local_ref<java::io::Serializable>(get_jtype());
}


java::util::concurrent::ConcurrentLinkedQueue::ConcurrentLinkedQueue()
: cpp_object<java::util::concurrent::ConcurrentLinkedQueue>(
	environment::get().get_jenv()->NewObject(
		get_class<java::util::concurrent::ConcurrentLinkedQueue::J2CPP_CLASS_NAME>(),
		get_method_id<java::util::concurrent::ConcurrentLinkedQueue::J2CPP_CLASS_NAME, java::util::concurrent::ConcurrentLinkedQueue::J2CPP_METHOD_NAME(0), java::util::concurrent::ConcurrentLinkedQueue::J2CPP_METHOD_SIGNATURE(0), false>()
	)
)
{
}



java::util::concurrent::ConcurrentLinkedQueue::ConcurrentLinkedQueue(local_ref< java::util::Collection > const &a0)
: cpp_object<java::util::concurrent::ConcurrentLinkedQueue>(
	environment::get().get_jenv()->NewObject(
		get_class<java::util::concurrent::ConcurrentLinkedQueue::J2CPP_CLASS_NAME>(),
		get_method_id<java::util::concurrent::ConcurrentLinkedQueue::J2CPP_CLASS_NAME, java::util::concurrent::ConcurrentLinkedQueue::J2CPP_METHOD_NAME(1), java::util::concurrent::ConcurrentLinkedQueue::J2CPP_METHOD_SIGNATURE(1), false>(),
		a0.get_jtype()
	)
)
{
}


cpp_boolean java::util::concurrent::ConcurrentLinkedQueue::add(local_ref< java::lang::Object > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean java::util::concurrent::ConcurrentLinkedQueue::offer(local_ref< java::lang::Object > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::Object > java::util::concurrent::ConcurrentLinkedQueue::poll()
{
	return local_ref< java::lang::Object >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>()
		)
	);
}

local_ref< java::lang::Object > java::util::concurrent::ConcurrentLinkedQueue::peek()
{
	return local_ref< java::lang::Object >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>()
		)
	);
}

cpp_boolean java::util::concurrent::ConcurrentLinkedQueue::isEmpty()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>()
		)
	);
}

cpp_int java::util::concurrent::ConcurrentLinkedQueue::size()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(7), J2CPP_METHOD_SIGNATURE(7), false>()
		)
	);
}

cpp_boolean java::util::concurrent::ConcurrentLinkedQueue::contains(local_ref< java::lang::Object > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(8), J2CPP_METHOD_SIGNATURE(8), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean java::util::concurrent::ConcurrentLinkedQueue::remove(local_ref< java::lang::Object > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(9), J2CPP_METHOD_SIGNATURE(9), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< cpp_object_array<java::lang::Object, 1> > java::util::concurrent::ConcurrentLinkedQueue::toArray()
{
	return local_ref< cpp_object_array<java::lang::Object, 1> >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(10), J2CPP_METHOD_SIGNATURE(10), false>()
		)
	);
}

local_ref< cpp_object_array<java::lang::Object, 1> > java::util::concurrent::ConcurrentLinkedQueue::toArray(local_ref< cpp_object_array<java::lang::Object, 1> > const &a0)
{
	return local_ref< cpp_object_array<java::lang::Object, 1> >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(11), J2CPP_METHOD_SIGNATURE(11), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::util::Iterator > java::util::concurrent::ConcurrentLinkedQueue::iterator()
{
	return local_ref< java::util::Iterator >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(12), J2CPP_METHOD_SIGNATURE(12), false>()
		)
	);
}


J2CPP_DEFINE_CLASS(java::util::concurrent::ConcurrentLinkedQueue,"java/util/concurrent/ConcurrentLinkedQueue")
J2CPP_DEFINE_METHOD(java::util::concurrent::ConcurrentLinkedQueue,0,"<init>","()V")
J2CPP_DEFINE_METHOD(java::util::concurrent::ConcurrentLinkedQueue,1,"<init>","(Ljava/util/Collection;)V")
J2CPP_DEFINE_METHOD(java::util::concurrent::ConcurrentLinkedQueue,2,"add","(Ljava/lang/Object;)Z")
J2CPP_DEFINE_METHOD(java::util::concurrent::ConcurrentLinkedQueue,3,"offer","(Ljava/lang/Object;)Z")
J2CPP_DEFINE_METHOD(java::util::concurrent::ConcurrentLinkedQueue,4,"poll","()Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(java::util::concurrent::ConcurrentLinkedQueue,5,"peek","()Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(java::util::concurrent::ConcurrentLinkedQueue,6,"isEmpty","()Z")
J2CPP_DEFINE_METHOD(java::util::concurrent::ConcurrentLinkedQueue,7,"size","()I")
J2CPP_DEFINE_METHOD(java::util::concurrent::ConcurrentLinkedQueue,8,"contains","(Ljava/lang/Object;)Z")
J2CPP_DEFINE_METHOD(java::util::concurrent::ConcurrentLinkedQueue,9,"remove","(Ljava/lang/Object;)Z")
J2CPP_DEFINE_METHOD(java::util::concurrent::ConcurrentLinkedQueue,10,"toArray","()[java.lang.Object")
J2CPP_DEFINE_METHOD(java::util::concurrent::ConcurrentLinkedQueue,11,"toArray","([java.lang.Object)[java.lang.Object")
J2CPP_DEFINE_METHOD(java::util::concurrent::ConcurrentLinkedQueue,12,"iterator","()Ljava/util/Iterator;")

} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_CONCURRENT_CONCURRENTLINKEDQUEUE_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
