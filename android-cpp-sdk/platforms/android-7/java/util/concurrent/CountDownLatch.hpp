/*================================================================================
  code generated by: java2cpp
  class: java.util.concurrent.CountDownLatch
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_CONCURRENT_COUNTDOWNLATCH_HPP_DECL
#define J2CPP_JAVA_UTIL_CONCURRENT_COUNTDOWNLATCH_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace util { namespace concurrent { class TimeUnit; } } } }


#include <java/lang/Object.hpp>
#include <java/lang/String.hpp>
#include <java/util/concurrent/TimeUnit.hpp>


namespace j2cpp {

namespace java { namespace util { namespace concurrent {

	class CountDownLatch;
	class CountDownLatch
		: public cpp_object<CountDownLatch>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)

		explicit CountDownLatch(jobject jobj)
		: cpp_object<CountDownLatch>(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;


		CountDownLatch(cpp_int const&);
		void await();
		cpp_boolean await(cpp_long const&, local_ref< java::util::concurrent::TimeUnit > const&);
		void countDown();
		cpp_long getCount();
		local_ref< java::lang::String > toString();
	}; //class CountDownLatch

} //namespace concurrent
} //namespace util
} //namespace java

} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_CONCURRENT_COUNTDOWNLATCH_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_CONCURRENT_COUNTDOWNLATCH_HPP_IMPL
#define J2CPP_JAVA_UTIL_CONCURRENT_COUNTDOWNLATCH_HPP_IMPL

namespace j2cpp {



java::util::concurrent::CountDownLatch::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jtype());
}


java::util::concurrent::CountDownLatch::CountDownLatch(cpp_int const &a0)
: cpp_object<java::util::concurrent::CountDownLatch>(
	environment::get().get_jenv()->NewObject(
		get_class<java::util::concurrent::CountDownLatch::J2CPP_CLASS_NAME>(),
		get_method_id<java::util::concurrent::CountDownLatch::J2CPP_CLASS_NAME, java::util::concurrent::CountDownLatch::J2CPP_METHOD_NAME(0), java::util::concurrent::CountDownLatch::J2CPP_METHOD_SIGNATURE(0), false>(),
		a0.get_jtype()
	)
)
{
}


void java::util::concurrent::CountDownLatch::await()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), false>()
		)
	);
}

cpp_boolean java::util::concurrent::CountDownLatch::await(cpp_long const &a0, local_ref< java::util::concurrent::TimeUnit > const &a1)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void java::util::concurrent::CountDownLatch::countDown()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>()
		)
	);
}

cpp_long java::util::concurrent::CountDownLatch::getCount()
{
	return cpp_long(
		environment::get().get_jenv()->CallLongMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>()
		)
	);
}

local_ref< java::lang::String > java::util::concurrent::CountDownLatch::toString()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>()
		)
	);
}


J2CPP_DEFINE_CLASS(java::util::concurrent::CountDownLatch,"java/util/concurrent/CountDownLatch")
J2CPP_DEFINE_METHOD(java::util::concurrent::CountDownLatch,0,"<init>","(I)V")
J2CPP_DEFINE_METHOD(java::util::concurrent::CountDownLatch,1,"await","()V")
J2CPP_DEFINE_METHOD(java::util::concurrent::CountDownLatch,2,"await","(JLjava/util/concurrent/TimeUnit;)Z")
J2CPP_DEFINE_METHOD(java::util::concurrent::CountDownLatch,3,"countDown","()V")
J2CPP_DEFINE_METHOD(java::util::concurrent::CountDownLatch,4,"getCount","()J")
J2CPP_DEFINE_METHOD(java::util::concurrent::CountDownLatch,5,"toString","()Ljava/lang/String;")

} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_CONCURRENT_COUNTDOWNLATCH_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
