/*================================================================================
  code generated by: java2cpp
  class: java.util.concurrent.atomic.AtomicBoolean
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_CONCURRENT_ATOMIC_ATOMICBOOLEAN_HPP_DECL
#define J2CPP_JAVA_UTIL_CONCURRENT_ATOMIC_ATOMICBOOLEAN_HPP_DECL


namespace j2cpp { namespace java { namespace io { class Serializable; } } }
namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace lang { class String; } } }


#include <java/io/Serializable.hpp>
#include <java/lang/Object.hpp>
#include <java/lang/String.hpp>


namespace j2cpp {

namespace java { namespace util { namespace concurrent { namespace atomic {

	class AtomicBoolean;
	class AtomicBoolean
		: public cpp_object<AtomicBoolean>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)

		explicit AtomicBoolean(jobject jobj)
		: cpp_object<AtomicBoolean>(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;
		operator local_ref<java::io::Serializable>() const;


		AtomicBoolean(cpp_boolean const&);
		AtomicBoolean();
		cpp_boolean get();
		cpp_boolean compareAndSet(cpp_boolean const&, cpp_boolean const&);
		cpp_boolean weakCompareAndSet(cpp_boolean const&, cpp_boolean const&);
		void set(cpp_boolean const&);
		cpp_boolean getAndSet(cpp_boolean const&);
		local_ref< java::lang::String > toString();
	}; //class AtomicBoolean

} //namespace atomic
} //namespace concurrent
} //namespace util
} //namespace java

} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_CONCURRENT_ATOMIC_ATOMICBOOLEAN_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_CONCURRENT_ATOMIC_ATOMICBOOLEAN_HPP_IMPL
#define J2CPP_JAVA_UTIL_CONCURRENT_ATOMIC_ATOMICBOOLEAN_HPP_IMPL

namespace j2cpp {



java::util::concurrent::atomic::AtomicBoolean::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jtype());
}

java::util::concurrent::atomic::AtomicBoolean::operator local_ref<java::io::Serializable>() const
{
	return local_ref<java::io::Serializable>(get_jtype());
}


java::util::concurrent::atomic::AtomicBoolean::AtomicBoolean(cpp_boolean const &a0)
: cpp_object<java::util::concurrent::atomic::AtomicBoolean>(
	environment::get().get_jenv()->NewObject(
		get_class<java::util::concurrent::atomic::AtomicBoolean::J2CPP_CLASS_NAME>(),
		get_method_id<java::util::concurrent::atomic::AtomicBoolean::J2CPP_CLASS_NAME, java::util::concurrent::atomic::AtomicBoolean::J2CPP_METHOD_NAME(0), java::util::concurrent::atomic::AtomicBoolean::J2CPP_METHOD_SIGNATURE(0), false>(),
		a0.get_jtype()
	)
)
{
}



java::util::concurrent::atomic::AtomicBoolean::AtomicBoolean()
: cpp_object<java::util::concurrent::atomic::AtomicBoolean>(
	environment::get().get_jenv()->NewObject(
		get_class<java::util::concurrent::atomic::AtomicBoolean::J2CPP_CLASS_NAME>(),
		get_method_id<java::util::concurrent::atomic::AtomicBoolean::J2CPP_CLASS_NAME, java::util::concurrent::atomic::AtomicBoolean::J2CPP_METHOD_NAME(1), java::util::concurrent::atomic::AtomicBoolean::J2CPP_METHOD_SIGNATURE(1), false>()
	)
)
{
}


cpp_boolean java::util::concurrent::atomic::AtomicBoolean::get()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>()
		)
	);
}

cpp_boolean java::util::concurrent::atomic::AtomicBoolean::compareAndSet(cpp_boolean const &a0, cpp_boolean const &a1)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_boolean java::util::concurrent::atomic::AtomicBoolean::weakCompareAndSet(cpp_boolean const &a0, cpp_boolean const &a1)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void java::util::concurrent::atomic::AtomicBoolean::set(cpp_boolean const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean java::util::concurrent::atomic::AtomicBoolean::getAndSet(cpp_boolean const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::String > java::util::concurrent::atomic::AtomicBoolean::toString()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(7), J2CPP_METHOD_SIGNATURE(7), false>()
		)
	);
}


J2CPP_DEFINE_CLASS(java::util::concurrent::atomic::AtomicBoolean,"java/util/concurrent/atomic/AtomicBoolean")
J2CPP_DEFINE_METHOD(java::util::concurrent::atomic::AtomicBoolean,0,"<init>","(Z)V")
J2CPP_DEFINE_METHOD(java::util::concurrent::atomic::AtomicBoolean,1,"<init>","()V")
J2CPP_DEFINE_METHOD(java::util::concurrent::atomic::AtomicBoolean,2,"get","()Z")
J2CPP_DEFINE_METHOD(java::util::concurrent::atomic::AtomicBoolean,3,"compareAndSet","(ZZ)Z")
J2CPP_DEFINE_METHOD(java::util::concurrent::atomic::AtomicBoolean,4,"weakCompareAndSet","(ZZ)Z")
J2CPP_DEFINE_METHOD(java::util::concurrent::atomic::AtomicBoolean,5,"set","(Z)V")
J2CPP_DEFINE_METHOD(java::util::concurrent::atomic::AtomicBoolean,6,"getAndSet","(Z)Z")
J2CPP_DEFINE_METHOD(java::util::concurrent::atomic::AtomicBoolean,7,"toString","()Ljava/lang/String;")

} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_CONCURRENT_ATOMIC_ATOMICBOOLEAN_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
