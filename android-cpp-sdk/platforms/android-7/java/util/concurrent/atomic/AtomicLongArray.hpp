/*================================================================================
  code generated by: java2cpp
  class: java.util.concurrent.atomic.AtomicLongArray
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_CONCURRENT_ATOMIC_ATOMICLONGARRAY_HPP_DECL
#define J2CPP_JAVA_UTIL_CONCURRENT_ATOMIC_ATOMICLONGARRAY_HPP_DECL


namespace j2cpp { namespace java { namespace io { class Serializable; } } }
namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace lang { class String; } } }


#include <java/io/Serializable.hpp>
#include <java/lang/Object.hpp>
#include <java/lang/String.hpp>


namespace j2cpp {

namespace java { namespace util { namespace concurrent { namespace atomic {

	class AtomicLongArray;
	class AtomicLongArray
		: public cpp_object<AtomicLongArray>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_METHOD(12)
		J2CPP_DECLARE_METHOD(13)
		J2CPP_DECLARE_METHOD(14)

		explicit AtomicLongArray(jobject jobj)
		: cpp_object<AtomicLongArray>(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;
		operator local_ref<java::io::Serializable>() const;


		AtomicLongArray(cpp_int const&);
		AtomicLongArray(local_ref< cpp_long_array<1> > const&);
		cpp_int length();
		cpp_long get(cpp_int const&);
		void set(cpp_int const&, cpp_long const&);
		cpp_long getAndSet(cpp_int const&, cpp_long const&);
		cpp_boolean compareAndSet(cpp_int const&, cpp_long const&, cpp_long const&);
		cpp_boolean weakCompareAndSet(cpp_int const&, cpp_long const&, cpp_long const&);
		cpp_long getAndIncrement(cpp_int const&);
		cpp_long getAndDecrement(cpp_int const&);
		cpp_long getAndAdd(cpp_int const&, cpp_long const&);
		cpp_long incrementAndGet(cpp_int const&);
		cpp_long decrementAndGet(cpp_int const&);
		cpp_long addAndGet(cpp_int const&, cpp_long const&);
		local_ref< java::lang::String > toString();
	}; //class AtomicLongArray

} //namespace atomic
} //namespace concurrent
} //namespace util
} //namespace java

} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_CONCURRENT_ATOMIC_ATOMICLONGARRAY_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_CONCURRENT_ATOMIC_ATOMICLONGARRAY_HPP_IMPL
#define J2CPP_JAVA_UTIL_CONCURRENT_ATOMIC_ATOMICLONGARRAY_HPP_IMPL

namespace j2cpp {



java::util::concurrent::atomic::AtomicLongArray::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jtype());
}

java::util::concurrent::atomic::AtomicLongArray::operator local_ref<java::io::Serializable>() const
{
	return local_ref<java::io::Serializable>(get_jtype());
}


java::util::concurrent::atomic::AtomicLongArray::AtomicLongArray(cpp_int const &a0)
: cpp_object<java::util::concurrent::atomic::AtomicLongArray>(
	environment::get().get_jenv()->NewObject(
		get_class<java::util::concurrent::atomic::AtomicLongArray::J2CPP_CLASS_NAME>(),
		get_method_id<java::util::concurrent::atomic::AtomicLongArray::J2CPP_CLASS_NAME, java::util::concurrent::atomic::AtomicLongArray::J2CPP_METHOD_NAME(0), java::util::concurrent::atomic::AtomicLongArray::J2CPP_METHOD_SIGNATURE(0), false>(),
		a0.get_jtype()
	)
)
{
}



java::util::concurrent::atomic::AtomicLongArray::AtomicLongArray(local_ref< cpp_long_array<1> > const &a0)
: cpp_object<java::util::concurrent::atomic::AtomicLongArray>(
	environment::get().get_jenv()->NewObject(
		get_class<java::util::concurrent::atomic::AtomicLongArray::J2CPP_CLASS_NAME>(),
		get_method_id<java::util::concurrent::atomic::AtomicLongArray::J2CPP_CLASS_NAME, java::util::concurrent::atomic::AtomicLongArray::J2CPP_METHOD_NAME(1), java::util::concurrent::atomic::AtomicLongArray::J2CPP_METHOD_SIGNATURE(1), false>(),
		a0.get_jtype()
	)
)
{
}


cpp_int java::util::concurrent::atomic::AtomicLongArray::length()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>()
		)
	);
}

cpp_long java::util::concurrent::atomic::AtomicLongArray::get(cpp_int const &a0)
{
	return cpp_long(
		environment::get().get_jenv()->CallLongMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>(),
			a0.get_jtype()
		)
	);
}

void java::util::concurrent::atomic::AtomicLongArray::set(cpp_int const &a0, cpp_long const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_long java::util::concurrent::atomic::AtomicLongArray::getAndSet(cpp_int const &a0, cpp_long const &a1)
{
	return cpp_long(
		environment::get().get_jenv()->CallLongMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_boolean java::util::concurrent::atomic::AtomicLongArray::compareAndSet(cpp_int const &a0, cpp_long const &a1, cpp_long const &a2)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

cpp_boolean java::util::concurrent::atomic::AtomicLongArray::weakCompareAndSet(cpp_int const &a0, cpp_long const &a1, cpp_long const &a2)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(7), J2CPP_METHOD_SIGNATURE(7), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

cpp_long java::util::concurrent::atomic::AtomicLongArray::getAndIncrement(cpp_int const &a0)
{
	return cpp_long(
		environment::get().get_jenv()->CallLongMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(8), J2CPP_METHOD_SIGNATURE(8), false>(),
			a0.get_jtype()
		)
	);
}

cpp_long java::util::concurrent::atomic::AtomicLongArray::getAndDecrement(cpp_int const &a0)
{
	return cpp_long(
		environment::get().get_jenv()->CallLongMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(9), J2CPP_METHOD_SIGNATURE(9), false>(),
			a0.get_jtype()
		)
	);
}

cpp_long java::util::concurrent::atomic::AtomicLongArray::getAndAdd(cpp_int const &a0, cpp_long const &a1)
{
	return cpp_long(
		environment::get().get_jenv()->CallLongMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(10), J2CPP_METHOD_SIGNATURE(10), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_long java::util::concurrent::atomic::AtomicLongArray::incrementAndGet(cpp_int const &a0)
{
	return cpp_long(
		environment::get().get_jenv()->CallLongMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(11), J2CPP_METHOD_SIGNATURE(11), false>(),
			a0.get_jtype()
		)
	);
}

cpp_long java::util::concurrent::atomic::AtomicLongArray::decrementAndGet(cpp_int const &a0)
{
	return cpp_long(
		environment::get().get_jenv()->CallLongMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(12), J2CPP_METHOD_SIGNATURE(12), false>(),
			a0.get_jtype()
		)
	);
}

cpp_long java::util::concurrent::atomic::AtomicLongArray::addAndGet(cpp_int const &a0, cpp_long const &a1)
{
	return cpp_long(
		environment::get().get_jenv()->CallLongMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(13), J2CPP_METHOD_SIGNATURE(13), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< java::lang::String > java::util::concurrent::atomic::AtomicLongArray::toString()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(14), J2CPP_METHOD_SIGNATURE(14), false>()
		)
	);
}


J2CPP_DEFINE_CLASS(java::util::concurrent::atomic::AtomicLongArray,"java/util/concurrent/atomic/AtomicLongArray")
J2CPP_DEFINE_METHOD(java::util::concurrent::atomic::AtomicLongArray,0,"<init>","(I)V")
J2CPP_DEFINE_METHOD(java::util::concurrent::atomic::AtomicLongArray,1,"<init>","([J)V")
J2CPP_DEFINE_METHOD(java::util::concurrent::atomic::AtomicLongArray,2,"length","()I")
J2CPP_DEFINE_METHOD(java::util::concurrent::atomic::AtomicLongArray,3,"get","(I)J")
J2CPP_DEFINE_METHOD(java::util::concurrent::atomic::AtomicLongArray,4,"set","(IJ)V")
J2CPP_DEFINE_METHOD(java::util::concurrent::atomic::AtomicLongArray,5,"getAndSet","(IJ)J")
J2CPP_DEFINE_METHOD(java::util::concurrent::atomic::AtomicLongArray,6,"compareAndSet","(IJJ)Z")
J2CPP_DEFINE_METHOD(java::util::concurrent::atomic::AtomicLongArray,7,"weakCompareAndSet","(IJJ)Z")
J2CPP_DEFINE_METHOD(java::util::concurrent::atomic::AtomicLongArray,8,"getAndIncrement","(I)J")
J2CPP_DEFINE_METHOD(java::util::concurrent::atomic::AtomicLongArray,9,"getAndDecrement","(I)J")
J2CPP_DEFINE_METHOD(java::util::concurrent::atomic::AtomicLongArray,10,"getAndAdd","(IJ)J")
J2CPP_DEFINE_METHOD(java::util::concurrent::atomic::AtomicLongArray,11,"incrementAndGet","(I)J")
J2CPP_DEFINE_METHOD(java::util::concurrent::atomic::AtomicLongArray,12,"decrementAndGet","(I)J")
J2CPP_DEFINE_METHOD(java::util::concurrent::atomic::AtomicLongArray,13,"addAndGet","(IJ)J")
J2CPP_DEFINE_METHOD(java::util::concurrent::atomic::AtomicLongArray,14,"toString","()Ljava/lang/String;")

} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_CONCURRENT_ATOMIC_ATOMICLONGARRAY_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
