/*================================================================================
  code generated by: java2cpp
  class: java.util.concurrent.atomic.AtomicReferenceFieldUpdater
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_CONCURRENT_ATOMIC_ATOMICREFERENCEFIELDUPDATER_HPP_DECL
#define J2CPP_JAVA_UTIL_CONCURRENT_ATOMIC_ATOMICREFERENCEFIELDUPDATER_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace lang { class Class; } } }
namespace j2cpp { namespace java { namespace lang { class String; } } }


#include <java/lang/Class.hpp>
#include <java/lang/Object.hpp>
#include <java/lang/String.hpp>


namespace j2cpp {

namespace java { namespace util { namespace concurrent { namespace atomic {

	class AtomicReferenceFieldUpdater;
	class AtomicReferenceFieldUpdater
		: public cpp_object<AtomicReferenceFieldUpdater>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)

		AtomicReferenceFieldUpdater(jobject jobj)
		: cpp_object<AtomicReferenceFieldUpdater>(jobj)
		{
		}

		static local_ref< java::util::concurrent::atomic::AtomicReferenceFieldUpdater > newUpdater(local_ref< java::lang::Class > const&, local_ref< java::lang::Class > const&, local_ref< java::lang::String > const&);
		cpp_boolean compareAndSet(local_ref< java::lang::Object > const&, local_ref< java::lang::Object > const&, local_ref< java::lang::Object > const&);
		cpp_boolean weakCompareAndSet(local_ref< java::lang::Object > const&, local_ref< java::lang::Object > const&, local_ref< java::lang::Object > const&);
		void set(local_ref< java::lang::Object > const&, local_ref< java::lang::Object > const&);
		local_ref< java::lang::Object > get(local_ref< java::lang::Object > const&);
		local_ref< java::lang::Object > getAndSet(local_ref< java::lang::Object > const&, local_ref< java::lang::Object > const&);
	}; //class AtomicReferenceFieldUpdater

} //namespace atomic
} //namespace concurrent
} //namespace util
} //namespace java


} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_CONCURRENT_ATOMIC_ATOMICREFERENCEFIELDUPDATER_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_CONCURRENT_ATOMIC_ATOMICREFERENCEFIELDUPDATER_HPP_IMPL
#define J2CPP_JAVA_UTIL_CONCURRENT_ATOMIC_ATOMICREFERENCEFIELDUPDATER_HPP_IMPL

namespace j2cpp {


template <>
local_ref< java::util::concurrent::atomic::AtomicReferenceFieldUpdater > create< java::util::concurrent::atomic::AtomicReferenceFieldUpdater>()
{
	return local_ref< java::util::concurrent::atomic::AtomicReferenceFieldUpdater >(
		environment::get().get_jenv()->NewObject(
			get_class<java::util::concurrent::atomic::AtomicReferenceFieldUpdater::J2CPP_CLASS_NAME>(),
			get_method_id<java::util::concurrent::atomic::AtomicReferenceFieldUpdater::J2CPP_CLASS_NAME, java::util::concurrent::atomic::AtomicReferenceFieldUpdater::J2CPP_METHOD_NAME(0), java::util::concurrent::atomic::AtomicReferenceFieldUpdater::J2CPP_METHOD_SIGNATURE(0), false>()
		)
	);
}

local_ref< java::util::concurrent::atomic::AtomicReferenceFieldUpdater > java::util::concurrent::atomic::AtomicReferenceFieldUpdater::newUpdater(local_ref< java::lang::Class > const &a0, local_ref< java::lang::Class > const &a1, local_ref< java::lang::String > const &a2)
{
	return local_ref< java::util::concurrent::atomic::AtomicReferenceFieldUpdater >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), true>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

cpp_boolean java::util::concurrent::atomic::AtomicReferenceFieldUpdater::compareAndSet(local_ref< java::lang::Object > const &a0, local_ref< java::lang::Object > const &a1, local_ref< java::lang::Object > const &a2)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

cpp_boolean java::util::concurrent::atomic::AtomicReferenceFieldUpdater::weakCompareAndSet(local_ref< java::lang::Object > const &a0, local_ref< java::lang::Object > const &a1, local_ref< java::lang::Object > const &a2)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

void java::util::concurrent::atomic::AtomicReferenceFieldUpdater::set(local_ref< java::lang::Object > const &a0, local_ref< java::lang::Object > const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< java::lang::Object > java::util::concurrent::atomic::AtomicReferenceFieldUpdater::get(local_ref< java::lang::Object > const &a0)
{
	return local_ref< java::lang::Object >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::Object > java::util::concurrent::atomic::AtomicReferenceFieldUpdater::getAndSet(local_ref< java::lang::Object > const &a0, local_ref< java::lang::Object > const &a1)
{
	return local_ref< java::lang::Object >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}


J2CPP_DEFINE_CLASS(java::util::concurrent::atomic::AtomicReferenceFieldUpdater,"java/util/concurrent/atomic/AtomicReferenceFieldUpdater")
J2CPP_DEFINE_METHOD(java::util::concurrent::atomic::AtomicReferenceFieldUpdater,0,"<init>","()V")
J2CPP_DEFINE_METHOD(java::util::concurrent::atomic::AtomicReferenceFieldUpdater,1,"newUpdater","(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;")
J2CPP_DEFINE_METHOD(java::util::concurrent::atomic::AtomicReferenceFieldUpdater,2,"compareAndSet","(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z")
J2CPP_DEFINE_METHOD(java::util::concurrent::atomic::AtomicReferenceFieldUpdater,3,"weakCompareAndSet","(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z")
J2CPP_DEFINE_METHOD(java::util::concurrent::atomic::AtomicReferenceFieldUpdater,4,"set","(Ljava/lang/Object;Ljava/lang/Object;)V")
J2CPP_DEFINE_METHOD(java::util::concurrent::atomic::AtomicReferenceFieldUpdater,5,"get","(Ljava/lang/Object;)Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(java::util::concurrent::atomic::AtomicReferenceFieldUpdater,6,"getAndSet","(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;")

} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_CONCURRENT_ATOMIC_ATOMICREFERENCEFIELDUPDATER_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
