/*================================================================================
  code generated by: java2cpp
  class: java.util.concurrent.atomic.AtomicReferenceArray
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_CONCURRENT_ATOMIC_ATOMICREFERENCEARRAY_HPP_DECL
#define J2CPP_JAVA_UTIL_CONCURRENT_ATOMIC_ATOMICREFERENCEARRAY_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace lang { class String; } } }


#include <java/lang/Object.hpp>
#include <java/lang/String.hpp>


namespace j2cpp {

namespace java { namespace util { namespace concurrent { namespace atomic {

	class AtomicReferenceArray;
	class AtomicReferenceArray
		: public cpp_object<AtomicReferenceArray>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)

		AtomicReferenceArray(jobject jobj)
		: cpp_object<AtomicReferenceArray>(jobj)
		{
		}

		cpp_int length();
		local_ref< java::lang::Object > get(cpp_int const&);
		void set(cpp_int const&, local_ref< java::lang::Object > const&);
		local_ref< java::lang::Object > getAndSet(cpp_int const&, local_ref< java::lang::Object > const&);
		cpp_boolean compareAndSet(cpp_int const&, local_ref< java::lang::Object > const&, local_ref< java::lang::Object > const&);
		cpp_boolean weakCompareAndSet(cpp_int const&, local_ref< java::lang::Object > const&, local_ref< java::lang::Object > const&);
		local_ref< java::lang::String > toString();
	}; //class AtomicReferenceArray

} //namespace atomic
} //namespace concurrent
} //namespace util
} //namespace java


} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_CONCURRENT_ATOMIC_ATOMICREFERENCEARRAY_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_CONCURRENT_ATOMIC_ATOMICREFERENCEARRAY_HPP_IMPL
#define J2CPP_JAVA_UTIL_CONCURRENT_ATOMIC_ATOMICREFERENCEARRAY_HPP_IMPL

namespace j2cpp {


template <>
local_ref< java::util::concurrent::atomic::AtomicReferenceArray > create< java::util::concurrent::atomic::AtomicReferenceArray>(cpp_int const &a0)
{
	return local_ref< java::util::concurrent::atomic::AtomicReferenceArray >(
		environment::get().get_jenv()->NewObject(
			get_class<java::util::concurrent::atomic::AtomicReferenceArray::J2CPP_CLASS_NAME>(),
			get_method_id<java::util::concurrent::atomic::AtomicReferenceArray::J2CPP_CLASS_NAME, java::util::concurrent::atomic::AtomicReferenceArray::J2CPP_METHOD_NAME(0), java::util::concurrent::atomic::AtomicReferenceArray::J2CPP_METHOD_SIGNATURE(0), false>(),
			a0.get_jtype()
		)
	);
}

template <>
local_ref< java::util::concurrent::atomic::AtomicReferenceArray > create< java::util::concurrent::atomic::AtomicReferenceArray>(local_ref< cpp_object_array<java::lang::Object, 1> > const &a0)
{
	return local_ref< java::util::concurrent::atomic::AtomicReferenceArray >(
		environment::get().get_jenv()->NewObject(
			get_class<java::util::concurrent::atomic::AtomicReferenceArray::J2CPP_CLASS_NAME>(),
			get_method_id<java::util::concurrent::atomic::AtomicReferenceArray::J2CPP_CLASS_NAME, java::util::concurrent::atomic::AtomicReferenceArray::J2CPP_METHOD_NAME(1), java::util::concurrent::atomic::AtomicReferenceArray::J2CPP_METHOD_SIGNATURE(1), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int java::util::concurrent::atomic::AtomicReferenceArray::length()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>()
		)
	);
}

local_ref< java::lang::Object > java::util::concurrent::atomic::AtomicReferenceArray::get(cpp_int const &a0)
{
	return local_ref< java::lang::Object >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>(),
			a0.get_jtype()
		)
	);
}

void java::util::concurrent::atomic::AtomicReferenceArray::set(cpp_int const &a0, local_ref< java::lang::Object > const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< java::lang::Object > java::util::concurrent::atomic::AtomicReferenceArray::getAndSet(cpp_int const &a0, local_ref< java::lang::Object > const &a1)
{
	return local_ref< java::lang::Object >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_boolean java::util::concurrent::atomic::AtomicReferenceArray::compareAndSet(cpp_int const &a0, local_ref< java::lang::Object > const &a1, local_ref< java::lang::Object > const &a2)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

cpp_boolean java::util::concurrent::atomic::AtomicReferenceArray::weakCompareAndSet(cpp_int const &a0, local_ref< java::lang::Object > const &a1, local_ref< java::lang::Object > const &a2)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(7), J2CPP_METHOD_SIGNATURE(7), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

local_ref< java::lang::String > java::util::concurrent::atomic::AtomicReferenceArray::toString()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(8), J2CPP_METHOD_SIGNATURE(8), false>()
		)
	);
}


J2CPP_DEFINE_CLASS(java::util::concurrent::atomic::AtomicReferenceArray,"java/util/concurrent/atomic/AtomicReferenceArray")
J2CPP_DEFINE_METHOD(java::util::concurrent::atomic::AtomicReferenceArray,0,"<init>","(I)V")
J2CPP_DEFINE_METHOD(java::util::concurrent::atomic::AtomicReferenceArray,1,"<init>","([java.lang.Object)V")
J2CPP_DEFINE_METHOD(java::util::concurrent::atomic::AtomicReferenceArray,2,"length","()I")
J2CPP_DEFINE_METHOD(java::util::concurrent::atomic::AtomicReferenceArray,3,"get","(I)Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(java::util::concurrent::atomic::AtomicReferenceArray,4,"set","(ILjava/lang/Object;)V")
J2CPP_DEFINE_METHOD(java::util::concurrent::atomic::AtomicReferenceArray,5,"getAndSet","(ILjava/lang/Object;)Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(java::util::concurrent::atomic::AtomicReferenceArray,6,"compareAndSet","(ILjava/lang/Object;Ljava/lang/Object;)Z")
J2CPP_DEFINE_METHOD(java::util::concurrent::atomic::AtomicReferenceArray,7,"weakCompareAndSet","(ILjava/lang/Object;Ljava/lang/Object;)Z")
J2CPP_DEFINE_METHOD(java::util::concurrent::atomic::AtomicReferenceArray,8,"toString","()Ljava/lang/String;")

} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_CONCURRENT_ATOMIC_ATOMICREFERENCEARRAY_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
