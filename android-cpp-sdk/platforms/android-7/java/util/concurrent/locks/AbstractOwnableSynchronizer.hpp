/*================================================================================
  code generated by: java2cpp
  class: java.util.concurrent.locks.AbstractOwnableSynchronizer
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_CONCURRENT_LOCKS_ABSTRACTOWNABLESYNCHRONIZER_HPP_DECL
#define J2CPP_JAVA_UTIL_CONCURRENT_LOCKS_ABSTRACTOWNABLESYNCHRONIZER_HPP_DECL






namespace j2cpp {

namespace java { namespace util { namespace concurrent { namespace locks {

	class AbstractOwnableSynchronizer;
	class AbstractOwnableSynchronizer
		: public cpp_object<AbstractOwnableSynchronizer>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)

		AbstractOwnableSynchronizer(jobject jobj)
		: cpp_object<AbstractOwnableSynchronizer>(jobj)
		{
		}

	}; //class AbstractOwnableSynchronizer

} //namespace locks
} //namespace concurrent
} //namespace util
} //namespace java


} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_CONCURRENT_LOCKS_ABSTRACTOWNABLESYNCHRONIZER_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_CONCURRENT_LOCKS_ABSTRACTOWNABLESYNCHRONIZER_HPP_IMPL
#define J2CPP_JAVA_UTIL_CONCURRENT_LOCKS_ABSTRACTOWNABLESYNCHRONIZER_HPP_IMPL

namespace j2cpp {


template <>
local_ref< java::util::concurrent::locks::AbstractOwnableSynchronizer > create< java::util::concurrent::locks::AbstractOwnableSynchronizer>()
{
	return local_ref< java::util::concurrent::locks::AbstractOwnableSynchronizer >(
		environment::get().get_jenv()->NewObject(
			get_class<java::util::concurrent::locks::AbstractOwnableSynchronizer::J2CPP_CLASS_NAME>(),
			get_method_id<java::util::concurrent::locks::AbstractOwnableSynchronizer::J2CPP_CLASS_NAME, java::util::concurrent::locks::AbstractOwnableSynchronizer::J2CPP_METHOD_NAME(0), java::util::concurrent::locks::AbstractOwnableSynchronizer::J2CPP_METHOD_SIGNATURE(0), false>()
		)
	);
}




J2CPP_DEFINE_CLASS(java::util::concurrent::locks::AbstractOwnableSynchronizer,"java/util/concurrent/locks/AbstractOwnableSynchronizer")
J2CPP_DEFINE_METHOD(java::util::concurrent::locks::AbstractOwnableSynchronizer,0,"<init>","()V")
J2CPP_DEFINE_METHOD(java::util::concurrent::locks::AbstractOwnableSynchronizer,1,"setExclusiveOwnerThread","(Ljava/lang/Thread;)V")
J2CPP_DEFINE_METHOD(java::util::concurrent::locks::AbstractOwnableSynchronizer,2,"getExclusiveOwnerThread","()Ljava/lang/Thread;")

} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_CONCURRENT_LOCKS_ABSTRACTOWNABLESYNCHRONIZER_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
