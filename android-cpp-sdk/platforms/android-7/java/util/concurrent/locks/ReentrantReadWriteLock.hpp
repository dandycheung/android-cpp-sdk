/*================================================================================
  code generated by: java2cpp
  class: java.util.concurrent.locks.ReentrantReadWriteLock
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_CONCURRENT_LOCKS_REENTRANTREADWRITELOCK_HPP_DECL
#define J2CPP_JAVA_UTIL_CONCURRENT_LOCKS_REENTRANTREADWRITELOCK_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class Thread; } } }
namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace util { namespace concurrent { namespace locks { namespace ReentrantReadWriteLock_ { class WriteLock; } } } } } }
namespace j2cpp { namespace java { namespace util { namespace concurrent { namespace locks { class Lock; } } } } }
namespace j2cpp { namespace java { namespace util { namespace concurrent { namespace locks { namespace ReentrantReadWriteLock_ { class ReadLock; } } } } } }
namespace j2cpp { namespace java { namespace util { namespace concurrent { namespace locks { class Condition; } } } } }
namespace j2cpp { namespace java { namespace util { namespace concurrent { class TimeUnit; } } } }


#include <java/lang/String.hpp>
#include <java/lang/Thread.hpp>
#include <java/util/concurrent/TimeUnit.hpp>
#include <java/util/concurrent/locks/Condition.hpp>
#include <java/util/concurrent/locks/Lock.hpp>
#include <java/util/concurrent/locks/ReentrantReadWriteLock.hpp>


namespace j2cpp {

namespace java { namespace util { namespace concurrent { namespace locks {

	class ReentrantReadWriteLock;
	namespace ReentrantReadWriteLock_ {

		class WriteLock;
		class WriteLock
			: public cpp_object<WriteLock>
		{
		public:

			J2CPP_DECLARE_CLASS

			J2CPP_DECLARE_METHOD(0)
			J2CPP_DECLARE_METHOD(1)
			J2CPP_DECLARE_METHOD(2)
			J2CPP_DECLARE_METHOD(3)
			J2CPP_DECLARE_METHOD(4)
			J2CPP_DECLARE_METHOD(5)
			J2CPP_DECLARE_METHOD(6)
			J2CPP_DECLARE_METHOD(7)

			WriteLock(jobject jobj)
			: cpp_object<WriteLock>(jobj)
			{
			}

			void lock();
			void lockInterruptibly();
			cpp_boolean tryLock();
			cpp_boolean tryLock(cpp_long const&, local_ref< java::util::concurrent::TimeUnit > const&);
			void unlock();
			local_ref< java::util::concurrent::locks::Condition > newCondition();
			local_ref< java::lang::String > toString();
		}; //class WriteLock

		class ReadLock;
		class ReadLock
			: public cpp_object<ReadLock>
		{
		public:

			J2CPP_DECLARE_CLASS

			J2CPP_DECLARE_METHOD(0)
			J2CPP_DECLARE_METHOD(1)
			J2CPP_DECLARE_METHOD(2)
			J2CPP_DECLARE_METHOD(3)
			J2CPP_DECLARE_METHOD(4)
			J2CPP_DECLARE_METHOD(5)
			J2CPP_DECLARE_METHOD(6)
			J2CPP_DECLARE_METHOD(7)

			ReadLock(jobject jobj)
			: cpp_object<ReadLock>(jobj)
			{
			}

			void lock();
			void lockInterruptibly();
			cpp_boolean tryLock();
			cpp_boolean tryLock(cpp_long const&, local_ref< java::util::concurrent::TimeUnit > const&);
			void unlock();
			local_ref< java::util::concurrent::locks::Condition > newCondition();
			local_ref< java::lang::String > toString();
		}; //class ReadLock

	} //namespace ReentrantReadWriteLock_

	class ReentrantReadWriteLock
		: public cpp_object<ReentrantReadWriteLock>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_METHOD(12)
		J2CPP_DECLARE_METHOD(13)
		J2CPP_DECLARE_METHOD(14)
		J2CPP_DECLARE_METHOD(15)
		J2CPP_DECLARE_METHOD(16)
		J2CPP_DECLARE_METHOD(17)
		J2CPP_DECLARE_METHOD(18)
		J2CPP_DECLARE_METHOD(19)
		J2CPP_DECLARE_METHOD(20)
		J2CPP_DECLARE_METHOD(21)

		typedef ReentrantReadWriteLock_::WriteLock WriteLock;
		typedef ReentrantReadWriteLock_::ReadLock ReadLock;

		ReentrantReadWriteLock(jobject jobj)
		: cpp_object<ReentrantReadWriteLock>(jobj)
		{
		}

		local_ref< java::util::concurrent::locks::ReentrantReadWriteLock_::WriteLock > writeLock();
		local_ref< java::util::concurrent::locks::ReentrantReadWriteLock_::ReadLock > readLock();
		cpp_boolean isFair();
		cpp_int getReadLockCount();
		cpp_boolean isWriteLocked();
		cpp_boolean isWriteLockedByCurrentThread();
		cpp_int getWriteHoldCount();
		cpp_boolean hasQueuedThreads();
		cpp_boolean hasQueuedThread(local_ref< java::lang::Thread > const&);
		cpp_int getQueueLength();
		cpp_boolean hasWaiters(local_ref< java::util::concurrent::locks::Condition > const&);
		cpp_int getWaitQueueLength(local_ref< java::util::concurrent::locks::Condition > const&);
		local_ref< java::lang::String > toString();
		local_ref< java::util::concurrent::locks::Lock > writeLock_1();
		local_ref< java::util::concurrent::locks::Lock > readLock_1();
	}; //class ReentrantReadWriteLock

} //namespace locks
} //namespace concurrent
} //namespace util
} //namespace java


} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_CONCURRENT_LOCKS_REENTRANTREADWRITELOCK_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_CONCURRENT_LOCKS_REENTRANTREADWRITELOCK_HPP_IMPL
#define J2CPP_JAVA_UTIL_CONCURRENT_LOCKS_REENTRANTREADWRITELOCK_HPP_IMPL

namespace j2cpp {



template <>
local_ref< java::util::concurrent::locks::ReentrantReadWriteLock_::WriteLock > create< java::util::concurrent::locks::ReentrantReadWriteLock_::WriteLock>(local_ref< java::util::concurrent::locks::ReentrantReadWriteLock > const &a0)
{
	return local_ref< java::util::concurrent::locks::ReentrantReadWriteLock_::WriteLock >(
		environment::get().get_jenv()->NewObject(
			get_class<java::util::concurrent::locks::ReentrantReadWriteLock_::WriteLock::J2CPP_CLASS_NAME>(),
			get_method_id<java::util::concurrent::locks::ReentrantReadWriteLock_::WriteLock::J2CPP_CLASS_NAME, java::util::concurrent::locks::ReentrantReadWriteLock_::WriteLock::J2CPP_METHOD_NAME(0), java::util::concurrent::locks::ReentrantReadWriteLock_::WriteLock::J2CPP_METHOD_SIGNATURE(0), false>(),
			a0.get_jtype()
		)
	);
}

void java::util::concurrent::locks::ReentrantReadWriteLock_::WriteLock::lock()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), false>()
		)
	);
}

void java::util::concurrent::locks::ReentrantReadWriteLock_::WriteLock::lockInterruptibly()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>()
		)
	);
}

cpp_boolean java::util::concurrent::locks::ReentrantReadWriteLock_::WriteLock::tryLock()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>()
		)
	);
}

cpp_boolean java::util::concurrent::locks::ReentrantReadWriteLock_::WriteLock::tryLock(cpp_long const &a0, local_ref< java::util::concurrent::TimeUnit > const &a1)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void java::util::concurrent::locks::ReentrantReadWriteLock_::WriteLock::unlock()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>()
		)
	);
}

local_ref< java::util::concurrent::locks::Condition > java::util::concurrent::locks::ReentrantReadWriteLock_::WriteLock::newCondition()
{
	return local_ref< java::util::concurrent::locks::Condition >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>()
		)
	);
}

local_ref< java::lang::String > java::util::concurrent::locks::ReentrantReadWriteLock_::WriteLock::toString()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(7), J2CPP_METHOD_SIGNATURE(7), false>()
		)
	);
}


J2CPP_DEFINE_CLASS(java::util::concurrent::locks::ReentrantReadWriteLock_::WriteLock,"java/util/concurrent/locks/ReentrantReadWriteLock$WriteLock")
J2CPP_DEFINE_METHOD(java::util::concurrent::locks::ReentrantReadWriteLock_::WriteLock,0,"<init>","(Ljava/util/concurrent/locks/ReentrantReadWriteLock;)V")
J2CPP_DEFINE_METHOD(java::util::concurrent::locks::ReentrantReadWriteLock_::WriteLock,1,"lock","()V")
J2CPP_DEFINE_METHOD(java::util::concurrent::locks::ReentrantReadWriteLock_::WriteLock,2,"lockInterruptibly","()V")
J2CPP_DEFINE_METHOD(java::util::concurrent::locks::ReentrantReadWriteLock_::WriteLock,3,"tryLock","()Z")
J2CPP_DEFINE_METHOD(java::util::concurrent::locks::ReentrantReadWriteLock_::WriteLock,4,"tryLock","(JLjava/util/concurrent/TimeUnit;)Z")
J2CPP_DEFINE_METHOD(java::util::concurrent::locks::ReentrantReadWriteLock_::WriteLock,5,"unlock","()V")
J2CPP_DEFINE_METHOD(java::util::concurrent::locks::ReentrantReadWriteLock_::WriteLock,6,"newCondition","()Ljava/util/concurrent/locks/Condition;")
J2CPP_DEFINE_METHOD(java::util::concurrent::locks::ReentrantReadWriteLock_::WriteLock,7,"toString","()Ljava/lang/String;")

template <>
local_ref< java::util::concurrent::locks::ReentrantReadWriteLock_::ReadLock > create< java::util::concurrent::locks::ReentrantReadWriteLock_::ReadLock>(local_ref< java::util::concurrent::locks::ReentrantReadWriteLock > const &a0)
{
	return local_ref< java::util::concurrent::locks::ReentrantReadWriteLock_::ReadLock >(
		environment::get().get_jenv()->NewObject(
			get_class<java::util::concurrent::locks::ReentrantReadWriteLock_::ReadLock::J2CPP_CLASS_NAME>(),
			get_method_id<java::util::concurrent::locks::ReentrantReadWriteLock_::ReadLock::J2CPP_CLASS_NAME, java::util::concurrent::locks::ReentrantReadWriteLock_::ReadLock::J2CPP_METHOD_NAME(0), java::util::concurrent::locks::ReentrantReadWriteLock_::ReadLock::J2CPP_METHOD_SIGNATURE(0), false>(),
			a0.get_jtype()
		)
	);
}

void java::util::concurrent::locks::ReentrantReadWriteLock_::ReadLock::lock()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), false>()
		)
	);
}

void java::util::concurrent::locks::ReentrantReadWriteLock_::ReadLock::lockInterruptibly()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>()
		)
	);
}

cpp_boolean java::util::concurrent::locks::ReentrantReadWriteLock_::ReadLock::tryLock()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>()
		)
	);
}

cpp_boolean java::util::concurrent::locks::ReentrantReadWriteLock_::ReadLock::tryLock(cpp_long const &a0, local_ref< java::util::concurrent::TimeUnit > const &a1)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void java::util::concurrent::locks::ReentrantReadWriteLock_::ReadLock::unlock()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>()
		)
	);
}

local_ref< java::util::concurrent::locks::Condition > java::util::concurrent::locks::ReentrantReadWriteLock_::ReadLock::newCondition()
{
	return local_ref< java::util::concurrent::locks::Condition >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>()
		)
	);
}

local_ref< java::lang::String > java::util::concurrent::locks::ReentrantReadWriteLock_::ReadLock::toString()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(7), J2CPP_METHOD_SIGNATURE(7), false>()
		)
	);
}


J2CPP_DEFINE_CLASS(java::util::concurrent::locks::ReentrantReadWriteLock_::ReadLock,"java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock")
J2CPP_DEFINE_METHOD(java::util::concurrent::locks::ReentrantReadWriteLock_::ReadLock,0,"<init>","(Ljava/util/concurrent/locks/ReentrantReadWriteLock;)V")
J2CPP_DEFINE_METHOD(java::util::concurrent::locks::ReentrantReadWriteLock_::ReadLock,1,"lock","()V")
J2CPP_DEFINE_METHOD(java::util::concurrent::locks::ReentrantReadWriteLock_::ReadLock,2,"lockInterruptibly","()V")
J2CPP_DEFINE_METHOD(java::util::concurrent::locks::ReentrantReadWriteLock_::ReadLock,3,"tryLock","()Z")
J2CPP_DEFINE_METHOD(java::util::concurrent::locks::ReentrantReadWriteLock_::ReadLock,4,"tryLock","(JLjava/util/concurrent/TimeUnit;)Z")
J2CPP_DEFINE_METHOD(java::util::concurrent::locks::ReentrantReadWriteLock_::ReadLock,5,"unlock","()V")
J2CPP_DEFINE_METHOD(java::util::concurrent::locks::ReentrantReadWriteLock_::ReadLock,6,"newCondition","()Ljava/util/concurrent/locks/Condition;")
J2CPP_DEFINE_METHOD(java::util::concurrent::locks::ReentrantReadWriteLock_::ReadLock,7,"toString","()Ljava/lang/String;")


template <>
local_ref< java::util::concurrent::locks::ReentrantReadWriteLock > create< java::util::concurrent::locks::ReentrantReadWriteLock>()
{
	return local_ref< java::util::concurrent::locks::ReentrantReadWriteLock >(
		environment::get().get_jenv()->NewObject(
			get_class<java::util::concurrent::locks::ReentrantReadWriteLock::J2CPP_CLASS_NAME>(),
			get_method_id<java::util::concurrent::locks::ReentrantReadWriteLock::J2CPP_CLASS_NAME, java::util::concurrent::locks::ReentrantReadWriteLock::J2CPP_METHOD_NAME(0), java::util::concurrent::locks::ReentrantReadWriteLock::J2CPP_METHOD_SIGNATURE(0), false>()
		)
	);
}

template <>
local_ref< java::util::concurrent::locks::ReentrantReadWriteLock > create< java::util::concurrent::locks::ReentrantReadWriteLock>(cpp_boolean const &a0)
{
	return local_ref< java::util::concurrent::locks::ReentrantReadWriteLock >(
		environment::get().get_jenv()->NewObject(
			get_class<java::util::concurrent::locks::ReentrantReadWriteLock::J2CPP_CLASS_NAME>(),
			get_method_id<java::util::concurrent::locks::ReentrantReadWriteLock::J2CPP_CLASS_NAME, java::util::concurrent::locks::ReentrantReadWriteLock::J2CPP_METHOD_NAME(1), java::util::concurrent::locks::ReentrantReadWriteLock::J2CPP_METHOD_SIGNATURE(1), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::util::concurrent::locks::ReentrantReadWriteLock_::WriteLock > java::util::concurrent::locks::ReentrantReadWriteLock::writeLock()
{
	return local_ref< java::util::concurrent::locks::ReentrantReadWriteLock_::WriteLock >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>()
		)
	);
}

local_ref< java::util::concurrent::locks::ReentrantReadWriteLock_::ReadLock > java::util::concurrent::locks::ReentrantReadWriteLock::readLock()
{
	return local_ref< java::util::concurrent::locks::ReentrantReadWriteLock_::ReadLock >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>()
		)
	);
}

cpp_boolean java::util::concurrent::locks::ReentrantReadWriteLock::isFair()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>()
		)
	);
}


cpp_int java::util::concurrent::locks::ReentrantReadWriteLock::getReadLockCount()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>()
		)
	);
}

cpp_boolean java::util::concurrent::locks::ReentrantReadWriteLock::isWriteLocked()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(7), J2CPP_METHOD_SIGNATURE(7), false>()
		)
	);
}

cpp_boolean java::util::concurrent::locks::ReentrantReadWriteLock::isWriteLockedByCurrentThread()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(8), J2CPP_METHOD_SIGNATURE(8), false>()
		)
	);
}

cpp_int java::util::concurrent::locks::ReentrantReadWriteLock::getWriteHoldCount()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(9), J2CPP_METHOD_SIGNATURE(9), false>()
		)
	);
}



cpp_boolean java::util::concurrent::locks::ReentrantReadWriteLock::hasQueuedThreads()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(12), J2CPP_METHOD_SIGNATURE(12), false>()
		)
	);
}

cpp_boolean java::util::concurrent::locks::ReentrantReadWriteLock::hasQueuedThread(local_ref< java::lang::Thread > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(13), J2CPP_METHOD_SIGNATURE(13), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int java::util::concurrent::locks::ReentrantReadWriteLock::getQueueLength()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(14), J2CPP_METHOD_SIGNATURE(14), false>()
		)
	);
}


cpp_boolean java::util::concurrent::locks::ReentrantReadWriteLock::hasWaiters(local_ref< java::util::concurrent::locks::Condition > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(16), J2CPP_METHOD_SIGNATURE(16), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int java::util::concurrent::locks::ReentrantReadWriteLock::getWaitQueueLength(local_ref< java::util::concurrent::locks::Condition > const &a0)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(17), J2CPP_METHOD_SIGNATURE(17), false>(),
			a0.get_jtype()
		)
	);
}


local_ref< java::lang::String > java::util::concurrent::locks::ReentrantReadWriteLock::toString()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(19), J2CPP_METHOD_SIGNATURE(19), false>()
		)
	);
}

local_ref< java::util::concurrent::locks::Lock > java::util::concurrent::locks::ReentrantReadWriteLock::writeLock_1()
{
	return local_ref< java::util::concurrent::locks::Lock >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(20), J2CPP_METHOD_SIGNATURE(20), false>()
		)
	);
}

local_ref< java::util::concurrent::locks::Lock > java::util::concurrent::locks::ReentrantReadWriteLock::readLock_1()
{
	return local_ref< java::util::concurrent::locks::Lock >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(21), J2CPP_METHOD_SIGNATURE(21), false>()
		)
	);
}


J2CPP_DEFINE_CLASS(java::util::concurrent::locks::ReentrantReadWriteLock,"java/util/concurrent/locks/ReentrantReadWriteLock")
J2CPP_DEFINE_METHOD(java::util::concurrent::locks::ReentrantReadWriteLock,0,"<init>","()V")
J2CPP_DEFINE_METHOD(java::util::concurrent::locks::ReentrantReadWriteLock,1,"<init>","(Z)V")
J2CPP_DEFINE_METHOD(java::util::concurrent::locks::ReentrantReadWriteLock,2,"writeLock","()Ljava/util/concurrent/locks/ReentrantReadWriteLock$WriteLock;")
J2CPP_DEFINE_METHOD(java::util::concurrent::locks::ReentrantReadWriteLock,3,"readLock","()Ljava/util/concurrent/locks/ReentrantReadWriteLock$ReadLock;")
J2CPP_DEFINE_METHOD(java::util::concurrent::locks::ReentrantReadWriteLock,4,"isFair","()Z")
J2CPP_DEFINE_METHOD(java::util::concurrent::locks::ReentrantReadWriteLock,5,"getOwner","()Ljava/lang/Thread;")
J2CPP_DEFINE_METHOD(java::util::concurrent::locks::ReentrantReadWriteLock,6,"getReadLockCount","()I")
J2CPP_DEFINE_METHOD(java::util::concurrent::locks::ReentrantReadWriteLock,7,"isWriteLocked","()Z")
J2CPP_DEFINE_METHOD(java::util::concurrent::locks::ReentrantReadWriteLock,8,"isWriteLockedByCurrentThread","()Z")
J2CPP_DEFINE_METHOD(java::util::concurrent::locks::ReentrantReadWriteLock,9,"getWriteHoldCount","()I")
J2CPP_DEFINE_METHOD(java::util::concurrent::locks::ReentrantReadWriteLock,10,"getQueuedWriterThreads","()Ljava/util/Collection;")
J2CPP_DEFINE_METHOD(java::util::concurrent::locks::ReentrantReadWriteLock,11,"getQueuedReaderThreads","()Ljava/util/Collection;")
J2CPP_DEFINE_METHOD(java::util::concurrent::locks::ReentrantReadWriteLock,12,"hasQueuedThreads","()Z")
J2CPP_DEFINE_METHOD(java::util::concurrent::locks::ReentrantReadWriteLock,13,"hasQueuedThread","(Ljava/lang/Thread;)Z")
J2CPP_DEFINE_METHOD(java::util::concurrent::locks::ReentrantReadWriteLock,14,"getQueueLength","()I")
J2CPP_DEFINE_METHOD(java::util::concurrent::locks::ReentrantReadWriteLock,15,"getQueuedThreads","()Ljava/util/Collection;")
J2CPP_DEFINE_METHOD(java::util::concurrent::locks::ReentrantReadWriteLock,16,"hasWaiters","(Ljava/util/concurrent/locks/Condition;)Z")
J2CPP_DEFINE_METHOD(java::util::concurrent::locks::ReentrantReadWriteLock,17,"getWaitQueueLength","(Ljava/util/concurrent/locks/Condition;)I")
J2CPP_DEFINE_METHOD(java::util::concurrent::locks::ReentrantReadWriteLock,18,"getWaitingThreads","(Ljava/util/concurrent/locks/Condition;)Ljava/util/Collection;")
J2CPP_DEFINE_METHOD(java::util::concurrent::locks::ReentrantReadWriteLock,19,"toString","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::util::concurrent::locks::ReentrantReadWriteLock,20,"writeLock","()Ljava/util/concurrent/locks/Lock;")
J2CPP_DEFINE_METHOD(java::util::concurrent::locks::ReentrantReadWriteLock,21,"readLock","()Ljava/util/concurrent/locks/Lock;")

} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_CONCURRENT_LOCKS_REENTRANTREADWRITELOCK_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
