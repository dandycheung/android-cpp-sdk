/*================================================================================
  code generated by: java2cpp
  class: java.util.concurrent.locks.ReadWriteLock
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_CONCURRENT_LOCKS_READWRITELOCK_HPP_DECL
#define J2CPP_JAVA_UTIL_CONCURRENT_LOCKS_READWRITELOCK_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace util { namespace concurrent { namespace locks { class Lock; } } } } }


#include <java/lang/Object.hpp>
#include <java/util/concurrent/locks/Lock.hpp>


namespace j2cpp {

namespace java { namespace util { namespace concurrent { namespace locks {

	class ReadWriteLock;
	class ReadWriteLock
		: public cpp_object<ReadWriteLock>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)

		explicit ReadWriteLock(jobject jobj)
		: cpp_object<ReadWriteLock>(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;


		local_ref< java::util::concurrent::locks::Lock > readLock();
		local_ref< java::util::concurrent::locks::Lock > writeLock();
	}; //class ReadWriteLock

} //namespace locks
} //namespace concurrent
} //namespace util
} //namespace java

} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_CONCURRENT_LOCKS_READWRITELOCK_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_CONCURRENT_LOCKS_READWRITELOCK_HPP_IMPL
#define J2CPP_JAVA_UTIL_CONCURRENT_LOCKS_READWRITELOCK_HPP_IMPL

namespace j2cpp {



java::util::concurrent::locks::ReadWriteLock::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jtype());
}

local_ref< java::util::concurrent::locks::Lock > java::util::concurrent::locks::ReadWriteLock::readLock()
{
	return local_ref< java::util::concurrent::locks::Lock >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(0), J2CPP_METHOD_SIGNATURE(0), false>()
		)
	);
}

local_ref< java::util::concurrent::locks::Lock > java::util::concurrent::locks::ReadWriteLock::writeLock()
{
	return local_ref< java::util::concurrent::locks::Lock >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), false>()
		)
	);
}


J2CPP_DEFINE_CLASS(java::util::concurrent::locks::ReadWriteLock,"java/util/concurrent/locks/ReadWriteLock")
J2CPP_DEFINE_METHOD(java::util::concurrent::locks::ReadWriteLock,0,"readLock","()Ljava/util/concurrent/locks/Lock;")
J2CPP_DEFINE_METHOD(java::util::concurrent::locks::ReadWriteLock,1,"writeLock","()Ljava/util/concurrent/locks/Lock;")

} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_CONCURRENT_LOCKS_READWRITELOCK_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
