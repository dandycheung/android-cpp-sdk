/*================================================================================
  code generated by: java2cpp
  class: java.util.concurrent.ThreadPoolExecutor
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_CONCURRENT_THREADPOOLEXECUTOR_HPP_DECL
#define J2CPP_JAVA_UTIL_CONCURRENT_THREADPOOLEXECUTOR_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace lang { class Runnable; } } }
namespace j2cpp { namespace java { namespace util { namespace concurrent { class ThreadFactory; } } } }
namespace j2cpp { namespace java { namespace util { namespace concurrent { class BlockingQueue; } } } }
namespace j2cpp { namespace java { namespace util { namespace concurrent { class AbstractExecutorService; } } } }
namespace j2cpp { namespace java { namespace util { namespace concurrent { class RejectedExecutionHandler; } } } }
namespace j2cpp { namespace java { namespace util { namespace concurrent { class TimeUnit; } } } }
namespace j2cpp { namespace java { namespace util { class List; } } }


#include <java/lang/Object.hpp>
#include <java/lang/Runnable.hpp>
#include <java/util/List.hpp>
#include <java/util/concurrent/AbstractExecutorService.hpp>
#include <java/util/concurrent/BlockingQueue.hpp>
#include <java/util/concurrent/RejectedExecutionHandler.hpp>
#include <java/util/concurrent/ThreadFactory.hpp>
#include <java/util/concurrent/TimeUnit.hpp>


namespace j2cpp {

namespace java { namespace util { namespace concurrent {

	class ThreadPoolExecutor;
	namespace ThreadPoolExecutor_ {

		class AbortPolicy;
		class AbortPolicy
			: public cpp_object<AbortPolicy>
		{
		public:

			J2CPP_DECLARE_CLASS

			J2CPP_DECLARE_METHOD(0)
			J2CPP_DECLARE_METHOD(1)

			explicit AbortPolicy(jobject jobj)
			: cpp_object<AbortPolicy>(jobj)
			{
			}

			operator local_ref<java::lang::Object>() const;
			operator local_ref<java::util::concurrent::RejectedExecutionHandler>() const;


			AbortPolicy();
			void rejectedExecution(local_ref< java::lang::Runnable > const&, local_ref< java::util::concurrent::ThreadPoolExecutor > const&);
		}; //class AbortPolicy

		class DiscardPolicy;
		class DiscardPolicy
			: public cpp_object<DiscardPolicy>
		{
		public:

			J2CPP_DECLARE_CLASS

			J2CPP_DECLARE_METHOD(0)
			J2CPP_DECLARE_METHOD(1)

			explicit DiscardPolicy(jobject jobj)
			: cpp_object<DiscardPolicy>(jobj)
			{
			}

			operator local_ref<java::lang::Object>() const;
			operator local_ref<java::util::concurrent::RejectedExecutionHandler>() const;


			DiscardPolicy();
			void rejectedExecution(local_ref< java::lang::Runnable > const&, local_ref< java::util::concurrent::ThreadPoolExecutor > const&);
		}; //class DiscardPolicy

		class DiscardOldestPolicy;
		class DiscardOldestPolicy
			: public cpp_object<DiscardOldestPolicy>
		{
		public:

			J2CPP_DECLARE_CLASS

			J2CPP_DECLARE_METHOD(0)
			J2CPP_DECLARE_METHOD(1)

			explicit DiscardOldestPolicy(jobject jobj)
			: cpp_object<DiscardOldestPolicy>(jobj)
			{
			}

			operator local_ref<java::lang::Object>() const;
			operator local_ref<java::util::concurrent::RejectedExecutionHandler>() const;


			DiscardOldestPolicy();
			void rejectedExecution(local_ref< java::lang::Runnable > const&, local_ref< java::util::concurrent::ThreadPoolExecutor > const&);
		}; //class DiscardOldestPolicy

		class CallerRunsPolicy;
		class CallerRunsPolicy
			: public cpp_object<CallerRunsPolicy>
		{
		public:

			J2CPP_DECLARE_CLASS

			J2CPP_DECLARE_METHOD(0)
			J2CPP_DECLARE_METHOD(1)

			explicit CallerRunsPolicy(jobject jobj)
			: cpp_object<CallerRunsPolicy>(jobj)
			{
			}

			operator local_ref<java::lang::Object>() const;
			operator local_ref<java::util::concurrent::RejectedExecutionHandler>() const;


			CallerRunsPolicy();
			void rejectedExecution(local_ref< java::lang::Runnable > const&, local_ref< java::util::concurrent::ThreadPoolExecutor > const&);
		}; //class CallerRunsPolicy

	} //namespace ThreadPoolExecutor_

	class ThreadPoolExecutor
		: public cpp_object<ThreadPoolExecutor>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_METHOD(12)
		J2CPP_DECLARE_METHOD(13)
		J2CPP_DECLARE_METHOD(14)
		J2CPP_DECLARE_METHOD(15)
		J2CPP_DECLARE_METHOD(16)
		J2CPP_DECLARE_METHOD(17)
		J2CPP_DECLARE_METHOD(18)
		J2CPP_DECLARE_METHOD(19)
		J2CPP_DECLARE_METHOD(20)
		J2CPP_DECLARE_METHOD(21)
		J2CPP_DECLARE_METHOD(22)
		J2CPP_DECLARE_METHOD(23)
		J2CPP_DECLARE_METHOD(24)
		J2CPP_DECLARE_METHOD(25)
		J2CPP_DECLARE_METHOD(26)
		J2CPP_DECLARE_METHOD(27)
		J2CPP_DECLARE_METHOD(28)
		J2CPP_DECLARE_METHOD(29)
		J2CPP_DECLARE_METHOD(30)
		J2CPP_DECLARE_METHOD(31)
		J2CPP_DECLARE_METHOD(32)
		J2CPP_DECLARE_METHOD(33)
		J2CPP_DECLARE_METHOD(34)

		typedef ThreadPoolExecutor_::AbortPolicy AbortPolicy;
		typedef ThreadPoolExecutor_::DiscardPolicy DiscardPolicy;
		typedef ThreadPoolExecutor_::DiscardOldestPolicy DiscardOldestPolicy;
		typedef ThreadPoolExecutor_::CallerRunsPolicy CallerRunsPolicy;

		explicit ThreadPoolExecutor(jobject jobj)
		: cpp_object<ThreadPoolExecutor>(jobj)
		{
		}

		operator local_ref<java::util::concurrent::AbstractExecutorService>() const;


		ThreadPoolExecutor(cpp_int const&, cpp_int const&, cpp_long const&, local_ref< java::util::concurrent::TimeUnit > const&, local_ref< java::util::concurrent::BlockingQueue > const&);
		ThreadPoolExecutor(cpp_int const&, cpp_int const&, cpp_long const&, local_ref< java::util::concurrent::TimeUnit > const&, local_ref< java::util::concurrent::BlockingQueue > const&, local_ref< java::util::concurrent::ThreadFactory > const&);
		ThreadPoolExecutor(cpp_int const&, cpp_int const&, cpp_long const&, local_ref< java::util::concurrent::TimeUnit > const&, local_ref< java::util::concurrent::BlockingQueue > const&, local_ref< java::util::concurrent::RejectedExecutionHandler > const&);
		ThreadPoolExecutor(cpp_int const&, cpp_int const&, cpp_long const&, local_ref< java::util::concurrent::TimeUnit > const&, local_ref< java::util::concurrent::BlockingQueue > const&, local_ref< java::util::concurrent::ThreadFactory > const&, local_ref< java::util::concurrent::RejectedExecutionHandler > const&);
		void execute(local_ref< java::lang::Runnable > const&);
		void shutdown();
		local_ref< java::util::List > shutdownNow();
		cpp_boolean isShutdown();
		cpp_boolean isTerminating();
		cpp_boolean isTerminated();
		cpp_boolean awaitTermination(cpp_long const&, local_ref< java::util::concurrent::TimeUnit > const&);
		void setThreadFactory(local_ref< java::util::concurrent::ThreadFactory > const&);
		local_ref< java::util::concurrent::ThreadFactory > getThreadFactory();
		void setRejectedExecutionHandler(local_ref< java::util::concurrent::RejectedExecutionHandler > const&);
		local_ref< java::util::concurrent::RejectedExecutionHandler > getRejectedExecutionHandler();
		void setCorePoolSize(cpp_int const&);
		cpp_int getCorePoolSize();
		cpp_boolean prestartCoreThread();
		cpp_int prestartAllCoreThreads();
		void setMaximumPoolSize(cpp_int const&);
		cpp_int getMaximumPoolSize();
		void setKeepAliveTime(cpp_long const&, local_ref< java::util::concurrent::TimeUnit > const&);
		cpp_long getKeepAliveTime(local_ref< java::util::concurrent::TimeUnit > const&);
		local_ref< java::util::concurrent::BlockingQueue > getQueue();
		cpp_boolean remove(local_ref< java::lang::Runnable > const&);
		void purge();
		cpp_int getPoolSize();
		cpp_int getActiveCount();
		cpp_int getLargestPoolSize();
		cpp_long getTaskCount();
		cpp_long getCompletedTaskCount();
	}; //class ThreadPoolExecutor

} //namespace concurrent
} //namespace util
} //namespace java

} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_CONCURRENT_THREADPOOLEXECUTOR_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_CONCURRENT_THREADPOOLEXECUTOR_HPP_IMPL
#define J2CPP_JAVA_UTIL_CONCURRENT_THREADPOOLEXECUTOR_HPP_IMPL

namespace j2cpp {




java::util::concurrent::ThreadPoolExecutor_::AbortPolicy::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jtype());
}

java::util::concurrent::ThreadPoolExecutor_::AbortPolicy::operator local_ref<java::util::concurrent::RejectedExecutionHandler>() const
{
	return local_ref<java::util::concurrent::RejectedExecutionHandler>(get_jtype());
}


java::util::concurrent::ThreadPoolExecutor_::AbortPolicy::AbortPolicy()
: cpp_object<java::util::concurrent::ThreadPoolExecutor_::AbortPolicy>(
	environment::get().get_jenv()->NewObject(
		get_class<java::util::concurrent::ThreadPoolExecutor_::AbortPolicy::J2CPP_CLASS_NAME>(),
		get_method_id<java::util::concurrent::ThreadPoolExecutor_::AbortPolicy::J2CPP_CLASS_NAME, java::util::concurrent::ThreadPoolExecutor_::AbortPolicy::J2CPP_METHOD_NAME(0), java::util::concurrent::ThreadPoolExecutor_::AbortPolicy::J2CPP_METHOD_SIGNATURE(0), false>()
	)
)
{
}


void java::util::concurrent::ThreadPoolExecutor_::AbortPolicy::rejectedExecution(local_ref< java::lang::Runnable > const &a0, local_ref< java::util::concurrent::ThreadPoolExecutor > const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}


J2CPP_DEFINE_CLASS(java::util::concurrent::ThreadPoolExecutor_::AbortPolicy,"java/util/concurrent/ThreadPoolExecutor$AbortPolicy")
J2CPP_DEFINE_METHOD(java::util::concurrent::ThreadPoolExecutor_::AbortPolicy,0,"<init>","()V")
J2CPP_DEFINE_METHOD(java::util::concurrent::ThreadPoolExecutor_::AbortPolicy,1,"rejectedExecution","(Ljava/lang/Runnable;Ljava/util/concurrent/ThreadPoolExecutor;)V")


java::util::concurrent::ThreadPoolExecutor_::DiscardPolicy::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jtype());
}

java::util::concurrent::ThreadPoolExecutor_::DiscardPolicy::operator local_ref<java::util::concurrent::RejectedExecutionHandler>() const
{
	return local_ref<java::util::concurrent::RejectedExecutionHandler>(get_jtype());
}


java::util::concurrent::ThreadPoolExecutor_::DiscardPolicy::DiscardPolicy()
: cpp_object<java::util::concurrent::ThreadPoolExecutor_::DiscardPolicy>(
	environment::get().get_jenv()->NewObject(
		get_class<java::util::concurrent::ThreadPoolExecutor_::DiscardPolicy::J2CPP_CLASS_NAME>(),
		get_method_id<java::util::concurrent::ThreadPoolExecutor_::DiscardPolicy::J2CPP_CLASS_NAME, java::util::concurrent::ThreadPoolExecutor_::DiscardPolicy::J2CPP_METHOD_NAME(0), java::util::concurrent::ThreadPoolExecutor_::DiscardPolicy::J2CPP_METHOD_SIGNATURE(0), false>()
	)
)
{
}


void java::util::concurrent::ThreadPoolExecutor_::DiscardPolicy::rejectedExecution(local_ref< java::lang::Runnable > const &a0, local_ref< java::util::concurrent::ThreadPoolExecutor > const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}


J2CPP_DEFINE_CLASS(java::util::concurrent::ThreadPoolExecutor_::DiscardPolicy,"java/util/concurrent/ThreadPoolExecutor$DiscardPolicy")
J2CPP_DEFINE_METHOD(java::util::concurrent::ThreadPoolExecutor_::DiscardPolicy,0,"<init>","()V")
J2CPP_DEFINE_METHOD(java::util::concurrent::ThreadPoolExecutor_::DiscardPolicy,1,"rejectedExecution","(Ljava/lang/Runnable;Ljava/util/concurrent/ThreadPoolExecutor;)V")


java::util::concurrent::ThreadPoolExecutor_::DiscardOldestPolicy::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jtype());
}

java::util::concurrent::ThreadPoolExecutor_::DiscardOldestPolicy::operator local_ref<java::util::concurrent::RejectedExecutionHandler>() const
{
	return local_ref<java::util::concurrent::RejectedExecutionHandler>(get_jtype());
}


java::util::concurrent::ThreadPoolExecutor_::DiscardOldestPolicy::DiscardOldestPolicy()
: cpp_object<java::util::concurrent::ThreadPoolExecutor_::DiscardOldestPolicy>(
	environment::get().get_jenv()->NewObject(
		get_class<java::util::concurrent::ThreadPoolExecutor_::DiscardOldestPolicy::J2CPP_CLASS_NAME>(),
		get_method_id<java::util::concurrent::ThreadPoolExecutor_::DiscardOldestPolicy::J2CPP_CLASS_NAME, java::util::concurrent::ThreadPoolExecutor_::DiscardOldestPolicy::J2CPP_METHOD_NAME(0), java::util::concurrent::ThreadPoolExecutor_::DiscardOldestPolicy::J2CPP_METHOD_SIGNATURE(0), false>()
	)
)
{
}


void java::util::concurrent::ThreadPoolExecutor_::DiscardOldestPolicy::rejectedExecution(local_ref< java::lang::Runnable > const &a0, local_ref< java::util::concurrent::ThreadPoolExecutor > const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}


J2CPP_DEFINE_CLASS(java::util::concurrent::ThreadPoolExecutor_::DiscardOldestPolicy,"java/util/concurrent/ThreadPoolExecutor$DiscardOldestPolicy")
J2CPP_DEFINE_METHOD(java::util::concurrent::ThreadPoolExecutor_::DiscardOldestPolicy,0,"<init>","()V")
J2CPP_DEFINE_METHOD(java::util::concurrent::ThreadPoolExecutor_::DiscardOldestPolicy,1,"rejectedExecution","(Ljava/lang/Runnable;Ljava/util/concurrent/ThreadPoolExecutor;)V")


java::util::concurrent::ThreadPoolExecutor_::CallerRunsPolicy::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jtype());
}

java::util::concurrent::ThreadPoolExecutor_::CallerRunsPolicy::operator local_ref<java::util::concurrent::RejectedExecutionHandler>() const
{
	return local_ref<java::util::concurrent::RejectedExecutionHandler>(get_jtype());
}


java::util::concurrent::ThreadPoolExecutor_::CallerRunsPolicy::CallerRunsPolicy()
: cpp_object<java::util::concurrent::ThreadPoolExecutor_::CallerRunsPolicy>(
	environment::get().get_jenv()->NewObject(
		get_class<java::util::concurrent::ThreadPoolExecutor_::CallerRunsPolicy::J2CPP_CLASS_NAME>(),
		get_method_id<java::util::concurrent::ThreadPoolExecutor_::CallerRunsPolicy::J2CPP_CLASS_NAME, java::util::concurrent::ThreadPoolExecutor_::CallerRunsPolicy::J2CPP_METHOD_NAME(0), java::util::concurrent::ThreadPoolExecutor_::CallerRunsPolicy::J2CPP_METHOD_SIGNATURE(0), false>()
	)
)
{
}


void java::util::concurrent::ThreadPoolExecutor_::CallerRunsPolicy::rejectedExecution(local_ref< java::lang::Runnable > const &a0, local_ref< java::util::concurrent::ThreadPoolExecutor > const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}


J2CPP_DEFINE_CLASS(java::util::concurrent::ThreadPoolExecutor_::CallerRunsPolicy,"java/util/concurrent/ThreadPoolExecutor$CallerRunsPolicy")
J2CPP_DEFINE_METHOD(java::util::concurrent::ThreadPoolExecutor_::CallerRunsPolicy,0,"<init>","()V")
J2CPP_DEFINE_METHOD(java::util::concurrent::ThreadPoolExecutor_::CallerRunsPolicy,1,"rejectedExecution","(Ljava/lang/Runnable;Ljava/util/concurrent/ThreadPoolExecutor;)V")



java::util::concurrent::ThreadPoolExecutor::operator local_ref<java::util::concurrent::AbstractExecutorService>() const
{
	return local_ref<java::util::concurrent::AbstractExecutorService>(get_jtype());
}


java::util::concurrent::ThreadPoolExecutor::ThreadPoolExecutor(cpp_int const &a0, cpp_int const &a1, cpp_long const &a2, local_ref< java::util::concurrent::TimeUnit > const &a3, local_ref< java::util::concurrent::BlockingQueue > const &a4)
: cpp_object<java::util::concurrent::ThreadPoolExecutor>(
	environment::get().get_jenv()->NewObject(
		get_class<java::util::concurrent::ThreadPoolExecutor::J2CPP_CLASS_NAME>(),
		get_method_id<java::util::concurrent::ThreadPoolExecutor::J2CPP_CLASS_NAME, java::util::concurrent::ThreadPoolExecutor::J2CPP_METHOD_NAME(0), java::util::concurrent::ThreadPoolExecutor::J2CPP_METHOD_SIGNATURE(0), false>(),
		a0.get_jtype(), a1.get_jtype(), a2.get_jtype(), a3.get_jtype(), a4.get_jtype()
	)
)
{
}



java::util::concurrent::ThreadPoolExecutor::ThreadPoolExecutor(cpp_int const &a0, cpp_int const &a1, cpp_long const &a2, local_ref< java::util::concurrent::TimeUnit > const &a3, local_ref< java::util::concurrent::BlockingQueue > const &a4, local_ref< java::util::concurrent::ThreadFactory > const &a5)
: cpp_object<java::util::concurrent::ThreadPoolExecutor>(
	environment::get().get_jenv()->NewObject(
		get_class<java::util::concurrent::ThreadPoolExecutor::J2CPP_CLASS_NAME>(),
		get_method_id<java::util::concurrent::ThreadPoolExecutor::J2CPP_CLASS_NAME, java::util::concurrent::ThreadPoolExecutor::J2CPP_METHOD_NAME(1), java::util::concurrent::ThreadPoolExecutor::J2CPP_METHOD_SIGNATURE(1), false>(),
		a0.get_jtype(), a1.get_jtype(), a2.get_jtype(), a3.get_jtype(), a4.get_jtype(), a5.get_jtype()
	)
)
{
}



java::util::concurrent::ThreadPoolExecutor::ThreadPoolExecutor(cpp_int const &a0, cpp_int const &a1, cpp_long const &a2, local_ref< java::util::concurrent::TimeUnit > const &a3, local_ref< java::util::concurrent::BlockingQueue > const &a4, local_ref< java::util::concurrent::RejectedExecutionHandler > const &a5)
: cpp_object<java::util::concurrent::ThreadPoolExecutor>(
	environment::get().get_jenv()->NewObject(
		get_class<java::util::concurrent::ThreadPoolExecutor::J2CPP_CLASS_NAME>(),
		get_method_id<java::util::concurrent::ThreadPoolExecutor::J2CPP_CLASS_NAME, java::util::concurrent::ThreadPoolExecutor::J2CPP_METHOD_NAME(2), java::util::concurrent::ThreadPoolExecutor::J2CPP_METHOD_SIGNATURE(2), false>(),
		a0.get_jtype(), a1.get_jtype(), a2.get_jtype(), a3.get_jtype(), a4.get_jtype(), a5.get_jtype()
	)
)
{
}



java::util::concurrent::ThreadPoolExecutor::ThreadPoolExecutor(cpp_int const &a0, cpp_int const &a1, cpp_long const &a2, local_ref< java::util::concurrent::TimeUnit > const &a3, local_ref< java::util::concurrent::BlockingQueue > const &a4, local_ref< java::util::concurrent::ThreadFactory > const &a5, local_ref< java::util::concurrent::RejectedExecutionHandler > const &a6)
: cpp_object<java::util::concurrent::ThreadPoolExecutor>(
	environment::get().get_jenv()->NewObject(
		get_class<java::util::concurrent::ThreadPoolExecutor::J2CPP_CLASS_NAME>(),
		get_method_id<java::util::concurrent::ThreadPoolExecutor::J2CPP_CLASS_NAME, java::util::concurrent::ThreadPoolExecutor::J2CPP_METHOD_NAME(3), java::util::concurrent::ThreadPoolExecutor::J2CPP_METHOD_SIGNATURE(3), false>(),
		a0.get_jtype(), a1.get_jtype(), a2.get_jtype(), a3.get_jtype(), a4.get_jtype(), a5.get_jtype(), a6.get_jtype()
	)
)
{
}


void java::util::concurrent::ThreadPoolExecutor::execute(local_ref< java::lang::Runnable > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>(),
			a0.get_jtype()
		)
	);
}

void java::util::concurrent::ThreadPoolExecutor::shutdown()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>()
		)
	);
}

local_ref< java::util::List > java::util::concurrent::ThreadPoolExecutor::shutdownNow()
{
	return local_ref< java::util::List >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>()
		)
	);
}

cpp_boolean java::util::concurrent::ThreadPoolExecutor::isShutdown()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(7), J2CPP_METHOD_SIGNATURE(7), false>()
		)
	);
}

cpp_boolean java::util::concurrent::ThreadPoolExecutor::isTerminating()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(8), J2CPP_METHOD_SIGNATURE(8), false>()
		)
	);
}

cpp_boolean java::util::concurrent::ThreadPoolExecutor::isTerminated()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(9), J2CPP_METHOD_SIGNATURE(9), false>()
		)
	);
}

cpp_boolean java::util::concurrent::ThreadPoolExecutor::awaitTermination(cpp_long const &a0, local_ref< java::util::concurrent::TimeUnit > const &a1)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(10), J2CPP_METHOD_SIGNATURE(10), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}


void java::util::concurrent::ThreadPoolExecutor::setThreadFactory(local_ref< java::util::concurrent::ThreadFactory > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(12), J2CPP_METHOD_SIGNATURE(12), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::util::concurrent::ThreadFactory > java::util::concurrent::ThreadPoolExecutor::getThreadFactory()
{
	return local_ref< java::util::concurrent::ThreadFactory >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(13), J2CPP_METHOD_SIGNATURE(13), false>()
		)
	);
}

void java::util::concurrent::ThreadPoolExecutor::setRejectedExecutionHandler(local_ref< java::util::concurrent::RejectedExecutionHandler > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(14), J2CPP_METHOD_SIGNATURE(14), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::util::concurrent::RejectedExecutionHandler > java::util::concurrent::ThreadPoolExecutor::getRejectedExecutionHandler()
{
	return local_ref< java::util::concurrent::RejectedExecutionHandler >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(15), J2CPP_METHOD_SIGNATURE(15), false>()
		)
	);
}

void java::util::concurrent::ThreadPoolExecutor::setCorePoolSize(cpp_int const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(16), J2CPP_METHOD_SIGNATURE(16), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int java::util::concurrent::ThreadPoolExecutor::getCorePoolSize()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(17), J2CPP_METHOD_SIGNATURE(17), false>()
		)
	);
}

cpp_boolean java::util::concurrent::ThreadPoolExecutor::prestartCoreThread()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(18), J2CPP_METHOD_SIGNATURE(18), false>()
		)
	);
}

cpp_int java::util::concurrent::ThreadPoolExecutor::prestartAllCoreThreads()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(19), J2CPP_METHOD_SIGNATURE(19), false>()
		)
	);
}

void java::util::concurrent::ThreadPoolExecutor::setMaximumPoolSize(cpp_int const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(20), J2CPP_METHOD_SIGNATURE(20), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int java::util::concurrent::ThreadPoolExecutor::getMaximumPoolSize()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(21), J2CPP_METHOD_SIGNATURE(21), false>()
		)
	);
}

void java::util::concurrent::ThreadPoolExecutor::setKeepAliveTime(cpp_long const &a0, local_ref< java::util::concurrent::TimeUnit > const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(22), J2CPP_METHOD_SIGNATURE(22), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_long java::util::concurrent::ThreadPoolExecutor::getKeepAliveTime(local_ref< java::util::concurrent::TimeUnit > const &a0)
{
	return cpp_long(
		environment::get().get_jenv()->CallLongMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(23), J2CPP_METHOD_SIGNATURE(23), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::util::concurrent::BlockingQueue > java::util::concurrent::ThreadPoolExecutor::getQueue()
{
	return local_ref< java::util::concurrent::BlockingQueue >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(24), J2CPP_METHOD_SIGNATURE(24), false>()
		)
	);
}

cpp_boolean java::util::concurrent::ThreadPoolExecutor::remove(local_ref< java::lang::Runnable > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(25), J2CPP_METHOD_SIGNATURE(25), false>(),
			a0.get_jtype()
		)
	);
}

void java::util::concurrent::ThreadPoolExecutor::purge()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(26), J2CPP_METHOD_SIGNATURE(26), false>()
		)
	);
}

cpp_int java::util::concurrent::ThreadPoolExecutor::getPoolSize()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(27), J2CPP_METHOD_SIGNATURE(27), false>()
		)
	);
}

cpp_int java::util::concurrent::ThreadPoolExecutor::getActiveCount()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(28), J2CPP_METHOD_SIGNATURE(28), false>()
		)
	);
}

cpp_int java::util::concurrent::ThreadPoolExecutor::getLargestPoolSize()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(29), J2CPP_METHOD_SIGNATURE(29), false>()
		)
	);
}

cpp_long java::util::concurrent::ThreadPoolExecutor::getTaskCount()
{
	return cpp_long(
		environment::get().get_jenv()->CallLongMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(30), J2CPP_METHOD_SIGNATURE(30), false>()
		)
	);
}

cpp_long java::util::concurrent::ThreadPoolExecutor::getCompletedTaskCount()
{
	return cpp_long(
		environment::get().get_jenv()->CallLongMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(31), J2CPP_METHOD_SIGNATURE(31), false>()
		)
	);
}





J2CPP_DEFINE_CLASS(java::util::concurrent::ThreadPoolExecutor,"java/util/concurrent/ThreadPoolExecutor")
J2CPP_DEFINE_METHOD(java::util::concurrent::ThreadPoolExecutor,0,"<init>","(IIJLjava/util/concurrent/TimeUnit;Ljava/util/concurrent/BlockingQueue;)V")
J2CPP_DEFINE_METHOD(java::util::concurrent::ThreadPoolExecutor,1,"<init>","(IIJLjava/util/concurrent/TimeUnit;Ljava/util/concurrent/BlockingQueue;Ljava/util/concurrent/ThreadFactory;)V")
J2CPP_DEFINE_METHOD(java::util::concurrent::ThreadPoolExecutor,2,"<init>","(IIJLjava/util/concurrent/TimeUnit;Ljava/util/concurrent/BlockingQueue;Ljava/util/concurrent/RejectedExecutionHandler;)V")
J2CPP_DEFINE_METHOD(java::util::concurrent::ThreadPoolExecutor,3,"<init>","(IIJLjava/util/concurrent/TimeUnit;Ljava/util/concurrent/BlockingQueue;Ljava/util/concurrent/ThreadFactory;Ljava/util/concurrent/RejectedExecutionHandler;)V")
J2CPP_DEFINE_METHOD(java::util::concurrent::ThreadPoolExecutor,4,"execute","(Ljava/lang/Runnable;)V")
J2CPP_DEFINE_METHOD(java::util::concurrent::ThreadPoolExecutor,5,"shutdown","()V")
J2CPP_DEFINE_METHOD(java::util::concurrent::ThreadPoolExecutor,6,"shutdownNow","()Ljava/util/List;")
J2CPP_DEFINE_METHOD(java::util::concurrent::ThreadPoolExecutor,7,"isShutdown","()Z")
J2CPP_DEFINE_METHOD(java::util::concurrent::ThreadPoolExecutor,8,"isTerminating","()Z")
J2CPP_DEFINE_METHOD(java::util::concurrent::ThreadPoolExecutor,9,"isTerminated","()Z")
J2CPP_DEFINE_METHOD(java::util::concurrent::ThreadPoolExecutor,10,"awaitTermination","(JLjava/util/concurrent/TimeUnit;)Z")
J2CPP_DEFINE_METHOD(java::util::concurrent::ThreadPoolExecutor,11,"finalize","()V")
J2CPP_DEFINE_METHOD(java::util::concurrent::ThreadPoolExecutor,12,"setThreadFactory","(Ljava/util/concurrent/ThreadFactory;)V")
J2CPP_DEFINE_METHOD(java::util::concurrent::ThreadPoolExecutor,13,"getThreadFactory","()Ljava/util/concurrent/ThreadFactory;")
J2CPP_DEFINE_METHOD(java::util::concurrent::ThreadPoolExecutor,14,"setRejectedExecutionHandler","(Ljava/util/concurrent/RejectedExecutionHandler;)V")
J2CPP_DEFINE_METHOD(java::util::concurrent::ThreadPoolExecutor,15,"getRejectedExecutionHandler","()Ljava/util/concurrent/RejectedExecutionHandler;")
J2CPP_DEFINE_METHOD(java::util::concurrent::ThreadPoolExecutor,16,"setCorePoolSize","(I)V")
J2CPP_DEFINE_METHOD(java::util::concurrent::ThreadPoolExecutor,17,"getCorePoolSize","()I")
J2CPP_DEFINE_METHOD(java::util::concurrent::ThreadPoolExecutor,18,"prestartCoreThread","()Z")
J2CPP_DEFINE_METHOD(java::util::concurrent::ThreadPoolExecutor,19,"prestartAllCoreThreads","()I")
J2CPP_DEFINE_METHOD(java::util::concurrent::ThreadPoolExecutor,20,"setMaximumPoolSize","(I)V")
J2CPP_DEFINE_METHOD(java::util::concurrent::ThreadPoolExecutor,21,"getMaximumPoolSize","()I")
J2CPP_DEFINE_METHOD(java::util::concurrent::ThreadPoolExecutor,22,"setKeepAliveTime","(JLjava/util/concurrent/TimeUnit;)V")
J2CPP_DEFINE_METHOD(java::util::concurrent::ThreadPoolExecutor,23,"getKeepAliveTime","(Ljava/util/concurrent/TimeUnit;)J")
J2CPP_DEFINE_METHOD(java::util::concurrent::ThreadPoolExecutor,24,"getQueue","()Ljava/util/concurrent/BlockingQueue;")
J2CPP_DEFINE_METHOD(java::util::concurrent::ThreadPoolExecutor,25,"remove","(Ljava/lang/Runnable;)Z")
J2CPP_DEFINE_METHOD(java::util::concurrent::ThreadPoolExecutor,26,"purge","()V")
J2CPP_DEFINE_METHOD(java::util::concurrent::ThreadPoolExecutor,27,"getPoolSize","()I")
J2CPP_DEFINE_METHOD(java::util::concurrent::ThreadPoolExecutor,28,"getActiveCount","()I")
J2CPP_DEFINE_METHOD(java::util::concurrent::ThreadPoolExecutor,29,"getLargestPoolSize","()I")
J2CPP_DEFINE_METHOD(java::util::concurrent::ThreadPoolExecutor,30,"getTaskCount","()J")
J2CPP_DEFINE_METHOD(java::util::concurrent::ThreadPoolExecutor,31,"getCompletedTaskCount","()J")
J2CPP_DEFINE_METHOD(java::util::concurrent::ThreadPoolExecutor,32,"beforeExecute","(Ljava/lang/Thread;Ljava/lang/Runnable;)V")
J2CPP_DEFINE_METHOD(java::util::concurrent::ThreadPoolExecutor,33,"afterExecute","(Ljava/lang/Runnable;Ljava/lang/Throwable;)V")
J2CPP_DEFINE_METHOD(java::util::concurrent::ThreadPoolExecutor,34,"terminated","()V")

} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_CONCURRENT_THREADPOOLEXECUTOR_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
