/*================================================================================
  code generated by: java2cpp
  class: java.util.Formatter
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_FORMATTER_HPP_DECL
#define J2CPP_JAVA_UTIL_FORMATTER_HPP_DECL


namespace j2cpp { namespace java { namespace io { class Closeable; } } }
namespace j2cpp { namespace java { namespace io { class File; } } }
namespace j2cpp { namespace java { namespace io { class IOException; } } }
namespace j2cpp { namespace java { namespace io { class PrintStream; } } }
namespace j2cpp { namespace java { namespace io { class Flushable; } } }
namespace j2cpp { namespace java { namespace io { class OutputStream; } } }
namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace lang { class Enum; } } }
namespace j2cpp { namespace java { namespace lang { class Appendable; } } }
namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace util { class Locale; } } }
namespace j2cpp { namespace java { namespace util { namespace Formatter_ { class BigDecimalLayoutForm; } } } }


#include <java/io/Closeable.hpp>
#include <java/io/File.hpp>
#include <java/io/Flushable.hpp>
#include <java/io/IOException.hpp>
#include <java/io/OutputStream.hpp>
#include <java/io/PrintStream.hpp>
#include <java/lang/Appendable.hpp>
#include <java/lang/Enum.hpp>
#include <java/lang/Object.hpp>
#include <java/lang/String.hpp>
#include <java/util/Formatter.hpp>
#include <java/util/Locale.hpp>


namespace j2cpp {

namespace java { namespace util {

	class Formatter;
	namespace Formatter_ {

		class BigDecimalLayoutForm;
		class BigDecimalLayoutForm
			: public cpp_object<BigDecimalLayoutForm>
		{
		public:

			J2CPP_DECLARE_CLASS

			J2CPP_DECLARE_METHOD(0)
			J2CPP_DECLARE_METHOD(1)
			J2CPP_DECLARE_METHOD(2)
			J2CPP_DECLARE_METHOD(3)
			J2CPP_DECLARE_FIELD(0)
			J2CPP_DECLARE_FIELD(1)
			J2CPP_DECLARE_FIELD(2)

			explicit BigDecimalLayoutForm(jobject jobj)
			: cpp_object<BigDecimalLayoutForm>(jobj)
			{
			}

			operator local_ref<java::lang::Enum>() const;


			static local_ref< cpp_object_array<java::util::Formatter_::BigDecimalLayoutForm, 1> > values();
			static local_ref< java::util::Formatter_::BigDecimalLayoutForm > valueOf(local_ref< java::lang::String > const&);

			static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(0), J2CPP_FIELD_SIGNATURE(0), local_ref< java::util::Formatter_::BigDecimalLayoutForm > > DECIMAL_FLOAT;
			static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(1), J2CPP_FIELD_SIGNATURE(1), local_ref< java::util::Formatter_::BigDecimalLayoutForm > > SCIENTIFIC;
		}; //class BigDecimalLayoutForm

	} //namespace Formatter_

	class Formatter
		: public cpp_object<Formatter>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_METHOD(12)
		J2CPP_DECLARE_METHOD(13)
		J2CPP_DECLARE_METHOD(14)
		J2CPP_DECLARE_METHOD(15)
		J2CPP_DECLARE_METHOD(16)
		J2CPP_DECLARE_METHOD(17)
		J2CPP_DECLARE_METHOD(18)
		J2CPP_DECLARE_METHOD(19)
		J2CPP_DECLARE_METHOD(20)
		J2CPP_DECLARE_METHOD(21)

		typedef Formatter_::BigDecimalLayoutForm BigDecimalLayoutForm;

		explicit Formatter(jobject jobj)
		: cpp_object<Formatter>(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;
		operator local_ref<java::io::Closeable>() const;
		operator local_ref<java::io::Flushable>() const;


		Formatter();
		Formatter(local_ref< java::lang::Appendable > const&);
		Formatter(local_ref< java::util::Locale > const&);
		Formatter(local_ref< java::lang::Appendable > const&, local_ref< java::util::Locale > const&);
		Formatter(local_ref< java::lang::String > const&);
		Formatter(local_ref< java::lang::String > const&, local_ref< java::lang::String > const&);
		Formatter(local_ref< java::lang::String > const&, local_ref< java::lang::String > const&, local_ref< java::util::Locale > const&);
		Formatter(local_ref< java::io::File > const&);
		Formatter(local_ref< java::io::File > const&, local_ref< java::lang::String > const&);
		Formatter(local_ref< java::io::File > const&, local_ref< java::lang::String > const&, local_ref< java::util::Locale > const&);
		Formatter(local_ref< java::io::OutputStream > const&);
		Formatter(local_ref< java::io::OutputStream > const&, local_ref< java::lang::String > const&);
		Formatter(local_ref< java::io::OutputStream > const&, local_ref< java::lang::String > const&, local_ref< java::util::Locale > const&);
		Formatter(local_ref< java::io::PrintStream > const&);
		local_ref< java::util::Locale > locale();
		local_ref< java::lang::Appendable > out();
		local_ref< java::lang::String > toString();
		void flush();
		void close();
		local_ref< java::io::IOException > ioException();
		local_ref< java::util::Formatter > format(local_ref< java::lang::String > const&, local_ref< cpp_object_array<java::lang::Object, 1> > const&);
		local_ref< java::util::Formatter > format(local_ref< java::util::Locale > const&, local_ref< java::lang::String > const&, local_ref< cpp_object_array<java::lang::Object, 1> > const&);
	}; //class Formatter

} //namespace util
} //namespace java

} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_FORMATTER_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_FORMATTER_HPP_IMPL
#define J2CPP_JAVA_UTIL_FORMATTER_HPP_IMPL

namespace j2cpp {




java::util::Formatter_::BigDecimalLayoutForm::operator local_ref<java::lang::Enum>() const
{
	return local_ref<java::lang::Enum>(get_jtype());
}

local_ref< cpp_object_array<java::util::Formatter_::BigDecimalLayoutForm, 1> > java::util::Formatter_::BigDecimalLayoutForm::values()
{
	return local_ref< cpp_object_array<java::util::Formatter_::BigDecimalLayoutForm, 1> >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(0), J2CPP_METHOD_SIGNATURE(0), true>()
		)
	);
}

local_ref< java::util::Formatter_::BigDecimalLayoutForm > java::util::Formatter_::BigDecimalLayoutForm::valueOf(local_ref< java::lang::String > const &a0)
{
	return local_ref< java::util::Formatter_::BigDecimalLayoutForm >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), true>(),
			a0.get_jtype()
		)
	);
}




static_field<
	java::util::Formatter_::BigDecimalLayoutForm::J2CPP_CLASS_NAME,
	java::util::Formatter_::BigDecimalLayoutForm::J2CPP_FIELD_NAME(0),
	java::util::Formatter_::BigDecimalLayoutForm::J2CPP_FIELD_SIGNATURE(0),
	local_ref< java::util::Formatter_::BigDecimalLayoutForm >
> java::util::Formatter_::BigDecimalLayoutForm::DECIMAL_FLOAT;

static_field<
	java::util::Formatter_::BigDecimalLayoutForm::J2CPP_CLASS_NAME,
	java::util::Formatter_::BigDecimalLayoutForm::J2CPP_FIELD_NAME(1),
	java::util::Formatter_::BigDecimalLayoutForm::J2CPP_FIELD_SIGNATURE(1),
	local_ref< java::util::Formatter_::BigDecimalLayoutForm >
> java::util::Formatter_::BigDecimalLayoutForm::SCIENTIFIC;


J2CPP_DEFINE_CLASS(java::util::Formatter_::BigDecimalLayoutForm,"java/util/Formatter$BigDecimalLayoutForm")
J2CPP_DEFINE_METHOD(java::util::Formatter_::BigDecimalLayoutForm,0,"values","()[java.util.Formatter.BigDecimalLayoutForm")
J2CPP_DEFINE_METHOD(java::util::Formatter_::BigDecimalLayoutForm,1,"valueOf","(Ljava/lang/String;)Ljava/util/Formatter$BigDecimalLayoutForm;")
J2CPP_DEFINE_METHOD(java::util::Formatter_::BigDecimalLayoutForm,2,"<init>","(Ljava/lang/String;I)V")
J2CPP_DEFINE_METHOD(java::util::Formatter_::BigDecimalLayoutForm,3,"<clinit>","()V")
J2CPP_DEFINE_FIELD(java::util::Formatter_::BigDecimalLayoutForm,0,"DECIMAL_FLOAT","Ljava/util/Formatter$BigDecimalLayoutForm;")
J2CPP_DEFINE_FIELD(java::util::Formatter_::BigDecimalLayoutForm,1,"SCIENTIFIC","Ljava/util/Formatter$BigDecimalLayoutForm;")
J2CPP_DEFINE_FIELD(java::util::Formatter_::BigDecimalLayoutForm,2,"$VALUES","[java.util.Formatter.BigDecimalLayoutForm")



java::util::Formatter::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jtype());
}

java::util::Formatter::operator local_ref<java::io::Closeable>() const
{
	return local_ref<java::io::Closeable>(get_jtype());
}

java::util::Formatter::operator local_ref<java::io::Flushable>() const
{
	return local_ref<java::io::Flushable>(get_jtype());
}


java::util::Formatter::Formatter()
: cpp_object<java::util::Formatter>(
	environment::get().get_jenv()->NewObject(
		get_class<java::util::Formatter::J2CPP_CLASS_NAME>(),
		get_method_id<java::util::Formatter::J2CPP_CLASS_NAME, java::util::Formatter::J2CPP_METHOD_NAME(0), java::util::Formatter::J2CPP_METHOD_SIGNATURE(0), false>()
	)
)
{
}



java::util::Formatter::Formatter(local_ref< java::lang::Appendable > const &a0)
: cpp_object<java::util::Formatter>(
	environment::get().get_jenv()->NewObject(
		get_class<java::util::Formatter::J2CPP_CLASS_NAME>(),
		get_method_id<java::util::Formatter::J2CPP_CLASS_NAME, java::util::Formatter::J2CPP_METHOD_NAME(1), java::util::Formatter::J2CPP_METHOD_SIGNATURE(1), false>(),
		a0.get_jtype()
	)
)
{
}



java::util::Formatter::Formatter(local_ref< java::util::Locale > const &a0)
: cpp_object<java::util::Formatter>(
	environment::get().get_jenv()->NewObject(
		get_class<java::util::Formatter::J2CPP_CLASS_NAME>(),
		get_method_id<java::util::Formatter::J2CPP_CLASS_NAME, java::util::Formatter::J2CPP_METHOD_NAME(2), java::util::Formatter::J2CPP_METHOD_SIGNATURE(2), false>(),
		a0.get_jtype()
	)
)
{
}



java::util::Formatter::Formatter(local_ref< java::lang::Appendable > const &a0, local_ref< java::util::Locale > const &a1)
: cpp_object<java::util::Formatter>(
	environment::get().get_jenv()->NewObject(
		get_class<java::util::Formatter::J2CPP_CLASS_NAME>(),
		get_method_id<java::util::Formatter::J2CPP_CLASS_NAME, java::util::Formatter::J2CPP_METHOD_NAME(3), java::util::Formatter::J2CPP_METHOD_SIGNATURE(3), false>(),
		a0.get_jtype(), a1.get_jtype()
	)
)
{
}



java::util::Formatter::Formatter(local_ref< java::lang::String > const &a0)
: cpp_object<java::util::Formatter>(
	environment::get().get_jenv()->NewObject(
		get_class<java::util::Formatter::J2CPP_CLASS_NAME>(),
		get_method_id<java::util::Formatter::J2CPP_CLASS_NAME, java::util::Formatter::J2CPP_METHOD_NAME(4), java::util::Formatter::J2CPP_METHOD_SIGNATURE(4), false>(),
		a0.get_jtype()
	)
)
{
}



java::util::Formatter::Formatter(local_ref< java::lang::String > const &a0, local_ref< java::lang::String > const &a1)
: cpp_object<java::util::Formatter>(
	environment::get().get_jenv()->NewObject(
		get_class<java::util::Formatter::J2CPP_CLASS_NAME>(),
		get_method_id<java::util::Formatter::J2CPP_CLASS_NAME, java::util::Formatter::J2CPP_METHOD_NAME(5), java::util::Formatter::J2CPP_METHOD_SIGNATURE(5), false>(),
		a0.get_jtype(), a1.get_jtype()
	)
)
{
}



java::util::Formatter::Formatter(local_ref< java::lang::String > const &a0, local_ref< java::lang::String > const &a1, local_ref< java::util::Locale > const &a2)
: cpp_object<java::util::Formatter>(
	environment::get().get_jenv()->NewObject(
		get_class<java::util::Formatter::J2CPP_CLASS_NAME>(),
		get_method_id<java::util::Formatter::J2CPP_CLASS_NAME, java::util::Formatter::J2CPP_METHOD_NAME(6), java::util::Formatter::J2CPP_METHOD_SIGNATURE(6), false>(),
		a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
	)
)
{
}



java::util::Formatter::Formatter(local_ref< java::io::File > const &a0)
: cpp_object<java::util::Formatter>(
	environment::get().get_jenv()->NewObject(
		get_class<java::util::Formatter::J2CPP_CLASS_NAME>(),
		get_method_id<java::util::Formatter::J2CPP_CLASS_NAME, java::util::Formatter::J2CPP_METHOD_NAME(7), java::util::Formatter::J2CPP_METHOD_SIGNATURE(7), false>(),
		a0.get_jtype()
	)
)
{
}



java::util::Formatter::Formatter(local_ref< java::io::File > const &a0, local_ref< java::lang::String > const &a1)
: cpp_object<java::util::Formatter>(
	environment::get().get_jenv()->NewObject(
		get_class<java::util::Formatter::J2CPP_CLASS_NAME>(),
		get_method_id<java::util::Formatter::J2CPP_CLASS_NAME, java::util::Formatter::J2CPP_METHOD_NAME(8), java::util::Formatter::J2CPP_METHOD_SIGNATURE(8), false>(),
		a0.get_jtype(), a1.get_jtype()
	)
)
{
}



java::util::Formatter::Formatter(local_ref< java::io::File > const &a0, local_ref< java::lang::String > const &a1, local_ref< java::util::Locale > const &a2)
: cpp_object<java::util::Formatter>(
	environment::get().get_jenv()->NewObject(
		get_class<java::util::Formatter::J2CPP_CLASS_NAME>(),
		get_method_id<java::util::Formatter::J2CPP_CLASS_NAME, java::util::Formatter::J2CPP_METHOD_NAME(9), java::util::Formatter::J2CPP_METHOD_SIGNATURE(9), false>(),
		a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
	)
)
{
}



java::util::Formatter::Formatter(local_ref< java::io::OutputStream > const &a0)
: cpp_object<java::util::Formatter>(
	environment::get().get_jenv()->NewObject(
		get_class<java::util::Formatter::J2CPP_CLASS_NAME>(),
		get_method_id<java::util::Formatter::J2CPP_CLASS_NAME, java::util::Formatter::J2CPP_METHOD_NAME(10), java::util::Formatter::J2CPP_METHOD_SIGNATURE(10), false>(),
		a0.get_jtype()
	)
)
{
}



java::util::Formatter::Formatter(local_ref< java::io::OutputStream > const &a0, local_ref< java::lang::String > const &a1)
: cpp_object<java::util::Formatter>(
	environment::get().get_jenv()->NewObject(
		get_class<java::util::Formatter::J2CPP_CLASS_NAME>(),
		get_method_id<java::util::Formatter::J2CPP_CLASS_NAME, java::util::Formatter::J2CPP_METHOD_NAME(11), java::util::Formatter::J2CPP_METHOD_SIGNATURE(11), false>(),
		a0.get_jtype(), a1.get_jtype()
	)
)
{
}



java::util::Formatter::Formatter(local_ref< java::io::OutputStream > const &a0, local_ref< java::lang::String > const &a1, local_ref< java::util::Locale > const &a2)
: cpp_object<java::util::Formatter>(
	environment::get().get_jenv()->NewObject(
		get_class<java::util::Formatter::J2CPP_CLASS_NAME>(),
		get_method_id<java::util::Formatter::J2CPP_CLASS_NAME, java::util::Formatter::J2CPP_METHOD_NAME(12), java::util::Formatter::J2CPP_METHOD_SIGNATURE(12), false>(),
		a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
	)
)
{
}



java::util::Formatter::Formatter(local_ref< java::io::PrintStream > const &a0)
: cpp_object<java::util::Formatter>(
	environment::get().get_jenv()->NewObject(
		get_class<java::util::Formatter::J2CPP_CLASS_NAME>(),
		get_method_id<java::util::Formatter::J2CPP_CLASS_NAME, java::util::Formatter::J2CPP_METHOD_NAME(13), java::util::Formatter::J2CPP_METHOD_SIGNATURE(13), false>(),
		a0.get_jtype()
	)
)
{
}


local_ref< java::util::Locale > java::util::Formatter::locale()
{
	return local_ref< java::util::Locale >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(14), J2CPP_METHOD_SIGNATURE(14), false>()
		)
	);
}

local_ref< java::lang::Appendable > java::util::Formatter::out()
{
	return local_ref< java::lang::Appendable >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(15), J2CPP_METHOD_SIGNATURE(15), false>()
		)
	);
}

local_ref< java::lang::String > java::util::Formatter::toString()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(16), J2CPP_METHOD_SIGNATURE(16), false>()
		)
	);
}

void java::util::Formatter::flush()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(17), J2CPP_METHOD_SIGNATURE(17), false>()
		)
	);
}

void java::util::Formatter::close()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(18), J2CPP_METHOD_SIGNATURE(18), false>()
		)
	);
}

local_ref< java::io::IOException > java::util::Formatter::ioException()
{
	return local_ref< java::io::IOException >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(19), J2CPP_METHOD_SIGNATURE(19), false>()
		)
	);
}

local_ref< java::util::Formatter > java::util::Formatter::format(local_ref< java::lang::String > const &a0, local_ref< cpp_object_array<java::lang::Object, 1> > const &a1)
{
	return local_ref< java::util::Formatter >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(20), J2CPP_METHOD_SIGNATURE(20), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< java::util::Formatter > java::util::Formatter::format(local_ref< java::util::Locale > const &a0, local_ref< java::lang::String > const &a1, local_ref< cpp_object_array<java::lang::Object, 1> > const &a2)
{
	return local_ref< java::util::Formatter >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(21), J2CPP_METHOD_SIGNATURE(21), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}


J2CPP_DEFINE_CLASS(java::util::Formatter,"java/util/Formatter")
J2CPP_DEFINE_METHOD(java::util::Formatter,0,"<init>","()V")
J2CPP_DEFINE_METHOD(java::util::Formatter,1,"<init>","(Ljava/lang/Appendable;)V")
J2CPP_DEFINE_METHOD(java::util::Formatter,2,"<init>","(Ljava/util/Locale;)V")
J2CPP_DEFINE_METHOD(java::util::Formatter,3,"<init>","(Ljava/lang/Appendable;Ljava/util/Locale;)V")
J2CPP_DEFINE_METHOD(java::util::Formatter,4,"<init>","(Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(java::util::Formatter,5,"<init>","(Ljava/lang/String;Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(java::util::Formatter,6,"<init>","(Ljava/lang/String;Ljava/lang/String;Ljava/util/Locale;)V")
J2CPP_DEFINE_METHOD(java::util::Formatter,7,"<init>","(Ljava/io/File;)V")
J2CPP_DEFINE_METHOD(java::util::Formatter,8,"<init>","(Ljava/io/File;Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(java::util::Formatter,9,"<init>","(Ljava/io/File;Ljava/lang/String;Ljava/util/Locale;)V")
J2CPP_DEFINE_METHOD(java::util::Formatter,10,"<init>","(Ljava/io/OutputStream;)V")
J2CPP_DEFINE_METHOD(java::util::Formatter,11,"<init>","(Ljava/io/OutputStream;Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(java::util::Formatter,12,"<init>","(Ljava/io/OutputStream;Ljava/lang/String;Ljava/util/Locale;)V")
J2CPP_DEFINE_METHOD(java::util::Formatter,13,"<init>","(Ljava/io/PrintStream;)V")
J2CPP_DEFINE_METHOD(java::util::Formatter,14,"locale","()Ljava/util/Locale;")
J2CPP_DEFINE_METHOD(java::util::Formatter,15,"out","()Ljava/lang/Appendable;")
J2CPP_DEFINE_METHOD(java::util::Formatter,16,"toString","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::util::Formatter,17,"flush","()V")
J2CPP_DEFINE_METHOD(java::util::Formatter,18,"close","()V")
J2CPP_DEFINE_METHOD(java::util::Formatter,19,"ioException","()Ljava/io/IOException;")
J2CPP_DEFINE_METHOD(java::util::Formatter,20,"format","(Ljava/lang/String;[java.lang.Object)Ljava/util/Formatter;")
J2CPP_DEFINE_METHOD(java::util::Formatter,21,"format","(Ljava/util/Locale;Ljava/lang/String;[java.lang.Object)Ljava/util/Formatter;")

} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_FORMATTER_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
