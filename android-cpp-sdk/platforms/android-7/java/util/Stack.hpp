/*================================================================================
  code generated by: java2cpp
  class: java.util.Stack
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_STACK_HPP_DECL
#define J2CPP_JAVA_UTIL_STACK_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace util { class Vector; } } }


#include <java/lang/Object.hpp>
#include <java/util/Vector.hpp>


namespace j2cpp {

namespace java { namespace util {

	class Stack;
	class Stack
		: public cpp_object<Stack>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)

		explicit Stack(jobject jobj)
		: cpp_object<Stack>(jobj)
		{
		}

		operator local_ref<java::util::Vector>() const;


		Stack();
		cpp_boolean empty();
		local_ref< java::lang::Object > peek();
		local_ref< java::lang::Object > pop();
		local_ref< java::lang::Object > push(local_ref< java::lang::Object > const&);
		cpp_int search(local_ref< java::lang::Object > const&);
	}; //class Stack

} //namespace util
} //namespace java

} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_STACK_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_STACK_HPP_IMPL
#define J2CPP_JAVA_UTIL_STACK_HPP_IMPL

namespace j2cpp {



java::util::Stack::operator local_ref<java::util::Vector>() const
{
	return local_ref<java::util::Vector>(get_jtype());
}


java::util::Stack::Stack()
: cpp_object<java::util::Stack>(
	environment::get().get_jenv()->NewObject(
		get_class<java::util::Stack::J2CPP_CLASS_NAME>(),
		get_method_id<java::util::Stack::J2CPP_CLASS_NAME, java::util::Stack::J2CPP_METHOD_NAME(0), java::util::Stack::J2CPP_METHOD_SIGNATURE(0), false>()
	)
)
{
}


cpp_boolean java::util::Stack::empty()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), false>()
		)
	);
}

local_ref< java::lang::Object > java::util::Stack::peek()
{
	return local_ref< java::lang::Object >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>()
		)
	);
}

local_ref< java::lang::Object > java::util::Stack::pop()
{
	return local_ref< java::lang::Object >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>()
		)
	);
}

local_ref< java::lang::Object > java::util::Stack::push(local_ref< java::lang::Object > const &a0)
{
	return local_ref< java::lang::Object >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int java::util::Stack::search(local_ref< java::lang::Object > const &a0)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>(),
			a0.get_jtype()
		)
	);
}


J2CPP_DEFINE_CLASS(java::util::Stack,"java/util/Stack")
J2CPP_DEFINE_METHOD(java::util::Stack,0,"<init>","()V")
J2CPP_DEFINE_METHOD(java::util::Stack,1,"empty","()Z")
J2CPP_DEFINE_METHOD(java::util::Stack,2,"peek","()Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(java::util::Stack,3,"pop","()Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(java::util::Stack,4,"push","(Ljava/lang/Object;)Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(java::util::Stack,5,"search","(Ljava/lang/Object;)I")

} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_STACK_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
