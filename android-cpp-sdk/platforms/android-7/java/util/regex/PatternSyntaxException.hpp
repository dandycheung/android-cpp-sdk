/*================================================================================
  code generated by: java2cpp
  class: java.util.regex.PatternSyntaxException
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_REGEX_PATTERNSYNTAXEXCEPTION_HPP_DECL
#define J2CPP_JAVA_UTIL_REGEX_PATTERNSYNTAXEXCEPTION_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace lang { class IllegalArgumentException; } } }


#include <java/lang/IllegalArgumentException.hpp>
#include <java/lang/String.hpp>


namespace j2cpp {

namespace java { namespace util { namespace regex {

	class PatternSyntaxException;
	class PatternSyntaxException
		: public cpp_object<PatternSyntaxException>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)

		explicit PatternSyntaxException(jobject jobj)
		: cpp_object<PatternSyntaxException>(jobj)
		{
		}

		operator local_ref<java::lang::IllegalArgumentException>() const;


		PatternSyntaxException(local_ref< java::lang::String > const&, local_ref< java::lang::String > const&, cpp_int const&);
		local_ref< java::lang::String > getPattern();
		local_ref< java::lang::String > getMessage();
		local_ref< java::lang::String > getDescription();
		cpp_int getIndex();
	}; //class PatternSyntaxException

} //namespace regex
} //namespace util
} //namespace java

} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_REGEX_PATTERNSYNTAXEXCEPTION_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_REGEX_PATTERNSYNTAXEXCEPTION_HPP_IMPL
#define J2CPP_JAVA_UTIL_REGEX_PATTERNSYNTAXEXCEPTION_HPP_IMPL

namespace j2cpp {



java::util::regex::PatternSyntaxException::operator local_ref<java::lang::IllegalArgumentException>() const
{
	return local_ref<java::lang::IllegalArgumentException>(get_jtype());
}


java::util::regex::PatternSyntaxException::PatternSyntaxException(local_ref< java::lang::String > const &a0, local_ref< java::lang::String > const &a1, cpp_int const &a2)
: cpp_object<java::util::regex::PatternSyntaxException>(
	environment::get().get_jenv()->NewObject(
		get_class<java::util::regex::PatternSyntaxException::J2CPP_CLASS_NAME>(),
		get_method_id<java::util::regex::PatternSyntaxException::J2CPP_CLASS_NAME, java::util::regex::PatternSyntaxException::J2CPP_METHOD_NAME(0), java::util::regex::PatternSyntaxException::J2CPP_METHOD_SIGNATURE(0), false>(),
		a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
	)
)
{
}


local_ref< java::lang::String > java::util::regex::PatternSyntaxException::getPattern()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), false>()
		)
	);
}

local_ref< java::lang::String > java::util::regex::PatternSyntaxException::getMessage()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>()
		)
	);
}

local_ref< java::lang::String > java::util::regex::PatternSyntaxException::getDescription()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>()
		)
	);
}

cpp_int java::util::regex::PatternSyntaxException::getIndex()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>()
		)
	);
}


J2CPP_DEFINE_CLASS(java::util::regex::PatternSyntaxException,"java/util/regex/PatternSyntaxException")
J2CPP_DEFINE_METHOD(java::util::regex::PatternSyntaxException,0,"<init>","(Ljava/lang/String;Ljava/lang/String;I)V")
J2CPP_DEFINE_METHOD(java::util::regex::PatternSyntaxException,1,"getPattern","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::util::regex::PatternSyntaxException,2,"getMessage","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::util::regex::PatternSyntaxException,3,"getDescription","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::util::regex::PatternSyntaxException,4,"getIndex","()I")

} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_REGEX_PATTERNSYNTAXEXCEPTION_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
