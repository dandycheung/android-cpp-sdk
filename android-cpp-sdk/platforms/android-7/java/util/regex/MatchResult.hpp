/*================================================================================
  code generated by: java2cpp
  class: java.util.regex.MatchResult
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_REGEX_MATCHRESULT_HPP_DECL
#define J2CPP_JAVA_UTIL_REGEX_MATCHRESULT_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class String; } } }


#include <java/lang/String.hpp>


namespace j2cpp {

namespace java { namespace util { namespace regex {

	class MatchResult;
	class MatchResult
		: public cpp_object<MatchResult>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)

		MatchResult(jobject jobj)
		: cpp_object<MatchResult>(jobj)
		{
		}

		cpp_int end();
		cpp_int end(cpp_int const&);
		local_ref< java::lang::String > group();
		local_ref< java::lang::String > group(cpp_int const&);
		cpp_int groupCount();
		cpp_int start();
		cpp_int start(cpp_int const&);
	}; //class MatchResult

} //namespace regex
} //namespace util
} //namespace java


} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_REGEX_MATCHRESULT_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_REGEX_MATCHRESULT_HPP_IMPL
#define J2CPP_JAVA_UTIL_REGEX_MATCHRESULT_HPP_IMPL

namespace j2cpp {


cpp_int java::util::regex::MatchResult::end()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(0), J2CPP_METHOD_SIGNATURE(0), false>()
		)
	);
}

cpp_int java::util::regex::MatchResult::end(cpp_int const &a0)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::String > java::util::regex::MatchResult::group()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>()
		)
	);
}

local_ref< java::lang::String > java::util::regex::MatchResult::group(cpp_int const &a0)
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int java::util::regex::MatchResult::groupCount()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>()
		)
	);
}

cpp_int java::util::regex::MatchResult::start()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>()
		)
	);
}

cpp_int java::util::regex::MatchResult::start(cpp_int const &a0)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>(),
			a0.get_jtype()
		)
	);
}


J2CPP_DEFINE_CLASS(java::util::regex::MatchResult,"java/util/regex/MatchResult")
J2CPP_DEFINE_METHOD(java::util::regex::MatchResult,0,"end","()I")
J2CPP_DEFINE_METHOD(java::util::regex::MatchResult,1,"end","(I)I")
J2CPP_DEFINE_METHOD(java::util::regex::MatchResult,2,"group","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::util::regex::MatchResult,3,"group","(I)Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::util::regex::MatchResult,4,"groupCount","()I")
J2CPP_DEFINE_METHOD(java::util::regex::MatchResult,5,"start","()I")
J2CPP_DEFINE_METHOD(java::util::regex::MatchResult,6,"start","(I)I")

} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_REGEX_MATCHRESULT_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
