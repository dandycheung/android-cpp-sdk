/*================================================================================
  code generated by: java2cpp
  class: java.io.SequenceInputStream
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_IO_SEQUENCEINPUTSTREAM_HPP_DECL
#define J2CPP_JAVA_IO_SEQUENCEINPUTSTREAM_HPP_DECL


namespace j2cpp { namespace java { namespace io { class InputStream; } } }
namespace j2cpp { namespace java { namespace util { class Enumeration; } } }


#include <java/io/InputStream.hpp>
#include <java/util/Enumeration.hpp>


namespace j2cpp {

namespace java { namespace io {

	class SequenceInputStream;
	class SequenceInputStream
		: public cpp_object<SequenceInputStream>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)

		explicit SequenceInputStream(jobject jobj)
		: cpp_object<SequenceInputStream>(jobj)
		{
		}

		operator local_ref<java::io::InputStream>() const;


		SequenceInputStream(local_ref< java::io::InputStream > const&, local_ref< java::io::InputStream > const&);
		SequenceInputStream(local_ref< java::util::Enumeration > const&);
		cpp_int available();
		void close();
		cpp_int read();
		cpp_int read(local_ref< cpp_byte_array<1> > const&, cpp_int const&, cpp_int const&);
	}; //class SequenceInputStream

} //namespace io
} //namespace java

} //namespace j2cpp

#endif //J2CPP_JAVA_IO_SEQUENCEINPUTSTREAM_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_IO_SEQUENCEINPUTSTREAM_HPP_IMPL
#define J2CPP_JAVA_IO_SEQUENCEINPUTSTREAM_HPP_IMPL

namespace j2cpp {



java::io::SequenceInputStream::operator local_ref<java::io::InputStream>() const
{
	return local_ref<java::io::InputStream>(get_jtype());
}


java::io::SequenceInputStream::SequenceInputStream(local_ref< java::io::InputStream > const &a0, local_ref< java::io::InputStream > const &a1)
: cpp_object<java::io::SequenceInputStream>(
	environment::get().get_jenv()->NewObject(
		get_class<java::io::SequenceInputStream::J2CPP_CLASS_NAME>(),
		get_method_id<java::io::SequenceInputStream::J2CPP_CLASS_NAME, java::io::SequenceInputStream::J2CPP_METHOD_NAME(0), java::io::SequenceInputStream::J2CPP_METHOD_SIGNATURE(0), false>(),
		a0.get_jtype(), a1.get_jtype()
	)
)
{
}



java::io::SequenceInputStream::SequenceInputStream(local_ref< java::util::Enumeration > const &a0)
: cpp_object<java::io::SequenceInputStream>(
	environment::get().get_jenv()->NewObject(
		get_class<java::io::SequenceInputStream::J2CPP_CLASS_NAME>(),
		get_method_id<java::io::SequenceInputStream::J2CPP_CLASS_NAME, java::io::SequenceInputStream::J2CPP_METHOD_NAME(1), java::io::SequenceInputStream::J2CPP_METHOD_SIGNATURE(1), false>(),
		a0.get_jtype()
	)
)
{
}


cpp_int java::io::SequenceInputStream::available()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>()
		)
	);
}

void java::io::SequenceInputStream::close()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>()
		)
	);
}

cpp_int java::io::SequenceInputStream::read()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>()
		)
	);
}

cpp_int java::io::SequenceInputStream::read(local_ref< cpp_byte_array<1> > const &a0, cpp_int const &a1, cpp_int const &a2)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}


J2CPP_DEFINE_CLASS(java::io::SequenceInputStream,"java/io/SequenceInputStream")
J2CPP_DEFINE_METHOD(java::io::SequenceInputStream,0,"<init>","(Ljava/io/InputStream;Ljava/io/InputStream;)V")
J2CPP_DEFINE_METHOD(java::io::SequenceInputStream,1,"<init>","(Ljava/util/Enumeration;)V")
J2CPP_DEFINE_METHOD(java::io::SequenceInputStream,2,"available","()I")
J2CPP_DEFINE_METHOD(java::io::SequenceInputStream,3,"close","()V")
J2CPP_DEFINE_METHOD(java::io::SequenceInputStream,4,"read","()I")
J2CPP_DEFINE_METHOD(java::io::SequenceInputStream,5,"read","([BII)I")

} //namespace j2cpp

#endif //J2CPP_JAVA_IO_SEQUENCEINPUTSTREAM_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
