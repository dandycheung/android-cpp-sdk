/*================================================================================
  code generated by: java2cpp
  class: java.io.StreamTokenizer
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_IO_STREAMTOKENIZER_HPP_DECL
#define J2CPP_JAVA_IO_STREAMTOKENIZER_HPP_DECL


namespace j2cpp { namespace java { namespace io { class Reader; } } }
namespace j2cpp { namespace java { namespace io { class InputStream; } } }
namespace j2cpp { namespace java { namespace lang { class String; } } }


#include <java/io/InputStream.hpp>
#include <java/io/Reader.hpp>
#include <java/lang/String.hpp>


namespace j2cpp {

namespace java { namespace io {

	class StreamTokenizer;
	class StreamTokenizer
		: public cpp_object<StreamTokenizer>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_METHOD(12)
		J2CPP_DECLARE_METHOD(13)
		J2CPP_DECLARE_METHOD(14)
		J2CPP_DECLARE_METHOD(15)
		J2CPP_DECLARE_METHOD(16)
		J2CPP_DECLARE_METHOD(17)
		J2CPP_DECLARE_FIELD(0)
		J2CPP_DECLARE_FIELD(1)
		J2CPP_DECLARE_FIELD(2)
		J2CPP_DECLARE_FIELD(3)
		J2CPP_DECLARE_FIELD(4)
		J2CPP_DECLARE_FIELD(5)
		J2CPP_DECLARE_FIELD(6)

		StreamTokenizer(jobject jobj)
		: cpp_object<StreamTokenizer>(jobj)
		, nval(jobj)
		, sval(jobj)
		, ttype(jobj)
		{
		}

		void commentChar(cpp_int const&);
		void eolIsSignificant(cpp_boolean const&);
		cpp_int lineno();
		void lowerCaseMode(cpp_boolean const&);
		cpp_int nextToken();
		void ordinaryChar(cpp_int const&);
		void ordinaryChars(cpp_int const&, cpp_int const&);
		void parseNumbers();
		void pushBack();
		void quoteChar(cpp_int const&);
		void resetSyntax();
		void slashSlashComments(cpp_boolean const&);
		void slashStarComments(cpp_boolean const&);
		local_ref< java::lang::String > toString();
		void whitespaceChars(cpp_int const&, cpp_int const&);
		void wordChars(cpp_int const&, cpp_int const&);

		field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(0), J2CPP_FIELD_SIGNATURE(0), cpp_double > nval;
		field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(1), J2CPP_FIELD_SIGNATURE(1), local_ref< java::lang::String > > sval;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(2), J2CPP_FIELD_SIGNATURE(2), cpp_int > TT_EOF;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(3), J2CPP_FIELD_SIGNATURE(3), cpp_int > TT_EOL;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(4), J2CPP_FIELD_SIGNATURE(4), cpp_int > TT_NUMBER;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(5), J2CPP_FIELD_SIGNATURE(5), cpp_int > TT_WORD;
		field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(6), J2CPP_FIELD_SIGNATURE(6), cpp_int > ttype;
	}; //class StreamTokenizer

} //namespace io
} //namespace java


} //namespace j2cpp

#endif //J2CPP_JAVA_IO_STREAMTOKENIZER_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_IO_STREAMTOKENIZER_HPP_IMPL
#define J2CPP_JAVA_IO_STREAMTOKENIZER_HPP_IMPL

namespace j2cpp {


template <>
local_ref< java::io::StreamTokenizer > create< java::io::StreamTokenizer>(local_ref< java::io::InputStream > const &a0)
{
	return local_ref< java::io::StreamTokenizer >(
		environment::get().get_jenv()->NewObject(
			get_class<java::io::StreamTokenizer::J2CPP_CLASS_NAME>(),
			get_method_id<java::io::StreamTokenizer::J2CPP_CLASS_NAME, java::io::StreamTokenizer::J2CPP_METHOD_NAME(0), java::io::StreamTokenizer::J2CPP_METHOD_SIGNATURE(0), false>(),
			a0.get_jtype()
		)
	);
}

template <>
local_ref< java::io::StreamTokenizer > create< java::io::StreamTokenizer>(local_ref< java::io::Reader > const &a0)
{
	return local_ref< java::io::StreamTokenizer >(
		environment::get().get_jenv()->NewObject(
			get_class<java::io::StreamTokenizer::J2CPP_CLASS_NAME>(),
			get_method_id<java::io::StreamTokenizer::J2CPP_CLASS_NAME, java::io::StreamTokenizer::J2CPP_METHOD_NAME(1), java::io::StreamTokenizer::J2CPP_METHOD_SIGNATURE(1), false>(),
			a0.get_jtype()
		)
	);
}

void java::io::StreamTokenizer::commentChar(cpp_int const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>(),
			a0.get_jtype()
		)
	);
}

void java::io::StreamTokenizer::eolIsSignificant(cpp_boolean const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int java::io::StreamTokenizer::lineno()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>()
		)
	);
}

void java::io::StreamTokenizer::lowerCaseMode(cpp_boolean const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int java::io::StreamTokenizer::nextToken()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>()
		)
	);
}

void java::io::StreamTokenizer::ordinaryChar(cpp_int const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(7), J2CPP_METHOD_SIGNATURE(7), false>(),
			a0.get_jtype()
		)
	);
}

void java::io::StreamTokenizer::ordinaryChars(cpp_int const &a0, cpp_int const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(8), J2CPP_METHOD_SIGNATURE(8), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void java::io::StreamTokenizer::parseNumbers()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(9), J2CPP_METHOD_SIGNATURE(9), false>()
		)
	);
}

void java::io::StreamTokenizer::pushBack()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(10), J2CPP_METHOD_SIGNATURE(10), false>()
		)
	);
}

void java::io::StreamTokenizer::quoteChar(cpp_int const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(11), J2CPP_METHOD_SIGNATURE(11), false>(),
			a0.get_jtype()
		)
	);
}

void java::io::StreamTokenizer::resetSyntax()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(12), J2CPP_METHOD_SIGNATURE(12), false>()
		)
	);
}

void java::io::StreamTokenizer::slashSlashComments(cpp_boolean const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(13), J2CPP_METHOD_SIGNATURE(13), false>(),
			a0.get_jtype()
		)
	);
}

void java::io::StreamTokenizer::slashStarComments(cpp_boolean const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(14), J2CPP_METHOD_SIGNATURE(14), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::String > java::io::StreamTokenizer::toString()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(15), J2CPP_METHOD_SIGNATURE(15), false>()
		)
	);
}

void java::io::StreamTokenizer::whitespaceChars(cpp_int const &a0, cpp_int const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(16), J2CPP_METHOD_SIGNATURE(16), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void java::io::StreamTokenizer::wordChars(cpp_int const &a0, cpp_int const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(17), J2CPP_METHOD_SIGNATURE(17), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}


static_field<
	java::io::StreamTokenizer::J2CPP_CLASS_NAME,
	java::io::StreamTokenizer::J2CPP_FIELD_NAME(2),
	java::io::StreamTokenizer::J2CPP_FIELD_SIGNATURE(2),
	cpp_int
> java::io::StreamTokenizer::TT_EOF;

static_field<
	java::io::StreamTokenizer::J2CPP_CLASS_NAME,
	java::io::StreamTokenizer::J2CPP_FIELD_NAME(3),
	java::io::StreamTokenizer::J2CPP_FIELD_SIGNATURE(3),
	cpp_int
> java::io::StreamTokenizer::TT_EOL;

static_field<
	java::io::StreamTokenizer::J2CPP_CLASS_NAME,
	java::io::StreamTokenizer::J2CPP_FIELD_NAME(4),
	java::io::StreamTokenizer::J2CPP_FIELD_SIGNATURE(4),
	cpp_int
> java::io::StreamTokenizer::TT_NUMBER;

static_field<
	java::io::StreamTokenizer::J2CPP_CLASS_NAME,
	java::io::StreamTokenizer::J2CPP_FIELD_NAME(5),
	java::io::StreamTokenizer::J2CPP_FIELD_SIGNATURE(5),
	cpp_int
> java::io::StreamTokenizer::TT_WORD;


J2CPP_DEFINE_CLASS(java::io::StreamTokenizer,"java/io/StreamTokenizer")
J2CPP_DEFINE_METHOD(java::io::StreamTokenizer,0,"<init>","(Ljava/io/InputStream;)V")
J2CPP_DEFINE_METHOD(java::io::StreamTokenizer,1,"<init>","(Ljava/io/Reader;)V")
J2CPP_DEFINE_METHOD(java::io::StreamTokenizer,2,"commentChar","(I)V")
J2CPP_DEFINE_METHOD(java::io::StreamTokenizer,3,"eolIsSignificant","(Z)V")
J2CPP_DEFINE_METHOD(java::io::StreamTokenizer,4,"lineno","()I")
J2CPP_DEFINE_METHOD(java::io::StreamTokenizer,5,"lowerCaseMode","(Z)V")
J2CPP_DEFINE_METHOD(java::io::StreamTokenizer,6,"nextToken","()I")
J2CPP_DEFINE_METHOD(java::io::StreamTokenizer,7,"ordinaryChar","(I)V")
J2CPP_DEFINE_METHOD(java::io::StreamTokenizer,8,"ordinaryChars","(II)V")
J2CPP_DEFINE_METHOD(java::io::StreamTokenizer,9,"parseNumbers","()V")
J2CPP_DEFINE_METHOD(java::io::StreamTokenizer,10,"pushBack","()V")
J2CPP_DEFINE_METHOD(java::io::StreamTokenizer,11,"quoteChar","(I)V")
J2CPP_DEFINE_METHOD(java::io::StreamTokenizer,12,"resetSyntax","()V")
J2CPP_DEFINE_METHOD(java::io::StreamTokenizer,13,"slashSlashComments","(Z)V")
J2CPP_DEFINE_METHOD(java::io::StreamTokenizer,14,"slashStarComments","(Z)V")
J2CPP_DEFINE_METHOD(java::io::StreamTokenizer,15,"toString","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::io::StreamTokenizer,16,"whitespaceChars","(II)V")
J2CPP_DEFINE_METHOD(java::io::StreamTokenizer,17,"wordChars","(II)V")
J2CPP_DEFINE_FIELD(java::io::StreamTokenizer,0,"nval","D")
J2CPP_DEFINE_FIELD(java::io::StreamTokenizer,1,"sval","Ljava/lang/String;")
J2CPP_DEFINE_FIELD(java::io::StreamTokenizer,2,"TT_EOF","I")
J2CPP_DEFINE_FIELD(java::io::StreamTokenizer,3,"TT_EOL","I")
J2CPP_DEFINE_FIELD(java::io::StreamTokenizer,4,"TT_NUMBER","I")
J2CPP_DEFINE_FIELD(java::io::StreamTokenizer,5,"TT_WORD","I")
J2CPP_DEFINE_FIELD(java::io::StreamTokenizer,6,"ttype","I")

} //namespace j2cpp

#endif //J2CPP_JAVA_IO_STREAMTOKENIZER_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
