/*================================================================================
  code generated by: java2cpp
  class: java.io.OutputStream
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_IO_OUTPUTSTREAM_HPP_DECL
#define J2CPP_JAVA_IO_OUTPUTSTREAM_HPP_DECL


namespace j2cpp { namespace java { namespace io { class Closeable; } } }
namespace j2cpp { namespace java { namespace io { class Flushable; } } }
namespace j2cpp { namespace java { namespace lang { class Object; } } }


#include <java/io/Closeable.hpp>
#include <java/io/Flushable.hpp>
#include <java/lang/Object.hpp>


namespace j2cpp {

namespace java { namespace io {

	class OutputStream;
	class OutputStream
		: public cpp_object<OutputStream>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)

		explicit OutputStream(jobject jobj)
		: cpp_object<OutputStream>(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;
		operator local_ref<java::io::Closeable>() const;
		operator local_ref<java::io::Flushable>() const;


		OutputStream();
		void close();
		void flush();
		void write(local_ref< cpp_byte_array<1> > const&);
		void write(local_ref< cpp_byte_array<1> > const&, cpp_int const&, cpp_int const&);
		void write(cpp_int const&);
	}; //class OutputStream

} //namespace io
} //namespace java

} //namespace j2cpp

#endif //J2CPP_JAVA_IO_OUTPUTSTREAM_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_IO_OUTPUTSTREAM_HPP_IMPL
#define J2CPP_JAVA_IO_OUTPUTSTREAM_HPP_IMPL

namespace j2cpp {



java::io::OutputStream::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jtype());
}

java::io::OutputStream::operator local_ref<java::io::Closeable>() const
{
	return local_ref<java::io::Closeable>(get_jtype());
}

java::io::OutputStream::operator local_ref<java::io::Flushable>() const
{
	return local_ref<java::io::Flushable>(get_jtype());
}


java::io::OutputStream::OutputStream()
: cpp_object<java::io::OutputStream>(
	environment::get().get_jenv()->NewObject(
		get_class<java::io::OutputStream::J2CPP_CLASS_NAME>(),
		get_method_id<java::io::OutputStream::J2CPP_CLASS_NAME, java::io::OutputStream::J2CPP_METHOD_NAME(0), java::io::OutputStream::J2CPP_METHOD_SIGNATURE(0), false>()
	)
)
{
}


void java::io::OutputStream::close()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), false>()
		)
	);
}

void java::io::OutputStream::flush()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>()
		)
	);
}

void java::io::OutputStream::write(local_ref< cpp_byte_array<1> > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>(),
			a0.get_jtype()
		)
	);
}

void java::io::OutputStream::write(local_ref< cpp_byte_array<1> > const &a0, cpp_int const &a1, cpp_int const &a2)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

void java::io::OutputStream::write(cpp_int const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>(),
			a0.get_jtype()
		)
	);
}


J2CPP_DEFINE_CLASS(java::io::OutputStream,"java/io/OutputStream")
J2CPP_DEFINE_METHOD(java::io::OutputStream,0,"<init>","()V")
J2CPP_DEFINE_METHOD(java::io::OutputStream,1,"close","()V")
J2CPP_DEFINE_METHOD(java::io::OutputStream,2,"flush","()V")
J2CPP_DEFINE_METHOD(java::io::OutputStream,3,"write","([B)V")
J2CPP_DEFINE_METHOD(java::io::OutputStream,4,"write","([BII)V")
J2CPP_DEFINE_METHOD(java::io::OutputStream,5,"write","(I)V")

} //namespace j2cpp

#endif //J2CPP_JAVA_IO_OUTPUTSTREAM_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
