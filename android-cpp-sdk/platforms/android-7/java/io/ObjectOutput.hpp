/*================================================================================
  code generated by: java2cpp
  class: java.io.ObjectOutput
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_IO_OBJECTOUTPUT_HPP_DECL
#define J2CPP_JAVA_IO_OBJECTOUTPUT_HPP_DECL


namespace j2cpp { namespace java { namespace io { class DataOutput; } } }
namespace j2cpp { namespace java { namespace lang { class Object; } } }


#include <java/io/DataOutput.hpp>
#include <java/lang/Object.hpp>


namespace j2cpp {

namespace java { namespace io {

	class ObjectOutput;
	class ObjectOutput
		: public cpp_object<ObjectOutput>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)

		explicit ObjectOutput(jobject jobj)
		: cpp_object<ObjectOutput>(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;
		operator local_ref<java::io::DataOutput>() const;


		void close();
		void flush();
		void write(local_ref< cpp_byte_array<1> > const&);
		void write(local_ref< cpp_byte_array<1> > const&, cpp_int const&, cpp_int const&);
		void write(cpp_int const&);
		void writeObject(local_ref< java::lang::Object > const&);
	}; //class ObjectOutput

} //namespace io
} //namespace java

} //namespace j2cpp

#endif //J2CPP_JAVA_IO_OBJECTOUTPUT_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_IO_OBJECTOUTPUT_HPP_IMPL
#define J2CPP_JAVA_IO_OBJECTOUTPUT_HPP_IMPL

namespace j2cpp {



java::io::ObjectOutput::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jtype());
}

java::io::ObjectOutput::operator local_ref<java::io::DataOutput>() const
{
	return local_ref<java::io::DataOutput>(get_jtype());
}

void java::io::ObjectOutput::close()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(0), J2CPP_METHOD_SIGNATURE(0), false>()
		)
	);
}

void java::io::ObjectOutput::flush()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), false>()
		)
	);
}

void java::io::ObjectOutput::write(local_ref< cpp_byte_array<1> > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>(),
			a0.get_jtype()
		)
	);
}

void java::io::ObjectOutput::write(local_ref< cpp_byte_array<1> > const &a0, cpp_int const &a1, cpp_int const &a2)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

void java::io::ObjectOutput::write(cpp_int const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>(),
			a0.get_jtype()
		)
	);
}

void java::io::ObjectOutput::writeObject(local_ref< java::lang::Object > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>(),
			a0.get_jtype()
		)
	);
}


J2CPP_DEFINE_CLASS(java::io::ObjectOutput,"java/io/ObjectOutput")
J2CPP_DEFINE_METHOD(java::io::ObjectOutput,0,"close","()V")
J2CPP_DEFINE_METHOD(java::io::ObjectOutput,1,"flush","()V")
J2CPP_DEFINE_METHOD(java::io::ObjectOutput,2,"write","([B)V")
J2CPP_DEFINE_METHOD(java::io::ObjectOutput,3,"write","([BII)V")
J2CPP_DEFINE_METHOD(java::io::ObjectOutput,4,"write","(I)V")
J2CPP_DEFINE_METHOD(java::io::ObjectOutput,5,"writeObject","(Ljava/lang/Object;)V")

} //namespace j2cpp

#endif //J2CPP_JAVA_IO_OBJECTOUTPUT_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
