/*================================================================================
  code generated by: java2cpp
  class: java.lang.StackTraceElement
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_LANG_STACKTRACEELEMENT_HPP_DECL
#define J2CPP_JAVA_LANG_STACKTRACEELEMENT_HPP_DECL


namespace j2cpp { namespace java { namespace io { class Serializable; } } }
namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace lang { class String; } } }


#include <java/io/Serializable.hpp>
#include <java/lang/Object.hpp>
#include <java/lang/String.hpp>


namespace j2cpp {

namespace java { namespace lang {

	class StackTraceElement;
	class StackTraceElement
		: public cpp_object<StackTraceElement>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)

		explicit StackTraceElement(jobject jobj)
		: cpp_object<StackTraceElement>(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;
		operator local_ref<java::io::Serializable>() const;


		StackTraceElement(local_ref< java::lang::String > const&, local_ref< java::lang::String > const&, local_ref< java::lang::String > const&, cpp_int const&);
		cpp_boolean equals(local_ref< java::lang::Object > const&);
		local_ref< java::lang::String > getClassName();
		local_ref< java::lang::String > getFileName();
		cpp_int getLineNumber();
		local_ref< java::lang::String > getMethodName();
		cpp_int hashCode();
		cpp_boolean isNativeMethod();
		local_ref< java::lang::String > toString();
	}; //class StackTraceElement

} //namespace lang
} //namespace java

} //namespace j2cpp

#endif //J2CPP_JAVA_LANG_STACKTRACEELEMENT_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_LANG_STACKTRACEELEMENT_HPP_IMPL
#define J2CPP_JAVA_LANG_STACKTRACEELEMENT_HPP_IMPL

namespace j2cpp {



java::lang::StackTraceElement::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jtype());
}

java::lang::StackTraceElement::operator local_ref<java::io::Serializable>() const
{
	return local_ref<java::io::Serializable>(get_jtype());
}


java::lang::StackTraceElement::StackTraceElement(local_ref< java::lang::String > const &a0, local_ref< java::lang::String > const &a1, local_ref< java::lang::String > const &a2, cpp_int const &a3)
: cpp_object<java::lang::StackTraceElement>(
	environment::get().get_jenv()->NewObject(
		get_class<java::lang::StackTraceElement::J2CPP_CLASS_NAME>(),
		get_method_id<java::lang::StackTraceElement::J2CPP_CLASS_NAME, java::lang::StackTraceElement::J2CPP_METHOD_NAME(0), java::lang::StackTraceElement::J2CPP_METHOD_SIGNATURE(0), false>(),
		a0.get_jtype(), a1.get_jtype(), a2.get_jtype(), a3.get_jtype()
	)
)
{
}


cpp_boolean java::lang::StackTraceElement::equals(local_ref< java::lang::Object > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::String > java::lang::StackTraceElement::getClassName()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>()
		)
	);
}

local_ref< java::lang::String > java::lang::StackTraceElement::getFileName()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>()
		)
	);
}

cpp_int java::lang::StackTraceElement::getLineNumber()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>()
		)
	);
}

local_ref< java::lang::String > java::lang::StackTraceElement::getMethodName()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>()
		)
	);
}

cpp_int java::lang::StackTraceElement::hashCode()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>()
		)
	);
}

cpp_boolean java::lang::StackTraceElement::isNativeMethod()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(7), J2CPP_METHOD_SIGNATURE(7), false>()
		)
	);
}

local_ref< java::lang::String > java::lang::StackTraceElement::toString()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(8), J2CPP_METHOD_SIGNATURE(8), false>()
		)
	);
}


J2CPP_DEFINE_CLASS(java::lang::StackTraceElement,"java/lang/StackTraceElement")
J2CPP_DEFINE_METHOD(java::lang::StackTraceElement,0,"<init>","(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;I)V")
J2CPP_DEFINE_METHOD(java::lang::StackTraceElement,1,"equals","(Ljava/lang/Object;)Z")
J2CPP_DEFINE_METHOD(java::lang::StackTraceElement,2,"getClassName","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::lang::StackTraceElement,3,"getFileName","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::lang::StackTraceElement,4,"getLineNumber","()I")
J2CPP_DEFINE_METHOD(java::lang::StackTraceElement,5,"getMethodName","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::lang::StackTraceElement,6,"hashCode","()I")
J2CPP_DEFINE_METHOD(java::lang::StackTraceElement,7,"isNativeMethod","()Z")
J2CPP_DEFINE_METHOD(java::lang::StackTraceElement,8,"toString","()Ljava/lang/String;")

} //namespace j2cpp

#endif //J2CPP_JAVA_LANG_STACKTRACEELEMENT_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
