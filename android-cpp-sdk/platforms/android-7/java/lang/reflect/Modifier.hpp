/*================================================================================
  code generated by: java2cpp
  class: java.lang.reflect.Modifier
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_LANG_REFLECT_MODIFIER_HPP_DECL
#define J2CPP_JAVA_LANG_REFLECT_MODIFIER_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class String; } } }


#include <java/lang/String.hpp>


namespace j2cpp {

namespace java { namespace lang { namespace reflect {

	class Modifier;
	class Modifier
		: public cpp_object<Modifier>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_METHOD(12)
		J2CPP_DECLARE_METHOD(13)
		J2CPP_DECLARE_FIELD(0)
		J2CPP_DECLARE_FIELD(1)
		J2CPP_DECLARE_FIELD(2)
		J2CPP_DECLARE_FIELD(3)
		J2CPP_DECLARE_FIELD(4)
		J2CPP_DECLARE_FIELD(5)
		J2CPP_DECLARE_FIELD(6)
		J2CPP_DECLARE_FIELD(7)
		J2CPP_DECLARE_FIELD(8)
		J2CPP_DECLARE_FIELD(9)
		J2CPP_DECLARE_FIELD(10)
		J2CPP_DECLARE_FIELD(11)

		Modifier(jobject jobj)
		: cpp_object<Modifier>(jobj)
		{
		}

		static cpp_boolean isAbstract(cpp_int const&);
		static cpp_boolean isFinal(cpp_int const&);
		static cpp_boolean isInterface(cpp_int const&);
		static cpp_boolean isNative(cpp_int const&);
		static cpp_boolean isPrivate(cpp_int const&);
		static cpp_boolean isProtected(cpp_int const&);
		static cpp_boolean isPublic(cpp_int const&);
		static cpp_boolean isStatic(cpp_int const&);
		static cpp_boolean isStrict(cpp_int const&);
		static cpp_boolean isSynchronized(cpp_int const&);
		static cpp_boolean isTransient(cpp_int const&);
		static cpp_boolean isVolatile(cpp_int const&);
		static local_ref< java::lang::String > toString(cpp_int const&);

		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(0), J2CPP_FIELD_SIGNATURE(0), cpp_int > PUBLIC;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(1), J2CPP_FIELD_SIGNATURE(1), cpp_int > PRIVATE;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(2), J2CPP_FIELD_SIGNATURE(2), cpp_int > PROTECTED;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(3), J2CPP_FIELD_SIGNATURE(3), cpp_int > STATIC;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(4), J2CPP_FIELD_SIGNATURE(4), cpp_int > FINAL;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(5), J2CPP_FIELD_SIGNATURE(5), cpp_int > SYNCHRONIZED;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(6), J2CPP_FIELD_SIGNATURE(6), cpp_int > VOLATILE;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(7), J2CPP_FIELD_SIGNATURE(7), cpp_int > TRANSIENT;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(8), J2CPP_FIELD_SIGNATURE(8), cpp_int > NATIVE;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(9), J2CPP_FIELD_SIGNATURE(9), cpp_int > INTERFACE;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(10), J2CPP_FIELD_SIGNATURE(10), cpp_int > ABSTRACT;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(11), J2CPP_FIELD_SIGNATURE(11), cpp_int > STRICT;
	}; //class Modifier

} //namespace reflect
} //namespace lang
} //namespace java


} //namespace j2cpp

#endif //J2CPP_JAVA_LANG_REFLECT_MODIFIER_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_LANG_REFLECT_MODIFIER_HPP_IMPL
#define J2CPP_JAVA_LANG_REFLECT_MODIFIER_HPP_IMPL

namespace j2cpp {


template <>
local_ref< java::lang::reflect::Modifier > create< java::lang::reflect::Modifier>()
{
	return local_ref< java::lang::reflect::Modifier >(
		environment::get().get_jenv()->NewObject(
			get_class<java::lang::reflect::Modifier::J2CPP_CLASS_NAME>(),
			get_method_id<java::lang::reflect::Modifier::J2CPP_CLASS_NAME, java::lang::reflect::Modifier::J2CPP_METHOD_NAME(0), java::lang::reflect::Modifier::J2CPP_METHOD_SIGNATURE(0), false>()
		)
	);
}

cpp_boolean java::lang::reflect::Modifier::isAbstract(cpp_int const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallStaticBooleanMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), true>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean java::lang::reflect::Modifier::isFinal(cpp_int const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallStaticBooleanMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), true>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean java::lang::reflect::Modifier::isInterface(cpp_int const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallStaticBooleanMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), true>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean java::lang::reflect::Modifier::isNative(cpp_int const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallStaticBooleanMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), true>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean java::lang::reflect::Modifier::isPrivate(cpp_int const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallStaticBooleanMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), true>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean java::lang::reflect::Modifier::isProtected(cpp_int const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallStaticBooleanMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), true>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean java::lang::reflect::Modifier::isPublic(cpp_int const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallStaticBooleanMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(7), J2CPP_METHOD_SIGNATURE(7), true>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean java::lang::reflect::Modifier::isStatic(cpp_int const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallStaticBooleanMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(8), J2CPP_METHOD_SIGNATURE(8), true>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean java::lang::reflect::Modifier::isStrict(cpp_int const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallStaticBooleanMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(9), J2CPP_METHOD_SIGNATURE(9), true>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean java::lang::reflect::Modifier::isSynchronized(cpp_int const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallStaticBooleanMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(10), J2CPP_METHOD_SIGNATURE(10), true>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean java::lang::reflect::Modifier::isTransient(cpp_int const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallStaticBooleanMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(11), J2CPP_METHOD_SIGNATURE(11), true>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean java::lang::reflect::Modifier::isVolatile(cpp_int const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallStaticBooleanMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(12), J2CPP_METHOD_SIGNATURE(12), true>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::String > java::lang::reflect::Modifier::toString(cpp_int const &a0)
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(13), J2CPP_METHOD_SIGNATURE(13), true>(),
			a0.get_jtype()
		)
	);
}


static_field<
	java::lang::reflect::Modifier::J2CPP_CLASS_NAME,
	java::lang::reflect::Modifier::J2CPP_FIELD_NAME(0),
	java::lang::reflect::Modifier::J2CPP_FIELD_SIGNATURE(0),
	cpp_int
> java::lang::reflect::Modifier::PUBLIC;

static_field<
	java::lang::reflect::Modifier::J2CPP_CLASS_NAME,
	java::lang::reflect::Modifier::J2CPP_FIELD_NAME(1),
	java::lang::reflect::Modifier::J2CPP_FIELD_SIGNATURE(1),
	cpp_int
> java::lang::reflect::Modifier::PRIVATE;

static_field<
	java::lang::reflect::Modifier::J2CPP_CLASS_NAME,
	java::lang::reflect::Modifier::J2CPP_FIELD_NAME(2),
	java::lang::reflect::Modifier::J2CPP_FIELD_SIGNATURE(2),
	cpp_int
> java::lang::reflect::Modifier::PROTECTED;

static_field<
	java::lang::reflect::Modifier::J2CPP_CLASS_NAME,
	java::lang::reflect::Modifier::J2CPP_FIELD_NAME(3),
	java::lang::reflect::Modifier::J2CPP_FIELD_SIGNATURE(3),
	cpp_int
> java::lang::reflect::Modifier::STATIC;

static_field<
	java::lang::reflect::Modifier::J2CPP_CLASS_NAME,
	java::lang::reflect::Modifier::J2CPP_FIELD_NAME(4),
	java::lang::reflect::Modifier::J2CPP_FIELD_SIGNATURE(4),
	cpp_int
> java::lang::reflect::Modifier::FINAL;

static_field<
	java::lang::reflect::Modifier::J2CPP_CLASS_NAME,
	java::lang::reflect::Modifier::J2CPP_FIELD_NAME(5),
	java::lang::reflect::Modifier::J2CPP_FIELD_SIGNATURE(5),
	cpp_int
> java::lang::reflect::Modifier::SYNCHRONIZED;

static_field<
	java::lang::reflect::Modifier::J2CPP_CLASS_NAME,
	java::lang::reflect::Modifier::J2CPP_FIELD_NAME(6),
	java::lang::reflect::Modifier::J2CPP_FIELD_SIGNATURE(6),
	cpp_int
> java::lang::reflect::Modifier::VOLATILE;

static_field<
	java::lang::reflect::Modifier::J2CPP_CLASS_NAME,
	java::lang::reflect::Modifier::J2CPP_FIELD_NAME(7),
	java::lang::reflect::Modifier::J2CPP_FIELD_SIGNATURE(7),
	cpp_int
> java::lang::reflect::Modifier::TRANSIENT;

static_field<
	java::lang::reflect::Modifier::J2CPP_CLASS_NAME,
	java::lang::reflect::Modifier::J2CPP_FIELD_NAME(8),
	java::lang::reflect::Modifier::J2CPP_FIELD_SIGNATURE(8),
	cpp_int
> java::lang::reflect::Modifier::NATIVE;

static_field<
	java::lang::reflect::Modifier::J2CPP_CLASS_NAME,
	java::lang::reflect::Modifier::J2CPP_FIELD_NAME(9),
	java::lang::reflect::Modifier::J2CPP_FIELD_SIGNATURE(9),
	cpp_int
> java::lang::reflect::Modifier::INTERFACE;

static_field<
	java::lang::reflect::Modifier::J2CPP_CLASS_NAME,
	java::lang::reflect::Modifier::J2CPP_FIELD_NAME(10),
	java::lang::reflect::Modifier::J2CPP_FIELD_SIGNATURE(10),
	cpp_int
> java::lang::reflect::Modifier::ABSTRACT;

static_field<
	java::lang::reflect::Modifier::J2CPP_CLASS_NAME,
	java::lang::reflect::Modifier::J2CPP_FIELD_NAME(11),
	java::lang::reflect::Modifier::J2CPP_FIELD_SIGNATURE(11),
	cpp_int
> java::lang::reflect::Modifier::STRICT;


J2CPP_DEFINE_CLASS(java::lang::reflect::Modifier,"java/lang/reflect/Modifier")
J2CPP_DEFINE_METHOD(java::lang::reflect::Modifier,0,"<init>","()V")
J2CPP_DEFINE_METHOD(java::lang::reflect::Modifier,1,"isAbstract","(I)Z")
J2CPP_DEFINE_METHOD(java::lang::reflect::Modifier,2,"isFinal","(I)Z")
J2CPP_DEFINE_METHOD(java::lang::reflect::Modifier,3,"isInterface","(I)Z")
J2CPP_DEFINE_METHOD(java::lang::reflect::Modifier,4,"isNative","(I)Z")
J2CPP_DEFINE_METHOD(java::lang::reflect::Modifier,5,"isPrivate","(I)Z")
J2CPP_DEFINE_METHOD(java::lang::reflect::Modifier,6,"isProtected","(I)Z")
J2CPP_DEFINE_METHOD(java::lang::reflect::Modifier,7,"isPublic","(I)Z")
J2CPP_DEFINE_METHOD(java::lang::reflect::Modifier,8,"isStatic","(I)Z")
J2CPP_DEFINE_METHOD(java::lang::reflect::Modifier,9,"isStrict","(I)Z")
J2CPP_DEFINE_METHOD(java::lang::reflect::Modifier,10,"isSynchronized","(I)Z")
J2CPP_DEFINE_METHOD(java::lang::reflect::Modifier,11,"isTransient","(I)Z")
J2CPP_DEFINE_METHOD(java::lang::reflect::Modifier,12,"isVolatile","(I)Z")
J2CPP_DEFINE_METHOD(java::lang::reflect::Modifier,13,"toString","(I)Ljava/lang/String;")
J2CPP_DEFINE_FIELD(java::lang::reflect::Modifier,0,"PUBLIC","I")
J2CPP_DEFINE_FIELD(java::lang::reflect::Modifier,1,"PRIVATE","I")
J2CPP_DEFINE_FIELD(java::lang::reflect::Modifier,2,"PROTECTED","I")
J2CPP_DEFINE_FIELD(java::lang::reflect::Modifier,3,"STATIC","I")
J2CPP_DEFINE_FIELD(java::lang::reflect::Modifier,4,"FINAL","I")
J2CPP_DEFINE_FIELD(java::lang::reflect::Modifier,5,"SYNCHRONIZED","I")
J2CPP_DEFINE_FIELD(java::lang::reflect::Modifier,6,"VOLATILE","I")
J2CPP_DEFINE_FIELD(java::lang::reflect::Modifier,7,"TRANSIENT","I")
J2CPP_DEFINE_FIELD(java::lang::reflect::Modifier,8,"NATIVE","I")
J2CPP_DEFINE_FIELD(java::lang::reflect::Modifier,9,"INTERFACE","I")
J2CPP_DEFINE_FIELD(java::lang::reflect::Modifier,10,"ABSTRACT","I")
J2CPP_DEFINE_FIELD(java::lang::reflect::Modifier,11,"STRICT","I")

} //namespace j2cpp

#endif //J2CPP_JAVA_LANG_REFLECT_MODIFIER_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
