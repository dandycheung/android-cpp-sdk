/*================================================================================
  code generated by: java2cpp
  class: java.lang.AssertionError
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_LANG_ASSERTIONERROR_HPP_DECL
#define J2CPP_JAVA_LANG_ASSERTIONERROR_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class Object; } } }


#include <java/lang/Object.hpp>


namespace j2cpp {

namespace java { namespace lang {

	class AssertionError;
	class AssertionError
		: public cpp_object<AssertionError>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)

		AssertionError(jobject jobj)
		: cpp_object<AssertionError>(jobj)
		{
		}

	}; //class AssertionError

} //namespace lang
} //namespace java


} //namespace j2cpp

#endif //J2CPP_JAVA_LANG_ASSERTIONERROR_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_LANG_ASSERTIONERROR_HPP_IMPL
#define J2CPP_JAVA_LANG_ASSERTIONERROR_HPP_IMPL

namespace j2cpp {


template <>
local_ref< java::lang::AssertionError > create< java::lang::AssertionError>()
{
	return local_ref< java::lang::AssertionError >(
		environment::get().get_jenv()->NewObject(
			get_class<java::lang::AssertionError::J2CPP_CLASS_NAME>(),
			get_method_id<java::lang::AssertionError::J2CPP_CLASS_NAME, java::lang::AssertionError::J2CPP_METHOD_NAME(0), java::lang::AssertionError::J2CPP_METHOD_SIGNATURE(0), false>()
		)
	);
}

template <>
local_ref< java::lang::AssertionError > create< java::lang::AssertionError>(local_ref< java::lang::Object > const &a0)
{
	return local_ref< java::lang::AssertionError >(
		environment::get().get_jenv()->NewObject(
			get_class<java::lang::AssertionError::J2CPP_CLASS_NAME>(),
			get_method_id<java::lang::AssertionError::J2CPP_CLASS_NAME, java::lang::AssertionError::J2CPP_METHOD_NAME(1), java::lang::AssertionError::J2CPP_METHOD_SIGNATURE(1), false>(),
			a0.get_jtype()
		)
	);
}

template <>
local_ref< java::lang::AssertionError > create< java::lang::AssertionError>(cpp_boolean const &a0)
{
	return local_ref< java::lang::AssertionError >(
		environment::get().get_jenv()->NewObject(
			get_class<java::lang::AssertionError::J2CPP_CLASS_NAME>(),
			get_method_id<java::lang::AssertionError::J2CPP_CLASS_NAME, java::lang::AssertionError::J2CPP_METHOD_NAME(2), java::lang::AssertionError::J2CPP_METHOD_SIGNATURE(2), false>(),
			a0.get_jtype()
		)
	);
}

template <>
local_ref< java::lang::AssertionError > create< java::lang::AssertionError>(cpp_char const &a0)
{
	return local_ref< java::lang::AssertionError >(
		environment::get().get_jenv()->NewObject(
			get_class<java::lang::AssertionError::J2CPP_CLASS_NAME>(),
			get_method_id<java::lang::AssertionError::J2CPP_CLASS_NAME, java::lang::AssertionError::J2CPP_METHOD_NAME(3), java::lang::AssertionError::J2CPP_METHOD_SIGNATURE(3), false>(),
			a0.get_jtype()
		)
	);
}

template <>
local_ref< java::lang::AssertionError > create< java::lang::AssertionError>(cpp_int const &a0)
{
	return local_ref< java::lang::AssertionError >(
		environment::get().get_jenv()->NewObject(
			get_class<java::lang::AssertionError::J2CPP_CLASS_NAME>(),
			get_method_id<java::lang::AssertionError::J2CPP_CLASS_NAME, java::lang::AssertionError::J2CPP_METHOD_NAME(4), java::lang::AssertionError::J2CPP_METHOD_SIGNATURE(4), false>(),
			a0.get_jtype()
		)
	);
}

template <>
local_ref< java::lang::AssertionError > create< java::lang::AssertionError>(cpp_long const &a0)
{
	return local_ref< java::lang::AssertionError >(
		environment::get().get_jenv()->NewObject(
			get_class<java::lang::AssertionError::J2CPP_CLASS_NAME>(),
			get_method_id<java::lang::AssertionError::J2CPP_CLASS_NAME, java::lang::AssertionError::J2CPP_METHOD_NAME(5), java::lang::AssertionError::J2CPP_METHOD_SIGNATURE(5), false>(),
			a0.get_jtype()
		)
	);
}

template <>
local_ref< java::lang::AssertionError > create< java::lang::AssertionError>(cpp_float const &a0)
{
	return local_ref< java::lang::AssertionError >(
		environment::get().get_jenv()->NewObject(
			get_class<java::lang::AssertionError::J2CPP_CLASS_NAME>(),
			get_method_id<java::lang::AssertionError::J2CPP_CLASS_NAME, java::lang::AssertionError::J2CPP_METHOD_NAME(6), java::lang::AssertionError::J2CPP_METHOD_SIGNATURE(6), false>(),
			a0.get_jtype()
		)
	);
}

template <>
local_ref< java::lang::AssertionError > create< java::lang::AssertionError>(cpp_double const &a0)
{
	return local_ref< java::lang::AssertionError >(
		environment::get().get_jenv()->NewObject(
			get_class<java::lang::AssertionError::J2CPP_CLASS_NAME>(),
			get_method_id<java::lang::AssertionError::J2CPP_CLASS_NAME, java::lang::AssertionError::J2CPP_METHOD_NAME(7), java::lang::AssertionError::J2CPP_METHOD_SIGNATURE(7), false>(),
			a0.get_jtype()
		)
	);
}


J2CPP_DEFINE_CLASS(java::lang::AssertionError,"java/lang/AssertionError")
J2CPP_DEFINE_METHOD(java::lang::AssertionError,0,"<init>","()V")
J2CPP_DEFINE_METHOD(java::lang::AssertionError,1,"<init>","(Ljava/lang/Object;)V")
J2CPP_DEFINE_METHOD(java::lang::AssertionError,2,"<init>","(Z)V")
J2CPP_DEFINE_METHOD(java::lang::AssertionError,3,"<init>","(C)V")
J2CPP_DEFINE_METHOD(java::lang::AssertionError,4,"<init>","(I)V")
J2CPP_DEFINE_METHOD(java::lang::AssertionError,5,"<init>","(J)V")
J2CPP_DEFINE_METHOD(java::lang::AssertionError,6,"<init>","(F)V")
J2CPP_DEFINE_METHOD(java::lang::AssertionError,7,"<init>","(D)V")

} //namespace j2cpp

#endif //J2CPP_JAVA_LANG_ASSERTIONERROR_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
