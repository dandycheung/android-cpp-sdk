/*================================================================================
  code generated by: java2cpp
  class: java.lang.ref.ReferenceQueue
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_LANG_REF_REFERENCEQUEUE_HPP_DECL
#define J2CPP_JAVA_LANG_REF_REFERENCEQUEUE_HPP_DECL


namespace j2cpp { namespace java { namespace lang { namespace ref { class Reference; } } } }


#include <java/lang/ref/Reference.hpp>


namespace j2cpp {

namespace java { namespace lang { namespace ref {

	class ReferenceQueue;
	class ReferenceQueue
		: public cpp_object<ReferenceQueue>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)

		ReferenceQueue(jobject jobj)
		: cpp_object<ReferenceQueue>(jobj)
		{
		}

		local_ref< java::lang::ref::Reference > poll();
		local_ref< java::lang::ref::Reference > remove();
		local_ref< java::lang::ref::Reference > remove(cpp_long const&);
	}; //class ReferenceQueue

} //namespace ref
} //namespace lang
} //namespace java


} //namespace j2cpp

#endif //J2CPP_JAVA_LANG_REF_REFERENCEQUEUE_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_LANG_REF_REFERENCEQUEUE_HPP_IMPL
#define J2CPP_JAVA_LANG_REF_REFERENCEQUEUE_HPP_IMPL

namespace j2cpp {


template <>
local_ref< java::lang::ref::ReferenceQueue > create< java::lang::ref::ReferenceQueue>()
{
	return local_ref< java::lang::ref::ReferenceQueue >(
		environment::get().get_jenv()->NewObject(
			get_class<java::lang::ref::ReferenceQueue::J2CPP_CLASS_NAME>(),
			get_method_id<java::lang::ref::ReferenceQueue::J2CPP_CLASS_NAME, java::lang::ref::ReferenceQueue::J2CPP_METHOD_NAME(0), java::lang::ref::ReferenceQueue::J2CPP_METHOD_SIGNATURE(0), false>()
		)
	);
}

local_ref< java::lang::ref::Reference > java::lang::ref::ReferenceQueue::poll()
{
	return local_ref< java::lang::ref::Reference >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), false>()
		)
	);
}

local_ref< java::lang::ref::Reference > java::lang::ref::ReferenceQueue::remove()
{
	return local_ref< java::lang::ref::Reference >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>()
		)
	);
}

local_ref< java::lang::ref::Reference > java::lang::ref::ReferenceQueue::remove(cpp_long const &a0)
{
	return local_ref< java::lang::ref::Reference >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>(),
			a0.get_jtype()
		)
	);
}


J2CPP_DEFINE_CLASS(java::lang::ref::ReferenceQueue,"java/lang/ref/ReferenceQueue")
J2CPP_DEFINE_METHOD(java::lang::ref::ReferenceQueue,0,"<init>","()V")
J2CPP_DEFINE_METHOD(java::lang::ref::ReferenceQueue,1,"poll","()Ljava/lang/ref/Reference;")
J2CPP_DEFINE_METHOD(java::lang::ref::ReferenceQueue,2,"remove","()Ljava/lang/ref/Reference;")
J2CPP_DEFINE_METHOD(java::lang::ref::ReferenceQueue,3,"remove","(J)Ljava/lang/ref/Reference;")

} //namespace j2cpp

#endif //J2CPP_JAVA_LANG_REF_REFERENCEQUEUE_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
