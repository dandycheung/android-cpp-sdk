/*================================================================================
  code generated by: java2cpp
  class: java.lang.CharSequence
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_LANG_CHARSEQUENCE_HPP_DECL
#define J2CPP_JAVA_LANG_CHARSEQUENCE_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class String; } } }


#include <java/lang/String.hpp>


namespace j2cpp {

namespace java { namespace lang {

	class CharSequence;
	class CharSequence
		: public cpp_object<CharSequence>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)

		CharSequence(jobject jobj)
		: cpp_object<CharSequence>(jobj)
		{
		}

		cpp_int length();
		cpp_char charAt(cpp_int const&);
		local_ref< java::lang::CharSequence > subSequence(cpp_int const&, cpp_int const&);
		local_ref< java::lang::String > toString();
	}; //class CharSequence

} //namespace lang
} //namespace java


} //namespace j2cpp

#endif //J2CPP_JAVA_LANG_CHARSEQUENCE_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_LANG_CHARSEQUENCE_HPP_IMPL
#define J2CPP_JAVA_LANG_CHARSEQUENCE_HPP_IMPL

namespace j2cpp {


cpp_int java::lang::CharSequence::length()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(0), J2CPP_METHOD_SIGNATURE(0), false>()
		)
	);
}

cpp_char java::lang::CharSequence::charAt(cpp_int const &a0)
{
	return cpp_char(
		environment::get().get_jenv()->CallCharMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::CharSequence > java::lang::CharSequence::subSequence(cpp_int const &a0, cpp_int const &a1)
{
	return local_ref< java::lang::CharSequence >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< java::lang::String > java::lang::CharSequence::toString()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>()
		)
	);
}


J2CPP_DEFINE_CLASS(java::lang::CharSequence,"java/lang/CharSequence")
J2CPP_DEFINE_METHOD(java::lang::CharSequence,0,"length","()I")
J2CPP_DEFINE_METHOD(java::lang::CharSequence,1,"charAt","(I)C")
J2CPP_DEFINE_METHOD(java::lang::CharSequence,2,"subSequence","(II)Ljava/lang/CharSequence;")
J2CPP_DEFINE_METHOD(java::lang::CharSequence,3,"toString","()Ljava/lang/String;")

} //namespace j2cpp

#endif //J2CPP_JAVA_LANG_CHARSEQUENCE_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
