/*================================================================================
  code generated by: java2cpp
  class: java.lang.annotation.IncompleteAnnotationException
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_LANG_ANNOTATION_INCOMPLETEANNOTATIONEXCEPTION_HPP_DECL
#define J2CPP_JAVA_LANG_ANNOTATION_INCOMPLETEANNOTATIONEXCEPTION_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class Class; } } }
namespace j2cpp { namespace java { namespace lang { class String; } } }


#include <java/lang/Class.hpp>
#include <java/lang/String.hpp>


namespace j2cpp {

namespace java { namespace lang { namespace annotation {

	class IncompleteAnnotationException;
	class IncompleteAnnotationException
		: public cpp_object<IncompleteAnnotationException>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)

		IncompleteAnnotationException(jobject jobj)
		: cpp_object<IncompleteAnnotationException>(jobj)
		{
		}

		local_ref< java::lang::Class > annotationType();
		local_ref< java::lang::String > elementName();
	}; //class IncompleteAnnotationException

} //namespace annotation
} //namespace lang
} //namespace java


} //namespace j2cpp

#endif //J2CPP_JAVA_LANG_ANNOTATION_INCOMPLETEANNOTATIONEXCEPTION_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_LANG_ANNOTATION_INCOMPLETEANNOTATIONEXCEPTION_HPP_IMPL
#define J2CPP_JAVA_LANG_ANNOTATION_INCOMPLETEANNOTATIONEXCEPTION_HPP_IMPL

namespace j2cpp {


template <>
local_ref< java::lang::annotation::IncompleteAnnotationException > create< java::lang::annotation::IncompleteAnnotationException>(local_ref< java::lang::Class > const &a0, local_ref< java::lang::String > const &a1)
{
	return local_ref< java::lang::annotation::IncompleteAnnotationException >(
		environment::get().get_jenv()->NewObject(
			get_class<java::lang::annotation::IncompleteAnnotationException::J2CPP_CLASS_NAME>(),
			get_method_id<java::lang::annotation::IncompleteAnnotationException::J2CPP_CLASS_NAME, java::lang::annotation::IncompleteAnnotationException::J2CPP_METHOD_NAME(0), java::lang::annotation::IncompleteAnnotationException::J2CPP_METHOD_SIGNATURE(0), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< java::lang::Class > java::lang::annotation::IncompleteAnnotationException::annotationType()
{
	return local_ref< java::lang::Class >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), false>()
		)
	);
}

local_ref< java::lang::String > java::lang::annotation::IncompleteAnnotationException::elementName()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>()
		)
	);
}


J2CPP_DEFINE_CLASS(java::lang::annotation::IncompleteAnnotationException,"java/lang/annotation/IncompleteAnnotationException")
J2CPP_DEFINE_METHOD(java::lang::annotation::IncompleteAnnotationException,0,"<init>","(Ljava/lang/Class;Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(java::lang::annotation::IncompleteAnnotationException,1,"annotationType","()Ljava/lang/Class;")
J2CPP_DEFINE_METHOD(java::lang::annotation::IncompleteAnnotationException,2,"elementName","()Ljava/lang/String;")

} //namespace j2cpp

#endif //J2CPP_JAVA_LANG_ANNOTATION_INCOMPLETEANNOTATIONEXCEPTION_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
