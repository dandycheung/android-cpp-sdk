/*================================================================================
  code generated by: java2cpp
  class: java.lang.Integer
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_LANG_INTEGER_HPP_DECL
#define J2CPP_JAVA_LANG_INTEGER_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace lang { class Class; } } }
namespace j2cpp { namespace java { namespace lang { class Comparable; } } }
namespace j2cpp { namespace java { namespace lang { class Number; } } }
namespace j2cpp { namespace java { namespace lang { class String; } } }


#include <java/lang/Class.hpp>
#include <java/lang/Comparable.hpp>
#include <java/lang/Number.hpp>
#include <java/lang/Object.hpp>
#include <java/lang/String.hpp>


namespace j2cpp {

namespace java { namespace lang {

	class Integer;
	class Integer
		: public cpp_object<Integer>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_METHOD(12)
		J2CPP_DECLARE_METHOD(13)
		J2CPP_DECLARE_METHOD(14)
		J2CPP_DECLARE_METHOD(15)
		J2CPP_DECLARE_METHOD(16)
		J2CPP_DECLARE_METHOD(17)
		J2CPP_DECLARE_METHOD(18)
		J2CPP_DECLARE_METHOD(19)
		J2CPP_DECLARE_METHOD(20)
		J2CPP_DECLARE_METHOD(21)
		J2CPP_DECLARE_METHOD(22)
		J2CPP_DECLARE_METHOD(23)
		J2CPP_DECLARE_METHOD(24)
		J2CPP_DECLARE_METHOD(25)
		J2CPP_DECLARE_METHOD(26)
		J2CPP_DECLARE_METHOD(27)
		J2CPP_DECLARE_METHOD(28)
		J2CPP_DECLARE_METHOD(29)
		J2CPP_DECLARE_METHOD(30)
		J2CPP_DECLARE_METHOD(31)
		J2CPP_DECLARE_METHOD(32)
		J2CPP_DECLARE_METHOD(33)
		J2CPP_DECLARE_METHOD(34)
		J2CPP_DECLARE_METHOD(35)
		J2CPP_DECLARE_METHOD(36)
		J2CPP_DECLARE_METHOD(37)
		J2CPP_DECLARE_FIELD(0)
		J2CPP_DECLARE_FIELD(1)
		J2CPP_DECLARE_FIELD(2)
		J2CPP_DECLARE_FIELD(3)

		explicit Integer(jobject jobj)
		: cpp_object<Integer>(jobj)
		{
		}

		operator local_ref<java::lang::Number>() const;
		operator local_ref<java::lang::Comparable>() const;


		Integer(cpp_int const&);
		Integer(local_ref< java::lang::String > const&);
		cpp_byte byteValue();
		cpp_int compareTo(local_ref< java::lang::Integer > const&);
		static local_ref< java::lang::Integer > decode(local_ref< java::lang::String > const&);
		cpp_double doubleValue();
		cpp_boolean equals(local_ref< java::lang::Object > const&);
		cpp_float floatValue();
		static local_ref< java::lang::Integer > getInteger(local_ref< java::lang::String > const&);
		static local_ref< java::lang::Integer > getInteger(local_ref< java::lang::String > const&, cpp_int const&);
		static local_ref< java::lang::Integer > getInteger(local_ref< java::lang::String > const&, local_ref< java::lang::Integer > const&);
		cpp_int hashCode();
		cpp_int intValue();
		cpp_long longValue();
		static cpp_int parseInt(local_ref< java::lang::String > const&);
		static cpp_int parseInt(local_ref< java::lang::String > const&, cpp_int const&);
		cpp_short shortValue();
		static local_ref< java::lang::String > toBinaryString(cpp_int const&);
		static local_ref< java::lang::String > toHexString(cpp_int const&);
		static local_ref< java::lang::String > toOctalString(cpp_int const&);
		local_ref< java::lang::String > toString();
		static local_ref< java::lang::String > toString(cpp_int const&);
		static local_ref< java::lang::String > toString(cpp_int const&, cpp_int const&);
		static local_ref< java::lang::Integer > valueOf(local_ref< java::lang::String > const&);
		static local_ref< java::lang::Integer > valueOf(local_ref< java::lang::String > const&, cpp_int const&);
		static cpp_int highestOneBit(cpp_int const&);
		static cpp_int lowestOneBit(cpp_int const&);
		static cpp_int numberOfLeadingZeros(cpp_int const&);
		static cpp_int numberOfTrailingZeros(cpp_int const&);
		static cpp_int bitCount(cpp_int const&);
		static cpp_int rotateLeft(cpp_int const&, cpp_int const&);
		static cpp_int rotateRight(cpp_int const&, cpp_int const&);
		static cpp_int reverseBytes(cpp_int const&);
		static cpp_int reverse(cpp_int const&);
		static cpp_int signum(cpp_int const&);
		static local_ref< java::lang::Integer > valueOf(cpp_int const&);
		cpp_int compareTo(local_ref< java::lang::Object > const&);

		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(0), J2CPP_FIELD_SIGNATURE(0), cpp_int > MAX_VALUE;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(1), J2CPP_FIELD_SIGNATURE(1), cpp_int > MIN_VALUE;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(2), J2CPP_FIELD_SIGNATURE(2), cpp_int > SIZE;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(3), J2CPP_FIELD_SIGNATURE(3), local_ref< java::lang::Class > > TYPE;
	}; //class Integer

} //namespace lang
} //namespace java

} //namespace j2cpp

#endif //J2CPP_JAVA_LANG_INTEGER_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_LANG_INTEGER_HPP_IMPL
#define J2CPP_JAVA_LANG_INTEGER_HPP_IMPL

namespace j2cpp {



java::lang::Integer::operator local_ref<java::lang::Number>() const
{
	return local_ref<java::lang::Number>(get_jtype());
}

java::lang::Integer::operator local_ref<java::lang::Comparable>() const
{
	return local_ref<java::lang::Comparable>(get_jtype());
}


java::lang::Integer::Integer(cpp_int const &a0)
: cpp_object<java::lang::Integer>(
	environment::get().get_jenv()->NewObject(
		get_class<java::lang::Integer::J2CPP_CLASS_NAME>(),
		get_method_id<java::lang::Integer::J2CPP_CLASS_NAME, java::lang::Integer::J2CPP_METHOD_NAME(0), java::lang::Integer::J2CPP_METHOD_SIGNATURE(0), false>(),
		a0.get_jtype()
	)
)
{
}



java::lang::Integer::Integer(local_ref< java::lang::String > const &a0)
: cpp_object<java::lang::Integer>(
	environment::get().get_jenv()->NewObject(
		get_class<java::lang::Integer::J2CPP_CLASS_NAME>(),
		get_method_id<java::lang::Integer::J2CPP_CLASS_NAME, java::lang::Integer::J2CPP_METHOD_NAME(1), java::lang::Integer::J2CPP_METHOD_SIGNATURE(1), false>(),
		a0.get_jtype()
	)
)
{
}


cpp_byte java::lang::Integer::byteValue()
{
	return cpp_byte(
		environment::get().get_jenv()->CallByteMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>()
		)
	);
}

cpp_int java::lang::Integer::compareTo(local_ref< java::lang::Integer > const &a0)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::Integer > java::lang::Integer::decode(local_ref< java::lang::String > const &a0)
{
	return local_ref< java::lang::Integer >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), true>(),
			a0.get_jtype()
		)
	);
}

cpp_double java::lang::Integer::doubleValue()
{
	return cpp_double(
		environment::get().get_jenv()->CallDoubleMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>()
		)
	);
}

cpp_boolean java::lang::Integer::equals(local_ref< java::lang::Object > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>(),
			a0.get_jtype()
		)
	);
}

cpp_float java::lang::Integer::floatValue()
{
	return cpp_float(
		environment::get().get_jenv()->CallFloatMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(7), J2CPP_METHOD_SIGNATURE(7), false>()
		)
	);
}

local_ref< java::lang::Integer > java::lang::Integer::getInteger(local_ref< java::lang::String > const &a0)
{
	return local_ref< java::lang::Integer >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(8), J2CPP_METHOD_SIGNATURE(8), true>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::Integer > java::lang::Integer::getInteger(local_ref< java::lang::String > const &a0, cpp_int const &a1)
{
	return local_ref< java::lang::Integer >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(9), J2CPP_METHOD_SIGNATURE(9), true>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< java::lang::Integer > java::lang::Integer::getInteger(local_ref< java::lang::String > const &a0, local_ref< java::lang::Integer > const &a1)
{
	return local_ref< java::lang::Integer >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(10), J2CPP_METHOD_SIGNATURE(10), true>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_int java::lang::Integer::hashCode()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(11), J2CPP_METHOD_SIGNATURE(11), false>()
		)
	);
}

cpp_int java::lang::Integer::intValue()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(12), J2CPP_METHOD_SIGNATURE(12), false>()
		)
	);
}

cpp_long java::lang::Integer::longValue()
{
	return cpp_long(
		environment::get().get_jenv()->CallLongMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(13), J2CPP_METHOD_SIGNATURE(13), false>()
		)
	);
}

cpp_int java::lang::Integer::parseInt(local_ref< java::lang::String > const &a0)
{
	return cpp_int(
		environment::get().get_jenv()->CallStaticIntMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(14), J2CPP_METHOD_SIGNATURE(14), true>(),
			a0.get_jtype()
		)
	);
}

cpp_int java::lang::Integer::parseInt(local_ref< java::lang::String > const &a0, cpp_int const &a1)
{
	return cpp_int(
		environment::get().get_jenv()->CallStaticIntMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(15), J2CPP_METHOD_SIGNATURE(15), true>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_short java::lang::Integer::shortValue()
{
	return cpp_short(
		environment::get().get_jenv()->CallShortMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(16), J2CPP_METHOD_SIGNATURE(16), false>()
		)
	);
}

local_ref< java::lang::String > java::lang::Integer::toBinaryString(cpp_int const &a0)
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(17), J2CPP_METHOD_SIGNATURE(17), true>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::String > java::lang::Integer::toHexString(cpp_int const &a0)
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(18), J2CPP_METHOD_SIGNATURE(18), true>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::String > java::lang::Integer::toOctalString(cpp_int const &a0)
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(19), J2CPP_METHOD_SIGNATURE(19), true>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::String > java::lang::Integer::toString()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(20), J2CPP_METHOD_SIGNATURE(20), false>()
		)
	);
}

local_ref< java::lang::String > java::lang::Integer::toString(cpp_int const &a0)
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(21), J2CPP_METHOD_SIGNATURE(21), true>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::String > java::lang::Integer::toString(cpp_int const &a0, cpp_int const &a1)
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(22), J2CPP_METHOD_SIGNATURE(22), true>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< java::lang::Integer > java::lang::Integer::valueOf(local_ref< java::lang::String > const &a0)
{
	return local_ref< java::lang::Integer >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(23), J2CPP_METHOD_SIGNATURE(23), true>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::Integer > java::lang::Integer::valueOf(local_ref< java::lang::String > const &a0, cpp_int const &a1)
{
	return local_ref< java::lang::Integer >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(24), J2CPP_METHOD_SIGNATURE(24), true>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_int java::lang::Integer::highestOneBit(cpp_int const &a0)
{
	return cpp_int(
		environment::get().get_jenv()->CallStaticIntMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(25), J2CPP_METHOD_SIGNATURE(25), true>(),
			a0.get_jtype()
		)
	);
}

cpp_int java::lang::Integer::lowestOneBit(cpp_int const &a0)
{
	return cpp_int(
		environment::get().get_jenv()->CallStaticIntMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(26), J2CPP_METHOD_SIGNATURE(26), true>(),
			a0.get_jtype()
		)
	);
}

cpp_int java::lang::Integer::numberOfLeadingZeros(cpp_int const &a0)
{
	return cpp_int(
		environment::get().get_jenv()->CallStaticIntMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(27), J2CPP_METHOD_SIGNATURE(27), true>(),
			a0.get_jtype()
		)
	);
}

cpp_int java::lang::Integer::numberOfTrailingZeros(cpp_int const &a0)
{
	return cpp_int(
		environment::get().get_jenv()->CallStaticIntMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(28), J2CPP_METHOD_SIGNATURE(28), true>(),
			a0.get_jtype()
		)
	);
}

cpp_int java::lang::Integer::bitCount(cpp_int const &a0)
{
	return cpp_int(
		environment::get().get_jenv()->CallStaticIntMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(29), J2CPP_METHOD_SIGNATURE(29), true>(),
			a0.get_jtype()
		)
	);
}

cpp_int java::lang::Integer::rotateLeft(cpp_int const &a0, cpp_int const &a1)
{
	return cpp_int(
		environment::get().get_jenv()->CallStaticIntMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(30), J2CPP_METHOD_SIGNATURE(30), true>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_int java::lang::Integer::rotateRight(cpp_int const &a0, cpp_int const &a1)
{
	return cpp_int(
		environment::get().get_jenv()->CallStaticIntMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(31), J2CPP_METHOD_SIGNATURE(31), true>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_int java::lang::Integer::reverseBytes(cpp_int const &a0)
{
	return cpp_int(
		environment::get().get_jenv()->CallStaticIntMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(32), J2CPP_METHOD_SIGNATURE(32), true>(),
			a0.get_jtype()
		)
	);
}

cpp_int java::lang::Integer::reverse(cpp_int const &a0)
{
	return cpp_int(
		environment::get().get_jenv()->CallStaticIntMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(33), J2CPP_METHOD_SIGNATURE(33), true>(),
			a0.get_jtype()
		)
	);
}

cpp_int java::lang::Integer::signum(cpp_int const &a0)
{
	return cpp_int(
		environment::get().get_jenv()->CallStaticIntMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(34), J2CPP_METHOD_SIGNATURE(34), true>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::Integer > java::lang::Integer::valueOf(cpp_int const &a0)
{
	return local_ref< java::lang::Integer >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(35), J2CPP_METHOD_SIGNATURE(35), true>(),
			a0.get_jtype()
		)
	);
}

cpp_int java::lang::Integer::compareTo(local_ref< java::lang::Object > const &a0)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(36), J2CPP_METHOD_SIGNATURE(36), false>(),
			a0.get_jtype()
		)
	);
}



static_field<
	java::lang::Integer::J2CPP_CLASS_NAME,
	java::lang::Integer::J2CPP_FIELD_NAME(0),
	java::lang::Integer::J2CPP_FIELD_SIGNATURE(0),
	cpp_int
> java::lang::Integer::MAX_VALUE;

static_field<
	java::lang::Integer::J2CPP_CLASS_NAME,
	java::lang::Integer::J2CPP_FIELD_NAME(1),
	java::lang::Integer::J2CPP_FIELD_SIGNATURE(1),
	cpp_int
> java::lang::Integer::MIN_VALUE;

static_field<
	java::lang::Integer::J2CPP_CLASS_NAME,
	java::lang::Integer::J2CPP_FIELD_NAME(2),
	java::lang::Integer::J2CPP_FIELD_SIGNATURE(2),
	cpp_int
> java::lang::Integer::SIZE;

static_field<
	java::lang::Integer::J2CPP_CLASS_NAME,
	java::lang::Integer::J2CPP_FIELD_NAME(3),
	java::lang::Integer::J2CPP_FIELD_SIGNATURE(3),
	local_ref< java::lang::Class >
> java::lang::Integer::TYPE;


J2CPP_DEFINE_CLASS(java::lang::Integer,"java/lang/Integer")
J2CPP_DEFINE_METHOD(java::lang::Integer,0,"<init>","(I)V")
J2CPP_DEFINE_METHOD(java::lang::Integer,1,"<init>","(Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(java::lang::Integer,2,"byteValue","()B")
J2CPP_DEFINE_METHOD(java::lang::Integer,3,"compareTo","(Ljava/lang/Integer;)I")
J2CPP_DEFINE_METHOD(java::lang::Integer,4,"decode","(Ljava/lang/String;)Ljava/lang/Integer;")
J2CPP_DEFINE_METHOD(java::lang::Integer,5,"doubleValue","()D")
J2CPP_DEFINE_METHOD(java::lang::Integer,6,"equals","(Ljava/lang/Object;)Z")
J2CPP_DEFINE_METHOD(java::lang::Integer,7,"floatValue","()F")
J2CPP_DEFINE_METHOD(java::lang::Integer,8,"getInteger","(Ljava/lang/String;)Ljava/lang/Integer;")
J2CPP_DEFINE_METHOD(java::lang::Integer,9,"getInteger","(Ljava/lang/String;I)Ljava/lang/Integer;")
J2CPP_DEFINE_METHOD(java::lang::Integer,10,"getInteger","(Ljava/lang/String;Ljava/lang/Integer;)Ljava/lang/Integer;")
J2CPP_DEFINE_METHOD(java::lang::Integer,11,"hashCode","()I")
J2CPP_DEFINE_METHOD(java::lang::Integer,12,"intValue","()I")
J2CPP_DEFINE_METHOD(java::lang::Integer,13,"longValue","()J")
J2CPP_DEFINE_METHOD(java::lang::Integer,14,"parseInt","(Ljava/lang/String;)I")
J2CPP_DEFINE_METHOD(java::lang::Integer,15,"parseInt","(Ljava/lang/String;I)I")
J2CPP_DEFINE_METHOD(java::lang::Integer,16,"shortValue","()S")
J2CPP_DEFINE_METHOD(java::lang::Integer,17,"toBinaryString","(I)Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::lang::Integer,18,"toHexString","(I)Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::lang::Integer,19,"toOctalString","(I)Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::lang::Integer,20,"toString","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::lang::Integer,21,"toString","(I)Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::lang::Integer,22,"toString","(II)Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::lang::Integer,23,"valueOf","(Ljava/lang/String;)Ljava/lang/Integer;")
J2CPP_DEFINE_METHOD(java::lang::Integer,24,"valueOf","(Ljava/lang/String;I)Ljava/lang/Integer;")
J2CPP_DEFINE_METHOD(java::lang::Integer,25,"highestOneBit","(I)I")
J2CPP_DEFINE_METHOD(java::lang::Integer,26,"lowestOneBit","(I)I")
J2CPP_DEFINE_METHOD(java::lang::Integer,27,"numberOfLeadingZeros","(I)I")
J2CPP_DEFINE_METHOD(java::lang::Integer,28,"numberOfTrailingZeros","(I)I")
J2CPP_DEFINE_METHOD(java::lang::Integer,29,"bitCount","(I)I")
J2CPP_DEFINE_METHOD(java::lang::Integer,30,"rotateLeft","(II)I")
J2CPP_DEFINE_METHOD(java::lang::Integer,31,"rotateRight","(II)I")
J2CPP_DEFINE_METHOD(java::lang::Integer,32,"reverseBytes","(I)I")
J2CPP_DEFINE_METHOD(java::lang::Integer,33,"reverse","(I)I")
J2CPP_DEFINE_METHOD(java::lang::Integer,34,"signum","(I)I")
J2CPP_DEFINE_METHOD(java::lang::Integer,35,"valueOf","(I)Ljava/lang/Integer;")
J2CPP_DEFINE_METHOD(java::lang::Integer,36,"compareTo","(Ljava/lang/Object;)I")
J2CPP_DEFINE_METHOD(java::lang::Integer,37,"<clinit>","()V")
J2CPP_DEFINE_FIELD(java::lang::Integer,0,"MAX_VALUE","I")
J2CPP_DEFINE_FIELD(java::lang::Integer,1,"MIN_VALUE","I")
J2CPP_DEFINE_FIELD(java::lang::Integer,2,"SIZE","I")
J2CPP_DEFINE_FIELD(java::lang::Integer,3,"TYPE","Ljava/lang/Class;")

} //namespace j2cpp

#endif //J2CPP_JAVA_LANG_INTEGER_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
