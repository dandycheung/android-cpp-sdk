/*================================================================================
  code generated by: java2cpp
  class: java.lang.AbstractStringBuilder
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_LANG_ABSTRACTSTRINGBUILDER_HPP_DECL
#define J2CPP_JAVA_LANG_ABSTRACTSTRINGBUILDER_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace lang { class CharSequence; } } }
namespace j2cpp { namespace java { namespace lang { class String; } } }


#include <java/lang/CharSequence.hpp>
#include <java/lang/Object.hpp>
#include <java/lang/String.hpp>


namespace j2cpp {

namespace java { namespace lang {

	class AbstractStringBuilder;
	class AbstractStringBuilder
		: public cpp_object<AbstractStringBuilder>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_METHOD(12)
		J2CPP_DECLARE_METHOD(13)
		J2CPP_DECLARE_METHOD(14)
		J2CPP_DECLARE_METHOD(15)
		J2CPP_DECLARE_METHOD(16)
		J2CPP_DECLARE_METHOD(17)
		J2CPP_DECLARE_METHOD(18)
		J2CPP_DECLARE_METHOD(19)
		J2CPP_DECLARE_METHOD(20)

		explicit AbstractStringBuilder(jobject jobj)
		: cpp_object<AbstractStringBuilder>(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;


		cpp_int capacity();
		cpp_char charAt(cpp_int const&);
		void ensureCapacity(cpp_int const&);
		void getChars(cpp_int const&, cpp_int const&, local_ref< cpp_char_array<1> > const&, cpp_int const&);
		cpp_int length();
		void setCharAt(cpp_int const&, cpp_char const&);
		void setLength(cpp_int const&);
		local_ref< java::lang::String > substring(cpp_int const&);
		local_ref< java::lang::String > substring(cpp_int const&, cpp_int const&);
		local_ref< java::lang::String > toString();
		local_ref< java::lang::CharSequence > subSequence(cpp_int const&, cpp_int const&);
		cpp_int indexOf(local_ref< java::lang::String > const&);
		cpp_int indexOf(local_ref< java::lang::String > const&, cpp_int const&);
		cpp_int lastIndexOf(local_ref< java::lang::String > const&);
		cpp_int lastIndexOf(local_ref< java::lang::String > const&, cpp_int const&);
		void trimToSize();
		cpp_int codePointAt(cpp_int const&);
		cpp_int codePointBefore(cpp_int const&);
		cpp_int codePointCount(cpp_int const&, cpp_int const&);
		cpp_int offsetByCodePoints(cpp_int const&, cpp_int const&);
	}; //class AbstractStringBuilder

} //namespace lang
} //namespace java

} //namespace j2cpp

#endif //J2CPP_JAVA_LANG_ABSTRACTSTRINGBUILDER_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_LANG_ABSTRACTSTRINGBUILDER_HPP_IMPL
#define J2CPP_JAVA_LANG_ABSTRACTSTRINGBUILDER_HPP_IMPL

namespace j2cpp {



java::lang::AbstractStringBuilder::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jtype());
}


cpp_int java::lang::AbstractStringBuilder::capacity()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), false>()
		)
	);
}

cpp_char java::lang::AbstractStringBuilder::charAt(cpp_int const &a0)
{
	return cpp_char(
		environment::get().get_jenv()->CallCharMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>(),
			a0.get_jtype()
		)
	);
}

void java::lang::AbstractStringBuilder::ensureCapacity(cpp_int const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>(),
			a0.get_jtype()
		)
	);
}

void java::lang::AbstractStringBuilder::getChars(cpp_int const &a0, cpp_int const &a1, local_ref< cpp_char_array<1> > const &a2, cpp_int const &a3)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype(), a3.get_jtype()
		)
	);
}

cpp_int java::lang::AbstractStringBuilder::length()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>()
		)
	);
}

void java::lang::AbstractStringBuilder::setCharAt(cpp_int const &a0, cpp_char const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void java::lang::AbstractStringBuilder::setLength(cpp_int const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(7), J2CPP_METHOD_SIGNATURE(7), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::String > java::lang::AbstractStringBuilder::substring(cpp_int const &a0)
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(8), J2CPP_METHOD_SIGNATURE(8), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::String > java::lang::AbstractStringBuilder::substring(cpp_int const &a0, cpp_int const &a1)
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(9), J2CPP_METHOD_SIGNATURE(9), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< java::lang::String > java::lang::AbstractStringBuilder::toString()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(10), J2CPP_METHOD_SIGNATURE(10), false>()
		)
	);
}

local_ref< java::lang::CharSequence > java::lang::AbstractStringBuilder::subSequence(cpp_int const &a0, cpp_int const &a1)
{
	return local_ref< java::lang::CharSequence >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(11), J2CPP_METHOD_SIGNATURE(11), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_int java::lang::AbstractStringBuilder::indexOf(local_ref< java::lang::String > const &a0)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(12), J2CPP_METHOD_SIGNATURE(12), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int java::lang::AbstractStringBuilder::indexOf(local_ref< java::lang::String > const &a0, cpp_int const &a1)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(13), J2CPP_METHOD_SIGNATURE(13), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_int java::lang::AbstractStringBuilder::lastIndexOf(local_ref< java::lang::String > const &a0)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(14), J2CPP_METHOD_SIGNATURE(14), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int java::lang::AbstractStringBuilder::lastIndexOf(local_ref< java::lang::String > const &a0, cpp_int const &a1)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(15), J2CPP_METHOD_SIGNATURE(15), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void java::lang::AbstractStringBuilder::trimToSize()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(16), J2CPP_METHOD_SIGNATURE(16), false>()
		)
	);
}

cpp_int java::lang::AbstractStringBuilder::codePointAt(cpp_int const &a0)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(17), J2CPP_METHOD_SIGNATURE(17), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int java::lang::AbstractStringBuilder::codePointBefore(cpp_int const &a0)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(18), J2CPP_METHOD_SIGNATURE(18), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int java::lang::AbstractStringBuilder::codePointCount(cpp_int const &a0, cpp_int const &a1)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(19), J2CPP_METHOD_SIGNATURE(19), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_int java::lang::AbstractStringBuilder::offsetByCodePoints(cpp_int const &a0, cpp_int const &a1)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(20), J2CPP_METHOD_SIGNATURE(20), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}


J2CPP_DEFINE_CLASS(java::lang::AbstractStringBuilder,"java/lang/AbstractStringBuilder")
J2CPP_DEFINE_METHOD(java::lang::AbstractStringBuilder,0,"<init>","()V")
J2CPP_DEFINE_METHOD(java::lang::AbstractStringBuilder,1,"capacity","()I")
J2CPP_DEFINE_METHOD(java::lang::AbstractStringBuilder,2,"charAt","(I)C")
J2CPP_DEFINE_METHOD(java::lang::AbstractStringBuilder,3,"ensureCapacity","(I)V")
J2CPP_DEFINE_METHOD(java::lang::AbstractStringBuilder,4,"getChars","(II[CI)V")
J2CPP_DEFINE_METHOD(java::lang::AbstractStringBuilder,5,"length","()I")
J2CPP_DEFINE_METHOD(java::lang::AbstractStringBuilder,6,"setCharAt","(IC)V")
J2CPP_DEFINE_METHOD(java::lang::AbstractStringBuilder,7,"setLength","(I)V")
J2CPP_DEFINE_METHOD(java::lang::AbstractStringBuilder,8,"substring","(I)Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::lang::AbstractStringBuilder,9,"substring","(II)Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::lang::AbstractStringBuilder,10,"toString","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::lang::AbstractStringBuilder,11,"subSequence","(II)Ljava/lang/CharSequence;")
J2CPP_DEFINE_METHOD(java::lang::AbstractStringBuilder,12,"indexOf","(Ljava/lang/String;)I")
J2CPP_DEFINE_METHOD(java::lang::AbstractStringBuilder,13,"indexOf","(Ljava/lang/String;I)I")
J2CPP_DEFINE_METHOD(java::lang::AbstractStringBuilder,14,"lastIndexOf","(Ljava/lang/String;)I")
J2CPP_DEFINE_METHOD(java::lang::AbstractStringBuilder,15,"lastIndexOf","(Ljava/lang/String;I)I")
J2CPP_DEFINE_METHOD(java::lang::AbstractStringBuilder,16,"trimToSize","()V")
J2CPP_DEFINE_METHOD(java::lang::AbstractStringBuilder,17,"codePointAt","(I)I")
J2CPP_DEFINE_METHOD(java::lang::AbstractStringBuilder,18,"codePointBefore","(I)I")
J2CPP_DEFINE_METHOD(java::lang::AbstractStringBuilder,19,"codePointCount","(II)I")
J2CPP_DEFINE_METHOD(java::lang::AbstractStringBuilder,20,"offsetByCodePoints","(II)I")

} //namespace j2cpp

#endif //J2CPP_JAVA_LANG_ABSTRACTSTRINGBUILDER_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
