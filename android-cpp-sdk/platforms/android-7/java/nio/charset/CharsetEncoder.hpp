/*================================================================================
  code generated by: java2cpp
  class: java.nio.charset.CharsetEncoder
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_NIO_CHARSET_CHARSETENCODER_HPP_DECL
#define J2CPP_JAVA_NIO_CHARSET_CHARSETENCODER_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace lang { class CharSequence; } } }
namespace j2cpp { namespace java { namespace nio { class CharBuffer; } } }
namespace j2cpp { namespace java { namespace nio { class ByteBuffer; } } }
namespace j2cpp { namespace java { namespace nio { namespace charset { class CoderResult; } } } }
namespace j2cpp { namespace java { namespace nio { namespace charset { class Charset; } } } }
namespace j2cpp { namespace java { namespace nio { namespace charset { class CodingErrorAction; } } } }


#include <java/lang/CharSequence.hpp>
#include <java/lang/Object.hpp>
#include <java/nio/ByteBuffer.hpp>
#include <java/nio/CharBuffer.hpp>
#include <java/nio/charset/Charset.hpp>
#include <java/nio/charset/CoderResult.hpp>
#include <java/nio/charset/CodingErrorAction.hpp>


namespace j2cpp {

namespace java { namespace nio { namespace charset {

	class CharsetEncoder;
	class CharsetEncoder
		: public cpp_object<CharsetEncoder>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_METHOD(12)
		J2CPP_DECLARE_METHOD(13)
		J2CPP_DECLARE_METHOD(14)
		J2CPP_DECLARE_METHOD(15)
		J2CPP_DECLARE_METHOD(16)
		J2CPP_DECLARE_METHOD(17)
		J2CPP_DECLARE_METHOD(18)
		J2CPP_DECLARE_METHOD(19)
		J2CPP_DECLARE_METHOD(20)
		J2CPP_DECLARE_METHOD(21)
		J2CPP_DECLARE_METHOD(22)
		J2CPP_DECLARE_METHOD(23)

		explicit CharsetEncoder(jobject jobj)
		: cpp_object<CharsetEncoder>(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;


		cpp_float averageBytesPerChar();
		cpp_boolean canEncode(cpp_char const&);
		cpp_boolean canEncode(local_ref< java::lang::CharSequence > const&);
		local_ref< java::nio::charset::Charset > charset();
		local_ref< java::nio::ByteBuffer > encode(local_ref< java::nio::CharBuffer > const&);
		local_ref< java::nio::charset::CoderResult > encode(local_ref< java::nio::CharBuffer > const&, local_ref< java::nio::ByteBuffer > const&, cpp_boolean const&);
		local_ref< java::nio::charset::CoderResult > flush(local_ref< java::nio::ByteBuffer > const&);
		cpp_boolean isLegalReplacement(local_ref< cpp_byte_array<1> > const&);
		local_ref< java::nio::charset::CodingErrorAction > malformedInputAction();
		cpp_float maxBytesPerChar();
		local_ref< java::nio::charset::CharsetEncoder > onMalformedInput(local_ref< java::nio::charset::CodingErrorAction > const&);
		local_ref< java::nio::charset::CharsetEncoder > onUnmappableCharacter(local_ref< java::nio::charset::CodingErrorAction > const&);
		local_ref< cpp_byte_array<1> > replacement();
		local_ref< java::nio::charset::CharsetEncoder > replaceWith(local_ref< cpp_byte_array<1> > const&);
		local_ref< java::nio::charset::CharsetEncoder > reset();
		local_ref< java::nio::charset::CodingErrorAction > unmappableCharacterAction();
	}; //class CharsetEncoder

} //namespace charset
} //namespace nio
} //namespace java

} //namespace j2cpp

#endif //J2CPP_JAVA_NIO_CHARSET_CHARSETENCODER_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_NIO_CHARSET_CHARSETENCODER_HPP_IMPL
#define J2CPP_JAVA_NIO_CHARSET_CHARSETENCODER_HPP_IMPL

namespace j2cpp {



java::nio::charset::CharsetEncoder::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jtype());
}



cpp_float java::nio::charset::CharsetEncoder::averageBytesPerChar()
{
	return cpp_float(
		environment::get().get_jenv()->CallFloatMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>()
		)
	);
}

cpp_boolean java::nio::charset::CharsetEncoder::canEncode(cpp_char const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean java::nio::charset::CharsetEncoder::canEncode(local_ref< java::lang::CharSequence > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::nio::charset::Charset > java::nio::charset::CharsetEncoder::charset()
{
	return local_ref< java::nio::charset::Charset >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>()
		)
	);
}

local_ref< java::nio::ByteBuffer > java::nio::charset::CharsetEncoder::encode(local_ref< java::nio::CharBuffer > const &a0)
{
	return local_ref< java::nio::ByteBuffer >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::nio::charset::CoderResult > java::nio::charset::CharsetEncoder::encode(local_ref< java::nio::CharBuffer > const &a0, local_ref< java::nio::ByteBuffer > const &a1, cpp_boolean const &a2)
{
	return local_ref< java::nio::charset::CoderResult >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(7), J2CPP_METHOD_SIGNATURE(7), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}


local_ref< java::nio::charset::CoderResult > java::nio::charset::CharsetEncoder::flush(local_ref< java::nio::ByteBuffer > const &a0)
{
	return local_ref< java::nio::charset::CoderResult >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(9), J2CPP_METHOD_SIGNATURE(9), false>(),
			a0.get_jtype()
		)
	);
}






cpp_boolean java::nio::charset::CharsetEncoder::isLegalReplacement(local_ref< cpp_byte_array<1> > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(15), J2CPP_METHOD_SIGNATURE(15), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::nio::charset::CodingErrorAction > java::nio::charset::CharsetEncoder::malformedInputAction()
{
	return local_ref< java::nio::charset::CodingErrorAction >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(16), J2CPP_METHOD_SIGNATURE(16), false>()
		)
	);
}

cpp_float java::nio::charset::CharsetEncoder::maxBytesPerChar()
{
	return cpp_float(
		environment::get().get_jenv()->CallFloatMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(17), J2CPP_METHOD_SIGNATURE(17), false>()
		)
	);
}

local_ref< java::nio::charset::CharsetEncoder > java::nio::charset::CharsetEncoder::onMalformedInput(local_ref< java::nio::charset::CodingErrorAction > const &a0)
{
	return local_ref< java::nio::charset::CharsetEncoder >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(18), J2CPP_METHOD_SIGNATURE(18), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::nio::charset::CharsetEncoder > java::nio::charset::CharsetEncoder::onUnmappableCharacter(local_ref< java::nio::charset::CodingErrorAction > const &a0)
{
	return local_ref< java::nio::charset::CharsetEncoder >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(19), J2CPP_METHOD_SIGNATURE(19), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< cpp_byte_array<1> > java::nio::charset::CharsetEncoder::replacement()
{
	return local_ref< cpp_byte_array<1> >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(20), J2CPP_METHOD_SIGNATURE(20), false>()
		)
	);
}

local_ref< java::nio::charset::CharsetEncoder > java::nio::charset::CharsetEncoder::replaceWith(local_ref< cpp_byte_array<1> > const &a0)
{
	return local_ref< java::nio::charset::CharsetEncoder >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(21), J2CPP_METHOD_SIGNATURE(21), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::nio::charset::CharsetEncoder > java::nio::charset::CharsetEncoder::reset()
{
	return local_ref< java::nio::charset::CharsetEncoder >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(22), J2CPP_METHOD_SIGNATURE(22), false>()
		)
	);
}

local_ref< java::nio::charset::CodingErrorAction > java::nio::charset::CharsetEncoder::unmappableCharacterAction()
{
	return local_ref< java::nio::charset::CodingErrorAction >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(23), J2CPP_METHOD_SIGNATURE(23), false>()
		)
	);
}


J2CPP_DEFINE_CLASS(java::nio::charset::CharsetEncoder,"java/nio/charset/CharsetEncoder")
J2CPP_DEFINE_METHOD(java::nio::charset::CharsetEncoder,0,"<init>","(Ljava/nio/charset/Charset;FF)V")
J2CPP_DEFINE_METHOD(java::nio::charset::CharsetEncoder,1,"<init>","(Ljava/nio/charset/Charset;FF[B)V")
J2CPP_DEFINE_METHOD(java::nio::charset::CharsetEncoder,2,"averageBytesPerChar","()F")
J2CPP_DEFINE_METHOD(java::nio::charset::CharsetEncoder,3,"canEncode","(C)Z")
J2CPP_DEFINE_METHOD(java::nio::charset::CharsetEncoder,4,"canEncode","(Ljava/lang/CharSequence;)Z")
J2CPP_DEFINE_METHOD(java::nio::charset::CharsetEncoder,5,"charset","()Ljava/nio/charset/Charset;")
J2CPP_DEFINE_METHOD(java::nio::charset::CharsetEncoder,6,"encode","(Ljava/nio/CharBuffer;)Ljava/nio/ByteBuffer;")
J2CPP_DEFINE_METHOD(java::nio::charset::CharsetEncoder,7,"encode","(Ljava/nio/CharBuffer;Ljava/nio/ByteBuffer;Z)Ljava/nio/charset/CoderResult;")
J2CPP_DEFINE_METHOD(java::nio::charset::CharsetEncoder,8,"encodeLoop","(Ljava/nio/CharBuffer;Ljava/nio/ByteBuffer;)Ljava/nio/charset/CoderResult;")
J2CPP_DEFINE_METHOD(java::nio::charset::CharsetEncoder,9,"flush","(Ljava/nio/ByteBuffer;)Ljava/nio/charset/CoderResult;")
J2CPP_DEFINE_METHOD(java::nio::charset::CharsetEncoder,10,"implFlush","(Ljava/nio/ByteBuffer;)Ljava/nio/charset/CoderResult;")
J2CPP_DEFINE_METHOD(java::nio::charset::CharsetEncoder,11,"implOnMalformedInput","(Ljava/nio/charset/CodingErrorAction;)V")
J2CPP_DEFINE_METHOD(java::nio::charset::CharsetEncoder,12,"implOnUnmappableCharacter","(Ljava/nio/charset/CodingErrorAction;)V")
J2CPP_DEFINE_METHOD(java::nio::charset::CharsetEncoder,13,"implReplaceWith","([B)V")
J2CPP_DEFINE_METHOD(java::nio::charset::CharsetEncoder,14,"implReset","()V")
J2CPP_DEFINE_METHOD(java::nio::charset::CharsetEncoder,15,"isLegalReplacement","([B)Z")
J2CPP_DEFINE_METHOD(java::nio::charset::CharsetEncoder,16,"malformedInputAction","()Ljava/nio/charset/CodingErrorAction;")
J2CPP_DEFINE_METHOD(java::nio::charset::CharsetEncoder,17,"maxBytesPerChar","()F")
J2CPP_DEFINE_METHOD(java::nio::charset::CharsetEncoder,18,"onMalformedInput","(Ljava/nio/charset/CodingErrorAction;)Ljava/nio/charset/CharsetEncoder;")
J2CPP_DEFINE_METHOD(java::nio::charset::CharsetEncoder,19,"onUnmappableCharacter","(Ljava/nio/charset/CodingErrorAction;)Ljava/nio/charset/CharsetEncoder;")
J2CPP_DEFINE_METHOD(java::nio::charset::CharsetEncoder,20,"replacement","()[B")
J2CPP_DEFINE_METHOD(java::nio::charset::CharsetEncoder,21,"replaceWith","([B)Ljava/nio/charset/CharsetEncoder;")
J2CPP_DEFINE_METHOD(java::nio::charset::CharsetEncoder,22,"reset","()Ljava/nio/charset/CharsetEncoder;")
J2CPP_DEFINE_METHOD(java::nio::charset::CharsetEncoder,23,"unmappableCharacterAction","()Ljava/nio/charset/CodingErrorAction;")

} //namespace j2cpp

#endif //J2CPP_JAVA_NIO_CHARSET_CHARSETENCODER_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
