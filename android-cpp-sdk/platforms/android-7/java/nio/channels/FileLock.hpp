/*================================================================================
  code generated by: java2cpp
  class: java.nio.channels.FileLock
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_NIO_CHANNELS_FILELOCK_HPP_DECL
#define J2CPP_JAVA_NIO_CHANNELS_FILELOCK_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace nio { namespace channels { class FileChannel; } } } }


#include <java/lang/String.hpp>
#include <java/nio/channels/FileChannel.hpp>


namespace j2cpp {

namespace java { namespace nio { namespace channels {

	class FileLock;
	class FileLock
		: public cpp_object<FileLock>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)

		FileLock(jobject jobj)
		: cpp_object<FileLock>(jobj)
		{
		}

		local_ref< java::nio::channels::FileChannel > channel();
		cpp_long position();
		cpp_long size();
		cpp_boolean isShared();
		cpp_boolean overlaps(cpp_long const&, cpp_long const&);
		cpp_boolean isValid();
		void release();
		local_ref< java::lang::String > toString();
	}; //class FileLock

} //namespace channels
} //namespace nio
} //namespace java


} //namespace j2cpp

#endif //J2CPP_JAVA_NIO_CHANNELS_FILELOCK_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_NIO_CHANNELS_FILELOCK_HPP_IMPL
#define J2CPP_JAVA_NIO_CHANNELS_FILELOCK_HPP_IMPL

namespace j2cpp {


template <>
local_ref< java::nio::channels::FileLock > create< java::nio::channels::FileLock>(local_ref< java::nio::channels::FileChannel > const &a0, cpp_long const &a1, cpp_long const &a2, cpp_boolean const &a3)
{
	return local_ref< java::nio::channels::FileLock >(
		environment::get().get_jenv()->NewObject(
			get_class<java::nio::channels::FileLock::J2CPP_CLASS_NAME>(),
			get_method_id<java::nio::channels::FileLock::J2CPP_CLASS_NAME, java::nio::channels::FileLock::J2CPP_METHOD_NAME(0), java::nio::channels::FileLock::J2CPP_METHOD_SIGNATURE(0), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype(), a3.get_jtype()
		)
	);
}

local_ref< java::nio::channels::FileChannel > java::nio::channels::FileLock::channel()
{
	return local_ref< java::nio::channels::FileChannel >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), false>()
		)
	);
}

cpp_long java::nio::channels::FileLock::position()
{
	return cpp_long(
		environment::get().get_jenv()->CallLongMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>()
		)
	);
}

cpp_long java::nio::channels::FileLock::size()
{
	return cpp_long(
		environment::get().get_jenv()->CallLongMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>()
		)
	);
}

cpp_boolean java::nio::channels::FileLock::isShared()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>()
		)
	);
}

cpp_boolean java::nio::channels::FileLock::overlaps(cpp_long const &a0, cpp_long const &a1)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_boolean java::nio::channels::FileLock::isValid()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>()
		)
	);
}

void java::nio::channels::FileLock::release()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(7), J2CPP_METHOD_SIGNATURE(7), false>()
		)
	);
}

local_ref< java::lang::String > java::nio::channels::FileLock::toString()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(8), J2CPP_METHOD_SIGNATURE(8), false>()
		)
	);
}


J2CPP_DEFINE_CLASS(java::nio::channels::FileLock,"java/nio/channels/FileLock")
J2CPP_DEFINE_METHOD(java::nio::channels::FileLock,0,"<init>","(Ljava/nio/channels/FileChannel;JJZ)V")
J2CPP_DEFINE_METHOD(java::nio::channels::FileLock,1,"channel","()Ljava/nio/channels/FileChannel;")
J2CPP_DEFINE_METHOD(java::nio::channels::FileLock,2,"position","()J")
J2CPP_DEFINE_METHOD(java::nio::channels::FileLock,3,"size","()J")
J2CPP_DEFINE_METHOD(java::nio::channels::FileLock,4,"isShared","()Z")
J2CPP_DEFINE_METHOD(java::nio::channels::FileLock,5,"overlaps","(JJ)Z")
J2CPP_DEFINE_METHOD(java::nio::channels::FileLock,6,"isValid","()Z")
J2CPP_DEFINE_METHOD(java::nio::channels::FileLock,7,"release","()V")
J2CPP_DEFINE_METHOD(java::nio::channels::FileLock,8,"toString","()Ljava/lang/String;")

} //namespace j2cpp

#endif //J2CPP_JAVA_NIO_CHANNELS_FILELOCK_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
