/*================================================================================
  code generated by: java2cpp
  class: java.nio.channels.ScatteringByteChannel
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_NIO_CHANNELS_SCATTERINGBYTECHANNEL_HPP_DECL
#define J2CPP_JAVA_NIO_CHANNELS_SCATTERINGBYTECHANNEL_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace nio { namespace channels { class ReadableByteChannel; } } } }
namespace j2cpp { namespace java { namespace nio { class ByteBuffer; } } }


#include <java/lang/Object.hpp>
#include <java/nio/ByteBuffer.hpp>
#include <java/nio/channels/ReadableByteChannel.hpp>


namespace j2cpp {

namespace java { namespace nio { namespace channels {

	class ScatteringByteChannel;
	class ScatteringByteChannel
		: public cpp_object<ScatteringByteChannel>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)

		explicit ScatteringByteChannel(jobject jobj)
		: cpp_object<ScatteringByteChannel>(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;
		operator local_ref<java::nio::channels::ReadableByteChannel>() const;


		cpp_long read(local_ref< cpp_object_array<java::nio::ByteBuffer, 1> > const&);
		cpp_long read(local_ref< cpp_object_array<java::nio::ByteBuffer, 1> > const&, cpp_int const&, cpp_int const&);
	}; //class ScatteringByteChannel

} //namespace channels
} //namespace nio
} //namespace java

} //namespace j2cpp

#endif //J2CPP_JAVA_NIO_CHANNELS_SCATTERINGBYTECHANNEL_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_NIO_CHANNELS_SCATTERINGBYTECHANNEL_HPP_IMPL
#define J2CPP_JAVA_NIO_CHANNELS_SCATTERINGBYTECHANNEL_HPP_IMPL

namespace j2cpp {



java::nio::channels::ScatteringByteChannel::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jtype());
}

java::nio::channels::ScatteringByteChannel::operator local_ref<java::nio::channels::ReadableByteChannel>() const
{
	return local_ref<java::nio::channels::ReadableByteChannel>(get_jtype());
}

cpp_long java::nio::channels::ScatteringByteChannel::read(local_ref< cpp_object_array<java::nio::ByteBuffer, 1> > const &a0)
{
	return cpp_long(
		environment::get().get_jenv()->CallLongMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(0), J2CPP_METHOD_SIGNATURE(0), false>(),
			a0.get_jtype()
		)
	);
}

cpp_long java::nio::channels::ScatteringByteChannel::read(local_ref< cpp_object_array<java::nio::ByteBuffer, 1> > const &a0, cpp_int const &a1, cpp_int const &a2)
{
	return cpp_long(
		environment::get().get_jenv()->CallLongMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}


J2CPP_DEFINE_CLASS(java::nio::channels::ScatteringByteChannel,"java/nio/channels/ScatteringByteChannel")
J2CPP_DEFINE_METHOD(java::nio::channels::ScatteringByteChannel,0,"read","([java.nio.ByteBuffer)J")
J2CPP_DEFINE_METHOD(java::nio::channels::ScatteringByteChannel,1,"read","([java.nio.ByteBufferII)J")

} //namespace j2cpp

#endif //J2CPP_JAVA_NIO_CHANNELS_SCATTERINGBYTECHANNEL_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
