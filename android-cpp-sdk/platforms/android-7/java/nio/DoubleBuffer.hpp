/*================================================================================
  code generated by: java2cpp
  class: java.nio.DoubleBuffer
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_NIO_DOUBLEBUFFER_HPP_DECL
#define J2CPP_JAVA_NIO_DOUBLEBUFFER_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace lang { class Comparable; } } }
namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace nio { class Buffer; } } }
namespace j2cpp { namespace java { namespace nio { class ByteOrder; } } }


#include <java/lang/Comparable.hpp>
#include <java/lang/Object.hpp>
#include <java/lang/String.hpp>
#include <java/nio/Buffer.hpp>
#include <java/nio/ByteOrder.hpp>


namespace j2cpp {

namespace java { namespace nio {

	class DoubleBuffer;
	class DoubleBuffer
		: public cpp_object<DoubleBuffer>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_METHOD(12)
		J2CPP_DECLARE_METHOD(13)
		J2CPP_DECLARE_METHOD(14)
		J2CPP_DECLARE_METHOD(15)
		J2CPP_DECLARE_METHOD(16)
		J2CPP_DECLARE_METHOD(17)
		J2CPP_DECLARE_METHOD(18)
		J2CPP_DECLARE_METHOD(19)
		J2CPP_DECLARE_METHOD(20)
		J2CPP_DECLARE_METHOD(21)
		J2CPP_DECLARE_METHOD(22)
		J2CPP_DECLARE_METHOD(23)
		J2CPP_DECLARE_METHOD(24)
		J2CPP_DECLARE_METHOD(25)
		J2CPP_DECLARE_METHOD(26)

		explicit DoubleBuffer(jobject jobj)
		: cpp_object<DoubleBuffer>(jobj)
		{
		}

		operator local_ref<java::nio::Buffer>() const;
		operator local_ref<java::lang::Comparable>() const;


		static local_ref< java::nio::DoubleBuffer > allocate(cpp_int const&);
		static local_ref< java::nio::DoubleBuffer > wrap(local_ref< cpp_double_array<1> > const&);
		static local_ref< java::nio::DoubleBuffer > wrap(local_ref< cpp_double_array<1> > const&, cpp_int const&, cpp_int const&);
		local_ref< cpp_double_array<1> > array();
		cpp_int arrayOffset();
		local_ref< java::nio::DoubleBuffer > asReadOnlyBuffer();
		local_ref< java::nio::DoubleBuffer > compact();
		cpp_int compareTo(local_ref< java::nio::DoubleBuffer > const&);
		local_ref< java::nio::DoubleBuffer > duplicate();
		cpp_boolean equals(local_ref< java::lang::Object > const&);
		cpp_double get();
		local_ref< java::nio::DoubleBuffer > get(local_ref< cpp_double_array<1> > const&);
		local_ref< java::nio::DoubleBuffer > get(local_ref< cpp_double_array<1> > const&, cpp_int const&, cpp_int const&);
		cpp_double get(cpp_int const&);
		cpp_boolean hasArray();
		cpp_int hashCode();
		cpp_boolean isDirect();
		local_ref< java::nio::ByteOrder > order();
		local_ref< java::nio::DoubleBuffer > put(cpp_double const&);
		local_ref< java::nio::DoubleBuffer > put(local_ref< cpp_double_array<1> > const&);
		local_ref< java::nio::DoubleBuffer > put(local_ref< cpp_double_array<1> > const&, cpp_int const&, cpp_int const&);
		local_ref< java::nio::DoubleBuffer > put(local_ref< java::nio::DoubleBuffer > const&);
		local_ref< java::nio::DoubleBuffer > put(cpp_int const&, cpp_double const&);
		local_ref< java::nio::DoubleBuffer > slice();
		local_ref< java::lang::String > toString();
		cpp_int compareTo(local_ref< java::lang::Object > const&);
	}; //class DoubleBuffer

} //namespace nio
} //namespace java

} //namespace j2cpp

#endif //J2CPP_JAVA_NIO_DOUBLEBUFFER_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_NIO_DOUBLEBUFFER_HPP_IMPL
#define J2CPP_JAVA_NIO_DOUBLEBUFFER_HPP_IMPL

namespace j2cpp {



java::nio::DoubleBuffer::operator local_ref<java::nio::Buffer>() const
{
	return local_ref<java::nio::Buffer>(get_jtype());
}

java::nio::DoubleBuffer::operator local_ref<java::lang::Comparable>() const
{
	return local_ref<java::lang::Comparable>(get_jtype());
}


local_ref< java::nio::DoubleBuffer > java::nio::DoubleBuffer::allocate(cpp_int const &a0)
{
	return local_ref< java::nio::DoubleBuffer >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), true>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::nio::DoubleBuffer > java::nio::DoubleBuffer::wrap(local_ref< cpp_double_array<1> > const &a0)
{
	return local_ref< java::nio::DoubleBuffer >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), true>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::nio::DoubleBuffer > java::nio::DoubleBuffer::wrap(local_ref< cpp_double_array<1> > const &a0, cpp_int const &a1, cpp_int const &a2)
{
	return local_ref< java::nio::DoubleBuffer >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), true>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

local_ref< cpp_double_array<1> > java::nio::DoubleBuffer::array()
{
	return local_ref< cpp_double_array<1> >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>()
		)
	);
}

cpp_int java::nio::DoubleBuffer::arrayOffset()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>()
		)
	);
}

local_ref< java::nio::DoubleBuffer > java::nio::DoubleBuffer::asReadOnlyBuffer()
{
	return local_ref< java::nio::DoubleBuffer >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>()
		)
	);
}

local_ref< java::nio::DoubleBuffer > java::nio::DoubleBuffer::compact()
{
	return local_ref< java::nio::DoubleBuffer >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(7), J2CPP_METHOD_SIGNATURE(7), false>()
		)
	);
}

cpp_int java::nio::DoubleBuffer::compareTo(local_ref< java::nio::DoubleBuffer > const &a0)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(8), J2CPP_METHOD_SIGNATURE(8), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::nio::DoubleBuffer > java::nio::DoubleBuffer::duplicate()
{
	return local_ref< java::nio::DoubleBuffer >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(9), J2CPP_METHOD_SIGNATURE(9), false>()
		)
	);
}

cpp_boolean java::nio::DoubleBuffer::equals(local_ref< java::lang::Object > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(10), J2CPP_METHOD_SIGNATURE(10), false>(),
			a0.get_jtype()
		)
	);
}

cpp_double java::nio::DoubleBuffer::get()
{
	return cpp_double(
		environment::get().get_jenv()->CallDoubleMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(11), J2CPP_METHOD_SIGNATURE(11), false>()
		)
	);
}

local_ref< java::nio::DoubleBuffer > java::nio::DoubleBuffer::get(local_ref< cpp_double_array<1> > const &a0)
{
	return local_ref< java::nio::DoubleBuffer >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(12), J2CPP_METHOD_SIGNATURE(12), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::nio::DoubleBuffer > java::nio::DoubleBuffer::get(local_ref< cpp_double_array<1> > const &a0, cpp_int const &a1, cpp_int const &a2)
{
	return local_ref< java::nio::DoubleBuffer >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(13), J2CPP_METHOD_SIGNATURE(13), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

cpp_double java::nio::DoubleBuffer::get(cpp_int const &a0)
{
	return cpp_double(
		environment::get().get_jenv()->CallDoubleMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(14), J2CPP_METHOD_SIGNATURE(14), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean java::nio::DoubleBuffer::hasArray()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(15), J2CPP_METHOD_SIGNATURE(15), false>()
		)
	);
}

cpp_int java::nio::DoubleBuffer::hashCode()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(16), J2CPP_METHOD_SIGNATURE(16), false>()
		)
	);
}

cpp_boolean java::nio::DoubleBuffer::isDirect()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(17), J2CPP_METHOD_SIGNATURE(17), false>()
		)
	);
}

local_ref< java::nio::ByteOrder > java::nio::DoubleBuffer::order()
{
	return local_ref< java::nio::ByteOrder >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(18), J2CPP_METHOD_SIGNATURE(18), false>()
		)
	);
}

local_ref< java::nio::DoubleBuffer > java::nio::DoubleBuffer::put(cpp_double const &a0)
{
	return local_ref< java::nio::DoubleBuffer >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(19), J2CPP_METHOD_SIGNATURE(19), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::nio::DoubleBuffer > java::nio::DoubleBuffer::put(local_ref< cpp_double_array<1> > const &a0)
{
	return local_ref< java::nio::DoubleBuffer >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(20), J2CPP_METHOD_SIGNATURE(20), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::nio::DoubleBuffer > java::nio::DoubleBuffer::put(local_ref< cpp_double_array<1> > const &a0, cpp_int const &a1, cpp_int const &a2)
{
	return local_ref< java::nio::DoubleBuffer >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(21), J2CPP_METHOD_SIGNATURE(21), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

local_ref< java::nio::DoubleBuffer > java::nio::DoubleBuffer::put(local_ref< java::nio::DoubleBuffer > const &a0)
{
	return local_ref< java::nio::DoubleBuffer >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(22), J2CPP_METHOD_SIGNATURE(22), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::nio::DoubleBuffer > java::nio::DoubleBuffer::put(cpp_int const &a0, cpp_double const &a1)
{
	return local_ref< java::nio::DoubleBuffer >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(23), J2CPP_METHOD_SIGNATURE(23), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< java::nio::DoubleBuffer > java::nio::DoubleBuffer::slice()
{
	return local_ref< java::nio::DoubleBuffer >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(24), J2CPP_METHOD_SIGNATURE(24), false>()
		)
	);
}

local_ref< java::lang::String > java::nio::DoubleBuffer::toString()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(25), J2CPP_METHOD_SIGNATURE(25), false>()
		)
	);
}

cpp_int java::nio::DoubleBuffer::compareTo(local_ref< java::lang::Object > const &a0)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(26), J2CPP_METHOD_SIGNATURE(26), false>(),
			a0.get_jtype()
		)
	);
}


J2CPP_DEFINE_CLASS(java::nio::DoubleBuffer,"java/nio/DoubleBuffer")
J2CPP_DEFINE_METHOD(java::nio::DoubleBuffer,0,"<init>","()V")
J2CPP_DEFINE_METHOD(java::nio::DoubleBuffer,1,"allocate","(I)Ljava/nio/DoubleBuffer;")
J2CPP_DEFINE_METHOD(java::nio::DoubleBuffer,2,"wrap","([D)Ljava/nio/DoubleBuffer;")
J2CPP_DEFINE_METHOD(java::nio::DoubleBuffer,3,"wrap","([DII)Ljava/nio/DoubleBuffer;")
J2CPP_DEFINE_METHOD(java::nio::DoubleBuffer,4,"array","()[D")
J2CPP_DEFINE_METHOD(java::nio::DoubleBuffer,5,"arrayOffset","()I")
J2CPP_DEFINE_METHOD(java::nio::DoubleBuffer,6,"asReadOnlyBuffer","()Ljava/nio/DoubleBuffer;")
J2CPP_DEFINE_METHOD(java::nio::DoubleBuffer,7,"compact","()Ljava/nio/DoubleBuffer;")
J2CPP_DEFINE_METHOD(java::nio::DoubleBuffer,8,"compareTo","(Ljava/nio/DoubleBuffer;)I")
J2CPP_DEFINE_METHOD(java::nio::DoubleBuffer,9,"duplicate","()Ljava/nio/DoubleBuffer;")
J2CPP_DEFINE_METHOD(java::nio::DoubleBuffer,10,"equals","(Ljava/lang/Object;)Z")
J2CPP_DEFINE_METHOD(java::nio::DoubleBuffer,11,"get","()D")
J2CPP_DEFINE_METHOD(java::nio::DoubleBuffer,12,"get","([D)Ljava/nio/DoubleBuffer;")
J2CPP_DEFINE_METHOD(java::nio::DoubleBuffer,13,"get","([DII)Ljava/nio/DoubleBuffer;")
J2CPP_DEFINE_METHOD(java::nio::DoubleBuffer,14,"get","(I)D")
J2CPP_DEFINE_METHOD(java::nio::DoubleBuffer,15,"hasArray","()Z")
J2CPP_DEFINE_METHOD(java::nio::DoubleBuffer,16,"hashCode","()I")
J2CPP_DEFINE_METHOD(java::nio::DoubleBuffer,17,"isDirect","()Z")
J2CPP_DEFINE_METHOD(java::nio::DoubleBuffer,18,"order","()Ljava/nio/ByteOrder;")
J2CPP_DEFINE_METHOD(java::nio::DoubleBuffer,19,"put","(D)Ljava/nio/DoubleBuffer;")
J2CPP_DEFINE_METHOD(java::nio::DoubleBuffer,20,"put","([D)Ljava/nio/DoubleBuffer;")
J2CPP_DEFINE_METHOD(java::nio::DoubleBuffer,21,"put","([DII)Ljava/nio/DoubleBuffer;")
J2CPP_DEFINE_METHOD(java::nio::DoubleBuffer,22,"put","(Ljava/nio/DoubleBuffer;)Ljava/nio/DoubleBuffer;")
J2CPP_DEFINE_METHOD(java::nio::DoubleBuffer,23,"put","(ID)Ljava/nio/DoubleBuffer;")
J2CPP_DEFINE_METHOD(java::nio::DoubleBuffer,24,"slice","()Ljava/nio/DoubleBuffer;")
J2CPP_DEFINE_METHOD(java::nio::DoubleBuffer,25,"toString","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::nio::DoubleBuffer,26,"compareTo","(Ljava/lang/Object;)I")

} //namespace j2cpp

#endif //J2CPP_JAVA_NIO_DOUBLEBUFFER_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
