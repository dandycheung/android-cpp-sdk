/*================================================================================
  code generated by: java2cpp
  class: java.net.ServerSocket
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_NET_SERVERSOCKET_HPP_DECL
#define J2CPP_JAVA_NET_SERVERSOCKET_HPP_DECL


namespace j2cpp { namespace java { namespace net { class SocketImplFactory; } } }
namespace j2cpp { namespace java { namespace net { class SocketAddress; } } }
namespace j2cpp { namespace java { namespace net { class Socket; } } }
namespace j2cpp { namespace java { namespace net { class InetAddress; } } }
namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace nio { namespace channels { class ServerSocketChannel; } } } }


#include <java/lang/Object.hpp>
#include <java/lang/String.hpp>
#include <java/net/InetAddress.hpp>
#include <java/net/Socket.hpp>
#include <java/net/SocketAddress.hpp>
#include <java/net/SocketImplFactory.hpp>
#include <java/nio/channels/ServerSocketChannel.hpp>


namespace j2cpp {

namespace java { namespace net {

	class ServerSocket;
	class ServerSocket
		: public cpp_object<ServerSocket>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_METHOD(12)
		J2CPP_DECLARE_METHOD(13)
		J2CPP_DECLARE_METHOD(14)
		J2CPP_DECLARE_METHOD(15)
		J2CPP_DECLARE_METHOD(16)
		J2CPP_DECLARE_METHOD(17)
		J2CPP_DECLARE_METHOD(18)
		J2CPP_DECLARE_METHOD(19)
		J2CPP_DECLARE_METHOD(20)
		J2CPP_DECLARE_METHOD(21)
		J2CPP_DECLARE_METHOD(22)
		J2CPP_DECLARE_METHOD(23)

		explicit ServerSocket(jobject jobj)
		: cpp_object<ServerSocket>(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;


		ServerSocket();
		ServerSocket(cpp_int const&);
		ServerSocket(cpp_int const&, cpp_int const&);
		ServerSocket(cpp_int const&, cpp_int const&, local_ref< java::net::InetAddress > const&);
		local_ref< java::net::Socket > accept();
		void close();
		local_ref< java::net::InetAddress > getInetAddress();
		cpp_int getLocalPort();
		cpp_int getSoTimeout();
		static void setSocketFactory(local_ref< java::net::SocketImplFactory > const&);
		void setSoTimeout(cpp_int const&);
		local_ref< java::lang::String > toString();
		void bind(local_ref< java::net::SocketAddress > const&);
		void bind(local_ref< java::net::SocketAddress > const&, cpp_int const&);
		local_ref< java::net::SocketAddress > getLocalSocketAddress();
		cpp_boolean isBound();
		cpp_boolean isClosed();
		void setReuseAddress(cpp_boolean const&);
		cpp_boolean getReuseAddress();
		void setReceiveBufferSize(cpp_int const&);
		cpp_int getReceiveBufferSize();
		local_ref< java::nio::channels::ServerSocketChannel > getChannel();
		void setPerformancePreferences(cpp_int const&, cpp_int const&, cpp_int const&);
	}; //class ServerSocket

} //namespace net
} //namespace java

} //namespace j2cpp

#endif //J2CPP_JAVA_NET_SERVERSOCKET_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_NET_SERVERSOCKET_HPP_IMPL
#define J2CPP_JAVA_NET_SERVERSOCKET_HPP_IMPL

namespace j2cpp {



java::net::ServerSocket::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jtype());
}


java::net::ServerSocket::ServerSocket()
: cpp_object<java::net::ServerSocket>(
	environment::get().get_jenv()->NewObject(
		get_class<java::net::ServerSocket::J2CPP_CLASS_NAME>(),
		get_method_id<java::net::ServerSocket::J2CPP_CLASS_NAME, java::net::ServerSocket::J2CPP_METHOD_NAME(0), java::net::ServerSocket::J2CPP_METHOD_SIGNATURE(0), false>()
	)
)
{
}



java::net::ServerSocket::ServerSocket(cpp_int const &a0)
: cpp_object<java::net::ServerSocket>(
	environment::get().get_jenv()->NewObject(
		get_class<java::net::ServerSocket::J2CPP_CLASS_NAME>(),
		get_method_id<java::net::ServerSocket::J2CPP_CLASS_NAME, java::net::ServerSocket::J2CPP_METHOD_NAME(1), java::net::ServerSocket::J2CPP_METHOD_SIGNATURE(1), false>(),
		a0.get_jtype()
	)
)
{
}



java::net::ServerSocket::ServerSocket(cpp_int const &a0, cpp_int const &a1)
: cpp_object<java::net::ServerSocket>(
	environment::get().get_jenv()->NewObject(
		get_class<java::net::ServerSocket::J2CPP_CLASS_NAME>(),
		get_method_id<java::net::ServerSocket::J2CPP_CLASS_NAME, java::net::ServerSocket::J2CPP_METHOD_NAME(2), java::net::ServerSocket::J2CPP_METHOD_SIGNATURE(2), false>(),
		a0.get_jtype(), a1.get_jtype()
	)
)
{
}



java::net::ServerSocket::ServerSocket(cpp_int const &a0, cpp_int const &a1, local_ref< java::net::InetAddress > const &a2)
: cpp_object<java::net::ServerSocket>(
	environment::get().get_jenv()->NewObject(
		get_class<java::net::ServerSocket::J2CPP_CLASS_NAME>(),
		get_method_id<java::net::ServerSocket::J2CPP_CLASS_NAME, java::net::ServerSocket::J2CPP_METHOD_NAME(3), java::net::ServerSocket::J2CPP_METHOD_SIGNATURE(3), false>(),
		a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
	)
)
{
}


local_ref< java::net::Socket > java::net::ServerSocket::accept()
{
	return local_ref< java::net::Socket >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>()
		)
	);
}

void java::net::ServerSocket::close()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>()
		)
	);
}

local_ref< java::net::InetAddress > java::net::ServerSocket::getInetAddress()
{
	return local_ref< java::net::InetAddress >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>()
		)
	);
}

cpp_int java::net::ServerSocket::getLocalPort()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(7), J2CPP_METHOD_SIGNATURE(7), false>()
		)
	);
}

cpp_int java::net::ServerSocket::getSoTimeout()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(8), J2CPP_METHOD_SIGNATURE(8), false>()
		)
	);
}


void java::net::ServerSocket::setSocketFactory(local_ref< java::net::SocketImplFactory > const &a0)
{
	return void(
		environment::get().get_jenv()->CallStaticVoidMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(10), J2CPP_METHOD_SIGNATURE(10), true>(),
			a0.get_jtype()
		)
	);
}

void java::net::ServerSocket::setSoTimeout(cpp_int const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(11), J2CPP_METHOD_SIGNATURE(11), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::String > java::net::ServerSocket::toString()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(12), J2CPP_METHOD_SIGNATURE(12), false>()
		)
	);
}

void java::net::ServerSocket::bind(local_ref< java::net::SocketAddress > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(13), J2CPP_METHOD_SIGNATURE(13), false>(),
			a0.get_jtype()
		)
	);
}

void java::net::ServerSocket::bind(local_ref< java::net::SocketAddress > const &a0, cpp_int const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(14), J2CPP_METHOD_SIGNATURE(14), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< java::net::SocketAddress > java::net::ServerSocket::getLocalSocketAddress()
{
	return local_ref< java::net::SocketAddress >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(15), J2CPP_METHOD_SIGNATURE(15), false>()
		)
	);
}

cpp_boolean java::net::ServerSocket::isBound()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(16), J2CPP_METHOD_SIGNATURE(16), false>()
		)
	);
}

cpp_boolean java::net::ServerSocket::isClosed()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(17), J2CPP_METHOD_SIGNATURE(17), false>()
		)
	);
}

void java::net::ServerSocket::setReuseAddress(cpp_boolean const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(18), J2CPP_METHOD_SIGNATURE(18), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean java::net::ServerSocket::getReuseAddress()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(19), J2CPP_METHOD_SIGNATURE(19), false>()
		)
	);
}

void java::net::ServerSocket::setReceiveBufferSize(cpp_int const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(20), J2CPP_METHOD_SIGNATURE(20), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int java::net::ServerSocket::getReceiveBufferSize()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(21), J2CPP_METHOD_SIGNATURE(21), false>()
		)
	);
}

local_ref< java::nio::channels::ServerSocketChannel > java::net::ServerSocket::getChannel()
{
	return local_ref< java::nio::channels::ServerSocketChannel >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(22), J2CPP_METHOD_SIGNATURE(22), false>()
		)
	);
}

void java::net::ServerSocket::setPerformancePreferences(cpp_int const &a0, cpp_int const &a1, cpp_int const &a2)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(23), J2CPP_METHOD_SIGNATURE(23), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}


J2CPP_DEFINE_CLASS(java::net::ServerSocket,"java/net/ServerSocket")
J2CPP_DEFINE_METHOD(java::net::ServerSocket,0,"<init>","()V")
J2CPP_DEFINE_METHOD(java::net::ServerSocket,1,"<init>","(I)V")
J2CPP_DEFINE_METHOD(java::net::ServerSocket,2,"<init>","(II)V")
J2CPP_DEFINE_METHOD(java::net::ServerSocket,3,"<init>","(IILjava/net/InetAddress;)V")
J2CPP_DEFINE_METHOD(java::net::ServerSocket,4,"accept","()Ljava/net/Socket;")
J2CPP_DEFINE_METHOD(java::net::ServerSocket,5,"close","()V")
J2CPP_DEFINE_METHOD(java::net::ServerSocket,6,"getInetAddress","()Ljava/net/InetAddress;")
J2CPP_DEFINE_METHOD(java::net::ServerSocket,7,"getLocalPort","()I")
J2CPP_DEFINE_METHOD(java::net::ServerSocket,8,"getSoTimeout","()I")
J2CPP_DEFINE_METHOD(java::net::ServerSocket,9,"implAccept","(Ljava/net/Socket;)V")
J2CPP_DEFINE_METHOD(java::net::ServerSocket,10,"setSocketFactory","(Ljava/net/SocketImplFactory;)V")
J2CPP_DEFINE_METHOD(java::net::ServerSocket,11,"setSoTimeout","(I)V")
J2CPP_DEFINE_METHOD(java::net::ServerSocket,12,"toString","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::net::ServerSocket,13,"bind","(Ljava/net/SocketAddress;)V")
J2CPP_DEFINE_METHOD(java::net::ServerSocket,14,"bind","(Ljava/net/SocketAddress;I)V")
J2CPP_DEFINE_METHOD(java::net::ServerSocket,15,"getLocalSocketAddress","()Ljava/net/SocketAddress;")
J2CPP_DEFINE_METHOD(java::net::ServerSocket,16,"isBound","()Z")
J2CPP_DEFINE_METHOD(java::net::ServerSocket,17,"isClosed","()Z")
J2CPP_DEFINE_METHOD(java::net::ServerSocket,18,"setReuseAddress","(Z)V")
J2CPP_DEFINE_METHOD(java::net::ServerSocket,19,"getReuseAddress","()Z")
J2CPP_DEFINE_METHOD(java::net::ServerSocket,20,"setReceiveBufferSize","(I)V")
J2CPP_DEFINE_METHOD(java::net::ServerSocket,21,"getReceiveBufferSize","()I")
J2CPP_DEFINE_METHOD(java::net::ServerSocket,22,"getChannel","()Ljava/nio/channels/ServerSocketChannel;")
J2CPP_DEFINE_METHOD(java::net::ServerSocket,23,"setPerformancePreferences","(III)V")

} //namespace j2cpp

#endif //J2CPP_JAVA_NET_SERVERSOCKET_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
