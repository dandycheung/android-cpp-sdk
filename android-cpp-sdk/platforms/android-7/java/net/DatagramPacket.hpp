/*================================================================================
  code generated by: java2cpp
  class: java.net.DatagramPacket
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_NET_DATAGRAMPACKET_HPP_DECL
#define J2CPP_JAVA_NET_DATAGRAMPACKET_HPP_DECL


namespace j2cpp { namespace java { namespace net { class SocketAddress; } } }
namespace j2cpp { namespace java { namespace net { class InetAddress; } } }


#include <java/net/InetAddress.hpp>
#include <java/net/SocketAddress.hpp>


namespace j2cpp {

namespace java { namespace net {

	class DatagramPacket;
	class DatagramPacket
		: public cpp_object<DatagramPacket>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_METHOD(12)
		J2CPP_DECLARE_METHOD(13)
		J2CPP_DECLARE_METHOD(14)
		J2CPP_DECLARE_METHOD(15)
		J2CPP_DECLARE_METHOD(16)
		J2CPP_DECLARE_METHOD(17)

		DatagramPacket(jobject jobj)
		: cpp_object<DatagramPacket>(jobj)
		{
		}

		local_ref< java::net::InetAddress > getAddress();
		local_ref< cpp_byte_array<1> > getData();
		cpp_int getLength();
		cpp_int getOffset();
		cpp_int getPort();
		void setAddress(local_ref< java::net::InetAddress > const&);
		void setData(local_ref< cpp_byte_array<1> > const&, cpp_int const&, cpp_int const&);
		void setData(local_ref< cpp_byte_array<1> > const&);
		void setLength(cpp_int const&);
		void setPort(cpp_int const&);
		local_ref< java::net::SocketAddress > getSocketAddress();
		void setSocketAddress(local_ref< java::net::SocketAddress > const&);
	}; //class DatagramPacket

} //namespace net
} //namespace java


} //namespace j2cpp

#endif //J2CPP_JAVA_NET_DATAGRAMPACKET_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_NET_DATAGRAMPACKET_HPP_IMPL
#define J2CPP_JAVA_NET_DATAGRAMPACKET_HPP_IMPL

namespace j2cpp {


template <>
local_ref< java::net::DatagramPacket > create< java::net::DatagramPacket>(local_ref< cpp_byte_array<1> > const &a0, cpp_int const &a1)
{
	return local_ref< java::net::DatagramPacket >(
		environment::get().get_jenv()->NewObject(
			get_class<java::net::DatagramPacket::J2CPP_CLASS_NAME>(),
			get_method_id<java::net::DatagramPacket::J2CPP_CLASS_NAME, java::net::DatagramPacket::J2CPP_METHOD_NAME(0), java::net::DatagramPacket::J2CPP_METHOD_SIGNATURE(0), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

template <>
local_ref< java::net::DatagramPacket > create< java::net::DatagramPacket>(local_ref< cpp_byte_array<1> > const &a0, cpp_int const &a1, cpp_int const &a2)
{
	return local_ref< java::net::DatagramPacket >(
		environment::get().get_jenv()->NewObject(
			get_class<java::net::DatagramPacket::J2CPP_CLASS_NAME>(),
			get_method_id<java::net::DatagramPacket::J2CPP_CLASS_NAME, java::net::DatagramPacket::J2CPP_METHOD_NAME(1), java::net::DatagramPacket::J2CPP_METHOD_SIGNATURE(1), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

template <>
local_ref< java::net::DatagramPacket > create< java::net::DatagramPacket>(local_ref< cpp_byte_array<1> > const &a0, cpp_int const &a1, cpp_int const &a2, local_ref< java::net::InetAddress > const &a3, cpp_int const &a4)
{
	return local_ref< java::net::DatagramPacket >(
		environment::get().get_jenv()->NewObject(
			get_class<java::net::DatagramPacket::J2CPP_CLASS_NAME>(),
			get_method_id<java::net::DatagramPacket::J2CPP_CLASS_NAME, java::net::DatagramPacket::J2CPP_METHOD_NAME(2), java::net::DatagramPacket::J2CPP_METHOD_SIGNATURE(2), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype(), a3.get_jtype(), a4.get_jtype()
		)
	);
}

template <>
local_ref< java::net::DatagramPacket > create< java::net::DatagramPacket>(local_ref< cpp_byte_array<1> > const &a0, cpp_int const &a1, local_ref< java::net::InetAddress > const &a2, cpp_int const &a3)
{
	return local_ref< java::net::DatagramPacket >(
		environment::get().get_jenv()->NewObject(
			get_class<java::net::DatagramPacket::J2CPP_CLASS_NAME>(),
			get_method_id<java::net::DatagramPacket::J2CPP_CLASS_NAME, java::net::DatagramPacket::J2CPP_METHOD_NAME(3), java::net::DatagramPacket::J2CPP_METHOD_SIGNATURE(3), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype(), a3.get_jtype()
		)
	);
}

template <>
local_ref< java::net::DatagramPacket > create< java::net::DatagramPacket>(local_ref< cpp_byte_array<1> > const &a0, cpp_int const &a1, local_ref< java::net::SocketAddress > const &a2)
{
	return local_ref< java::net::DatagramPacket >(
		environment::get().get_jenv()->NewObject(
			get_class<java::net::DatagramPacket::J2CPP_CLASS_NAME>(),
			get_method_id<java::net::DatagramPacket::J2CPP_CLASS_NAME, java::net::DatagramPacket::J2CPP_METHOD_NAME(4), java::net::DatagramPacket::J2CPP_METHOD_SIGNATURE(4), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

template <>
local_ref< java::net::DatagramPacket > create< java::net::DatagramPacket>(local_ref< cpp_byte_array<1> > const &a0, cpp_int const &a1, cpp_int const &a2, local_ref< java::net::SocketAddress > const &a3)
{
	return local_ref< java::net::DatagramPacket >(
		environment::get().get_jenv()->NewObject(
			get_class<java::net::DatagramPacket::J2CPP_CLASS_NAME>(),
			get_method_id<java::net::DatagramPacket::J2CPP_CLASS_NAME, java::net::DatagramPacket::J2CPP_METHOD_NAME(5), java::net::DatagramPacket::J2CPP_METHOD_SIGNATURE(5), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype(), a3.get_jtype()
		)
	);
}

local_ref< java::net::InetAddress > java::net::DatagramPacket::getAddress()
{
	return local_ref< java::net::InetAddress >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>()
		)
	);
}

local_ref< cpp_byte_array<1> > java::net::DatagramPacket::getData()
{
	return local_ref< cpp_byte_array<1> >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(7), J2CPP_METHOD_SIGNATURE(7), false>()
		)
	);
}

cpp_int java::net::DatagramPacket::getLength()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(8), J2CPP_METHOD_SIGNATURE(8), false>()
		)
	);
}

cpp_int java::net::DatagramPacket::getOffset()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(9), J2CPP_METHOD_SIGNATURE(9), false>()
		)
	);
}

cpp_int java::net::DatagramPacket::getPort()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(10), J2CPP_METHOD_SIGNATURE(10), false>()
		)
	);
}

void java::net::DatagramPacket::setAddress(local_ref< java::net::InetAddress > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(11), J2CPP_METHOD_SIGNATURE(11), false>(),
			a0.get_jtype()
		)
	);
}

void java::net::DatagramPacket::setData(local_ref< cpp_byte_array<1> > const &a0, cpp_int const &a1, cpp_int const &a2)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(12), J2CPP_METHOD_SIGNATURE(12), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

void java::net::DatagramPacket::setData(local_ref< cpp_byte_array<1> > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(13), J2CPP_METHOD_SIGNATURE(13), false>(),
			a0.get_jtype()
		)
	);
}

void java::net::DatagramPacket::setLength(cpp_int const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(14), J2CPP_METHOD_SIGNATURE(14), false>(),
			a0.get_jtype()
		)
	);
}

void java::net::DatagramPacket::setPort(cpp_int const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(15), J2CPP_METHOD_SIGNATURE(15), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::net::SocketAddress > java::net::DatagramPacket::getSocketAddress()
{
	return local_ref< java::net::SocketAddress >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(16), J2CPP_METHOD_SIGNATURE(16), false>()
		)
	);
}

void java::net::DatagramPacket::setSocketAddress(local_ref< java::net::SocketAddress > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(17), J2CPP_METHOD_SIGNATURE(17), false>(),
			a0.get_jtype()
		)
	);
}


J2CPP_DEFINE_CLASS(java::net::DatagramPacket,"java/net/DatagramPacket")
J2CPP_DEFINE_METHOD(java::net::DatagramPacket,0,"<init>","([BI)V")
J2CPP_DEFINE_METHOD(java::net::DatagramPacket,1,"<init>","([BII)V")
J2CPP_DEFINE_METHOD(java::net::DatagramPacket,2,"<init>","([BIILjava/net/InetAddress;I)V")
J2CPP_DEFINE_METHOD(java::net::DatagramPacket,3,"<init>","([BILjava/net/InetAddress;I)V")
J2CPP_DEFINE_METHOD(java::net::DatagramPacket,4,"<init>","([BILjava/net/SocketAddress;)V")
J2CPP_DEFINE_METHOD(java::net::DatagramPacket,5,"<init>","([BIILjava/net/SocketAddress;)V")
J2CPP_DEFINE_METHOD(java::net::DatagramPacket,6,"getAddress","()Ljava/net/InetAddress;")
J2CPP_DEFINE_METHOD(java::net::DatagramPacket,7,"getData","()[B")
J2CPP_DEFINE_METHOD(java::net::DatagramPacket,8,"getLength","()I")
J2CPP_DEFINE_METHOD(java::net::DatagramPacket,9,"getOffset","()I")
J2CPP_DEFINE_METHOD(java::net::DatagramPacket,10,"getPort","()I")
J2CPP_DEFINE_METHOD(java::net::DatagramPacket,11,"setAddress","(Ljava/net/InetAddress;)V")
J2CPP_DEFINE_METHOD(java::net::DatagramPacket,12,"setData","([BII)V")
J2CPP_DEFINE_METHOD(java::net::DatagramPacket,13,"setData","([B)V")
J2CPP_DEFINE_METHOD(java::net::DatagramPacket,14,"setLength","(I)V")
J2CPP_DEFINE_METHOD(java::net::DatagramPacket,15,"setPort","(I)V")
J2CPP_DEFINE_METHOD(java::net::DatagramPacket,16,"getSocketAddress","()Ljava/net/SocketAddress;")
J2CPP_DEFINE_METHOD(java::net::DatagramPacket,17,"setSocketAddress","(Ljava/net/SocketAddress;)V")

} //namespace j2cpp

#endif //J2CPP_JAVA_NET_DATAGRAMPACKET_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
