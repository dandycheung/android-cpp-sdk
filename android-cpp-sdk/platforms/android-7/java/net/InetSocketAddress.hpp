/*================================================================================
  code generated by: java2cpp
  class: java.net.InetSocketAddress
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_NET_INETSOCKETADDRESS_HPP_DECL
#define J2CPP_JAVA_NET_INETSOCKETADDRESS_HPP_DECL


namespace j2cpp { namespace java { namespace net { class SocketAddress; } } }
namespace j2cpp { namespace java { namespace net { class InetAddress; } } }
namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace lang { class String; } } }


#include <java/lang/Object.hpp>
#include <java/lang/String.hpp>
#include <java/net/InetAddress.hpp>
#include <java/net/SocketAddress.hpp>


namespace j2cpp {

namespace java { namespace net {

	class InetSocketAddress;
	class InetSocketAddress
		: public cpp_object<InetSocketAddress>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)

		explicit InetSocketAddress(jobject jobj)
		: cpp_object<InetSocketAddress>(jobj)
		{
		}

		operator local_ref<java::net::SocketAddress>() const;


		InetSocketAddress(cpp_int const&);
		InetSocketAddress(local_ref< java::net::InetAddress > const&, cpp_int const&);
		InetSocketAddress(local_ref< java::lang::String > const&, cpp_int const&);
		static local_ref< java::net::InetSocketAddress > createUnresolved(local_ref< java::lang::String > const&, cpp_int const&);
		cpp_int getPort();
		local_ref< java::net::InetAddress > getAddress();
		local_ref< java::lang::String > getHostName();
		cpp_boolean isUnresolved();
		local_ref< java::lang::String > toString();
		cpp_boolean equals(local_ref< java::lang::Object > const&);
		cpp_int hashCode();
	}; //class InetSocketAddress

} //namespace net
} //namespace java

} //namespace j2cpp

#endif //J2CPP_JAVA_NET_INETSOCKETADDRESS_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_NET_INETSOCKETADDRESS_HPP_IMPL
#define J2CPP_JAVA_NET_INETSOCKETADDRESS_HPP_IMPL

namespace j2cpp {



java::net::InetSocketAddress::operator local_ref<java::net::SocketAddress>() const
{
	return local_ref<java::net::SocketAddress>(get_jtype());
}


java::net::InetSocketAddress::InetSocketAddress(cpp_int const &a0)
: cpp_object<java::net::InetSocketAddress>(
	environment::get().get_jenv()->NewObject(
		get_class<java::net::InetSocketAddress::J2CPP_CLASS_NAME>(),
		get_method_id<java::net::InetSocketAddress::J2CPP_CLASS_NAME, java::net::InetSocketAddress::J2CPP_METHOD_NAME(0), java::net::InetSocketAddress::J2CPP_METHOD_SIGNATURE(0), false>(),
		a0.get_jtype()
	)
)
{
}



java::net::InetSocketAddress::InetSocketAddress(local_ref< java::net::InetAddress > const &a0, cpp_int const &a1)
: cpp_object<java::net::InetSocketAddress>(
	environment::get().get_jenv()->NewObject(
		get_class<java::net::InetSocketAddress::J2CPP_CLASS_NAME>(),
		get_method_id<java::net::InetSocketAddress::J2CPP_CLASS_NAME, java::net::InetSocketAddress::J2CPP_METHOD_NAME(1), java::net::InetSocketAddress::J2CPP_METHOD_SIGNATURE(1), false>(),
		a0.get_jtype(), a1.get_jtype()
	)
)
{
}



java::net::InetSocketAddress::InetSocketAddress(local_ref< java::lang::String > const &a0, cpp_int const &a1)
: cpp_object<java::net::InetSocketAddress>(
	environment::get().get_jenv()->NewObject(
		get_class<java::net::InetSocketAddress::J2CPP_CLASS_NAME>(),
		get_method_id<java::net::InetSocketAddress::J2CPP_CLASS_NAME, java::net::InetSocketAddress::J2CPP_METHOD_NAME(2), java::net::InetSocketAddress::J2CPP_METHOD_SIGNATURE(2), false>(),
		a0.get_jtype(), a1.get_jtype()
	)
)
{
}


local_ref< java::net::InetSocketAddress > java::net::InetSocketAddress::createUnresolved(local_ref< java::lang::String > const &a0, cpp_int const &a1)
{
	return local_ref< java::net::InetSocketAddress >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), true>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_int java::net::InetSocketAddress::getPort()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>()
		)
	);
}

local_ref< java::net::InetAddress > java::net::InetSocketAddress::getAddress()
{
	return local_ref< java::net::InetAddress >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>()
		)
	);
}

local_ref< java::lang::String > java::net::InetSocketAddress::getHostName()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>()
		)
	);
}

cpp_boolean java::net::InetSocketAddress::isUnresolved()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(7), J2CPP_METHOD_SIGNATURE(7), false>()
		)
	);
}

local_ref< java::lang::String > java::net::InetSocketAddress::toString()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(8), J2CPP_METHOD_SIGNATURE(8), false>()
		)
	);
}

cpp_boolean java::net::InetSocketAddress::equals(local_ref< java::lang::Object > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(9), J2CPP_METHOD_SIGNATURE(9), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int java::net::InetSocketAddress::hashCode()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(10), J2CPP_METHOD_SIGNATURE(10), false>()
		)
	);
}


J2CPP_DEFINE_CLASS(java::net::InetSocketAddress,"java/net/InetSocketAddress")
J2CPP_DEFINE_METHOD(java::net::InetSocketAddress,0,"<init>","(I)V")
J2CPP_DEFINE_METHOD(java::net::InetSocketAddress,1,"<init>","(Ljava/net/InetAddress;I)V")
J2CPP_DEFINE_METHOD(java::net::InetSocketAddress,2,"<init>","(Ljava/lang/String;I)V")
J2CPP_DEFINE_METHOD(java::net::InetSocketAddress,3,"createUnresolved","(Ljava/lang/String;I)Ljava/net/InetSocketAddress;")
J2CPP_DEFINE_METHOD(java::net::InetSocketAddress,4,"getPort","()I")
J2CPP_DEFINE_METHOD(java::net::InetSocketAddress,5,"getAddress","()Ljava/net/InetAddress;")
J2CPP_DEFINE_METHOD(java::net::InetSocketAddress,6,"getHostName","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::net::InetSocketAddress,7,"isUnresolved","()Z")
J2CPP_DEFINE_METHOD(java::net::InetSocketAddress,8,"toString","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::net::InetSocketAddress,9,"equals","(Ljava/lang/Object;)Z")
J2CPP_DEFINE_METHOD(java::net::InetSocketAddress,10,"hashCode","()I")

} //namespace j2cpp

#endif //J2CPP_JAVA_NET_INETSOCKETADDRESS_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
