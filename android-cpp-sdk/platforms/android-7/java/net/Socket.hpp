/*================================================================================
  code generated by: java2cpp
  class: java.net.Socket
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_NET_SOCKET_HPP_DECL
#define J2CPP_JAVA_NET_SOCKET_HPP_DECL


namespace j2cpp { namespace java { namespace net { class SocketImplFactory; } } }
namespace j2cpp { namespace java { namespace net { class Proxy; } } }
namespace j2cpp { namespace java { namespace net { class SocketAddress; } } }
namespace j2cpp { namespace java { namespace net { class InetAddress; } } }
namespace j2cpp { namespace java { namespace io { class InputStream; } } }
namespace j2cpp { namespace java { namespace io { class OutputStream; } } }
namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace nio { namespace channels { class SocketChannel; } } } }


#include <java/io/InputStream.hpp>
#include <java/io/OutputStream.hpp>
#include <java/lang/Object.hpp>
#include <java/lang/String.hpp>
#include <java/net/InetAddress.hpp>
#include <java/net/Proxy.hpp>
#include <java/net/SocketAddress.hpp>
#include <java/net/SocketImplFactory.hpp>
#include <java/nio/channels/SocketChannel.hpp>


namespace j2cpp {

namespace java { namespace net {

	class Socket;
	class Socket
		: public cpp_object<Socket>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_METHOD(12)
		J2CPP_DECLARE_METHOD(13)
		J2CPP_DECLARE_METHOD(14)
		J2CPP_DECLARE_METHOD(15)
		J2CPP_DECLARE_METHOD(16)
		J2CPP_DECLARE_METHOD(17)
		J2CPP_DECLARE_METHOD(18)
		J2CPP_DECLARE_METHOD(19)
		J2CPP_DECLARE_METHOD(20)
		J2CPP_DECLARE_METHOD(21)
		J2CPP_DECLARE_METHOD(22)
		J2CPP_DECLARE_METHOD(23)
		J2CPP_DECLARE_METHOD(24)
		J2CPP_DECLARE_METHOD(25)
		J2CPP_DECLARE_METHOD(26)
		J2CPP_DECLARE_METHOD(27)
		J2CPP_DECLARE_METHOD(28)
		J2CPP_DECLARE_METHOD(29)
		J2CPP_DECLARE_METHOD(30)
		J2CPP_DECLARE_METHOD(31)
		J2CPP_DECLARE_METHOD(32)
		J2CPP_DECLARE_METHOD(33)
		J2CPP_DECLARE_METHOD(34)
		J2CPP_DECLARE_METHOD(35)
		J2CPP_DECLARE_METHOD(36)
		J2CPP_DECLARE_METHOD(37)
		J2CPP_DECLARE_METHOD(38)
		J2CPP_DECLARE_METHOD(39)
		J2CPP_DECLARE_METHOD(40)
		J2CPP_DECLARE_METHOD(41)
		J2CPP_DECLARE_METHOD(42)
		J2CPP_DECLARE_METHOD(43)
		J2CPP_DECLARE_METHOD(44)
		J2CPP_DECLARE_METHOD(45)
		J2CPP_DECLARE_METHOD(46)
		J2CPP_DECLARE_METHOD(47)
		J2CPP_DECLARE_METHOD(48)
		J2CPP_DECLARE_METHOD(49)
		J2CPP_DECLARE_METHOD(50)

		explicit Socket(jobject jobj)
		: cpp_object<Socket>(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;


		Socket();
		Socket(local_ref< java::net::Proxy > const&);
		Socket(local_ref< java::lang::String > const&, cpp_int const&);
		Socket(local_ref< java::lang::String > const&, cpp_int const&, local_ref< java::net::InetAddress > const&, cpp_int const&);
		Socket(local_ref< java::lang::String > const&, cpp_int const&, cpp_boolean const&);
		Socket(local_ref< java::net::InetAddress > const&, cpp_int const&);
		Socket(local_ref< java::net::InetAddress > const&, cpp_int const&, local_ref< java::net::InetAddress > const&, cpp_int const&);
		Socket(local_ref< java::net::InetAddress > const&, cpp_int const&, cpp_boolean const&);
		void close();
		local_ref< java::net::InetAddress > getInetAddress();
		local_ref< java::io::InputStream > getInputStream();
		cpp_boolean getKeepAlive();
		local_ref< java::net::InetAddress > getLocalAddress();
		cpp_int getLocalPort();
		local_ref< java::io::OutputStream > getOutputStream();
		cpp_int getPort();
		cpp_int getSoLinger();
		cpp_int getReceiveBufferSize();
		cpp_int getSendBufferSize();
		cpp_int getSoTimeout();
		cpp_boolean getTcpNoDelay();
		void setKeepAlive(cpp_boolean const&);
		static void setSocketImplFactory(local_ref< java::net::SocketImplFactory > const&);
		void setSendBufferSize(cpp_int const&);
		void setReceiveBufferSize(cpp_int const&);
		void setSoLinger(cpp_boolean const&, cpp_int const&);
		void setSoTimeout(cpp_int const&);
		void setTcpNoDelay(cpp_boolean const&);
		local_ref< java::lang::String > toString();
		void shutdownInput();
		void shutdownOutput();
		local_ref< java::net::SocketAddress > getLocalSocketAddress();
		local_ref< java::net::SocketAddress > getRemoteSocketAddress();
		cpp_boolean isBound();
		cpp_boolean isConnected();
		cpp_boolean isClosed();
		void bind(local_ref< java::net::SocketAddress > const&);
		void connect(local_ref< java::net::SocketAddress > const&);
		void connect(local_ref< java::net::SocketAddress > const&, cpp_int const&);
		cpp_boolean isInputShutdown();
		cpp_boolean isOutputShutdown();
		void setReuseAddress(cpp_boolean const&);
		cpp_boolean getReuseAddress();
		void setOOBInline(cpp_boolean const&);
		cpp_boolean getOOBInline();
		void setTrafficClass(cpp_int const&);
		cpp_int getTrafficClass();
		void sendUrgentData(cpp_int const&);
		local_ref< java::nio::channels::SocketChannel > getChannel();
		void setPerformancePreferences(cpp_int const&, cpp_int const&, cpp_int const&);
	}; //class Socket

} //namespace net
} //namespace java

} //namespace j2cpp

#endif //J2CPP_JAVA_NET_SOCKET_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_NET_SOCKET_HPP_IMPL
#define J2CPP_JAVA_NET_SOCKET_HPP_IMPL

namespace j2cpp {



java::net::Socket::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jtype());
}


java::net::Socket::Socket()
: cpp_object<java::net::Socket>(
	environment::get().get_jenv()->NewObject(
		get_class<java::net::Socket::J2CPP_CLASS_NAME>(),
		get_method_id<java::net::Socket::J2CPP_CLASS_NAME, java::net::Socket::J2CPP_METHOD_NAME(0), java::net::Socket::J2CPP_METHOD_SIGNATURE(0), false>()
	)
)
{
}



java::net::Socket::Socket(local_ref< java::net::Proxy > const &a0)
: cpp_object<java::net::Socket>(
	environment::get().get_jenv()->NewObject(
		get_class<java::net::Socket::J2CPP_CLASS_NAME>(),
		get_method_id<java::net::Socket::J2CPP_CLASS_NAME, java::net::Socket::J2CPP_METHOD_NAME(1), java::net::Socket::J2CPP_METHOD_SIGNATURE(1), false>(),
		a0.get_jtype()
	)
)
{
}



java::net::Socket::Socket(local_ref< java::lang::String > const &a0, cpp_int const &a1)
: cpp_object<java::net::Socket>(
	environment::get().get_jenv()->NewObject(
		get_class<java::net::Socket::J2CPP_CLASS_NAME>(),
		get_method_id<java::net::Socket::J2CPP_CLASS_NAME, java::net::Socket::J2CPP_METHOD_NAME(2), java::net::Socket::J2CPP_METHOD_SIGNATURE(2), false>(),
		a0.get_jtype(), a1.get_jtype()
	)
)
{
}



java::net::Socket::Socket(local_ref< java::lang::String > const &a0, cpp_int const &a1, local_ref< java::net::InetAddress > const &a2, cpp_int const &a3)
: cpp_object<java::net::Socket>(
	environment::get().get_jenv()->NewObject(
		get_class<java::net::Socket::J2CPP_CLASS_NAME>(),
		get_method_id<java::net::Socket::J2CPP_CLASS_NAME, java::net::Socket::J2CPP_METHOD_NAME(3), java::net::Socket::J2CPP_METHOD_SIGNATURE(3), false>(),
		a0.get_jtype(), a1.get_jtype(), a2.get_jtype(), a3.get_jtype()
	)
)
{
}



java::net::Socket::Socket(local_ref< java::lang::String > const &a0, cpp_int const &a1, cpp_boolean const &a2)
: cpp_object<java::net::Socket>(
	environment::get().get_jenv()->NewObject(
		get_class<java::net::Socket::J2CPP_CLASS_NAME>(),
		get_method_id<java::net::Socket::J2CPP_CLASS_NAME, java::net::Socket::J2CPP_METHOD_NAME(4), java::net::Socket::J2CPP_METHOD_SIGNATURE(4), false>(),
		a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
	)
)
{
}



java::net::Socket::Socket(local_ref< java::net::InetAddress > const &a0, cpp_int const &a1)
: cpp_object<java::net::Socket>(
	environment::get().get_jenv()->NewObject(
		get_class<java::net::Socket::J2CPP_CLASS_NAME>(),
		get_method_id<java::net::Socket::J2CPP_CLASS_NAME, java::net::Socket::J2CPP_METHOD_NAME(5), java::net::Socket::J2CPP_METHOD_SIGNATURE(5), false>(),
		a0.get_jtype(), a1.get_jtype()
	)
)
{
}



java::net::Socket::Socket(local_ref< java::net::InetAddress > const &a0, cpp_int const &a1, local_ref< java::net::InetAddress > const &a2, cpp_int const &a3)
: cpp_object<java::net::Socket>(
	environment::get().get_jenv()->NewObject(
		get_class<java::net::Socket::J2CPP_CLASS_NAME>(),
		get_method_id<java::net::Socket::J2CPP_CLASS_NAME, java::net::Socket::J2CPP_METHOD_NAME(6), java::net::Socket::J2CPP_METHOD_SIGNATURE(6), false>(),
		a0.get_jtype(), a1.get_jtype(), a2.get_jtype(), a3.get_jtype()
	)
)
{
}



java::net::Socket::Socket(local_ref< java::net::InetAddress > const &a0, cpp_int const &a1, cpp_boolean const &a2)
: cpp_object<java::net::Socket>(
	environment::get().get_jenv()->NewObject(
		get_class<java::net::Socket::J2CPP_CLASS_NAME>(),
		get_method_id<java::net::Socket::J2CPP_CLASS_NAME, java::net::Socket::J2CPP_METHOD_NAME(7), java::net::Socket::J2CPP_METHOD_SIGNATURE(7), false>(),
		a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
	)
)
{
}



void java::net::Socket::close()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(9), J2CPP_METHOD_SIGNATURE(9), false>()
		)
	);
}

local_ref< java::net::InetAddress > java::net::Socket::getInetAddress()
{
	return local_ref< java::net::InetAddress >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(10), J2CPP_METHOD_SIGNATURE(10), false>()
		)
	);
}

local_ref< java::io::InputStream > java::net::Socket::getInputStream()
{
	return local_ref< java::io::InputStream >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(11), J2CPP_METHOD_SIGNATURE(11), false>()
		)
	);
}

cpp_boolean java::net::Socket::getKeepAlive()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(12), J2CPP_METHOD_SIGNATURE(12), false>()
		)
	);
}

local_ref< java::net::InetAddress > java::net::Socket::getLocalAddress()
{
	return local_ref< java::net::InetAddress >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(13), J2CPP_METHOD_SIGNATURE(13), false>()
		)
	);
}

cpp_int java::net::Socket::getLocalPort()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(14), J2CPP_METHOD_SIGNATURE(14), false>()
		)
	);
}

local_ref< java::io::OutputStream > java::net::Socket::getOutputStream()
{
	return local_ref< java::io::OutputStream >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(15), J2CPP_METHOD_SIGNATURE(15), false>()
		)
	);
}

cpp_int java::net::Socket::getPort()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(16), J2CPP_METHOD_SIGNATURE(16), false>()
		)
	);
}

cpp_int java::net::Socket::getSoLinger()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(17), J2CPP_METHOD_SIGNATURE(17), false>()
		)
	);
}

cpp_int java::net::Socket::getReceiveBufferSize()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(18), J2CPP_METHOD_SIGNATURE(18), false>()
		)
	);
}

cpp_int java::net::Socket::getSendBufferSize()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(19), J2CPP_METHOD_SIGNATURE(19), false>()
		)
	);
}

cpp_int java::net::Socket::getSoTimeout()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(20), J2CPP_METHOD_SIGNATURE(20), false>()
		)
	);
}

cpp_boolean java::net::Socket::getTcpNoDelay()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(21), J2CPP_METHOD_SIGNATURE(21), false>()
		)
	);
}

void java::net::Socket::setKeepAlive(cpp_boolean const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(22), J2CPP_METHOD_SIGNATURE(22), false>(),
			a0.get_jtype()
		)
	);
}

void java::net::Socket::setSocketImplFactory(local_ref< java::net::SocketImplFactory > const &a0)
{
	return void(
		environment::get().get_jenv()->CallStaticVoidMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(23), J2CPP_METHOD_SIGNATURE(23), true>(),
			a0.get_jtype()
		)
	);
}

void java::net::Socket::setSendBufferSize(cpp_int const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(24), J2CPP_METHOD_SIGNATURE(24), false>(),
			a0.get_jtype()
		)
	);
}

void java::net::Socket::setReceiveBufferSize(cpp_int const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(25), J2CPP_METHOD_SIGNATURE(25), false>(),
			a0.get_jtype()
		)
	);
}

void java::net::Socket::setSoLinger(cpp_boolean const &a0, cpp_int const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(26), J2CPP_METHOD_SIGNATURE(26), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void java::net::Socket::setSoTimeout(cpp_int const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(27), J2CPP_METHOD_SIGNATURE(27), false>(),
			a0.get_jtype()
		)
	);
}

void java::net::Socket::setTcpNoDelay(cpp_boolean const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(28), J2CPP_METHOD_SIGNATURE(28), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::String > java::net::Socket::toString()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(29), J2CPP_METHOD_SIGNATURE(29), false>()
		)
	);
}

void java::net::Socket::shutdownInput()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(30), J2CPP_METHOD_SIGNATURE(30), false>()
		)
	);
}

void java::net::Socket::shutdownOutput()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(31), J2CPP_METHOD_SIGNATURE(31), false>()
		)
	);
}

local_ref< java::net::SocketAddress > java::net::Socket::getLocalSocketAddress()
{
	return local_ref< java::net::SocketAddress >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(32), J2CPP_METHOD_SIGNATURE(32), false>()
		)
	);
}

local_ref< java::net::SocketAddress > java::net::Socket::getRemoteSocketAddress()
{
	return local_ref< java::net::SocketAddress >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(33), J2CPP_METHOD_SIGNATURE(33), false>()
		)
	);
}

cpp_boolean java::net::Socket::isBound()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(34), J2CPP_METHOD_SIGNATURE(34), false>()
		)
	);
}

cpp_boolean java::net::Socket::isConnected()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(35), J2CPP_METHOD_SIGNATURE(35), false>()
		)
	);
}

cpp_boolean java::net::Socket::isClosed()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(36), J2CPP_METHOD_SIGNATURE(36), false>()
		)
	);
}

void java::net::Socket::bind(local_ref< java::net::SocketAddress > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(37), J2CPP_METHOD_SIGNATURE(37), false>(),
			a0.get_jtype()
		)
	);
}

void java::net::Socket::connect(local_ref< java::net::SocketAddress > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(38), J2CPP_METHOD_SIGNATURE(38), false>(),
			a0.get_jtype()
		)
	);
}

void java::net::Socket::connect(local_ref< java::net::SocketAddress > const &a0, cpp_int const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(39), J2CPP_METHOD_SIGNATURE(39), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_boolean java::net::Socket::isInputShutdown()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(40), J2CPP_METHOD_SIGNATURE(40), false>()
		)
	);
}

cpp_boolean java::net::Socket::isOutputShutdown()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(41), J2CPP_METHOD_SIGNATURE(41), false>()
		)
	);
}

void java::net::Socket::setReuseAddress(cpp_boolean const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(42), J2CPP_METHOD_SIGNATURE(42), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean java::net::Socket::getReuseAddress()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(43), J2CPP_METHOD_SIGNATURE(43), false>()
		)
	);
}

void java::net::Socket::setOOBInline(cpp_boolean const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(44), J2CPP_METHOD_SIGNATURE(44), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean java::net::Socket::getOOBInline()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(45), J2CPP_METHOD_SIGNATURE(45), false>()
		)
	);
}

void java::net::Socket::setTrafficClass(cpp_int const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(46), J2CPP_METHOD_SIGNATURE(46), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int java::net::Socket::getTrafficClass()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(47), J2CPP_METHOD_SIGNATURE(47), false>()
		)
	);
}

void java::net::Socket::sendUrgentData(cpp_int const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(48), J2CPP_METHOD_SIGNATURE(48), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::nio::channels::SocketChannel > java::net::Socket::getChannel()
{
	return local_ref< java::nio::channels::SocketChannel >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(49), J2CPP_METHOD_SIGNATURE(49), false>()
		)
	);
}

void java::net::Socket::setPerformancePreferences(cpp_int const &a0, cpp_int const &a1, cpp_int const &a2)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(50), J2CPP_METHOD_SIGNATURE(50), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}


J2CPP_DEFINE_CLASS(java::net::Socket,"java/net/Socket")
J2CPP_DEFINE_METHOD(java::net::Socket,0,"<init>","()V")
J2CPP_DEFINE_METHOD(java::net::Socket,1,"<init>","(Ljava/net/Proxy;)V")
J2CPP_DEFINE_METHOD(java::net::Socket,2,"<init>","(Ljava/lang/String;I)V")
J2CPP_DEFINE_METHOD(java::net::Socket,3,"<init>","(Ljava/lang/String;ILjava/net/InetAddress;I)V")
J2CPP_DEFINE_METHOD(java::net::Socket,4,"<init>","(Ljava/lang/String;IZ)V")
J2CPP_DEFINE_METHOD(java::net::Socket,5,"<init>","(Ljava/net/InetAddress;I)V")
J2CPP_DEFINE_METHOD(java::net::Socket,6,"<init>","(Ljava/net/InetAddress;ILjava/net/InetAddress;I)V")
J2CPP_DEFINE_METHOD(java::net::Socket,7,"<init>","(Ljava/net/InetAddress;IZ)V")
J2CPP_DEFINE_METHOD(java::net::Socket,8,"<init>","(Ljava/net/SocketImpl;)V")
J2CPP_DEFINE_METHOD(java::net::Socket,9,"close","()V")
J2CPP_DEFINE_METHOD(java::net::Socket,10,"getInetAddress","()Ljava/net/InetAddress;")
J2CPP_DEFINE_METHOD(java::net::Socket,11,"getInputStream","()Ljava/io/InputStream;")
J2CPP_DEFINE_METHOD(java::net::Socket,12,"getKeepAlive","()Z")
J2CPP_DEFINE_METHOD(java::net::Socket,13,"getLocalAddress","()Ljava/net/InetAddress;")
J2CPP_DEFINE_METHOD(java::net::Socket,14,"getLocalPort","()I")
J2CPP_DEFINE_METHOD(java::net::Socket,15,"getOutputStream","()Ljava/io/OutputStream;")
J2CPP_DEFINE_METHOD(java::net::Socket,16,"getPort","()I")
J2CPP_DEFINE_METHOD(java::net::Socket,17,"getSoLinger","()I")
J2CPP_DEFINE_METHOD(java::net::Socket,18,"getReceiveBufferSize","()I")
J2CPP_DEFINE_METHOD(java::net::Socket,19,"getSendBufferSize","()I")
J2CPP_DEFINE_METHOD(java::net::Socket,20,"getSoTimeout","()I")
J2CPP_DEFINE_METHOD(java::net::Socket,21,"getTcpNoDelay","()Z")
J2CPP_DEFINE_METHOD(java::net::Socket,22,"setKeepAlive","(Z)V")
J2CPP_DEFINE_METHOD(java::net::Socket,23,"setSocketImplFactory","(Ljava/net/SocketImplFactory;)V")
J2CPP_DEFINE_METHOD(java::net::Socket,24,"setSendBufferSize","(I)V")
J2CPP_DEFINE_METHOD(java::net::Socket,25,"setReceiveBufferSize","(I)V")
J2CPP_DEFINE_METHOD(java::net::Socket,26,"setSoLinger","(ZI)V")
J2CPP_DEFINE_METHOD(java::net::Socket,27,"setSoTimeout","(I)V")
J2CPP_DEFINE_METHOD(java::net::Socket,28,"setTcpNoDelay","(Z)V")
J2CPP_DEFINE_METHOD(java::net::Socket,29,"toString","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::net::Socket,30,"shutdownInput","()V")
J2CPP_DEFINE_METHOD(java::net::Socket,31,"shutdownOutput","()V")
J2CPP_DEFINE_METHOD(java::net::Socket,32,"getLocalSocketAddress","()Ljava/net/SocketAddress;")
J2CPP_DEFINE_METHOD(java::net::Socket,33,"getRemoteSocketAddress","()Ljava/net/SocketAddress;")
J2CPP_DEFINE_METHOD(java::net::Socket,34,"isBound","()Z")
J2CPP_DEFINE_METHOD(java::net::Socket,35,"isConnected","()Z")
J2CPP_DEFINE_METHOD(java::net::Socket,36,"isClosed","()Z")
J2CPP_DEFINE_METHOD(java::net::Socket,37,"bind","(Ljava/net/SocketAddress;)V")
J2CPP_DEFINE_METHOD(java::net::Socket,38,"connect","(Ljava/net/SocketAddress;)V")
J2CPP_DEFINE_METHOD(java::net::Socket,39,"connect","(Ljava/net/SocketAddress;I)V")
J2CPP_DEFINE_METHOD(java::net::Socket,40,"isInputShutdown","()Z")
J2CPP_DEFINE_METHOD(java::net::Socket,41,"isOutputShutdown","()Z")
J2CPP_DEFINE_METHOD(java::net::Socket,42,"setReuseAddress","(Z)V")
J2CPP_DEFINE_METHOD(java::net::Socket,43,"getReuseAddress","()Z")
J2CPP_DEFINE_METHOD(java::net::Socket,44,"setOOBInline","(Z)V")
J2CPP_DEFINE_METHOD(java::net::Socket,45,"getOOBInline","()Z")
J2CPP_DEFINE_METHOD(java::net::Socket,46,"setTrafficClass","(I)V")
J2CPP_DEFINE_METHOD(java::net::Socket,47,"getTrafficClass","()I")
J2CPP_DEFINE_METHOD(java::net::Socket,48,"sendUrgentData","(I)V")
J2CPP_DEFINE_METHOD(java::net::Socket,49,"getChannel","()Ljava/nio/channels/SocketChannel;")
J2CPP_DEFINE_METHOD(java::net::Socket,50,"setPerformancePreferences","(III)V")

} //namespace j2cpp

#endif //J2CPP_JAVA_NET_SOCKET_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
