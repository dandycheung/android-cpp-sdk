/*================================================================================
  code generated by: java2cpp
  class: java.net.HttpRetryException
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_NET_HTTPRETRYEXCEPTION_HPP_DECL
#define J2CPP_JAVA_NET_HTTPRETRYEXCEPTION_HPP_DECL


namespace j2cpp { namespace java { namespace io { class IOException; } } }
namespace j2cpp { namespace java { namespace lang { class String; } } }


#include <java/io/IOException.hpp>
#include <java/lang/String.hpp>


namespace j2cpp {

namespace java { namespace net {

	class HttpRetryException;
	class HttpRetryException
		: public cpp_object<HttpRetryException>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)

		explicit HttpRetryException(jobject jobj)
		: cpp_object<HttpRetryException>(jobj)
		{
		}

		operator local_ref<java::io::IOException>() const;


		HttpRetryException(local_ref< java::lang::String > const&, cpp_int const&);
		HttpRetryException(local_ref< java::lang::String > const&, cpp_int const&, local_ref< java::lang::String > const&);
		local_ref< java::lang::String > getLocation();
		local_ref< java::lang::String > getReason();
		cpp_int responseCode();
	}; //class HttpRetryException

} //namespace net
} //namespace java

} //namespace j2cpp

#endif //J2CPP_JAVA_NET_HTTPRETRYEXCEPTION_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_NET_HTTPRETRYEXCEPTION_HPP_IMPL
#define J2CPP_JAVA_NET_HTTPRETRYEXCEPTION_HPP_IMPL

namespace j2cpp {



java::net::HttpRetryException::operator local_ref<java::io::IOException>() const
{
	return local_ref<java::io::IOException>(get_jtype());
}


java::net::HttpRetryException::HttpRetryException(local_ref< java::lang::String > const &a0, cpp_int const &a1)
: cpp_object<java::net::HttpRetryException>(
	environment::get().get_jenv()->NewObject(
		get_class<java::net::HttpRetryException::J2CPP_CLASS_NAME>(),
		get_method_id<java::net::HttpRetryException::J2CPP_CLASS_NAME, java::net::HttpRetryException::J2CPP_METHOD_NAME(0), java::net::HttpRetryException::J2CPP_METHOD_SIGNATURE(0), false>(),
		a0.get_jtype(), a1.get_jtype()
	)
)
{
}



java::net::HttpRetryException::HttpRetryException(local_ref< java::lang::String > const &a0, cpp_int const &a1, local_ref< java::lang::String > const &a2)
: cpp_object<java::net::HttpRetryException>(
	environment::get().get_jenv()->NewObject(
		get_class<java::net::HttpRetryException::J2CPP_CLASS_NAME>(),
		get_method_id<java::net::HttpRetryException::J2CPP_CLASS_NAME, java::net::HttpRetryException::J2CPP_METHOD_NAME(1), java::net::HttpRetryException::J2CPP_METHOD_SIGNATURE(1), false>(),
		a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
	)
)
{
}


local_ref< java::lang::String > java::net::HttpRetryException::getLocation()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>()
		)
	);
}

local_ref< java::lang::String > java::net::HttpRetryException::getReason()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>()
		)
	);
}

cpp_int java::net::HttpRetryException::responseCode()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>()
		)
	);
}


J2CPP_DEFINE_CLASS(java::net::HttpRetryException,"java/net/HttpRetryException")
J2CPP_DEFINE_METHOD(java::net::HttpRetryException,0,"<init>","(Ljava/lang/String;I)V")
J2CPP_DEFINE_METHOD(java::net::HttpRetryException,1,"<init>","(Ljava/lang/String;ILjava/lang/String;)V")
J2CPP_DEFINE_METHOD(java::net::HttpRetryException,2,"getLocation","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::net::HttpRetryException,3,"getReason","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::net::HttpRetryException,4,"responseCode","()I")

} //namespace j2cpp

#endif //J2CPP_JAVA_NET_HTTPRETRYEXCEPTION_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
