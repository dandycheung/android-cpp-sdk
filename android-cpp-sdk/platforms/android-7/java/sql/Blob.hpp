/*================================================================================
  code generated by: java2cpp
  class: java.sql.Blob
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_SQL_BLOB_HPP_DECL
#define J2CPP_JAVA_SQL_BLOB_HPP_DECL


namespace j2cpp { namespace java { namespace io { class InputStream; } } }
namespace j2cpp { namespace java { namespace io { class OutputStream; } } }


#include <java/io/InputStream.hpp>
#include <java/io/OutputStream.hpp>


namespace j2cpp {

namespace java { namespace sql {

	class Blob;
	class Blob
		: public cpp_object<Blob>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)

		Blob(jobject jobj)
		: cpp_object<Blob>(jobj)
		{
		}

		local_ref< java::io::InputStream > getBinaryStream();
		local_ref< cpp_byte_array<1> > getBytes(cpp_long const&, cpp_int const&);
		cpp_long length();
		cpp_long position(local_ref< java::sql::Blob > const&, cpp_long const&);
		cpp_long position(local_ref< cpp_byte_array<1> > const&, cpp_long const&);
		local_ref< java::io::OutputStream > setBinaryStream(cpp_long const&);
		cpp_int setBytes(cpp_long const&, local_ref< cpp_byte_array<1> > const&);
		cpp_int setBytes(cpp_long const&, local_ref< cpp_byte_array<1> > const&, cpp_int const&, cpp_int const&);
		void truncate(cpp_long const&);
	}; //class Blob

} //namespace sql
} //namespace java


} //namespace j2cpp

#endif //J2CPP_JAVA_SQL_BLOB_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_SQL_BLOB_HPP_IMPL
#define J2CPP_JAVA_SQL_BLOB_HPP_IMPL

namespace j2cpp {


local_ref< java::io::InputStream > java::sql::Blob::getBinaryStream()
{
	return local_ref< java::io::InputStream >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(0), J2CPP_METHOD_SIGNATURE(0), false>()
		)
	);
}

local_ref< cpp_byte_array<1> > java::sql::Blob::getBytes(cpp_long const &a0, cpp_int const &a1)
{
	return local_ref< cpp_byte_array<1> >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_long java::sql::Blob::length()
{
	return cpp_long(
		environment::get().get_jenv()->CallLongMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>()
		)
	);
}

cpp_long java::sql::Blob::position(local_ref< java::sql::Blob > const &a0, cpp_long const &a1)
{
	return cpp_long(
		environment::get().get_jenv()->CallLongMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_long java::sql::Blob::position(local_ref< cpp_byte_array<1> > const &a0, cpp_long const &a1)
{
	return cpp_long(
		environment::get().get_jenv()->CallLongMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< java::io::OutputStream > java::sql::Blob::setBinaryStream(cpp_long const &a0)
{
	return local_ref< java::io::OutputStream >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int java::sql::Blob::setBytes(cpp_long const &a0, local_ref< cpp_byte_array<1> > const &a1)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_int java::sql::Blob::setBytes(cpp_long const &a0, local_ref< cpp_byte_array<1> > const &a1, cpp_int const &a2, cpp_int const &a3)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(7), J2CPP_METHOD_SIGNATURE(7), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype(), a3.get_jtype()
		)
	);
}

void java::sql::Blob::truncate(cpp_long const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(8), J2CPP_METHOD_SIGNATURE(8), false>(),
			a0.get_jtype()
		)
	);
}


J2CPP_DEFINE_CLASS(java::sql::Blob,"java/sql/Blob")
J2CPP_DEFINE_METHOD(java::sql::Blob,0,"getBinaryStream","()Ljava/io/InputStream;")
J2CPP_DEFINE_METHOD(java::sql::Blob,1,"getBytes","(JI)[B")
J2CPP_DEFINE_METHOD(java::sql::Blob,2,"length","()J")
J2CPP_DEFINE_METHOD(java::sql::Blob,3,"position","(Ljava/sql/Blob;J)J")
J2CPP_DEFINE_METHOD(java::sql::Blob,4,"position","([BJ)J")
J2CPP_DEFINE_METHOD(java::sql::Blob,5,"setBinaryStream","(J)Ljava/io/OutputStream;")
J2CPP_DEFINE_METHOD(java::sql::Blob,6,"setBytes","(J[B)I")
J2CPP_DEFINE_METHOD(java::sql::Blob,7,"setBytes","(J[BII)I")
J2CPP_DEFINE_METHOD(java::sql::Blob,8,"truncate","(J)V")

} //namespace j2cpp

#endif //J2CPP_JAVA_SQL_BLOB_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
