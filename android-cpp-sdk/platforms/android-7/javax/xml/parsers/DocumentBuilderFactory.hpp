/*================================================================================
  code generated by: java2cpp
  class: javax.xml.parsers.DocumentBuilderFactory
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVAX_XML_PARSERS_DOCUMENTBUILDERFACTORY_HPP_DECL
#define J2CPP_JAVAX_XML_PARSERS_DOCUMENTBUILDERFACTORY_HPP_DECL


namespace j2cpp { namespace javax { namespace xml { namespace parsers { class DocumentBuilder; } } } }
namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace lang { class String; } } }


#include <java/lang/Object.hpp>
#include <java/lang/String.hpp>
#include <javax/xml/parsers/DocumentBuilder.hpp>


namespace j2cpp {

namespace javax { namespace xml { namespace parsers {

	class DocumentBuilderFactory;
	class DocumentBuilderFactory
		: public cpp_object<DocumentBuilderFactory>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_METHOD(12)
		J2CPP_DECLARE_METHOD(13)
		J2CPP_DECLARE_METHOD(14)
		J2CPP_DECLARE_METHOD(15)
		J2CPP_DECLARE_METHOD(16)
		J2CPP_DECLARE_METHOD(17)
		J2CPP_DECLARE_METHOD(18)
		J2CPP_DECLARE_METHOD(19)
		J2CPP_DECLARE_METHOD(20)

		explicit DocumentBuilderFactory(jobject jobj)
		: cpp_object<DocumentBuilderFactory>(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;


		local_ref< java::lang::Object > getAttribute(local_ref< java::lang::String > const&);
		cpp_boolean getFeature(local_ref< java::lang::String > const&);
		cpp_boolean isCoalescing();
		cpp_boolean isExpandEntityReferences();
		cpp_boolean isIgnoringComments();
		cpp_boolean isIgnoringElementContentWhitespace();
		cpp_boolean isNamespaceAware();
		cpp_boolean isValidating();
		cpp_boolean isXIncludeAware();
		local_ref< javax::xml::parsers::DocumentBuilder > newDocumentBuilder();
		static local_ref< javax::xml::parsers::DocumentBuilderFactory > newInstance();
		void setAttribute(local_ref< java::lang::String > const&, local_ref< java::lang::Object > const&);
		void setCoalescing(cpp_boolean const&);
		void setExpandEntityReferences(cpp_boolean const&);
		void setFeature(local_ref< java::lang::String > const&, cpp_boolean const&);
		void setIgnoringComments(cpp_boolean const&);
		void setIgnoringElementContentWhitespace(cpp_boolean const&);
		void setNamespaceAware(cpp_boolean const&);
		void setValidating(cpp_boolean const&);
		void setXIncludeAware(cpp_boolean const&);
	}; //class DocumentBuilderFactory

} //namespace parsers
} //namespace xml
} //namespace javax

} //namespace j2cpp

#endif //J2CPP_JAVAX_XML_PARSERS_DOCUMENTBUILDERFACTORY_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVAX_XML_PARSERS_DOCUMENTBUILDERFACTORY_HPP_IMPL
#define J2CPP_JAVAX_XML_PARSERS_DOCUMENTBUILDERFACTORY_HPP_IMPL

namespace j2cpp {



javax::xml::parsers::DocumentBuilderFactory::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jtype());
}


local_ref< java::lang::Object > javax::xml::parsers::DocumentBuilderFactory::getAttribute(local_ref< java::lang::String > const &a0)
{
	return local_ref< java::lang::Object >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean javax::xml::parsers::DocumentBuilderFactory::getFeature(local_ref< java::lang::String > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean javax::xml::parsers::DocumentBuilderFactory::isCoalescing()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>()
		)
	);
}

cpp_boolean javax::xml::parsers::DocumentBuilderFactory::isExpandEntityReferences()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>()
		)
	);
}

cpp_boolean javax::xml::parsers::DocumentBuilderFactory::isIgnoringComments()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>()
		)
	);
}

cpp_boolean javax::xml::parsers::DocumentBuilderFactory::isIgnoringElementContentWhitespace()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>()
		)
	);
}

cpp_boolean javax::xml::parsers::DocumentBuilderFactory::isNamespaceAware()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(7), J2CPP_METHOD_SIGNATURE(7), false>()
		)
	);
}

cpp_boolean javax::xml::parsers::DocumentBuilderFactory::isValidating()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(8), J2CPP_METHOD_SIGNATURE(8), false>()
		)
	);
}

cpp_boolean javax::xml::parsers::DocumentBuilderFactory::isXIncludeAware()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(9), J2CPP_METHOD_SIGNATURE(9), false>()
		)
	);
}

local_ref< javax::xml::parsers::DocumentBuilder > javax::xml::parsers::DocumentBuilderFactory::newDocumentBuilder()
{
	return local_ref< javax::xml::parsers::DocumentBuilder >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(10), J2CPP_METHOD_SIGNATURE(10), false>()
		)
	);
}

local_ref< javax::xml::parsers::DocumentBuilderFactory > javax::xml::parsers::DocumentBuilderFactory::newInstance()
{
	return local_ref< javax::xml::parsers::DocumentBuilderFactory >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(11), J2CPP_METHOD_SIGNATURE(11), true>()
		)
	);
}

void javax::xml::parsers::DocumentBuilderFactory::setAttribute(local_ref< java::lang::String > const &a0, local_ref< java::lang::Object > const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(12), J2CPP_METHOD_SIGNATURE(12), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void javax::xml::parsers::DocumentBuilderFactory::setCoalescing(cpp_boolean const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(13), J2CPP_METHOD_SIGNATURE(13), false>(),
			a0.get_jtype()
		)
	);
}

void javax::xml::parsers::DocumentBuilderFactory::setExpandEntityReferences(cpp_boolean const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(14), J2CPP_METHOD_SIGNATURE(14), false>(),
			a0.get_jtype()
		)
	);
}

void javax::xml::parsers::DocumentBuilderFactory::setFeature(local_ref< java::lang::String > const &a0, cpp_boolean const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(15), J2CPP_METHOD_SIGNATURE(15), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void javax::xml::parsers::DocumentBuilderFactory::setIgnoringComments(cpp_boolean const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(16), J2CPP_METHOD_SIGNATURE(16), false>(),
			a0.get_jtype()
		)
	);
}

void javax::xml::parsers::DocumentBuilderFactory::setIgnoringElementContentWhitespace(cpp_boolean const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(17), J2CPP_METHOD_SIGNATURE(17), false>(),
			a0.get_jtype()
		)
	);
}

void javax::xml::parsers::DocumentBuilderFactory::setNamespaceAware(cpp_boolean const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(18), J2CPP_METHOD_SIGNATURE(18), false>(),
			a0.get_jtype()
		)
	);
}

void javax::xml::parsers::DocumentBuilderFactory::setValidating(cpp_boolean const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(19), J2CPP_METHOD_SIGNATURE(19), false>(),
			a0.get_jtype()
		)
	);
}

void javax::xml::parsers::DocumentBuilderFactory::setXIncludeAware(cpp_boolean const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(20), J2CPP_METHOD_SIGNATURE(20), false>(),
			a0.get_jtype()
		)
	);
}


J2CPP_DEFINE_CLASS(javax::xml::parsers::DocumentBuilderFactory,"javax/xml/parsers/DocumentBuilderFactory")
J2CPP_DEFINE_METHOD(javax::xml::parsers::DocumentBuilderFactory,0,"<init>","()V")
J2CPP_DEFINE_METHOD(javax::xml::parsers::DocumentBuilderFactory,1,"getAttribute","(Ljava/lang/String;)Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(javax::xml::parsers::DocumentBuilderFactory,2,"getFeature","(Ljava/lang/String;)Z")
J2CPP_DEFINE_METHOD(javax::xml::parsers::DocumentBuilderFactory,3,"isCoalescing","()Z")
J2CPP_DEFINE_METHOD(javax::xml::parsers::DocumentBuilderFactory,4,"isExpandEntityReferences","()Z")
J2CPP_DEFINE_METHOD(javax::xml::parsers::DocumentBuilderFactory,5,"isIgnoringComments","()Z")
J2CPP_DEFINE_METHOD(javax::xml::parsers::DocumentBuilderFactory,6,"isIgnoringElementContentWhitespace","()Z")
J2CPP_DEFINE_METHOD(javax::xml::parsers::DocumentBuilderFactory,7,"isNamespaceAware","()Z")
J2CPP_DEFINE_METHOD(javax::xml::parsers::DocumentBuilderFactory,8,"isValidating","()Z")
J2CPP_DEFINE_METHOD(javax::xml::parsers::DocumentBuilderFactory,9,"isXIncludeAware","()Z")
J2CPP_DEFINE_METHOD(javax::xml::parsers::DocumentBuilderFactory,10,"newDocumentBuilder","()Ljavax/xml/parsers/DocumentBuilder;")
J2CPP_DEFINE_METHOD(javax::xml::parsers::DocumentBuilderFactory,11,"newInstance","()Ljavax/xml/parsers/DocumentBuilderFactory;")
J2CPP_DEFINE_METHOD(javax::xml::parsers::DocumentBuilderFactory,12,"setAttribute","(Ljava/lang/String;Ljava/lang/Object;)V")
J2CPP_DEFINE_METHOD(javax::xml::parsers::DocumentBuilderFactory,13,"setCoalescing","(Z)V")
J2CPP_DEFINE_METHOD(javax::xml::parsers::DocumentBuilderFactory,14,"setExpandEntityReferences","(Z)V")
J2CPP_DEFINE_METHOD(javax::xml::parsers::DocumentBuilderFactory,15,"setFeature","(Ljava/lang/String;Z)V")
J2CPP_DEFINE_METHOD(javax::xml::parsers::DocumentBuilderFactory,16,"setIgnoringComments","(Z)V")
J2CPP_DEFINE_METHOD(javax::xml::parsers::DocumentBuilderFactory,17,"setIgnoringElementContentWhitespace","(Z)V")
J2CPP_DEFINE_METHOD(javax::xml::parsers::DocumentBuilderFactory,18,"setNamespaceAware","(Z)V")
J2CPP_DEFINE_METHOD(javax::xml::parsers::DocumentBuilderFactory,19,"setValidating","(Z)V")
J2CPP_DEFINE_METHOD(javax::xml::parsers::DocumentBuilderFactory,20,"setXIncludeAware","(Z)V")

} //namespace j2cpp

#endif //J2CPP_JAVAX_XML_PARSERS_DOCUMENTBUILDERFACTORY_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
