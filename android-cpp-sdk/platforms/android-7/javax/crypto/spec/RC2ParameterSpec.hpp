/*================================================================================
  code generated by: java2cpp
  class: javax.crypto.spec.RC2ParameterSpec
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVAX_CRYPTO_SPEC_RC2PARAMETERSPEC_HPP_DECL
#define J2CPP_JAVAX_CRYPTO_SPEC_RC2PARAMETERSPEC_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace security { namespace spec { class AlgorithmParameterSpec; } } } }


#include <java/lang/Object.hpp>
#include <java/security/spec/AlgorithmParameterSpec.hpp>


namespace j2cpp {

namespace javax { namespace crypto { namespace spec {

	class RC2ParameterSpec;
	class RC2ParameterSpec
		: public cpp_object<RC2ParameterSpec>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)

		explicit RC2ParameterSpec(jobject jobj)
		: cpp_object<RC2ParameterSpec>(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;
		operator local_ref<java::security::spec::AlgorithmParameterSpec>() const;


		RC2ParameterSpec(cpp_int const&);
		RC2ParameterSpec(cpp_int const&, local_ref< cpp_byte_array<1> > const&);
		RC2ParameterSpec(cpp_int const&, local_ref< cpp_byte_array<1> > const&, cpp_int const&);
		cpp_int getEffectiveKeyBits();
		local_ref< cpp_byte_array<1> > getIV();
		cpp_boolean equals(local_ref< java::lang::Object > const&);
		cpp_int hashCode();
	}; //class RC2ParameterSpec

} //namespace spec
} //namespace crypto
} //namespace javax

} //namespace j2cpp

#endif //J2CPP_JAVAX_CRYPTO_SPEC_RC2PARAMETERSPEC_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVAX_CRYPTO_SPEC_RC2PARAMETERSPEC_HPP_IMPL
#define J2CPP_JAVAX_CRYPTO_SPEC_RC2PARAMETERSPEC_HPP_IMPL

namespace j2cpp {



javax::crypto::spec::RC2ParameterSpec::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jtype());
}

javax::crypto::spec::RC2ParameterSpec::operator local_ref<java::security::spec::AlgorithmParameterSpec>() const
{
	return local_ref<java::security::spec::AlgorithmParameterSpec>(get_jtype());
}


javax::crypto::spec::RC2ParameterSpec::RC2ParameterSpec(cpp_int const &a0)
: cpp_object<javax::crypto::spec::RC2ParameterSpec>(
	environment::get().get_jenv()->NewObject(
		get_class<javax::crypto::spec::RC2ParameterSpec::J2CPP_CLASS_NAME>(),
		get_method_id<javax::crypto::spec::RC2ParameterSpec::J2CPP_CLASS_NAME, javax::crypto::spec::RC2ParameterSpec::J2CPP_METHOD_NAME(0), javax::crypto::spec::RC2ParameterSpec::J2CPP_METHOD_SIGNATURE(0), false>(),
		a0.get_jtype()
	)
)
{
}



javax::crypto::spec::RC2ParameterSpec::RC2ParameterSpec(cpp_int const &a0, local_ref< cpp_byte_array<1> > const &a1)
: cpp_object<javax::crypto::spec::RC2ParameterSpec>(
	environment::get().get_jenv()->NewObject(
		get_class<javax::crypto::spec::RC2ParameterSpec::J2CPP_CLASS_NAME>(),
		get_method_id<javax::crypto::spec::RC2ParameterSpec::J2CPP_CLASS_NAME, javax::crypto::spec::RC2ParameterSpec::J2CPP_METHOD_NAME(1), javax::crypto::spec::RC2ParameterSpec::J2CPP_METHOD_SIGNATURE(1), false>(),
		a0.get_jtype(), a1.get_jtype()
	)
)
{
}



javax::crypto::spec::RC2ParameterSpec::RC2ParameterSpec(cpp_int const &a0, local_ref< cpp_byte_array<1> > const &a1, cpp_int const &a2)
: cpp_object<javax::crypto::spec::RC2ParameterSpec>(
	environment::get().get_jenv()->NewObject(
		get_class<javax::crypto::spec::RC2ParameterSpec::J2CPP_CLASS_NAME>(),
		get_method_id<javax::crypto::spec::RC2ParameterSpec::J2CPP_CLASS_NAME, javax::crypto::spec::RC2ParameterSpec::J2CPP_METHOD_NAME(2), javax::crypto::spec::RC2ParameterSpec::J2CPP_METHOD_SIGNATURE(2), false>(),
		a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
	)
)
{
}


cpp_int javax::crypto::spec::RC2ParameterSpec::getEffectiveKeyBits()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>()
		)
	);
}

local_ref< cpp_byte_array<1> > javax::crypto::spec::RC2ParameterSpec::getIV()
{
	return local_ref< cpp_byte_array<1> >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>()
		)
	);
}

cpp_boolean javax::crypto::spec::RC2ParameterSpec::equals(local_ref< java::lang::Object > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int javax::crypto::spec::RC2ParameterSpec::hashCode()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>()
		)
	);
}


J2CPP_DEFINE_CLASS(javax::crypto::spec::RC2ParameterSpec,"javax/crypto/spec/RC2ParameterSpec")
J2CPP_DEFINE_METHOD(javax::crypto::spec::RC2ParameterSpec,0,"<init>","(I)V")
J2CPP_DEFINE_METHOD(javax::crypto::spec::RC2ParameterSpec,1,"<init>","(I[B)V")
J2CPP_DEFINE_METHOD(javax::crypto::spec::RC2ParameterSpec,2,"<init>","(I[BI)V")
J2CPP_DEFINE_METHOD(javax::crypto::spec::RC2ParameterSpec,3,"getEffectiveKeyBits","()I")
J2CPP_DEFINE_METHOD(javax::crypto::spec::RC2ParameterSpec,4,"getIV","()[B")
J2CPP_DEFINE_METHOD(javax::crypto::spec::RC2ParameterSpec,5,"equals","(Ljava/lang/Object;)Z")
J2CPP_DEFINE_METHOD(javax::crypto::spec::RC2ParameterSpec,6,"hashCode","()I")

} //namespace j2cpp

#endif //J2CPP_JAVAX_CRYPTO_SPEC_RC2PARAMETERSPEC_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
