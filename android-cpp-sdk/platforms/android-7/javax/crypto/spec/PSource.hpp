/*================================================================================
  code generated by: java2cpp
  class: javax.crypto.spec.PSource
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVAX_CRYPTO_SPEC_PSOURCE_HPP_DECL
#define J2CPP_JAVAX_CRYPTO_SPEC_PSOURCE_HPP_DECL


namespace j2cpp { namespace javax { namespace crypto { namespace spec { namespace PSource_ { class PSpecified; } } } } }
namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace lang { class String; } } }


#include <java/lang/Object.hpp>
#include <java/lang/String.hpp>
#include <javax/crypto/spec/PSource.hpp>


namespace j2cpp {

namespace javax { namespace crypto { namespace spec {

	class PSource;
	namespace PSource_ {

		class PSpecified;
		class PSpecified
			: public cpp_object<PSpecified>
		{
		public:

			J2CPP_DECLARE_CLASS

			J2CPP_DECLARE_METHOD(0)
			J2CPP_DECLARE_METHOD(1)
			J2CPP_DECLARE_METHOD(2)
			J2CPP_DECLARE_FIELD(0)

			explicit PSpecified(jobject jobj)
			: cpp_object<PSpecified>(jobj)
			{
			}

			operator local_ref<javax::crypto::spec::PSource>() const;


			PSpecified(local_ref< cpp_byte_array<1> > const&);
			local_ref< cpp_byte_array<1> > getValue();

			static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(0), J2CPP_FIELD_SIGNATURE(0), local_ref< javax::crypto::spec::PSource_::PSpecified > > DEFAULT;
		}; //class PSpecified

	} //namespace PSource_

	class PSource
		: public cpp_object<PSource>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)

		typedef PSource_::PSpecified PSpecified;

		explicit PSource(jobject jobj)
		: cpp_object<PSource>(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;


		local_ref< java::lang::String > getAlgorithm();
	}; //class PSource

} //namespace spec
} //namespace crypto
} //namespace javax

} //namespace j2cpp

#endif //J2CPP_JAVAX_CRYPTO_SPEC_PSOURCE_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVAX_CRYPTO_SPEC_PSOURCE_HPP_IMPL
#define J2CPP_JAVAX_CRYPTO_SPEC_PSOURCE_HPP_IMPL

namespace j2cpp {




javax::crypto::spec::PSource_::PSpecified::operator local_ref<javax::crypto::spec::PSource>() const
{
	return local_ref<javax::crypto::spec::PSource>(get_jtype());
}


javax::crypto::spec::PSource_::PSpecified::PSpecified(local_ref< cpp_byte_array<1> > const &a0)
: cpp_object<javax::crypto::spec::PSource_::PSpecified>(
	environment::get().get_jenv()->NewObject(
		get_class<javax::crypto::spec::PSource_::PSpecified::J2CPP_CLASS_NAME>(),
		get_method_id<javax::crypto::spec::PSource_::PSpecified::J2CPP_CLASS_NAME, javax::crypto::spec::PSource_::PSpecified::J2CPP_METHOD_NAME(0), javax::crypto::spec::PSource_::PSpecified::J2CPP_METHOD_SIGNATURE(0), false>(),
		a0.get_jtype()
	)
)
{
}


local_ref< cpp_byte_array<1> > javax::crypto::spec::PSource_::PSpecified::getValue()
{
	return local_ref< cpp_byte_array<1> >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), false>()
		)
	);
}



static_field<
	javax::crypto::spec::PSource_::PSpecified::J2CPP_CLASS_NAME,
	javax::crypto::spec::PSource_::PSpecified::J2CPP_FIELD_NAME(0),
	javax::crypto::spec::PSource_::PSpecified::J2CPP_FIELD_SIGNATURE(0),
	local_ref< javax::crypto::spec::PSource_::PSpecified >
> javax::crypto::spec::PSource_::PSpecified::DEFAULT;


J2CPP_DEFINE_CLASS(javax::crypto::spec::PSource_::PSpecified,"javax/crypto/spec/PSource$PSpecified")
J2CPP_DEFINE_METHOD(javax::crypto::spec::PSource_::PSpecified,0,"<init>","([B)V")
J2CPP_DEFINE_METHOD(javax::crypto::spec::PSource_::PSpecified,1,"getValue","()[B")
J2CPP_DEFINE_METHOD(javax::crypto::spec::PSource_::PSpecified,2,"<clinit>","()V")
J2CPP_DEFINE_FIELD(javax::crypto::spec::PSource_::PSpecified,0,"DEFAULT","Ljavax/crypto/spec/PSource$PSpecified;")



javax::crypto::spec::PSource::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jtype());
}


local_ref< java::lang::String > javax::crypto::spec::PSource::getAlgorithm()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), false>()
		)
	);
}


J2CPP_DEFINE_CLASS(javax::crypto::spec::PSource,"javax/crypto/spec/PSource")
J2CPP_DEFINE_METHOD(javax::crypto::spec::PSource,0,"<init>","(Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(javax::crypto::spec::PSource,1,"getAlgorithm","()Ljava/lang/String;")

} //namespace j2cpp

#endif //J2CPP_JAVAX_CRYPTO_SPEC_PSOURCE_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
