/*================================================================================
  code generated by: java2cpp
  class: android.text.style.ScaleXSpan
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_TEXT_STYLE_SCALEXSPAN_HPP_DECL
#define J2CPP_ANDROID_TEXT_STYLE_SCALEXSPAN_HPP_DECL


namespace j2cpp { namespace android { namespace text { class TextPaint; } } }
namespace j2cpp { namespace android { namespace text { namespace style { class MetricAffectingSpan; } } } }
namespace j2cpp { namespace android { namespace text { class ParcelableSpan; } } }
namespace j2cpp { namespace android { namespace os { class Parcel; } } }


#include <android/os/Parcel.hpp>
#include <android/text/ParcelableSpan.hpp>
#include <android/text/TextPaint.hpp>
#include <android/text/style/MetricAffectingSpan.hpp>


namespace j2cpp {

namespace android { namespace text { namespace style {

	class ScaleXSpan;
	class ScaleXSpan
		: public cpp_object<ScaleXSpan>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)

		explicit ScaleXSpan(jobject jobj)
		: cpp_object<ScaleXSpan>(jobj)
		{
		}

		operator local_ref<android::text::style::MetricAffectingSpan>() const;
		operator local_ref<android::text::ParcelableSpan>() const;


		ScaleXSpan(cpp_float const&);
		ScaleXSpan(local_ref< android::os::Parcel > const&);
		cpp_int getSpanTypeId();
		cpp_int describeContents();
		void writeToParcel(local_ref< android::os::Parcel > const&, cpp_int const&);
		cpp_float getScaleX();
		void updateDrawState(local_ref< android::text::TextPaint > const&);
		void updateMeasureState(local_ref< android::text::TextPaint > const&);
	}; //class ScaleXSpan

} //namespace style
} //namespace text
} //namespace android

} //namespace j2cpp

#endif //J2CPP_ANDROID_TEXT_STYLE_SCALEXSPAN_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_TEXT_STYLE_SCALEXSPAN_HPP_IMPL
#define J2CPP_ANDROID_TEXT_STYLE_SCALEXSPAN_HPP_IMPL

namespace j2cpp {



android::text::style::ScaleXSpan::operator local_ref<android::text::style::MetricAffectingSpan>() const
{
	return local_ref<android::text::style::MetricAffectingSpan>(get_jtype());
}

android::text::style::ScaleXSpan::operator local_ref<android::text::ParcelableSpan>() const
{
	return local_ref<android::text::ParcelableSpan>(get_jtype());
}


android::text::style::ScaleXSpan::ScaleXSpan(cpp_float const &a0)
: cpp_object<android::text::style::ScaleXSpan>(
	environment::get().get_jenv()->NewObject(
		get_class<android::text::style::ScaleXSpan::J2CPP_CLASS_NAME>(),
		get_method_id<android::text::style::ScaleXSpan::J2CPP_CLASS_NAME, android::text::style::ScaleXSpan::J2CPP_METHOD_NAME(0), android::text::style::ScaleXSpan::J2CPP_METHOD_SIGNATURE(0), false>(),
		a0.get_jtype()
	)
)
{
}



android::text::style::ScaleXSpan::ScaleXSpan(local_ref< android::os::Parcel > const &a0)
: cpp_object<android::text::style::ScaleXSpan>(
	environment::get().get_jenv()->NewObject(
		get_class<android::text::style::ScaleXSpan::J2CPP_CLASS_NAME>(),
		get_method_id<android::text::style::ScaleXSpan::J2CPP_CLASS_NAME, android::text::style::ScaleXSpan::J2CPP_METHOD_NAME(1), android::text::style::ScaleXSpan::J2CPP_METHOD_SIGNATURE(1), false>(),
		a0.get_jtype()
	)
)
{
}


cpp_int android::text::style::ScaleXSpan::getSpanTypeId()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>()
		)
	);
}

cpp_int android::text::style::ScaleXSpan::describeContents()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>()
		)
	);
}

void android::text::style::ScaleXSpan::writeToParcel(local_ref< android::os::Parcel > const &a0, cpp_int const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_float android::text::style::ScaleXSpan::getScaleX()
{
	return cpp_float(
		environment::get().get_jenv()->CallFloatMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>()
		)
	);
}

void android::text::style::ScaleXSpan::updateDrawState(local_ref< android::text::TextPaint > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>(),
			a0.get_jtype()
		)
	);
}

void android::text::style::ScaleXSpan::updateMeasureState(local_ref< android::text::TextPaint > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(7), J2CPP_METHOD_SIGNATURE(7), false>(),
			a0.get_jtype()
		)
	);
}


J2CPP_DEFINE_CLASS(android::text::style::ScaleXSpan,"android/text/style/ScaleXSpan")
J2CPP_DEFINE_METHOD(android::text::style::ScaleXSpan,0,"<init>","(F)V")
J2CPP_DEFINE_METHOD(android::text::style::ScaleXSpan,1,"<init>","(Landroid/os/Parcel;)V")
J2CPP_DEFINE_METHOD(android::text::style::ScaleXSpan,2,"getSpanTypeId","()I")
J2CPP_DEFINE_METHOD(android::text::style::ScaleXSpan,3,"describeContents","()I")
J2CPP_DEFINE_METHOD(android::text::style::ScaleXSpan,4,"writeToParcel","(Landroid/os/Parcel;I)V")
J2CPP_DEFINE_METHOD(android::text::style::ScaleXSpan,5,"getScaleX","()F")
J2CPP_DEFINE_METHOD(android::text::style::ScaleXSpan,6,"updateDrawState","(Landroid/text/TextPaint;)V")
J2CPP_DEFINE_METHOD(android::text::style::ScaleXSpan,7,"updateMeasureState","(Landroid/text/TextPaint;)V")

} //namespace j2cpp

#endif //J2CPP_ANDROID_TEXT_STYLE_SCALEXSPAN_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
