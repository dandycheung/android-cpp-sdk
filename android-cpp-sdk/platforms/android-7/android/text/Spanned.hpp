/*================================================================================
  code generated by: java2cpp
  class: android.text.Spanned
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_TEXT_SPANNED_HPP_DECL
#define J2CPP_ANDROID_TEXT_SPANNED_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace lang { class Class; } } }
namespace j2cpp { namespace java { namespace lang { class CharSequence; } } }


#include <java/lang/CharSequence.hpp>
#include <java/lang/Class.hpp>
#include <java/lang/Object.hpp>


namespace j2cpp {

namespace android { namespace text {

	class Spanned;
	class Spanned
		: public cpp_object<Spanned>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_FIELD(0)
		J2CPP_DECLARE_FIELD(1)
		J2CPP_DECLARE_FIELD(2)
		J2CPP_DECLARE_FIELD(3)
		J2CPP_DECLARE_FIELD(4)
		J2CPP_DECLARE_FIELD(5)
		J2CPP_DECLARE_FIELD(6)
		J2CPP_DECLARE_FIELD(7)
		J2CPP_DECLARE_FIELD(8)
		J2CPP_DECLARE_FIELD(9)
		J2CPP_DECLARE_FIELD(10)
		J2CPP_DECLARE_FIELD(11)
		J2CPP_DECLARE_FIELD(12)
		J2CPP_DECLARE_FIELD(13)
		J2CPP_DECLARE_FIELD(14)
		J2CPP_DECLARE_FIELD(15)

		explicit Spanned(jobject jobj)
		: cpp_object<Spanned>(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;
		operator local_ref<java::lang::CharSequence>() const;


		local_ref< cpp_object_array<java::lang::Object, 1> > getSpans(cpp_int const&, cpp_int const&, local_ref< java::lang::Class > const&);
		cpp_int getSpanStart(local_ref< java::lang::Object > const&);
		cpp_int getSpanEnd(local_ref< java::lang::Object > const&);
		cpp_int getSpanFlags(local_ref< java::lang::Object > const&);
		cpp_int nextSpanTransition(cpp_int const&, cpp_int const&, local_ref< java::lang::Class > const&);

		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(0), J2CPP_FIELD_SIGNATURE(0), cpp_int > SPAN_POINT_MARK_MASK;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(1), J2CPP_FIELD_SIGNATURE(1), cpp_int > SPAN_MARK_MARK;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(2), J2CPP_FIELD_SIGNATURE(2), cpp_int > SPAN_MARK_POINT;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(3), J2CPP_FIELD_SIGNATURE(3), cpp_int > SPAN_POINT_MARK;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(4), J2CPP_FIELD_SIGNATURE(4), cpp_int > SPAN_POINT_POINT;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(5), J2CPP_FIELD_SIGNATURE(5), cpp_int > SPAN_PARAGRAPH;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(6), J2CPP_FIELD_SIGNATURE(6), cpp_int > SPAN_INCLUSIVE_EXCLUSIVE;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(7), J2CPP_FIELD_SIGNATURE(7), cpp_int > SPAN_INCLUSIVE_INCLUSIVE;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(8), J2CPP_FIELD_SIGNATURE(8), cpp_int > SPAN_EXCLUSIVE_EXCLUSIVE;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(9), J2CPP_FIELD_SIGNATURE(9), cpp_int > SPAN_EXCLUSIVE_INCLUSIVE;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(10), J2CPP_FIELD_SIGNATURE(10), cpp_int > SPAN_COMPOSING;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(11), J2CPP_FIELD_SIGNATURE(11), cpp_int > SPAN_INTERMEDIATE;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(12), J2CPP_FIELD_SIGNATURE(12), cpp_int > SPAN_USER_SHIFT;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(13), J2CPP_FIELD_SIGNATURE(13), cpp_int > SPAN_USER;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(14), J2CPP_FIELD_SIGNATURE(14), cpp_int > SPAN_PRIORITY_SHIFT;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(15), J2CPP_FIELD_SIGNATURE(15), cpp_int > SPAN_PRIORITY;
	}; //class Spanned

} //namespace text
} //namespace android

} //namespace j2cpp

#endif //J2CPP_ANDROID_TEXT_SPANNED_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_TEXT_SPANNED_HPP_IMPL
#define J2CPP_ANDROID_TEXT_SPANNED_HPP_IMPL

namespace j2cpp {



android::text::Spanned::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jtype());
}

android::text::Spanned::operator local_ref<java::lang::CharSequence>() const
{
	return local_ref<java::lang::CharSequence>(get_jtype());
}

local_ref< cpp_object_array<java::lang::Object, 1> > android::text::Spanned::getSpans(cpp_int const &a0, cpp_int const &a1, local_ref< java::lang::Class > const &a2)
{
	return local_ref< cpp_object_array<java::lang::Object, 1> >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(0), J2CPP_METHOD_SIGNATURE(0), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

cpp_int android::text::Spanned::getSpanStart(local_ref< java::lang::Object > const &a0)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int android::text::Spanned::getSpanEnd(local_ref< java::lang::Object > const &a0)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int android::text::Spanned::getSpanFlags(local_ref< java::lang::Object > const &a0)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int android::text::Spanned::nextSpanTransition(cpp_int const &a0, cpp_int const &a1, local_ref< java::lang::Class > const &a2)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}


static_field<
	android::text::Spanned::J2CPP_CLASS_NAME,
	android::text::Spanned::J2CPP_FIELD_NAME(0),
	android::text::Spanned::J2CPP_FIELD_SIGNATURE(0),
	cpp_int
> android::text::Spanned::SPAN_POINT_MARK_MASK;

static_field<
	android::text::Spanned::J2CPP_CLASS_NAME,
	android::text::Spanned::J2CPP_FIELD_NAME(1),
	android::text::Spanned::J2CPP_FIELD_SIGNATURE(1),
	cpp_int
> android::text::Spanned::SPAN_MARK_MARK;

static_field<
	android::text::Spanned::J2CPP_CLASS_NAME,
	android::text::Spanned::J2CPP_FIELD_NAME(2),
	android::text::Spanned::J2CPP_FIELD_SIGNATURE(2),
	cpp_int
> android::text::Spanned::SPAN_MARK_POINT;

static_field<
	android::text::Spanned::J2CPP_CLASS_NAME,
	android::text::Spanned::J2CPP_FIELD_NAME(3),
	android::text::Spanned::J2CPP_FIELD_SIGNATURE(3),
	cpp_int
> android::text::Spanned::SPAN_POINT_MARK;

static_field<
	android::text::Spanned::J2CPP_CLASS_NAME,
	android::text::Spanned::J2CPP_FIELD_NAME(4),
	android::text::Spanned::J2CPP_FIELD_SIGNATURE(4),
	cpp_int
> android::text::Spanned::SPAN_POINT_POINT;

static_field<
	android::text::Spanned::J2CPP_CLASS_NAME,
	android::text::Spanned::J2CPP_FIELD_NAME(5),
	android::text::Spanned::J2CPP_FIELD_SIGNATURE(5),
	cpp_int
> android::text::Spanned::SPAN_PARAGRAPH;

static_field<
	android::text::Spanned::J2CPP_CLASS_NAME,
	android::text::Spanned::J2CPP_FIELD_NAME(6),
	android::text::Spanned::J2CPP_FIELD_SIGNATURE(6),
	cpp_int
> android::text::Spanned::SPAN_INCLUSIVE_EXCLUSIVE;

static_field<
	android::text::Spanned::J2CPP_CLASS_NAME,
	android::text::Spanned::J2CPP_FIELD_NAME(7),
	android::text::Spanned::J2CPP_FIELD_SIGNATURE(7),
	cpp_int
> android::text::Spanned::SPAN_INCLUSIVE_INCLUSIVE;

static_field<
	android::text::Spanned::J2CPP_CLASS_NAME,
	android::text::Spanned::J2CPP_FIELD_NAME(8),
	android::text::Spanned::J2CPP_FIELD_SIGNATURE(8),
	cpp_int
> android::text::Spanned::SPAN_EXCLUSIVE_EXCLUSIVE;

static_field<
	android::text::Spanned::J2CPP_CLASS_NAME,
	android::text::Spanned::J2CPP_FIELD_NAME(9),
	android::text::Spanned::J2CPP_FIELD_SIGNATURE(9),
	cpp_int
> android::text::Spanned::SPAN_EXCLUSIVE_INCLUSIVE;

static_field<
	android::text::Spanned::J2CPP_CLASS_NAME,
	android::text::Spanned::J2CPP_FIELD_NAME(10),
	android::text::Spanned::J2CPP_FIELD_SIGNATURE(10),
	cpp_int
> android::text::Spanned::SPAN_COMPOSING;

static_field<
	android::text::Spanned::J2CPP_CLASS_NAME,
	android::text::Spanned::J2CPP_FIELD_NAME(11),
	android::text::Spanned::J2CPP_FIELD_SIGNATURE(11),
	cpp_int
> android::text::Spanned::SPAN_INTERMEDIATE;

static_field<
	android::text::Spanned::J2CPP_CLASS_NAME,
	android::text::Spanned::J2CPP_FIELD_NAME(12),
	android::text::Spanned::J2CPP_FIELD_SIGNATURE(12),
	cpp_int
> android::text::Spanned::SPAN_USER_SHIFT;

static_field<
	android::text::Spanned::J2CPP_CLASS_NAME,
	android::text::Spanned::J2CPP_FIELD_NAME(13),
	android::text::Spanned::J2CPP_FIELD_SIGNATURE(13),
	cpp_int
> android::text::Spanned::SPAN_USER;

static_field<
	android::text::Spanned::J2CPP_CLASS_NAME,
	android::text::Spanned::J2CPP_FIELD_NAME(14),
	android::text::Spanned::J2CPP_FIELD_SIGNATURE(14),
	cpp_int
> android::text::Spanned::SPAN_PRIORITY_SHIFT;

static_field<
	android::text::Spanned::J2CPP_CLASS_NAME,
	android::text::Spanned::J2CPP_FIELD_NAME(15),
	android::text::Spanned::J2CPP_FIELD_SIGNATURE(15),
	cpp_int
> android::text::Spanned::SPAN_PRIORITY;


J2CPP_DEFINE_CLASS(android::text::Spanned,"android/text/Spanned")
J2CPP_DEFINE_METHOD(android::text::Spanned,0,"getSpans","(IILjava/lang/Class;)[java.lang.Object")
J2CPP_DEFINE_METHOD(android::text::Spanned,1,"getSpanStart","(Ljava/lang/Object;)I")
J2CPP_DEFINE_METHOD(android::text::Spanned,2,"getSpanEnd","(Ljava/lang/Object;)I")
J2CPP_DEFINE_METHOD(android::text::Spanned,3,"getSpanFlags","(Ljava/lang/Object;)I")
J2CPP_DEFINE_METHOD(android::text::Spanned,4,"nextSpanTransition","(IILjava/lang/Class;)I")
J2CPP_DEFINE_FIELD(android::text::Spanned,0,"SPAN_POINT_MARK_MASK","I")
J2CPP_DEFINE_FIELD(android::text::Spanned,1,"SPAN_MARK_MARK","I")
J2CPP_DEFINE_FIELD(android::text::Spanned,2,"SPAN_MARK_POINT","I")
J2CPP_DEFINE_FIELD(android::text::Spanned,3,"SPAN_POINT_MARK","I")
J2CPP_DEFINE_FIELD(android::text::Spanned,4,"SPAN_POINT_POINT","I")
J2CPP_DEFINE_FIELD(android::text::Spanned,5,"SPAN_PARAGRAPH","I")
J2CPP_DEFINE_FIELD(android::text::Spanned,6,"SPAN_INCLUSIVE_EXCLUSIVE","I")
J2CPP_DEFINE_FIELD(android::text::Spanned,7,"SPAN_INCLUSIVE_INCLUSIVE","I")
J2CPP_DEFINE_FIELD(android::text::Spanned,8,"SPAN_EXCLUSIVE_EXCLUSIVE","I")
J2CPP_DEFINE_FIELD(android::text::Spanned,9,"SPAN_EXCLUSIVE_INCLUSIVE","I")
J2CPP_DEFINE_FIELD(android::text::Spanned,10,"SPAN_COMPOSING","I")
J2CPP_DEFINE_FIELD(android::text::Spanned,11,"SPAN_INTERMEDIATE","I")
J2CPP_DEFINE_FIELD(android::text::Spanned,12,"SPAN_USER_SHIFT","I")
J2CPP_DEFINE_FIELD(android::text::Spanned,13,"SPAN_USER","I")
J2CPP_DEFINE_FIELD(android::text::Spanned,14,"SPAN_PRIORITY_SHIFT","I")
J2CPP_DEFINE_FIELD(android::text::Spanned,15,"SPAN_PRIORITY","I")

} //namespace j2cpp

#endif //J2CPP_ANDROID_TEXT_SPANNED_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
