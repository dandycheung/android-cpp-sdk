/*================================================================================
  code generated by: java2cpp
  class: android.text.Editable
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_TEXT_EDITABLE_HPP_DECL
#define J2CPP_ANDROID_TEXT_EDITABLE_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace lang { class Appendable; } } }
namespace j2cpp { namespace java { namespace lang { class CharSequence; } } }
namespace j2cpp { namespace android { namespace text { class Spannable; } } }
namespace j2cpp { namespace android { namespace text { class InputFilter; } } }
namespace j2cpp { namespace android { namespace text { namespace Editable_ { class Factory; } } } }
namespace j2cpp { namespace android { namespace text { class GetChars; } } }


#include <android/text/Editable.hpp>
#include <android/text/GetChars.hpp>
#include <android/text/InputFilter.hpp>
#include <android/text/Spannable.hpp>
#include <java/lang/Appendable.hpp>
#include <java/lang/CharSequence.hpp>
#include <java/lang/Object.hpp>


namespace j2cpp {

namespace android { namespace text {

	class Editable;
	namespace Editable_ {

		class Factory;
		class Factory
			: public cpp_object<Factory>
		{
		public:

			J2CPP_DECLARE_CLASS

			J2CPP_DECLARE_METHOD(0)
			J2CPP_DECLARE_METHOD(1)
			J2CPP_DECLARE_METHOD(2)

			explicit Factory(jobject jobj)
			: cpp_object<Factory>(jobj)
			{
			}

			operator local_ref<java::lang::Object>() const;


			Factory();
			static local_ref< android::text::Editable_::Factory > getInstance();
			local_ref< android::text::Editable > newEditable(local_ref< java::lang::CharSequence > const&);
		}; //class Factory

	} //namespace Editable_

	class Editable
		: public cpp_object<Editable>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)

		typedef Editable_::Factory Factory;

		explicit Editable(jobject jobj)
		: cpp_object<Editable>(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;
		operator local_ref<java::lang::CharSequence>() const;
		operator local_ref<android::text::GetChars>() const;
		operator local_ref<android::text::Spannable>() const;
		operator local_ref<java::lang::Appendable>() const;


		local_ref< android::text::Editable > replace(cpp_int const&, cpp_int const&, local_ref< java::lang::CharSequence > const&, cpp_int const&, cpp_int const&);
		local_ref< android::text::Editable > replace(cpp_int const&, cpp_int const&, local_ref< java::lang::CharSequence > const&);
		local_ref< android::text::Editable > insert(cpp_int const&, local_ref< java::lang::CharSequence > const&, cpp_int const&, cpp_int const&);
		local_ref< android::text::Editable > insert(cpp_int const&, local_ref< java::lang::CharSequence > const&);
		local_ref< android::text::Editable > deleteThe(cpp_int const&, cpp_int const&);
		local_ref< android::text::Editable > append(local_ref< java::lang::CharSequence > const&);
		local_ref< android::text::Editable > append(local_ref< java::lang::CharSequence > const&, cpp_int const&, cpp_int const&);
		local_ref< android::text::Editable > append(cpp_char const&);
		void clear();
		void clearSpans();
		void setFilters(local_ref< cpp_object_array<android::text::InputFilter, 1> > const&);
		local_ref< cpp_object_array<android::text::InputFilter, 1> > getFilters();
	}; //class Editable

} //namespace text
} //namespace android

} //namespace j2cpp

#endif //J2CPP_ANDROID_TEXT_EDITABLE_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_TEXT_EDITABLE_HPP_IMPL
#define J2CPP_ANDROID_TEXT_EDITABLE_HPP_IMPL

namespace j2cpp {




android::text::Editable_::Factory::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jtype());
}


android::text::Editable_::Factory::Factory()
: cpp_object<android::text::Editable_::Factory>(
	environment::get().get_jenv()->NewObject(
		get_class<android::text::Editable_::Factory::J2CPP_CLASS_NAME>(),
		get_method_id<android::text::Editable_::Factory::J2CPP_CLASS_NAME, android::text::Editable_::Factory::J2CPP_METHOD_NAME(0), android::text::Editable_::Factory::J2CPP_METHOD_SIGNATURE(0), false>()
	)
)
{
}


local_ref< android::text::Editable_::Factory > android::text::Editable_::Factory::getInstance()
{
	return local_ref< android::text::Editable_::Factory >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), true>()
		)
	);
}

local_ref< android::text::Editable > android::text::Editable_::Factory::newEditable(local_ref< java::lang::CharSequence > const &a0)
{
	return local_ref< android::text::Editable >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>(),
			a0.get_jtype()
		)
	);
}


J2CPP_DEFINE_CLASS(android::text::Editable_::Factory,"android/text/Editable$Factory")
J2CPP_DEFINE_METHOD(android::text::Editable_::Factory,0,"<init>","()V")
J2CPP_DEFINE_METHOD(android::text::Editable_::Factory,1,"getInstance","()Landroid/text/Editable$Factory;")
J2CPP_DEFINE_METHOD(android::text::Editable_::Factory,2,"newEditable","(Ljava/lang/CharSequence;)Landroid/text/Editable;")



android::text::Editable::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jtype());
}

android::text::Editable::operator local_ref<java::lang::CharSequence>() const
{
	return local_ref<java::lang::CharSequence>(get_jtype());
}

android::text::Editable::operator local_ref<android::text::GetChars>() const
{
	return local_ref<android::text::GetChars>(get_jtype());
}

android::text::Editable::operator local_ref<android::text::Spannable>() const
{
	return local_ref<android::text::Spannable>(get_jtype());
}

android::text::Editable::operator local_ref<java::lang::Appendable>() const
{
	return local_ref<java::lang::Appendable>(get_jtype());
}

local_ref< android::text::Editable > android::text::Editable::replace(cpp_int const &a0, cpp_int const &a1, local_ref< java::lang::CharSequence > const &a2, cpp_int const &a3, cpp_int const &a4)
{
	return local_ref< android::text::Editable >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(0), J2CPP_METHOD_SIGNATURE(0), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype(), a3.get_jtype(), a4.get_jtype()
		)
	);
}

local_ref< android::text::Editable > android::text::Editable::replace(cpp_int const &a0, cpp_int const &a1, local_ref< java::lang::CharSequence > const &a2)
{
	return local_ref< android::text::Editable >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

local_ref< android::text::Editable > android::text::Editable::insert(cpp_int const &a0, local_ref< java::lang::CharSequence > const &a1, cpp_int const &a2, cpp_int const &a3)
{
	return local_ref< android::text::Editable >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype(), a3.get_jtype()
		)
	);
}

local_ref< android::text::Editable > android::text::Editable::insert(cpp_int const &a0, local_ref< java::lang::CharSequence > const &a1)
{
	return local_ref< android::text::Editable >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< android::text::Editable > android::text::Editable::deleteThe(cpp_int const &a0, cpp_int const &a1)
{
	return local_ref< android::text::Editable >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< android::text::Editable > android::text::Editable::append(local_ref< java::lang::CharSequence > const &a0)
{
	return local_ref< android::text::Editable >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< android::text::Editable > android::text::Editable::append(local_ref< java::lang::CharSequence > const &a0, cpp_int const &a1, cpp_int const &a2)
{
	return local_ref< android::text::Editable >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

local_ref< android::text::Editable > android::text::Editable::append(cpp_char const &a0)
{
	return local_ref< android::text::Editable >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(7), J2CPP_METHOD_SIGNATURE(7), false>(),
			a0.get_jtype()
		)
	);
}

void android::text::Editable::clear()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(8), J2CPP_METHOD_SIGNATURE(8), false>()
		)
	);
}

void android::text::Editable::clearSpans()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(9), J2CPP_METHOD_SIGNATURE(9), false>()
		)
	);
}

void android::text::Editable::setFilters(local_ref< cpp_object_array<android::text::InputFilter, 1> > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(10), J2CPP_METHOD_SIGNATURE(10), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< cpp_object_array<android::text::InputFilter, 1> > android::text::Editable::getFilters()
{
	return local_ref< cpp_object_array<android::text::InputFilter, 1> >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(11), J2CPP_METHOD_SIGNATURE(11), false>()
		)
	);
}


J2CPP_DEFINE_CLASS(android::text::Editable,"android/text/Editable")
J2CPP_DEFINE_METHOD(android::text::Editable,0,"replace","(IILjava/lang/CharSequence;II)Landroid/text/Editable;")
J2CPP_DEFINE_METHOD(android::text::Editable,1,"replace","(IILjava/lang/CharSequence;)Landroid/text/Editable;")
J2CPP_DEFINE_METHOD(android::text::Editable,2,"insert","(ILjava/lang/CharSequence;II)Landroid/text/Editable;")
J2CPP_DEFINE_METHOD(android::text::Editable,3,"insert","(ILjava/lang/CharSequence;)Landroid/text/Editable;")
J2CPP_DEFINE_METHOD(android::text::Editable,4,"delete","(II)Landroid/text/Editable;")
J2CPP_DEFINE_METHOD(android::text::Editable,5,"append","(Ljava/lang/CharSequence;)Landroid/text/Editable;")
J2CPP_DEFINE_METHOD(android::text::Editable,6,"append","(Ljava/lang/CharSequence;II)Landroid/text/Editable;")
J2CPP_DEFINE_METHOD(android::text::Editable,7,"append","(C)Landroid/text/Editable;")
J2CPP_DEFINE_METHOD(android::text::Editable,8,"clear","()V")
J2CPP_DEFINE_METHOD(android::text::Editable,9,"clearSpans","()V")
J2CPP_DEFINE_METHOD(android::text::Editable,10,"setFilters","([android.text.InputFilter)V")
J2CPP_DEFINE_METHOD(android::text::Editable,11,"getFilters","()[android.text.InputFilter")

} //namespace j2cpp

#endif //J2CPP_ANDROID_TEXT_EDITABLE_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
