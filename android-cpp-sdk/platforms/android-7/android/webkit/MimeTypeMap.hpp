/*================================================================================
  code generated by: java2cpp
  class: android.webkit.MimeTypeMap
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_WEBKIT_MIMETYPEMAP_HPP_DECL
#define J2CPP_ANDROID_WEBKIT_MIMETYPEMAP_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace lang { class String; } } }


#include <java/lang/Object.hpp>
#include <java/lang/String.hpp>


namespace j2cpp {

namespace android { namespace webkit {

	class MimeTypeMap;
	class MimeTypeMap
		: public cpp_object<MimeTypeMap>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)

		explicit MimeTypeMap(jobject jobj)
		: cpp_object<MimeTypeMap>(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;


		static local_ref< java::lang::String > getFileExtensionFromUrl(local_ref< java::lang::String > const&);
		cpp_boolean hasMimeType(local_ref< java::lang::String > const&);
		local_ref< java::lang::String > getMimeTypeFromExtension(local_ref< java::lang::String > const&);
		cpp_boolean hasExtension(local_ref< java::lang::String > const&);
		local_ref< java::lang::String > getExtensionFromMimeType(local_ref< java::lang::String > const&);
		static local_ref< android::webkit::MimeTypeMap > getSingleton();
	}; //class MimeTypeMap

} //namespace webkit
} //namespace android

} //namespace j2cpp

#endif //J2CPP_ANDROID_WEBKIT_MIMETYPEMAP_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_WEBKIT_MIMETYPEMAP_HPP_IMPL
#define J2CPP_ANDROID_WEBKIT_MIMETYPEMAP_HPP_IMPL

namespace j2cpp {



android::webkit::MimeTypeMap::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jtype());
}


local_ref< java::lang::String > android::webkit::MimeTypeMap::getFileExtensionFromUrl(local_ref< java::lang::String > const &a0)
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), true>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean android::webkit::MimeTypeMap::hasMimeType(local_ref< java::lang::String > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::String > android::webkit::MimeTypeMap::getMimeTypeFromExtension(local_ref< java::lang::String > const &a0)
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean android::webkit::MimeTypeMap::hasExtension(local_ref< java::lang::String > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::String > android::webkit::MimeTypeMap::getExtensionFromMimeType(local_ref< java::lang::String > const &a0)
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< android::webkit::MimeTypeMap > android::webkit::MimeTypeMap::getSingleton()
{
	return local_ref< android::webkit::MimeTypeMap >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), true>()
		)
	);
}


J2CPP_DEFINE_CLASS(android::webkit::MimeTypeMap,"android/webkit/MimeTypeMap")
J2CPP_DEFINE_METHOD(android::webkit::MimeTypeMap,0,"<init>","()V")
J2CPP_DEFINE_METHOD(android::webkit::MimeTypeMap,1,"getFileExtensionFromUrl","(Ljava/lang/String;)Ljava/lang/String;")
J2CPP_DEFINE_METHOD(android::webkit::MimeTypeMap,2,"hasMimeType","(Ljava/lang/String;)Z")
J2CPP_DEFINE_METHOD(android::webkit::MimeTypeMap,3,"getMimeTypeFromExtension","(Ljava/lang/String;)Ljava/lang/String;")
J2CPP_DEFINE_METHOD(android::webkit::MimeTypeMap,4,"hasExtension","(Ljava/lang/String;)Z")
J2CPP_DEFINE_METHOD(android::webkit::MimeTypeMap,5,"getExtensionFromMimeType","(Ljava/lang/String;)Ljava/lang/String;")
J2CPP_DEFINE_METHOD(android::webkit::MimeTypeMap,6,"getSingleton","()Landroid/webkit/MimeTypeMap;")

} //namespace j2cpp

#endif //J2CPP_ANDROID_WEBKIT_MIMETYPEMAP_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
