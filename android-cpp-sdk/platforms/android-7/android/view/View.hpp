/*================================================================================
  code generated by: java2cpp
  class: android.view.View
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_VIEW_VIEW_HPP_DECL
#define J2CPP_ANDROID_VIEW_VIEW_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace lang { class CharSequence; } } }
namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace lang { class Runnable; } } }
namespace j2cpp { namespace java { namespace util { class ArrayList; } } }
namespace j2cpp { namespace android { namespace graphics { class Canvas; } } }
namespace j2cpp { namespace android { namespace graphics { class Bitmap; } } }
namespace j2cpp { namespace android { namespace graphics { class Point; } } }
namespace j2cpp { namespace android { namespace graphics { namespace drawable { class Drawable; } } } }
namespace j2cpp { namespace android { namespace graphics { namespace drawable { namespace Drawable_ { class Callback; } } } } }
namespace j2cpp { namespace android { namespace graphics { class Rect; } } }
namespace j2cpp { namespace android { namespace content { namespace res { class Resources; } } } }
namespace j2cpp { namespace android { namespace content { class Context; } } }
namespace j2cpp { namespace android { namespace view { namespace View_ { class OnTouchListener; } } } }
namespace j2cpp { namespace android { namespace view { class ViewGroup; } } }
namespace j2cpp { namespace android { namespace view { class ViewTreeObserver; } } }
namespace j2cpp { namespace android { namespace view { namespace inputmethod { class InputConnection; } } } }
namespace j2cpp { namespace android { namespace view { namespace inputmethod { class EditorInfo; } } } }
namespace j2cpp { namespace android { namespace view { class KeyEvent; } } }
namespace j2cpp { namespace android { namespace view { class ViewParent; } } }
namespace j2cpp { namespace android { namespace view { class ContextMenu; } } }
namespace j2cpp { namespace android { namespace view { namespace View_ { class OnLongClickListener; } } } }
namespace j2cpp { namespace android { namespace view { class AbsSavedState; } } }
namespace j2cpp { namespace android { namespace view { class TouchDelegate; } } }
namespace j2cpp { namespace android { namespace view { class MotionEvent; } } }
namespace j2cpp { namespace android { namespace view { namespace accessibility { class AccessibilityEvent; } } } }
namespace j2cpp { namespace android { namespace view { namespace accessibility { class AccessibilityEventSource; } } } }
namespace j2cpp { namespace android { namespace view { namespace KeyEvent_ { class DispatcherState; } } } }
namespace j2cpp { namespace android { namespace view { namespace View_ { class OnClickListener; } } } }
namespace j2cpp { namespace android { namespace view { namespace ViewGroup_ { class LayoutParams; } } } }
namespace j2cpp { namespace android { namespace view { namespace View_ { class OnFocusChangeListener; } } } }
namespace j2cpp { namespace android { namespace view { namespace View_ { class OnKeyListener; } } } }
namespace j2cpp { namespace android { namespace view { namespace View_ { class OnCreateContextMenuListener; } } } }
namespace j2cpp { namespace android { namespace view { namespace ContextMenu_ { class ContextMenuInfo; } } } }
namespace j2cpp { namespace android { namespace view { namespace animation { class Animation; } } } }
namespace j2cpp { namespace android { namespace util { class SparseArray; } } }
namespace j2cpp { namespace android { namespace util { class AttributeSet; } } }
namespace j2cpp { namespace android { namespace os { class IBinder; } } }
namespace j2cpp { namespace android { namespace os { class Parcel; } } }
namespace j2cpp { namespace android { namespace os { class Parcelable; } } }
namespace j2cpp { namespace android { namespace os { class Handler; } } }
namespace j2cpp { namespace android { namespace os { namespace Parcelable_ { class Creator; } } } }


#include <android/content/Context.hpp>
#include <android/content/res/Resources.hpp>
#include <android/graphics/Bitmap.hpp>
#include <android/graphics/Canvas.hpp>
#include <android/graphics/Point.hpp>
#include <android/graphics/Rect.hpp>
#include <android/graphics/drawable/Drawable.hpp>
#include <android/os/Handler.hpp>
#include <android/os/IBinder.hpp>
#include <android/os/Parcel.hpp>
#include <android/os/Parcelable.hpp>
#include <android/util/AttributeSet.hpp>
#include <android/util/SparseArray.hpp>
#include <android/view/AbsSavedState.hpp>
#include <android/view/ContextMenu.hpp>
#include <android/view/KeyEvent.hpp>
#include <android/view/MotionEvent.hpp>
#include <android/view/TouchDelegate.hpp>
#include <android/view/View.hpp>
#include <android/view/ViewGroup.hpp>
#include <android/view/ViewParent.hpp>
#include <android/view/ViewTreeObserver.hpp>
#include <android/view/accessibility/AccessibilityEvent.hpp>
#include <android/view/accessibility/AccessibilityEventSource.hpp>
#include <android/view/animation/Animation.hpp>
#include <android/view/inputmethod/EditorInfo.hpp>
#include <android/view/inputmethod/InputConnection.hpp>
#include <java/lang/CharSequence.hpp>
#include <java/lang/Object.hpp>
#include <java/lang/Runnable.hpp>
#include <java/lang/String.hpp>
#include <java/util/ArrayList.hpp>


namespace j2cpp {

namespace android { namespace view {

	class View;
	namespace View_ {

		class OnTouchListener;
		class OnTouchListener
			: public cpp_object<OnTouchListener>
		{
		public:

			J2CPP_DECLARE_CLASS

			J2CPP_DECLARE_METHOD(0)

			explicit OnTouchListener(jobject jobj)
			: cpp_object<OnTouchListener>(jobj)
			{
			}

			operator local_ref<java::lang::Object>() const;


			cpp_boolean onTouch(local_ref< android::view::View > const&, local_ref< android::view::MotionEvent > const&);
		}; //class OnTouchListener

		class BaseSavedState;
		class BaseSavedState
			: public cpp_object<BaseSavedState>
		{
		public:

			J2CPP_DECLARE_CLASS

			J2CPP_DECLARE_METHOD(0)
			J2CPP_DECLARE_METHOD(1)
			J2CPP_DECLARE_METHOD(2)
			J2CPP_DECLARE_FIELD(0)

			explicit BaseSavedState(jobject jobj)
			: cpp_object<BaseSavedState>(jobj)
			{
			}

			operator local_ref<android::view::AbsSavedState>() const;


			BaseSavedState(local_ref< android::os::Parcel > const&);
			BaseSavedState(local_ref< android::os::Parcelable > const&);

			static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(0), J2CPP_FIELD_SIGNATURE(0), local_ref< android::os::Parcelable_::Creator > > CREATOR;
		}; //class BaseSavedState

		class OnLongClickListener;
		class OnLongClickListener
			: public cpp_object<OnLongClickListener>
		{
		public:

			J2CPP_DECLARE_CLASS

			J2CPP_DECLARE_METHOD(0)

			explicit OnLongClickListener(jobject jobj)
			: cpp_object<OnLongClickListener>(jobj)
			{
			}

			operator local_ref<java::lang::Object>() const;


			cpp_boolean onLongClick(local_ref< android::view::View > const&);
		}; //class OnLongClickListener

		class OnClickListener;
		class OnClickListener
			: public cpp_object<OnClickListener>
		{
		public:

			J2CPP_DECLARE_CLASS

			J2CPP_DECLARE_METHOD(0)

			explicit OnClickListener(jobject jobj)
			: cpp_object<OnClickListener>(jobj)
			{
			}

			operator local_ref<java::lang::Object>() const;


			void onClick(local_ref< android::view::View > const&);
		}; //class OnClickListener

		class OnFocusChangeListener;
		class OnFocusChangeListener
			: public cpp_object<OnFocusChangeListener>
		{
		public:

			J2CPP_DECLARE_CLASS

			J2CPP_DECLARE_METHOD(0)

			explicit OnFocusChangeListener(jobject jobj)
			: cpp_object<OnFocusChangeListener>(jobj)
			{
			}

			operator local_ref<java::lang::Object>() const;


			void onFocusChange(local_ref< android::view::View > const&, cpp_boolean const&);
		}; //class OnFocusChangeListener

		class OnKeyListener;
		class OnKeyListener
			: public cpp_object<OnKeyListener>
		{
		public:

			J2CPP_DECLARE_CLASS

			J2CPP_DECLARE_METHOD(0)

			explicit OnKeyListener(jobject jobj)
			: cpp_object<OnKeyListener>(jobj)
			{
			}

			operator local_ref<java::lang::Object>() const;


			cpp_boolean onKey(local_ref< android::view::View > const&, cpp_int const&, local_ref< android::view::KeyEvent > const&);
		}; //class OnKeyListener

		class OnCreateContextMenuListener;
		class OnCreateContextMenuListener
			: public cpp_object<OnCreateContextMenuListener>
		{
		public:

			J2CPP_DECLARE_CLASS

			J2CPP_DECLARE_METHOD(0)

			explicit OnCreateContextMenuListener(jobject jobj)
			: cpp_object<OnCreateContextMenuListener>(jobj)
			{
			}

			operator local_ref<java::lang::Object>() const;


			void onCreateContextMenu(local_ref< android::view::ContextMenu > const&, local_ref< android::view::View > const&, local_ref< android::view::ContextMenu_::ContextMenuInfo > const&);
		}; //class OnCreateContextMenuListener

		class MeasureSpec;
		class MeasureSpec
			: public cpp_object<MeasureSpec>
		{
		public:

			J2CPP_DECLARE_CLASS

			J2CPP_DECLARE_METHOD(0)
			J2CPP_DECLARE_METHOD(1)
			J2CPP_DECLARE_METHOD(2)
			J2CPP_DECLARE_METHOD(3)
			J2CPP_DECLARE_METHOD(4)
			J2CPP_DECLARE_FIELD(0)
			J2CPP_DECLARE_FIELD(1)
			J2CPP_DECLARE_FIELD(2)

			explicit MeasureSpec(jobject jobj)
			: cpp_object<MeasureSpec>(jobj)
			{
			}

			operator local_ref<java::lang::Object>() const;


			MeasureSpec();
			static cpp_int makeMeasureSpec(cpp_int const&, cpp_int const&);
			static cpp_int getMode(cpp_int const&);
			static cpp_int getSize(cpp_int const&);
			static local_ref< java::lang::String > toString(cpp_int const&);

			static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(0), J2CPP_FIELD_SIGNATURE(0), cpp_int > UNSPECIFIED;
			static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(1), J2CPP_FIELD_SIGNATURE(1), cpp_int > EXACTLY;
			static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(2), J2CPP_FIELD_SIGNATURE(2), cpp_int > AT_MOST;
		}; //class MeasureSpec

	} //namespace View_

	class View
		: public cpp_object<View>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_METHOD(12)
		J2CPP_DECLARE_METHOD(13)
		J2CPP_DECLARE_METHOD(14)
		J2CPP_DECLARE_METHOD(15)
		J2CPP_DECLARE_METHOD(16)
		J2CPP_DECLARE_METHOD(17)
		J2CPP_DECLARE_METHOD(18)
		J2CPP_DECLARE_METHOD(19)
		J2CPP_DECLARE_METHOD(20)
		J2CPP_DECLARE_METHOD(21)
		J2CPP_DECLARE_METHOD(22)
		J2CPP_DECLARE_METHOD(23)
		J2CPP_DECLARE_METHOD(24)
		J2CPP_DECLARE_METHOD(25)
		J2CPP_DECLARE_METHOD(26)
		J2CPP_DECLARE_METHOD(27)
		J2CPP_DECLARE_METHOD(28)
		J2CPP_DECLARE_METHOD(29)
		J2CPP_DECLARE_METHOD(30)
		J2CPP_DECLARE_METHOD(31)
		J2CPP_DECLARE_METHOD(32)
		J2CPP_DECLARE_METHOD(33)
		J2CPP_DECLARE_METHOD(34)
		J2CPP_DECLARE_METHOD(35)
		J2CPP_DECLARE_METHOD(36)
		J2CPP_DECLARE_METHOD(37)
		J2CPP_DECLARE_METHOD(38)
		J2CPP_DECLARE_METHOD(39)
		J2CPP_DECLARE_METHOD(40)
		J2CPP_DECLARE_METHOD(41)
		J2CPP_DECLARE_METHOD(42)
		J2CPP_DECLARE_METHOD(43)
		J2CPP_DECLARE_METHOD(44)
		J2CPP_DECLARE_METHOD(45)
		J2CPP_DECLARE_METHOD(46)
		J2CPP_DECLARE_METHOD(47)
		J2CPP_DECLARE_METHOD(48)
		J2CPP_DECLARE_METHOD(49)
		J2CPP_DECLARE_METHOD(50)
		J2CPP_DECLARE_METHOD(51)
		J2CPP_DECLARE_METHOD(52)
		J2CPP_DECLARE_METHOD(53)
		J2CPP_DECLARE_METHOD(54)
		J2CPP_DECLARE_METHOD(55)
		J2CPP_DECLARE_METHOD(56)
		J2CPP_DECLARE_METHOD(57)
		J2CPP_DECLARE_METHOD(58)
		J2CPP_DECLARE_METHOD(59)
		J2CPP_DECLARE_METHOD(60)
		J2CPP_DECLARE_METHOD(61)
		J2CPP_DECLARE_METHOD(62)
		J2CPP_DECLARE_METHOD(63)
		J2CPP_DECLARE_METHOD(64)
		J2CPP_DECLARE_METHOD(65)
		J2CPP_DECLARE_METHOD(66)
		J2CPP_DECLARE_METHOD(67)
		J2CPP_DECLARE_METHOD(68)
		J2CPP_DECLARE_METHOD(69)
		J2CPP_DECLARE_METHOD(70)
		J2CPP_DECLARE_METHOD(71)
		J2CPP_DECLARE_METHOD(72)
		J2CPP_DECLARE_METHOD(73)
		J2CPP_DECLARE_METHOD(74)
		J2CPP_DECLARE_METHOD(75)
		J2CPP_DECLARE_METHOD(76)
		J2CPP_DECLARE_METHOD(77)
		J2CPP_DECLARE_METHOD(78)
		J2CPP_DECLARE_METHOD(79)
		J2CPP_DECLARE_METHOD(80)
		J2CPP_DECLARE_METHOD(81)
		J2CPP_DECLARE_METHOD(82)
		J2CPP_DECLARE_METHOD(83)
		J2CPP_DECLARE_METHOD(84)
		J2CPP_DECLARE_METHOD(85)
		J2CPP_DECLARE_METHOD(86)
		J2CPP_DECLARE_METHOD(87)
		J2CPP_DECLARE_METHOD(88)
		J2CPP_DECLARE_METHOD(89)
		J2CPP_DECLARE_METHOD(90)
		J2CPP_DECLARE_METHOD(91)
		J2CPP_DECLARE_METHOD(92)
		J2CPP_DECLARE_METHOD(93)
		J2CPP_DECLARE_METHOD(94)
		J2CPP_DECLARE_METHOD(95)
		J2CPP_DECLARE_METHOD(96)
		J2CPP_DECLARE_METHOD(97)
		J2CPP_DECLARE_METHOD(98)
		J2CPP_DECLARE_METHOD(99)
		J2CPP_DECLARE_METHOD(100)
		J2CPP_DECLARE_METHOD(101)
		J2CPP_DECLARE_METHOD(102)
		J2CPP_DECLARE_METHOD(103)
		J2CPP_DECLARE_METHOD(104)
		J2CPP_DECLARE_METHOD(105)
		J2CPP_DECLARE_METHOD(106)
		J2CPP_DECLARE_METHOD(107)
		J2CPP_DECLARE_METHOD(108)
		J2CPP_DECLARE_METHOD(109)
		J2CPP_DECLARE_METHOD(110)
		J2CPP_DECLARE_METHOD(111)
		J2CPP_DECLARE_METHOD(112)
		J2CPP_DECLARE_METHOD(113)
		J2CPP_DECLARE_METHOD(114)
		J2CPP_DECLARE_METHOD(115)
		J2CPP_DECLARE_METHOD(116)
		J2CPP_DECLARE_METHOD(117)
		J2CPP_DECLARE_METHOD(118)
		J2CPP_DECLARE_METHOD(119)
		J2CPP_DECLARE_METHOD(120)
		J2CPP_DECLARE_METHOD(121)
		J2CPP_DECLARE_METHOD(122)
		J2CPP_DECLARE_METHOD(123)
		J2CPP_DECLARE_METHOD(124)
		J2CPP_DECLARE_METHOD(125)
		J2CPP_DECLARE_METHOD(126)
		J2CPP_DECLARE_METHOD(127)
		J2CPP_DECLARE_METHOD(128)
		J2CPP_DECLARE_METHOD(129)
		J2CPP_DECLARE_METHOD(130)
		J2CPP_DECLARE_METHOD(131)
		J2CPP_DECLARE_METHOD(132)
		J2CPP_DECLARE_METHOD(133)
		J2CPP_DECLARE_METHOD(134)
		J2CPP_DECLARE_METHOD(135)
		J2CPP_DECLARE_METHOD(136)
		J2CPP_DECLARE_METHOD(137)
		J2CPP_DECLARE_METHOD(138)
		J2CPP_DECLARE_METHOD(139)
		J2CPP_DECLARE_METHOD(140)
		J2CPP_DECLARE_METHOD(141)
		J2CPP_DECLARE_METHOD(142)
		J2CPP_DECLARE_METHOD(143)
		J2CPP_DECLARE_METHOD(144)
		J2CPP_DECLARE_METHOD(145)
		J2CPP_DECLARE_METHOD(146)
		J2CPP_DECLARE_METHOD(147)
		J2CPP_DECLARE_METHOD(148)
		J2CPP_DECLARE_METHOD(149)
		J2CPP_DECLARE_METHOD(150)
		J2CPP_DECLARE_METHOD(151)
		J2CPP_DECLARE_METHOD(152)
		J2CPP_DECLARE_METHOD(153)
		J2CPP_DECLARE_METHOD(154)
		J2CPP_DECLARE_METHOD(155)
		J2CPP_DECLARE_METHOD(156)
		J2CPP_DECLARE_METHOD(157)
		J2CPP_DECLARE_METHOD(158)
		J2CPP_DECLARE_METHOD(159)
		J2CPP_DECLARE_METHOD(160)
		J2CPP_DECLARE_METHOD(161)
		J2CPP_DECLARE_METHOD(162)
		J2CPP_DECLARE_METHOD(163)
		J2CPP_DECLARE_METHOD(164)
		J2CPP_DECLARE_METHOD(165)
		J2CPP_DECLARE_METHOD(166)
		J2CPP_DECLARE_METHOD(167)
		J2CPP_DECLARE_METHOD(168)
		J2CPP_DECLARE_METHOD(169)
		J2CPP_DECLARE_METHOD(170)
		J2CPP_DECLARE_METHOD(171)
		J2CPP_DECLARE_METHOD(172)
		J2CPP_DECLARE_METHOD(173)
		J2CPP_DECLARE_METHOD(174)
		J2CPP_DECLARE_METHOD(175)
		J2CPP_DECLARE_METHOD(176)
		J2CPP_DECLARE_METHOD(177)
		J2CPP_DECLARE_METHOD(178)
		J2CPP_DECLARE_METHOD(179)
		J2CPP_DECLARE_METHOD(180)
		J2CPP_DECLARE_METHOD(181)
		J2CPP_DECLARE_METHOD(182)
		J2CPP_DECLARE_METHOD(183)
		J2CPP_DECLARE_METHOD(184)
		J2CPP_DECLARE_METHOD(185)
		J2CPP_DECLARE_METHOD(186)
		J2CPP_DECLARE_METHOD(187)
		J2CPP_DECLARE_METHOD(188)
		J2CPP_DECLARE_METHOD(189)
		J2CPP_DECLARE_METHOD(190)
		J2CPP_DECLARE_METHOD(191)
		J2CPP_DECLARE_METHOD(192)
		J2CPP_DECLARE_METHOD(193)
		J2CPP_DECLARE_METHOD(194)
		J2CPP_DECLARE_METHOD(195)
		J2CPP_DECLARE_METHOD(196)
		J2CPP_DECLARE_METHOD(197)
		J2CPP_DECLARE_METHOD(198)
		J2CPP_DECLARE_METHOD(199)
		J2CPP_DECLARE_METHOD(200)
		J2CPP_DECLARE_METHOD(201)
		J2CPP_DECLARE_METHOD(202)
		J2CPP_DECLARE_METHOD(203)
		J2CPP_DECLARE_METHOD(204)
		J2CPP_DECLARE_METHOD(205)
		J2CPP_DECLARE_METHOD(206)
		J2CPP_DECLARE_METHOD(207)
		J2CPP_DECLARE_METHOD(208)
		J2CPP_DECLARE_METHOD(209)
		J2CPP_DECLARE_METHOD(210)
		J2CPP_DECLARE_METHOD(211)
		J2CPP_DECLARE_METHOD(212)
		J2CPP_DECLARE_METHOD(213)
		J2CPP_DECLARE_METHOD(214)
		J2CPP_DECLARE_METHOD(215)
		J2CPP_DECLARE_METHOD(216)
		J2CPP_DECLARE_METHOD(217)
		J2CPP_DECLARE_METHOD(218)
		J2CPP_DECLARE_METHOD(219)
		J2CPP_DECLARE_METHOD(220)
		J2CPP_DECLARE_METHOD(221)
		J2CPP_DECLARE_METHOD(222)
		J2CPP_DECLARE_METHOD(223)
		J2CPP_DECLARE_METHOD(224)
		J2CPP_DECLARE_METHOD(225)
		J2CPP_DECLARE_METHOD(226)
		J2CPP_DECLARE_METHOD(227)
		J2CPP_DECLARE_METHOD(228)
		J2CPP_DECLARE_METHOD(229)
		J2CPP_DECLARE_METHOD(230)
		J2CPP_DECLARE_METHOD(231)
		J2CPP_DECLARE_METHOD(232)
		J2CPP_DECLARE_METHOD(233)
		J2CPP_DECLARE_METHOD(234)
		J2CPP_DECLARE_METHOD(235)
		J2CPP_DECLARE_METHOD(236)
		J2CPP_DECLARE_METHOD(237)
		J2CPP_DECLARE_METHOD(238)
		J2CPP_DECLARE_METHOD(239)
		J2CPP_DECLARE_METHOD(240)
		J2CPP_DECLARE_METHOD(241)
		J2CPP_DECLARE_METHOD(242)
		J2CPP_DECLARE_METHOD(243)
		J2CPP_DECLARE_METHOD(244)
		J2CPP_DECLARE_METHOD(245)
		J2CPP_DECLARE_METHOD(246)
		J2CPP_DECLARE_METHOD(247)
		J2CPP_DECLARE_METHOD(248)
		J2CPP_DECLARE_METHOD(249)
		J2CPP_DECLARE_METHOD(250)
		J2CPP_DECLARE_METHOD(251)
		J2CPP_DECLARE_METHOD(252)
		J2CPP_DECLARE_METHOD(253)
		J2CPP_DECLARE_METHOD(254)
		J2CPP_DECLARE_METHOD(255)
		J2CPP_DECLARE_METHOD(256)
		J2CPP_DECLARE_METHOD(257)
		J2CPP_DECLARE_METHOD(258)
		J2CPP_DECLARE_METHOD(259)
		J2CPP_DECLARE_METHOD(260)
		J2CPP_DECLARE_METHOD(261)
		J2CPP_DECLARE_METHOD(262)
		J2CPP_DECLARE_METHOD(263)
		J2CPP_DECLARE_METHOD(264)
		J2CPP_DECLARE_METHOD(265)
		J2CPP_DECLARE_METHOD(266)
		J2CPP_DECLARE_METHOD(267)
		J2CPP_DECLARE_METHOD(268)
		J2CPP_DECLARE_METHOD(269)
		J2CPP_DECLARE_METHOD(270)
		J2CPP_DECLARE_METHOD(271)
		J2CPP_DECLARE_METHOD(272)
		J2CPP_DECLARE_METHOD(273)
		J2CPP_DECLARE_METHOD(274)
		J2CPP_DECLARE_METHOD(275)
		J2CPP_DECLARE_METHOD(276)
		J2CPP_DECLARE_METHOD(277)
		J2CPP_DECLARE_METHOD(278)
		J2CPP_DECLARE_METHOD(279)
		J2CPP_DECLARE_FIELD(0)
		J2CPP_DECLARE_FIELD(1)
		J2CPP_DECLARE_FIELD(2)
		J2CPP_DECLARE_FIELD(3)
		J2CPP_DECLARE_FIELD(4)
		J2CPP_DECLARE_FIELD(5)
		J2CPP_DECLARE_FIELD(6)
		J2CPP_DECLARE_FIELD(7)
		J2CPP_DECLARE_FIELD(8)
		J2CPP_DECLARE_FIELD(9)
		J2CPP_DECLARE_FIELD(10)
		J2CPP_DECLARE_FIELD(11)
		J2CPP_DECLARE_FIELD(12)
		J2CPP_DECLARE_FIELD(13)
		J2CPP_DECLARE_FIELD(14)
		J2CPP_DECLARE_FIELD(15)
		J2CPP_DECLARE_FIELD(16)
		J2CPP_DECLARE_FIELD(17)
		J2CPP_DECLARE_FIELD(18)
		J2CPP_DECLARE_FIELD(19)
		J2CPP_DECLARE_FIELD(20)
		J2CPP_DECLARE_FIELD(21)
		J2CPP_DECLARE_FIELD(22)
		J2CPP_DECLARE_FIELD(23)
		J2CPP_DECLARE_FIELD(24)
		J2CPP_DECLARE_FIELD(25)
		J2CPP_DECLARE_FIELD(26)
		J2CPP_DECLARE_FIELD(27)
		J2CPP_DECLARE_FIELD(28)
		J2CPP_DECLARE_FIELD(29)
		J2CPP_DECLARE_FIELD(30)
		J2CPP_DECLARE_FIELD(31)
		J2CPP_DECLARE_FIELD(32)
		J2CPP_DECLARE_FIELD(33)
		J2CPP_DECLARE_FIELD(34)
		J2CPP_DECLARE_FIELD(35)
		J2CPP_DECLARE_FIELD(36)
		J2CPP_DECLARE_FIELD(37)
		J2CPP_DECLARE_FIELD(38)
		J2CPP_DECLARE_FIELD(39)
		J2CPP_DECLARE_FIELD(40)
		J2CPP_DECLARE_FIELD(41)
		J2CPP_DECLARE_FIELD(42)
		J2CPP_DECLARE_FIELD(43)
		J2CPP_DECLARE_FIELD(44)
		J2CPP_DECLARE_FIELD(45)
		J2CPP_DECLARE_FIELD(46)
		J2CPP_DECLARE_FIELD(47)
		J2CPP_DECLARE_FIELD(48)
		J2CPP_DECLARE_FIELD(49)
		J2CPP_DECLARE_FIELD(50)
		J2CPP_DECLARE_FIELD(51)
		J2CPP_DECLARE_FIELD(52)
		J2CPP_DECLARE_FIELD(53)

		typedef View_::OnTouchListener OnTouchListener;
		typedef View_::BaseSavedState BaseSavedState;
		typedef View_::OnLongClickListener OnLongClickListener;
		typedef View_::OnClickListener OnClickListener;
		typedef View_::OnFocusChangeListener OnFocusChangeListener;
		typedef View_::OnKeyListener OnKeyListener;
		typedef View_::OnCreateContextMenuListener OnCreateContextMenuListener;
		typedef View_::MeasureSpec MeasureSpec;

		explicit View(jobject jobj)
		: cpp_object<View>(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;
		operator local_ref<android::graphics::drawable::Drawable_::Callback>() const;
		operator local_ref<android::view::accessibility::AccessibilityEventSource>() const;


		View(local_ref< android::content::Context > const&);
		View(local_ref< android::content::Context > const&, local_ref< android::util::AttributeSet > const&);
		View(local_ref< android::content::Context > const&, local_ref< android::util::AttributeSet > const&, cpp_int const&);
		cpp_int getVerticalFadingEdgeLength();
		void setFadingEdgeLength(cpp_int const&);
		cpp_int getHorizontalFadingEdgeLength();
		cpp_int getVerticalScrollbarWidth();
		void setOnFocusChangeListener(local_ref< android::view::View_::OnFocusChangeListener > const&);
		local_ref< android::view::View_::OnFocusChangeListener > getOnFocusChangeListener();
		void setOnClickListener(local_ref< android::view::View_::OnClickListener > const&);
		void setOnLongClickListener(local_ref< android::view::View_::OnLongClickListener > const&);
		void setOnCreateContextMenuListener(local_ref< android::view::View_::OnCreateContextMenuListener > const&);
		cpp_boolean performClick();
		cpp_boolean performLongClick();
		cpp_boolean showContextMenu();
		void setOnKeyListener(local_ref< android::view::View_::OnKeyListener > const&);
		void setOnTouchListener(local_ref< android::view::View_::OnTouchListener > const&);
		cpp_boolean requestRectangleOnScreen(local_ref< android::graphics::Rect > const&);
		cpp_boolean requestRectangleOnScreen(local_ref< android::graphics::Rect > const&, cpp_boolean const&);
		void clearFocus();
		cpp_boolean hasFocus();
		cpp_boolean hasFocusable();
		void sendAccessibilityEvent(cpp_int const&);
		void sendAccessibilityEventUnchecked(local_ref< android::view::accessibility::AccessibilityEvent > const&);
		cpp_boolean dispatchPopulateAccessibilityEvent(local_ref< android::view::accessibility::AccessibilityEvent > const&);
		local_ref< java::lang::CharSequence > getContentDescription();
		void setContentDescription(local_ref< java::lang::CharSequence > const&);
		cpp_boolean isFocused();
		local_ref< android::view::View > findFocus();
		void setScrollContainer(cpp_boolean const&);
		cpp_int getDrawingCacheQuality();
		void setDrawingCacheQuality(cpp_int const&);
		cpp_boolean getKeepScreenOn();
		void setKeepScreenOn(cpp_boolean const&);
		cpp_int getNextFocusLeftId();
		void setNextFocusLeftId(cpp_int const&);
		cpp_int getNextFocusRightId();
		void setNextFocusRightId(cpp_int const&);
		cpp_int getNextFocusUpId();
		void setNextFocusUpId(cpp_int const&);
		cpp_int getNextFocusDownId();
		void setNextFocusDownId(cpp_int const&);
		cpp_boolean isShown();
		cpp_int getVisibility();
		void setVisibility(cpp_int const&);
		cpp_boolean isEnabled();
		void setEnabled(cpp_boolean const&);
		void setFocusable(cpp_boolean const&);
		void setFocusableInTouchMode(cpp_boolean const&);
		void setSoundEffectsEnabled(cpp_boolean const&);
		cpp_boolean isSoundEffectsEnabled();
		void setHapticFeedbackEnabled(cpp_boolean const&);
		cpp_boolean isHapticFeedbackEnabled();
		void setWillNotDraw(cpp_boolean const&);
		cpp_boolean willNotDraw();
		void setWillNotCacheDrawing(cpp_boolean const&);
		cpp_boolean willNotCacheDrawing();
		cpp_boolean isClickable();
		void setClickable(cpp_boolean const&);
		cpp_boolean isLongClickable();
		void setLongClickable(cpp_boolean const&);
		void setPressed(cpp_boolean const&);
		cpp_boolean isPressed();
		cpp_boolean isSaveEnabled();
		void setSaveEnabled(cpp_boolean const&);
		cpp_boolean isFocusable();
		cpp_boolean isFocusableInTouchMode();
		local_ref< android::view::View > focusSearch(cpp_int const&);
		cpp_boolean dispatchUnhandledMove(local_ref< android::view::View > const&, cpp_int const&);
		local_ref< java::util::ArrayList > getFocusables(cpp_int const&);
		void addFocusables(local_ref< java::util::ArrayList > const&, cpp_int const&);
		void addFocusables(local_ref< java::util::ArrayList > const&, cpp_int const&, cpp_int const&);
		local_ref< java::util::ArrayList > getTouchables();
		void addTouchables(local_ref< java::util::ArrayList > const&);
		cpp_boolean requestFocus();
		cpp_boolean requestFocus(cpp_int const&);
		cpp_boolean requestFocus(cpp_int const&, local_ref< android::graphics::Rect > const&);
		cpp_boolean requestFocusFromTouch();
		void onStartTemporaryDetach();
		void onFinishTemporaryDetach();
		local_ref< android::view::KeyEvent_::DispatcherState > getKeyDispatcherState();
		cpp_boolean dispatchKeyEventPreIme(local_ref< android::view::KeyEvent > const&);
		cpp_boolean dispatchKeyEvent(local_ref< android::view::KeyEvent > const&);
		cpp_boolean dispatchKeyShortcutEvent(local_ref< android::view::KeyEvent > const&);
		cpp_boolean dispatchTouchEvent(local_ref< android::view::MotionEvent > const&);
		cpp_boolean dispatchTrackballEvent(local_ref< android::view::MotionEvent > const&);
		void dispatchWindowFocusChanged(cpp_boolean const&);
		void onWindowFocusChanged(cpp_boolean const&);
		cpp_boolean hasWindowFocus();
		void dispatchWindowVisibilityChanged(cpp_int const&);
		cpp_int getWindowVisibility();
		void getWindowVisibleDisplayFrame(local_ref< android::graphics::Rect > const&);
		cpp_boolean isInTouchMode();
		local_ref< android::content::Context > getContext();
		cpp_boolean onKeyPreIme(cpp_int const&, local_ref< android::view::KeyEvent > const&);
		cpp_boolean onKeyDown(cpp_int const&, local_ref< android::view::KeyEvent > const&);
		cpp_boolean onKeyLongPress(cpp_int const&, local_ref< android::view::KeyEvent > const&);
		cpp_boolean onKeyUp(cpp_int const&, local_ref< android::view::KeyEvent > const&);
		cpp_boolean onKeyMultiple(cpp_int const&, cpp_int const&, local_ref< android::view::KeyEvent > const&);
		cpp_boolean onKeyShortcut(cpp_int const&, local_ref< android::view::KeyEvent > const&);
		cpp_boolean onCheckIsTextEditor();
		local_ref< android::view::inputmethod::InputConnection > onCreateInputConnection(local_ref< android::view::inputmethod::EditorInfo > const&);
		cpp_boolean checkInputConnectionProxy(local_ref< android::view::View > const&);
		void createContextMenu(local_ref< android::view::ContextMenu > const&);
		cpp_boolean onTrackballEvent(local_ref< android::view::MotionEvent > const&);
		cpp_boolean onTouchEvent(local_ref< android::view::MotionEvent > const&);
		void cancelLongPress();
		void setTouchDelegate(local_ref< android::view::TouchDelegate > const&);
		local_ref< android::view::TouchDelegate > getTouchDelegate();
		void bringToFront();
		local_ref< android::view::ViewParent > getParent();
		cpp_int getScrollX();
		cpp_int getScrollY();
		cpp_int getWidth();
		cpp_int getHeight();
		void getDrawingRect(local_ref< android::graphics::Rect > const&);
		cpp_int getMeasuredWidth();
		cpp_int getMeasuredHeight();
		cpp_int getTop();
		cpp_int getBottom();
		cpp_int getLeft();
		cpp_int getRight();
		void getHitRect(local_ref< android::graphics::Rect > const&);
		void getFocusedRect(local_ref< android::graphics::Rect > const&);
		cpp_boolean getGlobalVisibleRect(local_ref< android::graphics::Rect > const&, local_ref< android::graphics::Point > const&);
		cpp_boolean getGlobalVisibleRect(local_ref< android::graphics::Rect > const&);
		cpp_boolean getLocalVisibleRect(local_ref< android::graphics::Rect > const&);
		void offsetTopAndBottom(cpp_int const&);
		void offsetLeftAndRight(cpp_int const&);
		local_ref< android::view::ViewGroup_::LayoutParams > getLayoutParams();
		void setLayoutParams(local_ref< android::view::ViewGroup_::LayoutParams > const&);
		void scrollTo(cpp_int const&, cpp_int const&);
		void scrollBy(cpp_int const&, cpp_int const&);
		void invalidate(local_ref< android::graphics::Rect > const&);
		void invalidate(cpp_int const&, cpp_int const&, cpp_int const&, cpp_int const&);
		void invalidate();
		cpp_boolean isOpaque();
		local_ref< android::os::Handler > getHandler();
		cpp_boolean post(local_ref< java::lang::Runnable > const&);
		cpp_boolean postDelayed(local_ref< java::lang::Runnable > const&, cpp_long const&);
		cpp_boolean removeCallbacks(local_ref< java::lang::Runnable > const&);
		void postInvalidate();
		void postInvalidate(cpp_int const&, cpp_int const&, cpp_int const&, cpp_int const&);
		void postInvalidateDelayed(cpp_long const&);
		void postInvalidateDelayed(cpp_long const&, cpp_int const&, cpp_int const&, cpp_int const&, cpp_int const&);
		void computeScroll();
		cpp_boolean isHorizontalFadingEdgeEnabled();
		void setHorizontalFadingEdgeEnabled(cpp_boolean const&);
		cpp_boolean isVerticalFadingEdgeEnabled();
		void setVerticalFadingEdgeEnabled(cpp_boolean const&);
		cpp_boolean isHorizontalScrollBarEnabled();
		void setHorizontalScrollBarEnabled(cpp_boolean const&);
		cpp_boolean isVerticalScrollBarEnabled();
		void setVerticalScrollBarEnabled(cpp_boolean const&);
		void setScrollbarFadingEnabled(cpp_boolean const&);
		cpp_boolean isScrollbarFadingEnabled();
		void setScrollBarStyle(cpp_int const&);
		cpp_int getScrollBarStyle();
		local_ref< android::os::IBinder > getWindowToken();
		local_ref< android::os::IBinder > getApplicationWindowToken();
		void saveHierarchyState(local_ref< android::util::SparseArray > const&);
		void restoreHierarchyState(local_ref< android::util::SparseArray > const&);
		cpp_long getDrawingTime();
		void setDuplicateParentStateEnabled(cpp_boolean const&);
		cpp_boolean isDuplicateParentStateEnabled();
		void setDrawingCacheEnabled(cpp_boolean const&);
		cpp_boolean isDrawingCacheEnabled();
		local_ref< android::graphics::Bitmap > getDrawingCache();
		local_ref< android::graphics::Bitmap > getDrawingCache(cpp_boolean const&);
		void destroyDrawingCache();
		void setDrawingCacheBackgroundColor(cpp_int const&);
		cpp_int getDrawingCacheBackgroundColor();
		void buildDrawingCache();
		void buildDrawingCache(cpp_boolean const&);
		cpp_boolean isInEditMode();
		void draw(local_ref< android::graphics::Canvas > const&);
		cpp_int getSolidColor();
		cpp_boolean isLayoutRequested();
		void layout(cpp_int const&, cpp_int const&, cpp_int const&, cpp_int const&);
		local_ref< android::content::res::Resources > getResources();
		void invalidateDrawable(local_ref< android::graphics::drawable::Drawable > const&);
		void scheduleDrawable(local_ref< android::graphics::drawable::Drawable > const&, local_ref< java::lang::Runnable > const&, cpp_long const&);
		void unscheduleDrawable(local_ref< android::graphics::drawable::Drawable > const&, local_ref< java::lang::Runnable > const&);
		void unscheduleDrawable(local_ref< android::graphics::drawable::Drawable > const&);
		void refreshDrawableState();
		local_ref< cpp_int_array<1> > getDrawableState();
		void setBackgroundColor(cpp_int const&);
		void setBackgroundResource(cpp_int const&);
		void setBackgroundDrawable(local_ref< android::graphics::drawable::Drawable > const&);
		local_ref< android::graphics::drawable::Drawable > getBackground();
		void setPadding(cpp_int const&, cpp_int const&, cpp_int const&, cpp_int const&);
		cpp_int getPaddingTop();
		cpp_int getPaddingBottom();
		cpp_int getPaddingLeft();
		cpp_int getPaddingRight();
		void setSelected(cpp_boolean const&);
		cpp_boolean isSelected();
		local_ref< android::view::ViewTreeObserver > getViewTreeObserver();
		local_ref< android::view::View > getRootView();
		void getLocationOnScreen(local_ref< cpp_int_array<1> > const&);
		void getLocationInWindow(local_ref< cpp_int_array<1> > const&);
		local_ref< android::view::View > findViewById(cpp_int const&);
		local_ref< android::view::View > findViewWithTag(local_ref< java::lang::Object > const&);
		void setId(cpp_int const&);
		cpp_int getId();
		local_ref< java::lang::Object > getTag();
		void setTag(local_ref< java::lang::Object > const&);
		local_ref< java::lang::Object > getTag(cpp_int const&);
		void setTag(cpp_int const&, local_ref< java::lang::Object > const&);
		cpp_int getBaseline();
		void requestLayout();
		void forceLayout();
		void measure(cpp_int const&, cpp_int const&);
		static cpp_int resolveSize(cpp_int const&, cpp_int const&);
		static cpp_int getDefaultSize(cpp_int const&, cpp_int const&);
		void setMinimumHeight(cpp_int const&);
		void setMinimumWidth(cpp_int const&);
		local_ref< android::view::animation::Animation > getAnimation();
		void startAnimation(local_ref< android::view::animation::Animation > const&);
		void clearAnimation();
		void setAnimation(local_ref< android::view::animation::Animation > const&);
		void playSoundEffect(cpp_int const&);
		cpp_boolean performHapticFeedback(cpp_int const&);
		cpp_boolean performHapticFeedback(cpp_int const&, cpp_int const&);
		static local_ref< android::view::View > inflate(local_ref< android::content::Context > const&, cpp_int const&, local_ref< android::view::ViewGroup > const&);

		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(1), J2CPP_FIELD_SIGNATURE(1), cpp_int > NO_ID;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(2), J2CPP_FIELD_SIGNATURE(2), cpp_int > VISIBLE;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(3), J2CPP_FIELD_SIGNATURE(3), cpp_int > INVISIBLE;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(4), J2CPP_FIELD_SIGNATURE(4), cpp_int > GONE;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(5), J2CPP_FIELD_SIGNATURE(5), cpp_int > DRAWING_CACHE_QUALITY_LOW;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(6), J2CPP_FIELD_SIGNATURE(6), cpp_int > DRAWING_CACHE_QUALITY_HIGH;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(7), J2CPP_FIELD_SIGNATURE(7), cpp_int > DRAWING_CACHE_QUALITY_AUTO;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(8), J2CPP_FIELD_SIGNATURE(8), cpp_int > SCROLLBARS_INSIDE_OVERLAY;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(9), J2CPP_FIELD_SIGNATURE(9), cpp_int > SCROLLBARS_INSIDE_INSET;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(10), J2CPP_FIELD_SIGNATURE(10), cpp_int > SCROLLBARS_OUTSIDE_OVERLAY;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(11), J2CPP_FIELD_SIGNATURE(11), cpp_int > SCROLLBARS_OUTSIDE_INSET;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(12), J2CPP_FIELD_SIGNATURE(12), cpp_int > KEEP_SCREEN_ON;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(13), J2CPP_FIELD_SIGNATURE(13), cpp_int > SOUND_EFFECTS_ENABLED;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(14), J2CPP_FIELD_SIGNATURE(14), cpp_int > HAPTIC_FEEDBACK_ENABLED;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(15), J2CPP_FIELD_SIGNATURE(15), cpp_int > FOCUSABLES_ALL;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(16), J2CPP_FIELD_SIGNATURE(16), cpp_int > FOCUSABLES_TOUCH_MODE;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(17), J2CPP_FIELD_SIGNATURE(17), cpp_int > FOCUS_BACKWARD;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(18), J2CPP_FIELD_SIGNATURE(18), cpp_int > FOCUS_FORWARD;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(19), J2CPP_FIELD_SIGNATURE(19), cpp_int > FOCUS_LEFT;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(20), J2CPP_FIELD_SIGNATURE(20), cpp_int > FOCUS_UP;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(21), J2CPP_FIELD_SIGNATURE(21), cpp_int > FOCUS_RIGHT;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(22), J2CPP_FIELD_SIGNATURE(22), cpp_int > FOCUS_DOWN;
	}; //class View

} //namespace view
} //namespace android

} //namespace j2cpp

#endif //J2CPP_ANDROID_VIEW_VIEW_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_VIEW_VIEW_HPP_IMPL
#define J2CPP_ANDROID_VIEW_VIEW_HPP_IMPL

namespace j2cpp {




android::view::View_::OnTouchListener::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jtype());
}

cpp_boolean android::view::View_::OnTouchListener::onTouch(local_ref< android::view::View > const &a0, local_ref< android::view::MotionEvent > const &a1)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(0), J2CPP_METHOD_SIGNATURE(0), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}


J2CPP_DEFINE_CLASS(android::view::View_::OnTouchListener,"android/view/View$OnTouchListener")
J2CPP_DEFINE_METHOD(android::view::View_::OnTouchListener,0,"onTouch","(Landroid/view/View;Landroid/view/MotionEvent;)Z")


android::view::View_::BaseSavedState::operator local_ref<android::view::AbsSavedState>() const
{
	return local_ref<android::view::AbsSavedState>(get_jtype());
}


android::view::View_::BaseSavedState::BaseSavedState(local_ref< android::os::Parcel > const &a0)
: cpp_object<android::view::View_::BaseSavedState>(
	environment::get().get_jenv()->NewObject(
		get_class<android::view::View_::BaseSavedState::J2CPP_CLASS_NAME>(),
		get_method_id<android::view::View_::BaseSavedState::J2CPP_CLASS_NAME, android::view::View_::BaseSavedState::J2CPP_METHOD_NAME(0), android::view::View_::BaseSavedState::J2CPP_METHOD_SIGNATURE(0), false>(),
		a0.get_jtype()
	)
)
{
}



android::view::View_::BaseSavedState::BaseSavedState(local_ref< android::os::Parcelable > const &a0)
: cpp_object<android::view::View_::BaseSavedState>(
	environment::get().get_jenv()->NewObject(
		get_class<android::view::View_::BaseSavedState::J2CPP_CLASS_NAME>(),
		get_method_id<android::view::View_::BaseSavedState::J2CPP_CLASS_NAME, android::view::View_::BaseSavedState::J2CPP_METHOD_NAME(1), android::view::View_::BaseSavedState::J2CPP_METHOD_SIGNATURE(1), false>(),
		a0.get_jtype()
	)
)
{
}




static_field<
	android::view::View_::BaseSavedState::J2CPP_CLASS_NAME,
	android::view::View_::BaseSavedState::J2CPP_FIELD_NAME(0),
	android::view::View_::BaseSavedState::J2CPP_FIELD_SIGNATURE(0),
	local_ref< android::os::Parcelable_::Creator >
> android::view::View_::BaseSavedState::CREATOR;


J2CPP_DEFINE_CLASS(android::view::View_::BaseSavedState,"android/view/View$BaseSavedState")
J2CPP_DEFINE_METHOD(android::view::View_::BaseSavedState,0,"<init>","(Landroid/os/Parcel;)V")
J2CPP_DEFINE_METHOD(android::view::View_::BaseSavedState,1,"<init>","(Landroid/os/Parcelable;)V")
J2CPP_DEFINE_METHOD(android::view::View_::BaseSavedState,2,"<clinit>","()V")
J2CPP_DEFINE_FIELD(android::view::View_::BaseSavedState,0,"CREATOR","Landroid/os/Parcelable$Creator;")


android::view::View_::OnLongClickListener::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jtype());
}

cpp_boolean android::view::View_::OnLongClickListener::onLongClick(local_ref< android::view::View > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(0), J2CPP_METHOD_SIGNATURE(0), false>(),
			a0.get_jtype()
		)
	);
}


J2CPP_DEFINE_CLASS(android::view::View_::OnLongClickListener,"android/view/View$OnLongClickListener")
J2CPP_DEFINE_METHOD(android::view::View_::OnLongClickListener,0,"onLongClick","(Landroid/view/View;)Z")


android::view::View_::OnClickListener::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jtype());
}

void android::view::View_::OnClickListener::onClick(local_ref< android::view::View > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(0), J2CPP_METHOD_SIGNATURE(0), false>(),
			a0.get_jtype()
		)
	);
}


J2CPP_DEFINE_CLASS(android::view::View_::OnClickListener,"android/view/View$OnClickListener")
J2CPP_DEFINE_METHOD(android::view::View_::OnClickListener,0,"onClick","(Landroid/view/View;)V")


android::view::View_::OnFocusChangeListener::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jtype());
}

void android::view::View_::OnFocusChangeListener::onFocusChange(local_ref< android::view::View > const &a0, cpp_boolean const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(0), J2CPP_METHOD_SIGNATURE(0), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}


J2CPP_DEFINE_CLASS(android::view::View_::OnFocusChangeListener,"android/view/View$OnFocusChangeListener")
J2CPP_DEFINE_METHOD(android::view::View_::OnFocusChangeListener,0,"onFocusChange","(Landroid/view/View;Z)V")


android::view::View_::OnKeyListener::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jtype());
}

cpp_boolean android::view::View_::OnKeyListener::onKey(local_ref< android::view::View > const &a0, cpp_int const &a1, local_ref< android::view::KeyEvent > const &a2)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(0), J2CPP_METHOD_SIGNATURE(0), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}


J2CPP_DEFINE_CLASS(android::view::View_::OnKeyListener,"android/view/View$OnKeyListener")
J2CPP_DEFINE_METHOD(android::view::View_::OnKeyListener,0,"onKey","(Landroid/view/View;ILandroid/view/KeyEvent;)Z")


android::view::View_::OnCreateContextMenuListener::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jtype());
}

void android::view::View_::OnCreateContextMenuListener::onCreateContextMenu(local_ref< android::view::ContextMenu > const &a0, local_ref< android::view::View > const &a1, local_ref< android::view::ContextMenu_::ContextMenuInfo > const &a2)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(0), J2CPP_METHOD_SIGNATURE(0), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}


J2CPP_DEFINE_CLASS(android::view::View_::OnCreateContextMenuListener,"android/view/View$OnCreateContextMenuListener")
J2CPP_DEFINE_METHOD(android::view::View_::OnCreateContextMenuListener,0,"onCreateContextMenu","(Landroid/view/ContextMenu;Landroid/view/View;Landroid/view/ContextMenu$ContextMenuInfo;)V")


android::view::View_::MeasureSpec::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jtype());
}


android::view::View_::MeasureSpec::MeasureSpec()
: cpp_object<android::view::View_::MeasureSpec>(
	environment::get().get_jenv()->NewObject(
		get_class<android::view::View_::MeasureSpec::J2CPP_CLASS_NAME>(),
		get_method_id<android::view::View_::MeasureSpec::J2CPP_CLASS_NAME, android::view::View_::MeasureSpec::J2CPP_METHOD_NAME(0), android::view::View_::MeasureSpec::J2CPP_METHOD_SIGNATURE(0), false>()
	)
)
{
}


cpp_int android::view::View_::MeasureSpec::makeMeasureSpec(cpp_int const &a0, cpp_int const &a1)
{
	return cpp_int(
		environment::get().get_jenv()->CallStaticIntMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), true>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_int android::view::View_::MeasureSpec::getMode(cpp_int const &a0)
{
	return cpp_int(
		environment::get().get_jenv()->CallStaticIntMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), true>(),
			a0.get_jtype()
		)
	);
}

cpp_int android::view::View_::MeasureSpec::getSize(cpp_int const &a0)
{
	return cpp_int(
		environment::get().get_jenv()->CallStaticIntMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), true>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::String > android::view::View_::MeasureSpec::toString(cpp_int const &a0)
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), true>(),
			a0.get_jtype()
		)
	);
}


static_field<
	android::view::View_::MeasureSpec::J2CPP_CLASS_NAME,
	android::view::View_::MeasureSpec::J2CPP_FIELD_NAME(0),
	android::view::View_::MeasureSpec::J2CPP_FIELD_SIGNATURE(0),
	cpp_int
> android::view::View_::MeasureSpec::UNSPECIFIED;

static_field<
	android::view::View_::MeasureSpec::J2CPP_CLASS_NAME,
	android::view::View_::MeasureSpec::J2CPP_FIELD_NAME(1),
	android::view::View_::MeasureSpec::J2CPP_FIELD_SIGNATURE(1),
	cpp_int
> android::view::View_::MeasureSpec::EXACTLY;

static_field<
	android::view::View_::MeasureSpec::J2CPP_CLASS_NAME,
	android::view::View_::MeasureSpec::J2CPP_FIELD_NAME(2),
	android::view::View_::MeasureSpec::J2CPP_FIELD_SIGNATURE(2),
	cpp_int
> android::view::View_::MeasureSpec::AT_MOST;


J2CPP_DEFINE_CLASS(android::view::View_::MeasureSpec,"android/view/View$MeasureSpec")
J2CPP_DEFINE_METHOD(android::view::View_::MeasureSpec,0,"<init>","()V")
J2CPP_DEFINE_METHOD(android::view::View_::MeasureSpec,1,"makeMeasureSpec","(II)I")
J2CPP_DEFINE_METHOD(android::view::View_::MeasureSpec,2,"getMode","(I)I")
J2CPP_DEFINE_METHOD(android::view::View_::MeasureSpec,3,"getSize","(I)I")
J2CPP_DEFINE_METHOD(android::view::View_::MeasureSpec,4,"toString","(I)Ljava/lang/String;")
J2CPP_DEFINE_FIELD(android::view::View_::MeasureSpec,0,"UNSPECIFIED","I")
J2CPP_DEFINE_FIELD(android::view::View_::MeasureSpec,1,"EXACTLY","I")
J2CPP_DEFINE_FIELD(android::view::View_::MeasureSpec,2,"AT_MOST","I")



android::view::View::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jtype());
}

android::view::View::operator local_ref<android::graphics::drawable::Drawable_::Callback>() const
{
	return local_ref<android::graphics::drawable::Drawable_::Callback>(get_jtype());
}

android::view::View::operator local_ref<android::view::accessibility::AccessibilityEventSource>() const
{
	return local_ref<android::view::accessibility::AccessibilityEventSource>(get_jtype());
}


android::view::View::View(local_ref< android::content::Context > const &a0)
: cpp_object<android::view::View>(
	environment::get().get_jenv()->NewObject(
		get_class<android::view::View::J2CPP_CLASS_NAME>(),
		get_method_id<android::view::View::J2CPP_CLASS_NAME, android::view::View::J2CPP_METHOD_NAME(0), android::view::View::J2CPP_METHOD_SIGNATURE(0), false>(),
		a0.get_jtype()
	)
)
{
}



android::view::View::View(local_ref< android::content::Context > const &a0, local_ref< android::util::AttributeSet > const &a1)
: cpp_object<android::view::View>(
	environment::get().get_jenv()->NewObject(
		get_class<android::view::View::J2CPP_CLASS_NAME>(),
		get_method_id<android::view::View::J2CPP_CLASS_NAME, android::view::View::J2CPP_METHOD_NAME(1), android::view::View::J2CPP_METHOD_SIGNATURE(1), false>(),
		a0.get_jtype(), a1.get_jtype()
	)
)
{
}



android::view::View::View(local_ref< android::content::Context > const &a0, local_ref< android::util::AttributeSet > const &a1, cpp_int const &a2)
: cpp_object<android::view::View>(
	environment::get().get_jenv()->NewObject(
		get_class<android::view::View::J2CPP_CLASS_NAME>(),
		get_method_id<android::view::View::J2CPP_CLASS_NAME, android::view::View::J2CPP_METHOD_NAME(2), android::view::View::J2CPP_METHOD_SIGNATURE(2), false>(),
		a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
	)
)
{
}




cpp_int android::view::View::getVerticalFadingEdgeLength()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>()
		)
	);
}

void android::view::View::setFadingEdgeLength(cpp_int const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int android::view::View::getHorizontalFadingEdgeLength()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(7), J2CPP_METHOD_SIGNATURE(7), false>()
		)
	);
}

cpp_int android::view::View::getVerticalScrollbarWidth()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(8), J2CPP_METHOD_SIGNATURE(8), false>()
		)
	);
}



void android::view::View::setOnFocusChangeListener(local_ref< android::view::View_::OnFocusChangeListener > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(11), J2CPP_METHOD_SIGNATURE(11), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< android::view::View_::OnFocusChangeListener > android::view::View::getOnFocusChangeListener()
{
	return local_ref< android::view::View_::OnFocusChangeListener >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(12), J2CPP_METHOD_SIGNATURE(12), false>()
		)
	);
}

void android::view::View::setOnClickListener(local_ref< android::view::View_::OnClickListener > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(13), J2CPP_METHOD_SIGNATURE(13), false>(),
			a0.get_jtype()
		)
	);
}

void android::view::View::setOnLongClickListener(local_ref< android::view::View_::OnLongClickListener > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(14), J2CPP_METHOD_SIGNATURE(14), false>(),
			a0.get_jtype()
		)
	);
}

void android::view::View::setOnCreateContextMenuListener(local_ref< android::view::View_::OnCreateContextMenuListener > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(15), J2CPP_METHOD_SIGNATURE(15), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean android::view::View::performClick()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(16), J2CPP_METHOD_SIGNATURE(16), false>()
		)
	);
}

cpp_boolean android::view::View::performLongClick()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(17), J2CPP_METHOD_SIGNATURE(17), false>()
		)
	);
}

cpp_boolean android::view::View::showContextMenu()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(18), J2CPP_METHOD_SIGNATURE(18), false>()
		)
	);
}

void android::view::View::setOnKeyListener(local_ref< android::view::View_::OnKeyListener > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(19), J2CPP_METHOD_SIGNATURE(19), false>(),
			a0.get_jtype()
		)
	);
}

void android::view::View::setOnTouchListener(local_ref< android::view::View_::OnTouchListener > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(20), J2CPP_METHOD_SIGNATURE(20), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean android::view::View::requestRectangleOnScreen(local_ref< android::graphics::Rect > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(21), J2CPP_METHOD_SIGNATURE(21), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean android::view::View::requestRectangleOnScreen(local_ref< android::graphics::Rect > const &a0, cpp_boolean const &a1)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(22), J2CPP_METHOD_SIGNATURE(22), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void android::view::View::clearFocus()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(23), J2CPP_METHOD_SIGNATURE(23), false>()
		)
	);
}

cpp_boolean android::view::View::hasFocus()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(24), J2CPP_METHOD_SIGNATURE(24), false>()
		)
	);
}

cpp_boolean android::view::View::hasFocusable()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(25), J2CPP_METHOD_SIGNATURE(25), false>()
		)
	);
}


void android::view::View::sendAccessibilityEvent(cpp_int const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(27), J2CPP_METHOD_SIGNATURE(27), false>(),
			a0.get_jtype()
		)
	);
}

void android::view::View::sendAccessibilityEventUnchecked(local_ref< android::view::accessibility::AccessibilityEvent > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(28), J2CPP_METHOD_SIGNATURE(28), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean android::view::View::dispatchPopulateAccessibilityEvent(local_ref< android::view::accessibility::AccessibilityEvent > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(29), J2CPP_METHOD_SIGNATURE(29), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::CharSequence > android::view::View::getContentDescription()
{
	return local_ref< java::lang::CharSequence >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(30), J2CPP_METHOD_SIGNATURE(30), false>()
		)
	);
}

void android::view::View::setContentDescription(local_ref< java::lang::CharSequence > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(31), J2CPP_METHOD_SIGNATURE(31), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean android::view::View::isFocused()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(32), J2CPP_METHOD_SIGNATURE(32), false>()
		)
	);
}

local_ref< android::view::View > android::view::View::findFocus()
{
	return local_ref< android::view::View >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(33), J2CPP_METHOD_SIGNATURE(33), false>()
		)
	);
}

void android::view::View::setScrollContainer(cpp_boolean const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(34), J2CPP_METHOD_SIGNATURE(34), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int android::view::View::getDrawingCacheQuality()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(35), J2CPP_METHOD_SIGNATURE(35), false>()
		)
	);
}

void android::view::View::setDrawingCacheQuality(cpp_int const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(36), J2CPP_METHOD_SIGNATURE(36), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean android::view::View::getKeepScreenOn()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(37), J2CPP_METHOD_SIGNATURE(37), false>()
		)
	);
}

void android::view::View::setKeepScreenOn(cpp_boolean const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(38), J2CPP_METHOD_SIGNATURE(38), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int android::view::View::getNextFocusLeftId()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(39), J2CPP_METHOD_SIGNATURE(39), false>()
		)
	);
}

void android::view::View::setNextFocusLeftId(cpp_int const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(40), J2CPP_METHOD_SIGNATURE(40), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int android::view::View::getNextFocusRightId()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(41), J2CPP_METHOD_SIGNATURE(41), false>()
		)
	);
}

void android::view::View::setNextFocusRightId(cpp_int const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(42), J2CPP_METHOD_SIGNATURE(42), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int android::view::View::getNextFocusUpId()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(43), J2CPP_METHOD_SIGNATURE(43), false>()
		)
	);
}

void android::view::View::setNextFocusUpId(cpp_int const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(44), J2CPP_METHOD_SIGNATURE(44), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int android::view::View::getNextFocusDownId()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(45), J2CPP_METHOD_SIGNATURE(45), false>()
		)
	);
}

void android::view::View::setNextFocusDownId(cpp_int const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(46), J2CPP_METHOD_SIGNATURE(46), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean android::view::View::isShown()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(47), J2CPP_METHOD_SIGNATURE(47), false>()
		)
	);
}


cpp_int android::view::View::getVisibility()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(49), J2CPP_METHOD_SIGNATURE(49), false>()
		)
	);
}

void android::view::View::setVisibility(cpp_int const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(50), J2CPP_METHOD_SIGNATURE(50), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean android::view::View::isEnabled()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(51), J2CPP_METHOD_SIGNATURE(51), false>()
		)
	);
}

void android::view::View::setEnabled(cpp_boolean const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(52), J2CPP_METHOD_SIGNATURE(52), false>(),
			a0.get_jtype()
		)
	);
}

void android::view::View::setFocusable(cpp_boolean const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(53), J2CPP_METHOD_SIGNATURE(53), false>(),
			a0.get_jtype()
		)
	);
}

void android::view::View::setFocusableInTouchMode(cpp_boolean const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(54), J2CPP_METHOD_SIGNATURE(54), false>(),
			a0.get_jtype()
		)
	);
}

void android::view::View::setSoundEffectsEnabled(cpp_boolean const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(55), J2CPP_METHOD_SIGNATURE(55), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean android::view::View::isSoundEffectsEnabled()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(56), J2CPP_METHOD_SIGNATURE(56), false>()
		)
	);
}

void android::view::View::setHapticFeedbackEnabled(cpp_boolean const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(57), J2CPP_METHOD_SIGNATURE(57), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean android::view::View::isHapticFeedbackEnabled()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(58), J2CPP_METHOD_SIGNATURE(58), false>()
		)
	);
}

void android::view::View::setWillNotDraw(cpp_boolean const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(59), J2CPP_METHOD_SIGNATURE(59), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean android::view::View::willNotDraw()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(60), J2CPP_METHOD_SIGNATURE(60), false>()
		)
	);
}

void android::view::View::setWillNotCacheDrawing(cpp_boolean const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(61), J2CPP_METHOD_SIGNATURE(61), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean android::view::View::willNotCacheDrawing()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(62), J2CPP_METHOD_SIGNATURE(62), false>()
		)
	);
}

cpp_boolean android::view::View::isClickable()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(63), J2CPP_METHOD_SIGNATURE(63), false>()
		)
	);
}

void android::view::View::setClickable(cpp_boolean const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(64), J2CPP_METHOD_SIGNATURE(64), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean android::view::View::isLongClickable()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(65), J2CPP_METHOD_SIGNATURE(65), false>()
		)
	);
}

void android::view::View::setLongClickable(cpp_boolean const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(66), J2CPP_METHOD_SIGNATURE(66), false>(),
			a0.get_jtype()
		)
	);
}

void android::view::View::setPressed(cpp_boolean const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(67), J2CPP_METHOD_SIGNATURE(67), false>(),
			a0.get_jtype()
		)
	);
}


cpp_boolean android::view::View::isPressed()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(69), J2CPP_METHOD_SIGNATURE(69), false>()
		)
	);
}

cpp_boolean android::view::View::isSaveEnabled()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(70), J2CPP_METHOD_SIGNATURE(70), false>()
		)
	);
}

void android::view::View::setSaveEnabled(cpp_boolean const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(71), J2CPP_METHOD_SIGNATURE(71), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean android::view::View::isFocusable()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(72), J2CPP_METHOD_SIGNATURE(72), false>()
		)
	);
}

cpp_boolean android::view::View::isFocusableInTouchMode()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(73), J2CPP_METHOD_SIGNATURE(73), false>()
		)
	);
}

local_ref< android::view::View > android::view::View::focusSearch(cpp_int const &a0)
{
	return local_ref< android::view::View >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(74), J2CPP_METHOD_SIGNATURE(74), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean android::view::View::dispatchUnhandledMove(local_ref< android::view::View > const &a0, cpp_int const &a1)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(75), J2CPP_METHOD_SIGNATURE(75), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< java::util::ArrayList > android::view::View::getFocusables(cpp_int const &a0)
{
	return local_ref< java::util::ArrayList >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(76), J2CPP_METHOD_SIGNATURE(76), false>(),
			a0.get_jtype()
		)
	);
}

void android::view::View::addFocusables(local_ref< java::util::ArrayList > const &a0, cpp_int const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(77), J2CPP_METHOD_SIGNATURE(77), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void android::view::View::addFocusables(local_ref< java::util::ArrayList > const &a0, cpp_int const &a1, cpp_int const &a2)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(78), J2CPP_METHOD_SIGNATURE(78), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

local_ref< java::util::ArrayList > android::view::View::getTouchables()
{
	return local_ref< java::util::ArrayList >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(79), J2CPP_METHOD_SIGNATURE(79), false>()
		)
	);
}

void android::view::View::addTouchables(local_ref< java::util::ArrayList > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(80), J2CPP_METHOD_SIGNATURE(80), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean android::view::View::requestFocus()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(81), J2CPP_METHOD_SIGNATURE(81), false>()
		)
	);
}

cpp_boolean android::view::View::requestFocus(cpp_int const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(82), J2CPP_METHOD_SIGNATURE(82), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean android::view::View::requestFocus(cpp_int const &a0, local_ref< android::graphics::Rect > const &a1)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(83), J2CPP_METHOD_SIGNATURE(83), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_boolean android::view::View::requestFocusFromTouch()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(84), J2CPP_METHOD_SIGNATURE(84), false>()
		)
	);
}

void android::view::View::onStartTemporaryDetach()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(85), J2CPP_METHOD_SIGNATURE(85), false>()
		)
	);
}

void android::view::View::onFinishTemporaryDetach()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(86), J2CPP_METHOD_SIGNATURE(86), false>()
		)
	);
}

local_ref< android::view::KeyEvent_::DispatcherState > android::view::View::getKeyDispatcherState()
{
	return local_ref< android::view::KeyEvent_::DispatcherState >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(87), J2CPP_METHOD_SIGNATURE(87), false>()
		)
	);
}

cpp_boolean android::view::View::dispatchKeyEventPreIme(local_ref< android::view::KeyEvent > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(88), J2CPP_METHOD_SIGNATURE(88), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean android::view::View::dispatchKeyEvent(local_ref< android::view::KeyEvent > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(89), J2CPP_METHOD_SIGNATURE(89), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean android::view::View::dispatchKeyShortcutEvent(local_ref< android::view::KeyEvent > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(90), J2CPP_METHOD_SIGNATURE(90), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean android::view::View::dispatchTouchEvent(local_ref< android::view::MotionEvent > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(91), J2CPP_METHOD_SIGNATURE(91), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean android::view::View::dispatchTrackballEvent(local_ref< android::view::MotionEvent > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(92), J2CPP_METHOD_SIGNATURE(92), false>(),
			a0.get_jtype()
		)
	);
}

void android::view::View::dispatchWindowFocusChanged(cpp_boolean const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(93), J2CPP_METHOD_SIGNATURE(93), false>(),
			a0.get_jtype()
		)
	);
}

void android::view::View::onWindowFocusChanged(cpp_boolean const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(94), J2CPP_METHOD_SIGNATURE(94), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean android::view::View::hasWindowFocus()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(95), J2CPP_METHOD_SIGNATURE(95), false>()
		)
	);
}

void android::view::View::dispatchWindowVisibilityChanged(cpp_int const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(96), J2CPP_METHOD_SIGNATURE(96), false>(),
			a0.get_jtype()
		)
	);
}


cpp_int android::view::View::getWindowVisibility()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(98), J2CPP_METHOD_SIGNATURE(98), false>()
		)
	);
}

void android::view::View::getWindowVisibleDisplayFrame(local_ref< android::graphics::Rect > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(99), J2CPP_METHOD_SIGNATURE(99), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean android::view::View::isInTouchMode()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(100), J2CPP_METHOD_SIGNATURE(100), false>()
		)
	);
}

local_ref< android::content::Context > android::view::View::getContext()
{
	return local_ref< android::content::Context >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(101), J2CPP_METHOD_SIGNATURE(101), false>()
		)
	);
}

cpp_boolean android::view::View::onKeyPreIme(cpp_int const &a0, local_ref< android::view::KeyEvent > const &a1)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(102), J2CPP_METHOD_SIGNATURE(102), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_boolean android::view::View::onKeyDown(cpp_int const &a0, local_ref< android::view::KeyEvent > const &a1)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(103), J2CPP_METHOD_SIGNATURE(103), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_boolean android::view::View::onKeyLongPress(cpp_int const &a0, local_ref< android::view::KeyEvent > const &a1)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(104), J2CPP_METHOD_SIGNATURE(104), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_boolean android::view::View::onKeyUp(cpp_int const &a0, local_ref< android::view::KeyEvent > const &a1)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(105), J2CPP_METHOD_SIGNATURE(105), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_boolean android::view::View::onKeyMultiple(cpp_int const &a0, cpp_int const &a1, local_ref< android::view::KeyEvent > const &a2)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(106), J2CPP_METHOD_SIGNATURE(106), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

cpp_boolean android::view::View::onKeyShortcut(cpp_int const &a0, local_ref< android::view::KeyEvent > const &a1)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(107), J2CPP_METHOD_SIGNATURE(107), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_boolean android::view::View::onCheckIsTextEditor()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(108), J2CPP_METHOD_SIGNATURE(108), false>()
		)
	);
}

local_ref< android::view::inputmethod::InputConnection > android::view::View::onCreateInputConnection(local_ref< android::view::inputmethod::EditorInfo > const &a0)
{
	return local_ref< android::view::inputmethod::InputConnection >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(109), J2CPP_METHOD_SIGNATURE(109), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean android::view::View::checkInputConnectionProxy(local_ref< android::view::View > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(110), J2CPP_METHOD_SIGNATURE(110), false>(),
			a0.get_jtype()
		)
	);
}

void android::view::View::createContextMenu(local_ref< android::view::ContextMenu > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(111), J2CPP_METHOD_SIGNATURE(111), false>(),
			a0.get_jtype()
		)
	);
}



cpp_boolean android::view::View::onTrackballEvent(local_ref< android::view::MotionEvent > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(114), J2CPP_METHOD_SIGNATURE(114), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean android::view::View::onTouchEvent(local_ref< android::view::MotionEvent > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(115), J2CPP_METHOD_SIGNATURE(115), false>(),
			a0.get_jtype()
		)
	);
}

void android::view::View::cancelLongPress()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(116), J2CPP_METHOD_SIGNATURE(116), false>()
		)
	);
}

void android::view::View::setTouchDelegate(local_ref< android::view::TouchDelegate > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(117), J2CPP_METHOD_SIGNATURE(117), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< android::view::TouchDelegate > android::view::View::getTouchDelegate()
{
	return local_ref< android::view::TouchDelegate >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(118), J2CPP_METHOD_SIGNATURE(118), false>()
		)
	);
}

void android::view::View::bringToFront()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(119), J2CPP_METHOD_SIGNATURE(119), false>()
		)
	);
}




local_ref< android::view::ViewParent > android::view::View::getParent()
{
	return local_ref< android::view::ViewParent >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(123), J2CPP_METHOD_SIGNATURE(123), false>()
		)
	);
}

cpp_int android::view::View::getScrollX()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(124), J2CPP_METHOD_SIGNATURE(124), false>()
		)
	);
}

cpp_int android::view::View::getScrollY()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(125), J2CPP_METHOD_SIGNATURE(125), false>()
		)
	);
}

cpp_int android::view::View::getWidth()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(126), J2CPP_METHOD_SIGNATURE(126), false>()
		)
	);
}

cpp_int android::view::View::getHeight()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(127), J2CPP_METHOD_SIGNATURE(127), false>()
		)
	);
}

void android::view::View::getDrawingRect(local_ref< android::graphics::Rect > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(128), J2CPP_METHOD_SIGNATURE(128), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int android::view::View::getMeasuredWidth()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(129), J2CPP_METHOD_SIGNATURE(129), false>()
		)
	);
}

cpp_int android::view::View::getMeasuredHeight()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(130), J2CPP_METHOD_SIGNATURE(130), false>()
		)
	);
}

cpp_int android::view::View::getTop()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(131), J2CPP_METHOD_SIGNATURE(131), false>()
		)
	);
}

cpp_int android::view::View::getBottom()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(132), J2CPP_METHOD_SIGNATURE(132), false>()
		)
	);
}

cpp_int android::view::View::getLeft()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(133), J2CPP_METHOD_SIGNATURE(133), false>()
		)
	);
}

cpp_int android::view::View::getRight()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(134), J2CPP_METHOD_SIGNATURE(134), false>()
		)
	);
}

void android::view::View::getHitRect(local_ref< android::graphics::Rect > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(135), J2CPP_METHOD_SIGNATURE(135), false>(),
			a0.get_jtype()
		)
	);
}

void android::view::View::getFocusedRect(local_ref< android::graphics::Rect > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(136), J2CPP_METHOD_SIGNATURE(136), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean android::view::View::getGlobalVisibleRect(local_ref< android::graphics::Rect > const &a0, local_ref< android::graphics::Point > const &a1)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(137), J2CPP_METHOD_SIGNATURE(137), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_boolean android::view::View::getGlobalVisibleRect(local_ref< android::graphics::Rect > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(138), J2CPP_METHOD_SIGNATURE(138), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean android::view::View::getLocalVisibleRect(local_ref< android::graphics::Rect > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(139), J2CPP_METHOD_SIGNATURE(139), false>(),
			a0.get_jtype()
		)
	);
}

void android::view::View::offsetTopAndBottom(cpp_int const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(140), J2CPP_METHOD_SIGNATURE(140), false>(),
			a0.get_jtype()
		)
	);
}

void android::view::View::offsetLeftAndRight(cpp_int const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(141), J2CPP_METHOD_SIGNATURE(141), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< android::view::ViewGroup_::LayoutParams > android::view::View::getLayoutParams()
{
	return local_ref< android::view::ViewGroup_::LayoutParams >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(142), J2CPP_METHOD_SIGNATURE(142), false>()
		)
	);
}

void android::view::View::setLayoutParams(local_ref< android::view::ViewGroup_::LayoutParams > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(143), J2CPP_METHOD_SIGNATURE(143), false>(),
			a0.get_jtype()
		)
	);
}

void android::view::View::scrollTo(cpp_int const &a0, cpp_int const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(144), J2CPP_METHOD_SIGNATURE(144), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void android::view::View::scrollBy(cpp_int const &a0, cpp_int const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(145), J2CPP_METHOD_SIGNATURE(145), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}




void android::view::View::invalidate(local_ref< android::graphics::Rect > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(149), J2CPP_METHOD_SIGNATURE(149), false>(),
			a0.get_jtype()
		)
	);
}

void android::view::View::invalidate(cpp_int const &a0, cpp_int const &a1, cpp_int const &a2, cpp_int const &a3)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(150), J2CPP_METHOD_SIGNATURE(150), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype(), a3.get_jtype()
		)
	);
}

void android::view::View::invalidate()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(151), J2CPP_METHOD_SIGNATURE(151), false>()
		)
	);
}

cpp_boolean android::view::View::isOpaque()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(152), J2CPP_METHOD_SIGNATURE(152), false>()
		)
	);
}

local_ref< android::os::Handler > android::view::View::getHandler()
{
	return local_ref< android::os::Handler >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(153), J2CPP_METHOD_SIGNATURE(153), false>()
		)
	);
}

cpp_boolean android::view::View::post(local_ref< java::lang::Runnable > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(154), J2CPP_METHOD_SIGNATURE(154), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean android::view::View::postDelayed(local_ref< java::lang::Runnable > const &a0, cpp_long const &a1)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(155), J2CPP_METHOD_SIGNATURE(155), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_boolean android::view::View::removeCallbacks(local_ref< java::lang::Runnable > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(156), J2CPP_METHOD_SIGNATURE(156), false>(),
			a0.get_jtype()
		)
	);
}

void android::view::View::postInvalidate()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(157), J2CPP_METHOD_SIGNATURE(157), false>()
		)
	);
}

void android::view::View::postInvalidate(cpp_int const &a0, cpp_int const &a1, cpp_int const &a2, cpp_int const &a3)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(158), J2CPP_METHOD_SIGNATURE(158), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype(), a3.get_jtype()
		)
	);
}

void android::view::View::postInvalidateDelayed(cpp_long const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(159), J2CPP_METHOD_SIGNATURE(159), false>(),
			a0.get_jtype()
		)
	);
}

void android::view::View::postInvalidateDelayed(cpp_long const &a0, cpp_int const &a1, cpp_int const &a2, cpp_int const &a3, cpp_int const &a4)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(160), J2CPP_METHOD_SIGNATURE(160), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype(), a3.get_jtype(), a4.get_jtype()
		)
	);
}

void android::view::View::computeScroll()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(161), J2CPP_METHOD_SIGNATURE(161), false>()
		)
	);
}

cpp_boolean android::view::View::isHorizontalFadingEdgeEnabled()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(162), J2CPP_METHOD_SIGNATURE(162), false>()
		)
	);
}

void android::view::View::setHorizontalFadingEdgeEnabled(cpp_boolean const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(163), J2CPP_METHOD_SIGNATURE(163), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean android::view::View::isVerticalFadingEdgeEnabled()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(164), J2CPP_METHOD_SIGNATURE(164), false>()
		)
	);
}

void android::view::View::setVerticalFadingEdgeEnabled(cpp_boolean const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(165), J2CPP_METHOD_SIGNATURE(165), false>(),
			a0.get_jtype()
		)
	);
}





cpp_boolean android::view::View::isHorizontalScrollBarEnabled()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(170), J2CPP_METHOD_SIGNATURE(170), false>()
		)
	);
}

void android::view::View::setHorizontalScrollBarEnabled(cpp_boolean const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(171), J2CPP_METHOD_SIGNATURE(171), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean android::view::View::isVerticalScrollBarEnabled()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(172), J2CPP_METHOD_SIGNATURE(172), false>()
		)
	);
}

void android::view::View::setVerticalScrollBarEnabled(cpp_boolean const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(173), J2CPP_METHOD_SIGNATURE(173), false>(),
			a0.get_jtype()
		)
	);
}

void android::view::View::setScrollbarFadingEnabled(cpp_boolean const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(174), J2CPP_METHOD_SIGNATURE(174), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean android::view::View::isScrollbarFadingEnabled()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(175), J2CPP_METHOD_SIGNATURE(175), false>()
		)
	);
}

void android::view::View::setScrollBarStyle(cpp_int const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(176), J2CPP_METHOD_SIGNATURE(176), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int android::view::View::getScrollBarStyle()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(177), J2CPP_METHOD_SIGNATURE(177), false>()
		)
	);
}












local_ref< android::os::IBinder > android::view::View::getWindowToken()
{
	return local_ref< android::os::IBinder >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(189), J2CPP_METHOD_SIGNATURE(189), false>()
		)
	);
}

local_ref< android::os::IBinder > android::view::View::getApplicationWindowToken()
{
	return local_ref< android::os::IBinder >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(190), J2CPP_METHOD_SIGNATURE(190), false>()
		)
	);
}

void android::view::View::saveHierarchyState(local_ref< android::util::SparseArray > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(191), J2CPP_METHOD_SIGNATURE(191), false>(),
			a0.get_jtype()
		)
	);
}



void android::view::View::restoreHierarchyState(local_ref< android::util::SparseArray > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(194), J2CPP_METHOD_SIGNATURE(194), false>(),
			a0.get_jtype()
		)
	);
}



cpp_long android::view::View::getDrawingTime()
{
	return cpp_long(
		environment::get().get_jenv()->CallLongMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(197), J2CPP_METHOD_SIGNATURE(197), false>()
		)
	);
}

void android::view::View::setDuplicateParentStateEnabled(cpp_boolean const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(198), J2CPP_METHOD_SIGNATURE(198), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean android::view::View::isDuplicateParentStateEnabled()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(199), J2CPP_METHOD_SIGNATURE(199), false>()
		)
	);
}

void android::view::View::setDrawingCacheEnabled(cpp_boolean const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(200), J2CPP_METHOD_SIGNATURE(200), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean android::view::View::isDrawingCacheEnabled()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(201), J2CPP_METHOD_SIGNATURE(201), false>()
		)
	);
}

local_ref< android::graphics::Bitmap > android::view::View::getDrawingCache()
{
	return local_ref< android::graphics::Bitmap >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(202), J2CPP_METHOD_SIGNATURE(202), false>()
		)
	);
}

local_ref< android::graphics::Bitmap > android::view::View::getDrawingCache(cpp_boolean const &a0)
{
	return local_ref< android::graphics::Bitmap >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(203), J2CPP_METHOD_SIGNATURE(203), false>(),
			a0.get_jtype()
		)
	);
}

void android::view::View::destroyDrawingCache()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(204), J2CPP_METHOD_SIGNATURE(204), false>()
		)
	);
}

void android::view::View::setDrawingCacheBackgroundColor(cpp_int const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(205), J2CPP_METHOD_SIGNATURE(205), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int android::view::View::getDrawingCacheBackgroundColor()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(206), J2CPP_METHOD_SIGNATURE(206), false>()
		)
	);
}

void android::view::View::buildDrawingCache()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(207), J2CPP_METHOD_SIGNATURE(207), false>()
		)
	);
}

void android::view::View::buildDrawingCache(cpp_boolean const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(208), J2CPP_METHOD_SIGNATURE(208), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean android::view::View::isInEditMode()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(209), J2CPP_METHOD_SIGNATURE(209), false>()
		)
	);
}






void android::view::View::draw(local_ref< android::graphics::Canvas > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(215), J2CPP_METHOD_SIGNATURE(215), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int android::view::View::getSolidColor()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(216), J2CPP_METHOD_SIGNATURE(216), false>()
		)
	);
}

cpp_boolean android::view::View::isLayoutRequested()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(217), J2CPP_METHOD_SIGNATURE(217), false>()
		)
	);
}

void android::view::View::layout(cpp_int const &a0, cpp_int const &a1, cpp_int const &a2, cpp_int const &a3)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(218), J2CPP_METHOD_SIGNATURE(218), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype(), a3.get_jtype()
		)
	);
}



local_ref< android::content::res::Resources > android::view::View::getResources()
{
	return local_ref< android::content::res::Resources >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(221), J2CPP_METHOD_SIGNATURE(221), false>()
		)
	);
}

void android::view::View::invalidateDrawable(local_ref< android::graphics::drawable::Drawable > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(222), J2CPP_METHOD_SIGNATURE(222), false>(),
			a0.get_jtype()
		)
	);
}

void android::view::View::scheduleDrawable(local_ref< android::graphics::drawable::Drawable > const &a0, local_ref< java::lang::Runnable > const &a1, cpp_long const &a2)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(223), J2CPP_METHOD_SIGNATURE(223), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

void android::view::View::unscheduleDrawable(local_ref< android::graphics::drawable::Drawable > const &a0, local_ref< java::lang::Runnable > const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(224), J2CPP_METHOD_SIGNATURE(224), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void android::view::View::unscheduleDrawable(local_ref< android::graphics::drawable::Drawable > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(225), J2CPP_METHOD_SIGNATURE(225), false>(),
			a0.get_jtype()
		)
	);
}



void android::view::View::refreshDrawableState()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(228), J2CPP_METHOD_SIGNATURE(228), false>()
		)
	);
}

local_ref< cpp_int_array<1> > android::view::View::getDrawableState()
{
	return local_ref< cpp_int_array<1> >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(229), J2CPP_METHOD_SIGNATURE(229), false>()
		)
	);
}



void android::view::View::setBackgroundColor(cpp_int const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(232), J2CPP_METHOD_SIGNATURE(232), false>(),
			a0.get_jtype()
		)
	);
}

void android::view::View::setBackgroundResource(cpp_int const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(233), J2CPP_METHOD_SIGNATURE(233), false>(),
			a0.get_jtype()
		)
	);
}

void android::view::View::setBackgroundDrawable(local_ref< android::graphics::drawable::Drawable > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(234), J2CPP_METHOD_SIGNATURE(234), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< android::graphics::drawable::Drawable > android::view::View::getBackground()
{
	return local_ref< android::graphics::drawable::Drawable >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(235), J2CPP_METHOD_SIGNATURE(235), false>()
		)
	);
}

void android::view::View::setPadding(cpp_int const &a0, cpp_int const &a1, cpp_int const &a2, cpp_int const &a3)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(236), J2CPP_METHOD_SIGNATURE(236), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype(), a3.get_jtype()
		)
	);
}

cpp_int android::view::View::getPaddingTop()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(237), J2CPP_METHOD_SIGNATURE(237), false>()
		)
	);
}

cpp_int android::view::View::getPaddingBottom()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(238), J2CPP_METHOD_SIGNATURE(238), false>()
		)
	);
}

cpp_int android::view::View::getPaddingLeft()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(239), J2CPP_METHOD_SIGNATURE(239), false>()
		)
	);
}

cpp_int android::view::View::getPaddingRight()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(240), J2CPP_METHOD_SIGNATURE(240), false>()
		)
	);
}

void android::view::View::setSelected(cpp_boolean const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(241), J2CPP_METHOD_SIGNATURE(241), false>(),
			a0.get_jtype()
		)
	);
}


cpp_boolean android::view::View::isSelected()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(243), J2CPP_METHOD_SIGNATURE(243), false>()
		)
	);
}

local_ref< android::view::ViewTreeObserver > android::view::View::getViewTreeObserver()
{
	return local_ref< android::view::ViewTreeObserver >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(244), J2CPP_METHOD_SIGNATURE(244), false>()
		)
	);
}

local_ref< android::view::View > android::view::View::getRootView()
{
	return local_ref< android::view::View >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(245), J2CPP_METHOD_SIGNATURE(245), false>()
		)
	);
}

void android::view::View::getLocationOnScreen(local_ref< cpp_int_array<1> > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(246), J2CPP_METHOD_SIGNATURE(246), false>(),
			a0.get_jtype()
		)
	);
}

void android::view::View::getLocationInWindow(local_ref< cpp_int_array<1> > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(247), J2CPP_METHOD_SIGNATURE(247), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< android::view::View > android::view::View::findViewById(cpp_int const &a0)
{
	return local_ref< android::view::View >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(248), J2CPP_METHOD_SIGNATURE(248), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< android::view::View > android::view::View::findViewWithTag(local_ref< java::lang::Object > const &a0)
{
	return local_ref< android::view::View >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(249), J2CPP_METHOD_SIGNATURE(249), false>(),
			a0.get_jtype()
		)
	);
}

void android::view::View::setId(cpp_int const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(250), J2CPP_METHOD_SIGNATURE(250), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int android::view::View::getId()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(251), J2CPP_METHOD_SIGNATURE(251), false>()
		)
	);
}

local_ref< java::lang::Object > android::view::View::getTag()
{
	return local_ref< java::lang::Object >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(252), J2CPP_METHOD_SIGNATURE(252), false>()
		)
	);
}

void android::view::View::setTag(local_ref< java::lang::Object > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(253), J2CPP_METHOD_SIGNATURE(253), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::Object > android::view::View::getTag(cpp_int const &a0)
{
	return local_ref< java::lang::Object >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(254), J2CPP_METHOD_SIGNATURE(254), false>(),
			a0.get_jtype()
		)
	);
}

void android::view::View::setTag(cpp_int const &a0, local_ref< java::lang::Object > const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(255), J2CPP_METHOD_SIGNATURE(255), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_int android::view::View::getBaseline()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(256), J2CPP_METHOD_SIGNATURE(256), false>()
		)
	);
}

void android::view::View::requestLayout()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(257), J2CPP_METHOD_SIGNATURE(257), false>()
		)
	);
}

void android::view::View::forceLayout()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(258), J2CPP_METHOD_SIGNATURE(258), false>()
		)
	);
}

void android::view::View::measure(cpp_int const &a0, cpp_int const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(259), J2CPP_METHOD_SIGNATURE(259), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}



cpp_int android::view::View::resolveSize(cpp_int const &a0, cpp_int const &a1)
{
	return cpp_int(
		environment::get().get_jenv()->CallStaticIntMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(262), J2CPP_METHOD_SIGNATURE(262), true>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_int android::view::View::getDefaultSize(cpp_int const &a0, cpp_int const &a1)
{
	return cpp_int(
		environment::get().get_jenv()->CallStaticIntMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(263), J2CPP_METHOD_SIGNATURE(263), true>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}



void android::view::View::setMinimumHeight(cpp_int const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(266), J2CPP_METHOD_SIGNATURE(266), false>(),
			a0.get_jtype()
		)
	);
}

void android::view::View::setMinimumWidth(cpp_int const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(267), J2CPP_METHOD_SIGNATURE(267), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< android::view::animation::Animation > android::view::View::getAnimation()
{
	return local_ref< android::view::animation::Animation >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(268), J2CPP_METHOD_SIGNATURE(268), false>()
		)
	);
}

void android::view::View::startAnimation(local_ref< android::view::animation::Animation > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(269), J2CPP_METHOD_SIGNATURE(269), false>(),
			a0.get_jtype()
		)
	);
}

void android::view::View::clearAnimation()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(270), J2CPP_METHOD_SIGNATURE(270), false>()
		)
	);
}

void android::view::View::setAnimation(local_ref< android::view::animation::Animation > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(271), J2CPP_METHOD_SIGNATURE(271), false>(),
			a0.get_jtype()
		)
	);
}




void android::view::View::playSoundEffect(cpp_int const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(275), J2CPP_METHOD_SIGNATURE(275), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean android::view::View::performHapticFeedback(cpp_int const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(276), J2CPP_METHOD_SIGNATURE(276), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean android::view::View::performHapticFeedback(cpp_int const &a0, cpp_int const &a1)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(277), J2CPP_METHOD_SIGNATURE(277), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< android::view::View > android::view::View::inflate(local_ref< android::content::Context > const &a0, cpp_int const &a1, local_ref< android::view::ViewGroup > const &a2)
{
	return local_ref< android::view::View >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(278), J2CPP_METHOD_SIGNATURE(278), true>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}



static_field<
	android::view::View::J2CPP_CLASS_NAME,
	android::view::View::J2CPP_FIELD_NAME(1),
	android::view::View::J2CPP_FIELD_SIGNATURE(1),
	cpp_int
> android::view::View::NO_ID;

static_field<
	android::view::View::J2CPP_CLASS_NAME,
	android::view::View::J2CPP_FIELD_NAME(2),
	android::view::View::J2CPP_FIELD_SIGNATURE(2),
	cpp_int
> android::view::View::VISIBLE;

static_field<
	android::view::View::J2CPP_CLASS_NAME,
	android::view::View::J2CPP_FIELD_NAME(3),
	android::view::View::J2CPP_FIELD_SIGNATURE(3),
	cpp_int
> android::view::View::INVISIBLE;

static_field<
	android::view::View::J2CPP_CLASS_NAME,
	android::view::View::J2CPP_FIELD_NAME(4),
	android::view::View::J2CPP_FIELD_SIGNATURE(4),
	cpp_int
> android::view::View::GONE;

static_field<
	android::view::View::J2CPP_CLASS_NAME,
	android::view::View::J2CPP_FIELD_NAME(5),
	android::view::View::J2CPP_FIELD_SIGNATURE(5),
	cpp_int
> android::view::View::DRAWING_CACHE_QUALITY_LOW;

static_field<
	android::view::View::J2CPP_CLASS_NAME,
	android::view::View::J2CPP_FIELD_NAME(6),
	android::view::View::J2CPP_FIELD_SIGNATURE(6),
	cpp_int
> android::view::View::DRAWING_CACHE_QUALITY_HIGH;

static_field<
	android::view::View::J2CPP_CLASS_NAME,
	android::view::View::J2CPP_FIELD_NAME(7),
	android::view::View::J2CPP_FIELD_SIGNATURE(7),
	cpp_int
> android::view::View::DRAWING_CACHE_QUALITY_AUTO;

static_field<
	android::view::View::J2CPP_CLASS_NAME,
	android::view::View::J2CPP_FIELD_NAME(8),
	android::view::View::J2CPP_FIELD_SIGNATURE(8),
	cpp_int
> android::view::View::SCROLLBARS_INSIDE_OVERLAY;

static_field<
	android::view::View::J2CPP_CLASS_NAME,
	android::view::View::J2CPP_FIELD_NAME(9),
	android::view::View::J2CPP_FIELD_SIGNATURE(9),
	cpp_int
> android::view::View::SCROLLBARS_INSIDE_INSET;

static_field<
	android::view::View::J2CPP_CLASS_NAME,
	android::view::View::J2CPP_FIELD_NAME(10),
	android::view::View::J2CPP_FIELD_SIGNATURE(10),
	cpp_int
> android::view::View::SCROLLBARS_OUTSIDE_OVERLAY;

static_field<
	android::view::View::J2CPP_CLASS_NAME,
	android::view::View::J2CPP_FIELD_NAME(11),
	android::view::View::J2CPP_FIELD_SIGNATURE(11),
	cpp_int
> android::view::View::SCROLLBARS_OUTSIDE_INSET;

static_field<
	android::view::View::J2CPP_CLASS_NAME,
	android::view::View::J2CPP_FIELD_NAME(12),
	android::view::View::J2CPP_FIELD_SIGNATURE(12),
	cpp_int
> android::view::View::KEEP_SCREEN_ON;

static_field<
	android::view::View::J2CPP_CLASS_NAME,
	android::view::View::J2CPP_FIELD_NAME(13),
	android::view::View::J2CPP_FIELD_SIGNATURE(13),
	cpp_int
> android::view::View::SOUND_EFFECTS_ENABLED;

static_field<
	android::view::View::J2CPP_CLASS_NAME,
	android::view::View::J2CPP_FIELD_NAME(14),
	android::view::View::J2CPP_FIELD_SIGNATURE(14),
	cpp_int
> android::view::View::HAPTIC_FEEDBACK_ENABLED;

static_field<
	android::view::View::J2CPP_CLASS_NAME,
	android::view::View::J2CPP_FIELD_NAME(15),
	android::view::View::J2CPP_FIELD_SIGNATURE(15),
	cpp_int
> android::view::View::FOCUSABLES_ALL;

static_field<
	android::view::View::J2CPP_CLASS_NAME,
	android::view::View::J2CPP_FIELD_NAME(16),
	android::view::View::J2CPP_FIELD_SIGNATURE(16),
	cpp_int
> android::view::View::FOCUSABLES_TOUCH_MODE;

static_field<
	android::view::View::J2CPP_CLASS_NAME,
	android::view::View::J2CPP_FIELD_NAME(17),
	android::view::View::J2CPP_FIELD_SIGNATURE(17),
	cpp_int
> android::view::View::FOCUS_BACKWARD;

static_field<
	android::view::View::J2CPP_CLASS_NAME,
	android::view::View::J2CPP_FIELD_NAME(18),
	android::view::View::J2CPP_FIELD_SIGNATURE(18),
	cpp_int
> android::view::View::FOCUS_FORWARD;

static_field<
	android::view::View::J2CPP_CLASS_NAME,
	android::view::View::J2CPP_FIELD_NAME(19),
	android::view::View::J2CPP_FIELD_SIGNATURE(19),
	cpp_int
> android::view::View::FOCUS_LEFT;

static_field<
	android::view::View::J2CPP_CLASS_NAME,
	android::view::View::J2CPP_FIELD_NAME(20),
	android::view::View::J2CPP_FIELD_SIGNATURE(20),
	cpp_int
> android::view::View::FOCUS_UP;

static_field<
	android::view::View::J2CPP_CLASS_NAME,
	android::view::View::J2CPP_FIELD_NAME(21),
	android::view::View::J2CPP_FIELD_SIGNATURE(21),
	cpp_int
> android::view::View::FOCUS_RIGHT;

static_field<
	android::view::View::J2CPP_CLASS_NAME,
	android::view::View::J2CPP_FIELD_NAME(22),
	android::view::View::J2CPP_FIELD_SIGNATURE(22),
	cpp_int
> android::view::View::FOCUS_DOWN;


J2CPP_DEFINE_CLASS(android::view::View,"android/view/View")
J2CPP_DEFINE_METHOD(android::view::View,0,"<init>","(Landroid/content/Context;)V")
J2CPP_DEFINE_METHOD(android::view::View,1,"<init>","(Landroid/content/Context;Landroid/util/AttributeSet;)V")
J2CPP_DEFINE_METHOD(android::view::View,2,"<init>","(Landroid/content/Context;Landroid/util/AttributeSet;I)V")
J2CPP_DEFINE_METHOD(android::view::View,3,"finalize","()V")
J2CPP_DEFINE_METHOD(android::view::View,4,"initializeFadingEdge","(Landroid/content/res/TypedArray;)V")
J2CPP_DEFINE_METHOD(android::view::View,5,"getVerticalFadingEdgeLength","()I")
J2CPP_DEFINE_METHOD(android::view::View,6,"setFadingEdgeLength","(I)V")
J2CPP_DEFINE_METHOD(android::view::View,7,"getHorizontalFadingEdgeLength","()I")
J2CPP_DEFINE_METHOD(android::view::View,8,"getVerticalScrollbarWidth","()I")
J2CPP_DEFINE_METHOD(android::view::View,9,"getHorizontalScrollbarHeight","()I")
J2CPP_DEFINE_METHOD(android::view::View,10,"initializeScrollbars","(Landroid/content/res/TypedArray;)V")
J2CPP_DEFINE_METHOD(android::view::View,11,"setOnFocusChangeListener","(Landroid/view/View$OnFocusChangeListener;)V")
J2CPP_DEFINE_METHOD(android::view::View,12,"getOnFocusChangeListener","()Landroid/view/View$OnFocusChangeListener;")
J2CPP_DEFINE_METHOD(android::view::View,13,"setOnClickListener","(Landroid/view/View$OnClickListener;)V")
J2CPP_DEFINE_METHOD(android::view::View,14,"setOnLongClickListener","(Landroid/view/View$OnLongClickListener;)V")
J2CPP_DEFINE_METHOD(android::view::View,15,"setOnCreateContextMenuListener","(Landroid/view/View$OnCreateContextMenuListener;)V")
J2CPP_DEFINE_METHOD(android::view::View,16,"performClick","()Z")
J2CPP_DEFINE_METHOD(android::view::View,17,"performLongClick","()Z")
J2CPP_DEFINE_METHOD(android::view::View,18,"showContextMenu","()Z")
J2CPP_DEFINE_METHOD(android::view::View,19,"setOnKeyListener","(Landroid/view/View$OnKeyListener;)V")
J2CPP_DEFINE_METHOD(android::view::View,20,"setOnTouchListener","(Landroid/view/View$OnTouchListener;)V")
J2CPP_DEFINE_METHOD(android::view::View,21,"requestRectangleOnScreen","(Landroid/graphics/Rect;)Z")
J2CPP_DEFINE_METHOD(android::view::View,22,"requestRectangleOnScreen","(Landroid/graphics/Rect;Z)Z")
J2CPP_DEFINE_METHOD(android::view::View,23,"clearFocus","()V")
J2CPP_DEFINE_METHOD(android::view::View,24,"hasFocus","()Z")
J2CPP_DEFINE_METHOD(android::view::View,25,"hasFocusable","()Z")
J2CPP_DEFINE_METHOD(android::view::View,26,"onFocusChanged","(ZILandroid/graphics/Rect;)V")
J2CPP_DEFINE_METHOD(android::view::View,27,"sendAccessibilityEvent","(I)V")
J2CPP_DEFINE_METHOD(android::view::View,28,"sendAccessibilityEventUnchecked","(Landroid/view/accessibility/AccessibilityEvent;)V")
J2CPP_DEFINE_METHOD(android::view::View,29,"dispatchPopulateAccessibilityEvent","(Landroid/view/accessibility/AccessibilityEvent;)Z")
J2CPP_DEFINE_METHOD(android::view::View,30,"getContentDescription","()Ljava/lang/CharSequence;")
J2CPP_DEFINE_METHOD(android::view::View,31,"setContentDescription","(Ljava/lang/CharSequence;)V")
J2CPP_DEFINE_METHOD(android::view::View,32,"isFocused","()Z")
J2CPP_DEFINE_METHOD(android::view::View,33,"findFocus","()Landroid/view/View;")
J2CPP_DEFINE_METHOD(android::view::View,34,"setScrollContainer","(Z)V")
J2CPP_DEFINE_METHOD(android::view::View,35,"getDrawingCacheQuality","()I")
J2CPP_DEFINE_METHOD(android::view::View,36,"setDrawingCacheQuality","(I)V")
J2CPP_DEFINE_METHOD(android::view::View,37,"getKeepScreenOn","()Z")
J2CPP_DEFINE_METHOD(android::view::View,38,"setKeepScreenOn","(Z)V")
J2CPP_DEFINE_METHOD(android::view::View,39,"getNextFocusLeftId","()I")
J2CPP_DEFINE_METHOD(android::view::View,40,"setNextFocusLeftId","(I)V")
J2CPP_DEFINE_METHOD(android::view::View,41,"getNextFocusRightId","()I")
J2CPP_DEFINE_METHOD(android::view::View,42,"setNextFocusRightId","(I)V")
J2CPP_DEFINE_METHOD(android::view::View,43,"getNextFocusUpId","()I")
J2CPP_DEFINE_METHOD(android::view::View,44,"setNextFocusUpId","(I)V")
J2CPP_DEFINE_METHOD(android::view::View,45,"getNextFocusDownId","()I")
J2CPP_DEFINE_METHOD(android::view::View,46,"setNextFocusDownId","(I)V")
J2CPP_DEFINE_METHOD(android::view::View,47,"isShown","()Z")
J2CPP_DEFINE_METHOD(android::view::View,48,"fitSystemWindows","(Landroid/graphics/Rect;)Z")
J2CPP_DEFINE_METHOD(android::view::View,49,"getVisibility","()I")
J2CPP_DEFINE_METHOD(android::view::View,50,"setVisibility","(I)V")
J2CPP_DEFINE_METHOD(android::view::View,51,"isEnabled","()Z")
J2CPP_DEFINE_METHOD(android::view::View,52,"setEnabled","(Z)V")
J2CPP_DEFINE_METHOD(android::view::View,53,"setFocusable","(Z)V")
J2CPP_DEFINE_METHOD(android::view::View,54,"setFocusableInTouchMode","(Z)V")
J2CPP_DEFINE_METHOD(android::view::View,55,"setSoundEffectsEnabled","(Z)V")
J2CPP_DEFINE_METHOD(android::view::View,56,"isSoundEffectsEnabled","()Z")
J2CPP_DEFINE_METHOD(android::view::View,57,"setHapticFeedbackEnabled","(Z)V")
J2CPP_DEFINE_METHOD(android::view::View,58,"isHapticFeedbackEnabled","()Z")
J2CPP_DEFINE_METHOD(android::view::View,59,"setWillNotDraw","(Z)V")
J2CPP_DEFINE_METHOD(android::view::View,60,"willNotDraw","()Z")
J2CPP_DEFINE_METHOD(android::view::View,61,"setWillNotCacheDrawing","(Z)V")
J2CPP_DEFINE_METHOD(android::view::View,62,"willNotCacheDrawing","()Z")
J2CPP_DEFINE_METHOD(android::view::View,63,"isClickable","()Z")
J2CPP_DEFINE_METHOD(android::view::View,64,"setClickable","(Z)V")
J2CPP_DEFINE_METHOD(android::view::View,65,"isLongClickable","()Z")
J2CPP_DEFINE_METHOD(android::view::View,66,"setLongClickable","(Z)V")
J2CPP_DEFINE_METHOD(android::view::View,67,"setPressed","(Z)V")
J2CPP_DEFINE_METHOD(android::view::View,68,"dispatchSetPressed","(Z)V")
J2CPP_DEFINE_METHOD(android::view::View,69,"isPressed","()Z")
J2CPP_DEFINE_METHOD(android::view::View,70,"isSaveEnabled","()Z")
J2CPP_DEFINE_METHOD(android::view::View,71,"setSaveEnabled","(Z)V")
J2CPP_DEFINE_METHOD(android::view::View,72,"isFocusable","()Z")
J2CPP_DEFINE_METHOD(android::view::View,73,"isFocusableInTouchMode","()Z")
J2CPP_DEFINE_METHOD(android::view::View,74,"focusSearch","(I)Landroid/view/View;")
J2CPP_DEFINE_METHOD(android::view::View,75,"dispatchUnhandledMove","(Landroid/view/View;I)Z")
J2CPP_DEFINE_METHOD(android::view::View,76,"getFocusables","(I)Ljava/util/ArrayList;")
J2CPP_DEFINE_METHOD(android::view::View,77,"addFocusables","(Ljava/util/ArrayList;I)V")
J2CPP_DEFINE_METHOD(android::view::View,78,"addFocusables","(Ljava/util/ArrayList;II)V")
J2CPP_DEFINE_METHOD(android::view::View,79,"getTouchables","()Ljava/util/ArrayList;")
J2CPP_DEFINE_METHOD(android::view::View,80,"addTouchables","(Ljava/util/ArrayList;)V")
J2CPP_DEFINE_METHOD(android::view::View,81,"requestFocus","()Z")
J2CPP_DEFINE_METHOD(android::view::View,82,"requestFocus","(I)Z")
J2CPP_DEFINE_METHOD(android::view::View,83,"requestFocus","(ILandroid/graphics/Rect;)Z")
J2CPP_DEFINE_METHOD(android::view::View,84,"requestFocusFromTouch","()Z")
J2CPP_DEFINE_METHOD(android::view::View,85,"onStartTemporaryDetach","()V")
J2CPP_DEFINE_METHOD(android::view::View,86,"onFinishTemporaryDetach","()V")
J2CPP_DEFINE_METHOD(android::view::View,87,"getKeyDispatcherState","()Landroid/view/KeyEvent$DispatcherState;")
J2CPP_DEFINE_METHOD(android::view::View,88,"dispatchKeyEventPreIme","(Landroid/view/KeyEvent;)Z")
J2CPP_DEFINE_METHOD(android::view::View,89,"dispatchKeyEvent","(Landroid/view/KeyEvent;)Z")
J2CPP_DEFINE_METHOD(android::view::View,90,"dispatchKeyShortcutEvent","(Landroid/view/KeyEvent;)Z")
J2CPP_DEFINE_METHOD(android::view::View,91,"dispatchTouchEvent","(Landroid/view/MotionEvent;)Z")
J2CPP_DEFINE_METHOD(android::view::View,92,"dispatchTrackballEvent","(Landroid/view/MotionEvent;)Z")
J2CPP_DEFINE_METHOD(android::view::View,93,"dispatchWindowFocusChanged","(Z)V")
J2CPP_DEFINE_METHOD(android::view::View,94,"onWindowFocusChanged","(Z)V")
J2CPP_DEFINE_METHOD(android::view::View,95,"hasWindowFocus","()Z")
J2CPP_DEFINE_METHOD(android::view::View,96,"dispatchWindowVisibilityChanged","(I)V")
J2CPP_DEFINE_METHOD(android::view::View,97,"onWindowVisibilityChanged","(I)V")
J2CPP_DEFINE_METHOD(android::view::View,98,"getWindowVisibility","()I")
J2CPP_DEFINE_METHOD(android::view::View,99,"getWindowVisibleDisplayFrame","(Landroid/graphics/Rect;)V")
J2CPP_DEFINE_METHOD(android::view::View,100,"isInTouchMode","()Z")
J2CPP_DEFINE_METHOD(android::view::View,101,"getContext","()Landroid/content/Context;")
J2CPP_DEFINE_METHOD(android::view::View,102,"onKeyPreIme","(ILandroid/view/KeyEvent;)Z")
J2CPP_DEFINE_METHOD(android::view::View,103,"onKeyDown","(ILandroid/view/KeyEvent;)Z")
J2CPP_DEFINE_METHOD(android::view::View,104,"onKeyLongPress","(ILandroid/view/KeyEvent;)Z")
J2CPP_DEFINE_METHOD(android::view::View,105,"onKeyUp","(ILandroid/view/KeyEvent;)Z")
J2CPP_DEFINE_METHOD(android::view::View,106,"onKeyMultiple","(IILandroid/view/KeyEvent;)Z")
J2CPP_DEFINE_METHOD(android::view::View,107,"onKeyShortcut","(ILandroid/view/KeyEvent;)Z")
J2CPP_DEFINE_METHOD(android::view::View,108,"onCheckIsTextEditor","()Z")
J2CPP_DEFINE_METHOD(android::view::View,109,"onCreateInputConnection","(Landroid/view/inputmethod/EditorInfo;)Landroid/view/inputmethod/InputConnection;")
J2CPP_DEFINE_METHOD(android::view::View,110,"checkInputConnectionProxy","(Landroid/view/View;)Z")
J2CPP_DEFINE_METHOD(android::view::View,111,"createContextMenu","(Landroid/view/ContextMenu;)V")
J2CPP_DEFINE_METHOD(android::view::View,112,"getContextMenuInfo","()Landroid/view/ContextMenu$ContextMenuInfo;")
J2CPP_DEFINE_METHOD(android::view::View,113,"onCreateContextMenu","(Landroid/view/ContextMenu;)V")
J2CPP_DEFINE_METHOD(android::view::View,114,"onTrackballEvent","(Landroid/view/MotionEvent;)Z")
J2CPP_DEFINE_METHOD(android::view::View,115,"onTouchEvent","(Landroid/view/MotionEvent;)Z")
J2CPP_DEFINE_METHOD(android::view::View,116,"cancelLongPress","()V")
J2CPP_DEFINE_METHOD(android::view::View,117,"setTouchDelegate","(Landroid/view/TouchDelegate;)V")
J2CPP_DEFINE_METHOD(android::view::View,118,"getTouchDelegate","()Landroid/view/TouchDelegate;")
J2CPP_DEFINE_METHOD(android::view::View,119,"bringToFront","()V")
J2CPP_DEFINE_METHOD(android::view::View,120,"onScrollChanged","(IIII)V")
J2CPP_DEFINE_METHOD(android::view::View,121,"onSizeChanged","(IIII)V")
J2CPP_DEFINE_METHOD(android::view::View,122,"dispatchDraw","(Landroid/graphics/Canvas;)V")
J2CPP_DEFINE_METHOD(android::view::View,123,"getParent","()Landroid/view/ViewParent;")
J2CPP_DEFINE_METHOD(android::view::View,124,"getScrollX","()I")
J2CPP_DEFINE_METHOD(android::view::View,125,"getScrollY","()I")
J2CPP_DEFINE_METHOD(android::view::View,126,"getWidth","()I")
J2CPP_DEFINE_METHOD(android::view::View,127,"getHeight","()I")
J2CPP_DEFINE_METHOD(android::view::View,128,"getDrawingRect","(Landroid/graphics/Rect;)V")
J2CPP_DEFINE_METHOD(android::view::View,129,"getMeasuredWidth","()I")
J2CPP_DEFINE_METHOD(android::view::View,130,"getMeasuredHeight","()I")
J2CPP_DEFINE_METHOD(android::view::View,131,"getTop","()I")
J2CPP_DEFINE_METHOD(android::view::View,132,"getBottom","()I")
J2CPP_DEFINE_METHOD(android::view::View,133,"getLeft","()I")
J2CPP_DEFINE_METHOD(android::view::View,134,"getRight","()I")
J2CPP_DEFINE_METHOD(android::view::View,135,"getHitRect","(Landroid/graphics/Rect;)V")
J2CPP_DEFINE_METHOD(android::view::View,136,"getFocusedRect","(Landroid/graphics/Rect;)V")
J2CPP_DEFINE_METHOD(android::view::View,137,"getGlobalVisibleRect","(Landroid/graphics/Rect;Landroid/graphics/Point;)Z")
J2CPP_DEFINE_METHOD(android::view::View,138,"getGlobalVisibleRect","(Landroid/graphics/Rect;)Z")
J2CPP_DEFINE_METHOD(android::view::View,139,"getLocalVisibleRect","(Landroid/graphics/Rect;)Z")
J2CPP_DEFINE_METHOD(android::view::View,140,"offsetTopAndBottom","(I)V")
J2CPP_DEFINE_METHOD(android::view::View,141,"offsetLeftAndRight","(I)V")
J2CPP_DEFINE_METHOD(android::view::View,142,"getLayoutParams","()Landroid/view/ViewGroup$LayoutParams;")
J2CPP_DEFINE_METHOD(android::view::View,143,"setLayoutParams","(Landroid/view/ViewGroup$LayoutParams;)V")
J2CPP_DEFINE_METHOD(android::view::View,144,"scrollTo","(II)V")
J2CPP_DEFINE_METHOD(android::view::View,145,"scrollBy","(II)V")
J2CPP_DEFINE_METHOD(android::view::View,146,"awakenScrollBars","()Z")
J2CPP_DEFINE_METHOD(android::view::View,147,"awakenScrollBars","(I)Z")
J2CPP_DEFINE_METHOD(android::view::View,148,"awakenScrollBars","(IZ)Z")
J2CPP_DEFINE_METHOD(android::view::View,149,"invalidate","(Landroid/graphics/Rect;)V")
J2CPP_DEFINE_METHOD(android::view::View,150,"invalidate","(IIII)V")
J2CPP_DEFINE_METHOD(android::view::View,151,"invalidate","()V")
J2CPP_DEFINE_METHOD(android::view::View,152,"isOpaque","()Z")
J2CPP_DEFINE_METHOD(android::view::View,153,"getHandler","()Landroid/os/Handler;")
J2CPP_DEFINE_METHOD(android::view::View,154,"post","(Ljava/lang/Runnable;)Z")
J2CPP_DEFINE_METHOD(android::view::View,155,"postDelayed","(Ljava/lang/Runnable;J)Z")
J2CPP_DEFINE_METHOD(android::view::View,156,"removeCallbacks","(Ljava/lang/Runnable;)Z")
J2CPP_DEFINE_METHOD(android::view::View,157,"postInvalidate","()V")
J2CPP_DEFINE_METHOD(android::view::View,158,"postInvalidate","(IIII)V")
J2CPP_DEFINE_METHOD(android::view::View,159,"postInvalidateDelayed","(J)V")
J2CPP_DEFINE_METHOD(android::view::View,160,"postInvalidateDelayed","(JIIII)V")
J2CPP_DEFINE_METHOD(android::view::View,161,"computeScroll","()V")
J2CPP_DEFINE_METHOD(android::view::View,162,"isHorizontalFadingEdgeEnabled","()Z")
J2CPP_DEFINE_METHOD(android::view::View,163,"setHorizontalFadingEdgeEnabled","(Z)V")
J2CPP_DEFINE_METHOD(android::view::View,164,"isVerticalFadingEdgeEnabled","()Z")
J2CPP_DEFINE_METHOD(android::view::View,165,"setVerticalFadingEdgeEnabled","(Z)V")
J2CPP_DEFINE_METHOD(android::view::View,166,"getTopFadingEdgeStrength","()F")
J2CPP_DEFINE_METHOD(android::view::View,167,"getBottomFadingEdgeStrength","()F")
J2CPP_DEFINE_METHOD(android::view::View,168,"getLeftFadingEdgeStrength","()F")
J2CPP_DEFINE_METHOD(android::view::View,169,"getRightFadingEdgeStrength","()F")
J2CPP_DEFINE_METHOD(android::view::View,170,"isHorizontalScrollBarEnabled","()Z")
J2CPP_DEFINE_METHOD(android::view::View,171,"setHorizontalScrollBarEnabled","(Z)V")
J2CPP_DEFINE_METHOD(android::view::View,172,"isVerticalScrollBarEnabled","()Z")
J2CPP_DEFINE_METHOD(android::view::View,173,"setVerticalScrollBarEnabled","(Z)V")
J2CPP_DEFINE_METHOD(android::view::View,174,"setScrollbarFadingEnabled","(Z)V")
J2CPP_DEFINE_METHOD(android::view::View,175,"isScrollbarFadingEnabled","()Z")
J2CPP_DEFINE_METHOD(android::view::View,176,"setScrollBarStyle","(I)V")
J2CPP_DEFINE_METHOD(android::view::View,177,"getScrollBarStyle","()I")
J2CPP_DEFINE_METHOD(android::view::View,178,"computeHorizontalScrollRange","()I")
J2CPP_DEFINE_METHOD(android::view::View,179,"computeHorizontalScrollOffset","()I")
J2CPP_DEFINE_METHOD(android::view::View,180,"computeHorizontalScrollExtent","()I")
J2CPP_DEFINE_METHOD(android::view::View,181,"computeVerticalScrollRange","()I")
J2CPP_DEFINE_METHOD(android::view::View,182,"computeVerticalScrollOffset","()I")
J2CPP_DEFINE_METHOD(android::view::View,183,"computeVerticalScrollExtent","()I")
J2CPP_DEFINE_METHOD(android::view::View,184,"onDrawScrollBars","(Landroid/graphics/Canvas;)V")
J2CPP_DEFINE_METHOD(android::view::View,185,"onDraw","(Landroid/graphics/Canvas;)V")
J2CPP_DEFINE_METHOD(android::view::View,186,"onAttachedToWindow","()V")
J2CPP_DEFINE_METHOD(android::view::View,187,"onDetachedFromWindow","()V")
J2CPP_DEFINE_METHOD(android::view::View,188,"getWindowAttachCount","()I")
J2CPP_DEFINE_METHOD(android::view::View,189,"getWindowToken","()Landroid/os/IBinder;")
J2CPP_DEFINE_METHOD(android::view::View,190,"getApplicationWindowToken","()Landroid/os/IBinder;")
J2CPP_DEFINE_METHOD(android::view::View,191,"saveHierarchyState","(Landroid/util/SparseArray;)V")
J2CPP_DEFINE_METHOD(android::view::View,192,"dispatchSaveInstanceState","(Landroid/util/SparseArray;)V")
J2CPP_DEFINE_METHOD(android::view::View,193,"onSaveInstanceState","()Landroid/os/Parcelable;")
J2CPP_DEFINE_METHOD(android::view::View,194,"restoreHierarchyState","(Landroid/util/SparseArray;)V")
J2CPP_DEFINE_METHOD(android::view::View,195,"dispatchRestoreInstanceState","(Landroid/util/SparseArray;)V")
J2CPP_DEFINE_METHOD(android::view::View,196,"onRestoreInstanceState","(Landroid/os/Parcelable;)V")
J2CPP_DEFINE_METHOD(android::view::View,197,"getDrawingTime","()J")
J2CPP_DEFINE_METHOD(android::view::View,198,"setDuplicateParentStateEnabled","(Z)V")
J2CPP_DEFINE_METHOD(android::view::View,199,"isDuplicateParentStateEnabled","()Z")
J2CPP_DEFINE_METHOD(android::view::View,200,"setDrawingCacheEnabled","(Z)V")
J2CPP_DEFINE_METHOD(android::view::View,201,"isDrawingCacheEnabled","()Z")
J2CPP_DEFINE_METHOD(android::view::View,202,"getDrawingCache","()Landroid/graphics/Bitmap;")
J2CPP_DEFINE_METHOD(android::view::View,203,"getDrawingCache","(Z)Landroid/graphics/Bitmap;")
J2CPP_DEFINE_METHOD(android::view::View,204,"destroyDrawingCache","()V")
J2CPP_DEFINE_METHOD(android::view::View,205,"setDrawingCacheBackgroundColor","(I)V")
J2CPP_DEFINE_METHOD(android::view::View,206,"getDrawingCacheBackgroundColor","()I")
J2CPP_DEFINE_METHOD(android::view::View,207,"buildDrawingCache","()V")
J2CPP_DEFINE_METHOD(android::view::View,208,"buildDrawingCache","(Z)V")
J2CPP_DEFINE_METHOD(android::view::View,209,"isInEditMode","()Z")
J2CPP_DEFINE_METHOD(android::view::View,210,"isPaddingOffsetRequired","()Z")
J2CPP_DEFINE_METHOD(android::view::View,211,"getLeftPaddingOffset","()I")
J2CPP_DEFINE_METHOD(android::view::View,212,"getRightPaddingOffset","()I")
J2CPP_DEFINE_METHOD(android::view::View,213,"getTopPaddingOffset","()I")
J2CPP_DEFINE_METHOD(android::view::View,214,"getBottomPaddingOffset","()I")
J2CPP_DEFINE_METHOD(android::view::View,215,"draw","(Landroid/graphics/Canvas;)V")
J2CPP_DEFINE_METHOD(android::view::View,216,"getSolidColor","()I")
J2CPP_DEFINE_METHOD(android::view::View,217,"isLayoutRequested","()Z")
J2CPP_DEFINE_METHOD(android::view::View,218,"layout","(IIII)V")
J2CPP_DEFINE_METHOD(android::view::View,219,"onLayout","(ZIIII)V")
J2CPP_DEFINE_METHOD(android::view::View,220,"onFinishInflate","()V")
J2CPP_DEFINE_METHOD(android::view::View,221,"getResources","()Landroid/content/res/Resources;")
J2CPP_DEFINE_METHOD(android::view::View,222,"invalidateDrawable","(Landroid/graphics/drawable/Drawable;)V")
J2CPP_DEFINE_METHOD(android::view::View,223,"scheduleDrawable","(Landroid/graphics/drawable/Drawable;Ljava/lang/Runnable;J)V")
J2CPP_DEFINE_METHOD(android::view::View,224,"unscheduleDrawable","(Landroid/graphics/drawable/Drawable;Ljava/lang/Runnable;)V")
J2CPP_DEFINE_METHOD(android::view::View,225,"unscheduleDrawable","(Landroid/graphics/drawable/Drawable;)V")
J2CPP_DEFINE_METHOD(android::view::View,226,"verifyDrawable","(Landroid/graphics/drawable/Drawable;)Z")
J2CPP_DEFINE_METHOD(android::view::View,227,"drawableStateChanged","()V")
J2CPP_DEFINE_METHOD(android::view::View,228,"refreshDrawableState","()V")
J2CPP_DEFINE_METHOD(android::view::View,229,"getDrawableState","()[I")
J2CPP_DEFINE_METHOD(android::view::View,230,"onCreateDrawableState","(I)[I")
J2CPP_DEFINE_METHOD(android::view::View,231,"mergeDrawableStates","([I[I)[I")
J2CPP_DEFINE_METHOD(android::view::View,232,"setBackgroundColor","(I)V")
J2CPP_DEFINE_METHOD(android::view::View,233,"setBackgroundResource","(I)V")
J2CPP_DEFINE_METHOD(android::view::View,234,"setBackgroundDrawable","(Landroid/graphics/drawable/Drawable;)V")
J2CPP_DEFINE_METHOD(android::view::View,235,"getBackground","()Landroid/graphics/drawable/Drawable;")
J2CPP_DEFINE_METHOD(android::view::View,236,"setPadding","(IIII)V")
J2CPP_DEFINE_METHOD(android::view::View,237,"getPaddingTop","()I")
J2CPP_DEFINE_METHOD(android::view::View,238,"getPaddingBottom","()I")
J2CPP_DEFINE_METHOD(android::view::View,239,"getPaddingLeft","()I")
J2CPP_DEFINE_METHOD(android::view::View,240,"getPaddingRight","()I")
J2CPP_DEFINE_METHOD(android::view::View,241,"setSelected","(Z)V")
J2CPP_DEFINE_METHOD(android::view::View,242,"dispatchSetSelected","(Z)V")
J2CPP_DEFINE_METHOD(android::view::View,243,"isSelected","()Z")
J2CPP_DEFINE_METHOD(android::view::View,244,"getViewTreeObserver","()Landroid/view/ViewTreeObserver;")
J2CPP_DEFINE_METHOD(android::view::View,245,"getRootView","()Landroid/view/View;")
J2CPP_DEFINE_METHOD(android::view::View,246,"getLocationOnScreen","([I)V")
J2CPP_DEFINE_METHOD(android::view::View,247,"getLocationInWindow","([I)V")
J2CPP_DEFINE_METHOD(android::view::View,248,"findViewById","(I)Landroid/view/View;")
J2CPP_DEFINE_METHOD(android::view::View,249,"findViewWithTag","(Ljava/lang/Object;)Landroid/view/View;")
J2CPP_DEFINE_METHOD(android::view::View,250,"setId","(I)V")
J2CPP_DEFINE_METHOD(android::view::View,251,"getId","()I")
J2CPP_DEFINE_METHOD(android::view::View,252,"getTag","()Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(android::view::View,253,"setTag","(Ljava/lang/Object;)V")
J2CPP_DEFINE_METHOD(android::view::View,254,"getTag","(I)Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(android::view::View,255,"setTag","(ILjava/lang/Object;)V")
J2CPP_DEFINE_METHOD(android::view::View,256,"getBaseline","()I")
J2CPP_DEFINE_METHOD(android::view::View,257,"requestLayout","()V")
J2CPP_DEFINE_METHOD(android::view::View,258,"forceLayout","()V")
J2CPP_DEFINE_METHOD(android::view::View,259,"measure","(II)V")
J2CPP_DEFINE_METHOD(android::view::View,260,"onMeasure","(II)V")
J2CPP_DEFINE_METHOD(android::view::View,261,"setMeasuredDimension","(II)V")
J2CPP_DEFINE_METHOD(android::view::View,262,"resolveSize","(II)I")
J2CPP_DEFINE_METHOD(android::view::View,263,"getDefaultSize","(II)I")
J2CPP_DEFINE_METHOD(android::view::View,264,"getSuggestedMinimumHeight","()I")
J2CPP_DEFINE_METHOD(android::view::View,265,"getSuggestedMinimumWidth","()I")
J2CPP_DEFINE_METHOD(android::view::View,266,"setMinimumHeight","(I)V")
J2CPP_DEFINE_METHOD(android::view::View,267,"setMinimumWidth","(I)V")
J2CPP_DEFINE_METHOD(android::view::View,268,"getAnimation","()Landroid/view/animation/Animation;")
J2CPP_DEFINE_METHOD(android::view::View,269,"startAnimation","(Landroid/view/animation/Animation;)V")
J2CPP_DEFINE_METHOD(android::view::View,270,"clearAnimation","()V")
J2CPP_DEFINE_METHOD(android::view::View,271,"setAnimation","(Landroid/view/animation/Animation;)V")
J2CPP_DEFINE_METHOD(android::view::View,272,"onAnimationStart","()V")
J2CPP_DEFINE_METHOD(android::view::View,273,"onAnimationEnd","()V")
J2CPP_DEFINE_METHOD(android::view::View,274,"onSetAlpha","(I)Z")
J2CPP_DEFINE_METHOD(android::view::View,275,"playSoundEffect","(I)V")
J2CPP_DEFINE_METHOD(android::view::View,276,"performHapticFeedback","(I)Z")
J2CPP_DEFINE_METHOD(android::view::View,277,"performHapticFeedback","(II)Z")
J2CPP_DEFINE_METHOD(android::view::View,278,"inflate","(Landroid/content/Context;ILandroid/view/ViewGroup;)Landroid/view/View;")
J2CPP_DEFINE_METHOD(android::view::View,279,"<clinit>","()V")
J2CPP_DEFINE_FIELD(android::view::View,0,"VIEW_LOG_TAG","Ljava/lang/String;")
J2CPP_DEFINE_FIELD(android::view::View,1,"NO_ID","I")
J2CPP_DEFINE_FIELD(android::view::View,2,"VISIBLE","I")
J2CPP_DEFINE_FIELD(android::view::View,3,"INVISIBLE","I")
J2CPP_DEFINE_FIELD(android::view::View,4,"GONE","I")
J2CPP_DEFINE_FIELD(android::view::View,5,"DRAWING_CACHE_QUALITY_LOW","I")
J2CPP_DEFINE_FIELD(android::view::View,6,"DRAWING_CACHE_QUALITY_HIGH","I")
J2CPP_DEFINE_FIELD(android::view::View,7,"DRAWING_CACHE_QUALITY_AUTO","I")
J2CPP_DEFINE_FIELD(android::view::View,8,"SCROLLBARS_INSIDE_OVERLAY","I")
J2CPP_DEFINE_FIELD(android::view::View,9,"SCROLLBARS_INSIDE_INSET","I")
J2CPP_DEFINE_FIELD(android::view::View,10,"SCROLLBARS_OUTSIDE_OVERLAY","I")
J2CPP_DEFINE_FIELD(android::view::View,11,"SCROLLBARS_OUTSIDE_INSET","I")
J2CPP_DEFINE_FIELD(android::view::View,12,"KEEP_SCREEN_ON","I")
J2CPP_DEFINE_FIELD(android::view::View,13,"SOUND_EFFECTS_ENABLED","I")
J2CPP_DEFINE_FIELD(android::view::View,14,"HAPTIC_FEEDBACK_ENABLED","I")
J2CPP_DEFINE_FIELD(android::view::View,15,"FOCUSABLES_ALL","I")
J2CPP_DEFINE_FIELD(android::view::View,16,"FOCUSABLES_TOUCH_MODE","I")
J2CPP_DEFINE_FIELD(android::view::View,17,"FOCUS_BACKWARD","I")
J2CPP_DEFINE_FIELD(android::view::View,18,"FOCUS_FORWARD","I")
J2CPP_DEFINE_FIELD(android::view::View,19,"FOCUS_LEFT","I")
J2CPP_DEFINE_FIELD(android::view::View,20,"FOCUS_UP","I")
J2CPP_DEFINE_FIELD(android::view::View,21,"FOCUS_RIGHT","I")
J2CPP_DEFINE_FIELD(android::view::View,22,"FOCUS_DOWN","I")
J2CPP_DEFINE_FIELD(android::view::View,23,"EMPTY_STATE_SET","[I")
J2CPP_DEFINE_FIELD(android::view::View,24,"ENABLED_STATE_SET","[I")
J2CPP_DEFINE_FIELD(android::view::View,25,"FOCUSED_STATE_SET","[I")
J2CPP_DEFINE_FIELD(android::view::View,26,"SELECTED_STATE_SET","[I")
J2CPP_DEFINE_FIELD(android::view::View,27,"WINDOW_FOCUSED_STATE_SET","[I")
J2CPP_DEFINE_FIELD(android::view::View,28,"ENABLED_FOCUSED_STATE_SET","[I")
J2CPP_DEFINE_FIELD(android::view::View,29,"ENABLED_SELECTED_STATE_SET","[I")
J2CPP_DEFINE_FIELD(android::view::View,30,"ENABLED_WINDOW_FOCUSED_STATE_SET","[I")
J2CPP_DEFINE_FIELD(android::view::View,31,"FOCUSED_SELECTED_STATE_SET","[I")
J2CPP_DEFINE_FIELD(android::view::View,32,"FOCUSED_WINDOW_FOCUSED_STATE_SET","[I")
J2CPP_DEFINE_FIELD(android::view::View,33,"SELECTED_WINDOW_FOCUSED_STATE_SET","[I")
J2CPP_DEFINE_FIELD(android::view::View,34,"ENABLED_FOCUSED_SELECTED_STATE_SET","[I")
J2CPP_DEFINE_FIELD(android::view::View,35,"ENABLED_FOCUSED_WINDOW_FOCUSED_STATE_SET","[I")
J2CPP_DEFINE_FIELD(android::view::View,36,"ENABLED_SELECTED_WINDOW_FOCUSED_STATE_SET","[I")
J2CPP_DEFINE_FIELD(android::view::View,37,"FOCUSED_SELECTED_WINDOW_FOCUSED_STATE_SET","[I")
J2CPP_DEFINE_FIELD(android::view::View,38,"ENABLED_FOCUSED_SELECTED_WINDOW_FOCUSED_STATE_SET","[I")
J2CPP_DEFINE_FIELD(android::view::View,39,"PRESSED_WINDOW_FOCUSED_STATE_SET","[I")
J2CPP_DEFINE_FIELD(android::view::View,40,"PRESSED_SELECTED_STATE_SET","[I")
J2CPP_DEFINE_FIELD(android::view::View,41,"PRESSED_SELECTED_WINDOW_FOCUSED_STATE_SET","[I")
J2CPP_DEFINE_FIELD(android::view::View,42,"PRESSED_FOCUSED_STATE_SET","[I")
J2CPP_DEFINE_FIELD(android::view::View,43,"PRESSED_FOCUSED_WINDOW_FOCUSED_STATE_SET","[I")
J2CPP_DEFINE_FIELD(android::view::View,44,"PRESSED_FOCUSED_SELECTED_STATE_SET","[I")
J2CPP_DEFINE_FIELD(android::view::View,45,"PRESSED_FOCUSED_SELECTED_WINDOW_FOCUSED_STATE_SET","[I")
J2CPP_DEFINE_FIELD(android::view::View,46,"PRESSED_ENABLED_STATE_SET","[I")
J2CPP_DEFINE_FIELD(android::view::View,47,"PRESSED_ENABLED_WINDOW_FOCUSED_STATE_SET","[I")
J2CPP_DEFINE_FIELD(android::view::View,48,"PRESSED_ENABLED_SELECTED_STATE_SET","[I")
J2CPP_DEFINE_FIELD(android::view::View,49,"PRESSED_ENABLED_SELECTED_WINDOW_FOCUSED_STATE_SET","[I")
J2CPP_DEFINE_FIELD(android::view::View,50,"PRESSED_ENABLED_FOCUSED_STATE_SET","[I")
J2CPP_DEFINE_FIELD(android::view::View,51,"PRESSED_ENABLED_FOCUSED_WINDOW_FOCUSED_STATE_SET","[I")
J2CPP_DEFINE_FIELD(android::view::View,52,"PRESSED_ENABLED_FOCUSED_SELECTED_STATE_SET","[I")
J2CPP_DEFINE_FIELD(android::view::View,53,"PRESSED_ENABLED_FOCUSED_SELECTED_WINDOW_FOCUSED_STATE_SET","[I")

} //namespace j2cpp

#endif //J2CPP_ANDROID_VIEW_VIEW_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
