/*================================================================================
  code generated by: java2cpp
  class: android.os.AsyncTask
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_OS_ASYNCTASK_HPP_DECL
#define J2CPP_ANDROID_OS_ASYNCTASK_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace util { namespace concurrent { class TimeUnit; } } } }
namespace j2cpp { namespace android { namespace os { namespace AsyncTask_ { class Status; } } } }


#include <android/os/AsyncTask.hpp>
#include <java/lang/Object.hpp>
#include <java/lang/String.hpp>
#include <java/util/concurrent/TimeUnit.hpp>


namespace j2cpp {

namespace android { namespace os {

	class AsyncTask;
	namespace AsyncTask_ {

		class Status;
		class Status
			: public cpp_object<Status>
		{
		public:

			J2CPP_DECLARE_CLASS

			J2CPP_DECLARE_METHOD(0)
			J2CPP_DECLARE_METHOD(1)
			J2CPP_DECLARE_METHOD(2)
			J2CPP_DECLARE_METHOD(3)
			J2CPP_DECLARE_FIELD(0)
			J2CPP_DECLARE_FIELD(1)
			J2CPP_DECLARE_FIELD(2)
			J2CPP_DECLARE_FIELD(3)

			Status(jobject jobj)
			: cpp_object<Status>(jobj)
			{
			}

			static local_ref< cpp_object_array<android::os::AsyncTask_::Status, 1> > values();
			static local_ref< android::os::AsyncTask_::Status > valueOf(local_ref< java::lang::String > const&);

			static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(0), J2CPP_FIELD_SIGNATURE(0), local_ref< android::os::AsyncTask_::Status > > FINISHED;
			static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(1), J2CPP_FIELD_SIGNATURE(1), local_ref< android::os::AsyncTask_::Status > > PENDING;
			static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(2), J2CPP_FIELD_SIGNATURE(2), local_ref< android::os::AsyncTask_::Status > > RUNNING;
		}; //class Status

	} //namespace AsyncTask_

	class AsyncTask
		: public cpp_object<AsyncTask>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_METHOD(12)

		typedef AsyncTask_::Status Status;

		AsyncTask(jobject jobj)
		: cpp_object<AsyncTask>(jobj)
		{
		}

		local_ref< android::os::AsyncTask_::Status > getStatus();
		cpp_boolean isCancelled();
		cpp_boolean cancel(cpp_boolean const&);
		local_ref< java::lang::Object > get();
		local_ref< java::lang::Object > get(cpp_long const&, local_ref< java::util::concurrent::TimeUnit > const&);
		local_ref< android::os::AsyncTask > execute(local_ref< cpp_object_array<java::lang::Object, 1> > const&);
	}; //class AsyncTask

} //namespace os
} //namespace android


} //namespace j2cpp

#endif //J2CPP_ANDROID_OS_ASYNCTASK_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_OS_ASYNCTASK_HPP_IMPL
#define J2CPP_ANDROID_OS_ASYNCTASK_HPP_IMPL

namespace j2cpp {



local_ref< cpp_object_array<android::os::AsyncTask_::Status, 1> > android::os::AsyncTask_::Status::values()
{
	return local_ref< cpp_object_array<android::os::AsyncTask_::Status, 1> >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(0), J2CPP_METHOD_SIGNATURE(0), true>()
		)
	);
}

local_ref< android::os::AsyncTask_::Status > android::os::AsyncTask_::Status::valueOf(local_ref< java::lang::String > const &a0)
{
	return local_ref< android::os::AsyncTask_::Status >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), true>(),
			a0.get_jtype()
		)
	);
}

template <>
local_ref< android::os::AsyncTask_::Status > create< android::os::AsyncTask_::Status>(local_ref< java::lang::String > const &a0, cpp_int const &a1)
{
	return local_ref< android::os::AsyncTask_::Status >(
		environment::get().get_jenv()->NewObject(
			get_class<android::os::AsyncTask_::Status::J2CPP_CLASS_NAME>(),
			get_method_id<android::os::AsyncTask_::Status::J2CPP_CLASS_NAME, android::os::AsyncTask_::Status::J2CPP_METHOD_NAME(2), android::os::AsyncTask_::Status::J2CPP_METHOD_SIGNATURE(2), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}


static_field<
	android::os::AsyncTask_::Status::J2CPP_CLASS_NAME,
	android::os::AsyncTask_::Status::J2CPP_FIELD_NAME(0),
	android::os::AsyncTask_::Status::J2CPP_FIELD_SIGNATURE(0),
	local_ref< android::os::AsyncTask_::Status >
> android::os::AsyncTask_::Status::FINISHED;

static_field<
	android::os::AsyncTask_::Status::J2CPP_CLASS_NAME,
	android::os::AsyncTask_::Status::J2CPP_FIELD_NAME(1),
	android::os::AsyncTask_::Status::J2CPP_FIELD_SIGNATURE(1),
	local_ref< android::os::AsyncTask_::Status >
> android::os::AsyncTask_::Status::PENDING;

static_field<
	android::os::AsyncTask_::Status::J2CPP_CLASS_NAME,
	android::os::AsyncTask_::Status::J2CPP_FIELD_NAME(2),
	android::os::AsyncTask_::Status::J2CPP_FIELD_SIGNATURE(2),
	local_ref< android::os::AsyncTask_::Status >
> android::os::AsyncTask_::Status::RUNNING;


J2CPP_DEFINE_CLASS(android::os::AsyncTask_::Status,"android/os/AsyncTask$Status")
J2CPP_DEFINE_METHOD(android::os::AsyncTask_::Status,0,"values","()[android.os.AsyncTask.Status")
J2CPP_DEFINE_METHOD(android::os::AsyncTask_::Status,1,"valueOf","(Ljava/lang/String;)Landroid/os/AsyncTask$Status;")
J2CPP_DEFINE_METHOD(android::os::AsyncTask_::Status,2,"<init>","(Ljava/lang/String;I)V")
J2CPP_DEFINE_METHOD(android::os::AsyncTask_::Status,3,"<clinit>","()V")
J2CPP_DEFINE_FIELD(android::os::AsyncTask_::Status,0,"FINISHED","Landroid/os/AsyncTask$Status;")
J2CPP_DEFINE_FIELD(android::os::AsyncTask_::Status,1,"PENDING","Landroid/os/AsyncTask$Status;")
J2CPP_DEFINE_FIELD(android::os::AsyncTask_::Status,2,"RUNNING","Landroid/os/AsyncTask$Status;")
J2CPP_DEFINE_FIELD(android::os::AsyncTask_::Status,3,"$VALUES","[android.os.AsyncTask.Status")


template <>
local_ref< android::os::AsyncTask > create< android::os::AsyncTask>()
{
	return local_ref< android::os::AsyncTask >(
		environment::get().get_jenv()->NewObject(
			get_class<android::os::AsyncTask::J2CPP_CLASS_NAME>(),
			get_method_id<android::os::AsyncTask::J2CPP_CLASS_NAME, android::os::AsyncTask::J2CPP_METHOD_NAME(0), android::os::AsyncTask::J2CPP_METHOD_SIGNATURE(0), false>()
		)
	);
}

local_ref< android::os::AsyncTask_::Status > android::os::AsyncTask::getStatus()
{
	return local_ref< android::os::AsyncTask_::Status >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), false>()
		)
	);
}






cpp_boolean android::os::AsyncTask::isCancelled()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(7), J2CPP_METHOD_SIGNATURE(7), false>()
		)
	);
}

cpp_boolean android::os::AsyncTask::cancel(cpp_boolean const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(8), J2CPP_METHOD_SIGNATURE(8), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::Object > android::os::AsyncTask::get()
{
	return local_ref< java::lang::Object >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(9), J2CPP_METHOD_SIGNATURE(9), false>()
		)
	);
}

local_ref< java::lang::Object > android::os::AsyncTask::get(cpp_long const &a0, local_ref< java::util::concurrent::TimeUnit > const &a1)
{
	return local_ref< java::lang::Object >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(10), J2CPP_METHOD_SIGNATURE(10), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< android::os::AsyncTask > android::os::AsyncTask::execute(local_ref< cpp_object_array<java::lang::Object, 1> > const &a0)
{
	return local_ref< android::os::AsyncTask >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(11), J2CPP_METHOD_SIGNATURE(11), false>(),
			a0.get_jtype()
		)
	);
}



J2CPP_DEFINE_CLASS(android::os::AsyncTask,"android/os/AsyncTask")
J2CPP_DEFINE_METHOD(android::os::AsyncTask,0,"<init>","()V")
J2CPP_DEFINE_METHOD(android::os::AsyncTask,1,"getStatus","()Landroid/os/AsyncTask$Status;")
J2CPP_DEFINE_METHOD(android::os::AsyncTask,2,"doInBackground","([java.lang.Object)Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(android::os::AsyncTask,3,"onPreExecute","()V")
J2CPP_DEFINE_METHOD(android::os::AsyncTask,4,"onPostExecute","(Ljava/lang/Object;)V")
J2CPP_DEFINE_METHOD(android::os::AsyncTask,5,"onProgressUpdate","([java.lang.Object)V")
J2CPP_DEFINE_METHOD(android::os::AsyncTask,6,"onCancelled","()V")
J2CPP_DEFINE_METHOD(android::os::AsyncTask,7,"isCancelled","()Z")
J2CPP_DEFINE_METHOD(android::os::AsyncTask,8,"cancel","(Z)Z")
J2CPP_DEFINE_METHOD(android::os::AsyncTask,9,"get","()Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(android::os::AsyncTask,10,"get","(JLjava/util/concurrent/TimeUnit;)Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(android::os::AsyncTask,11,"execute","([java.lang.Object)Landroid/os/AsyncTask;")
J2CPP_DEFINE_METHOD(android::os::AsyncTask,12,"publishProgress","([java.lang.Object)V")

} //namespace j2cpp

#endif //J2CPP_ANDROID_OS_ASYNCTASK_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
