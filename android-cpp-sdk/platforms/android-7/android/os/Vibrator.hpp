/*================================================================================
  code generated by: java2cpp
  class: android.os.Vibrator
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_OS_VIBRATOR_HPP_DECL
#define J2CPP_ANDROID_OS_VIBRATOR_HPP_DECL






namespace j2cpp {

namespace android { namespace os {

	class Vibrator;
	class Vibrator
		: public cpp_object<Vibrator>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)

		Vibrator(jobject jobj)
		: cpp_object<Vibrator>(jobj)
		{
		}

		void vibrate(cpp_long const&);
		void vibrate(local_ref< cpp_long_array<1> > const&, cpp_int const&);
		void cancel();
	}; //class Vibrator

} //namespace os
} //namespace android


} //namespace j2cpp

#endif //J2CPP_ANDROID_OS_VIBRATOR_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_OS_VIBRATOR_HPP_IMPL
#define J2CPP_ANDROID_OS_VIBRATOR_HPP_IMPL

namespace j2cpp {


template <>
local_ref< android::os::Vibrator > create< android::os::Vibrator>()
{
	return local_ref< android::os::Vibrator >(
		environment::get().get_jenv()->NewObject(
			get_class<android::os::Vibrator::J2CPP_CLASS_NAME>(),
			get_method_id<android::os::Vibrator::J2CPP_CLASS_NAME, android::os::Vibrator::J2CPP_METHOD_NAME(0), android::os::Vibrator::J2CPP_METHOD_SIGNATURE(0), false>()
		)
	);
}

void android::os::Vibrator::vibrate(cpp_long const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), false>(),
			a0.get_jtype()
		)
	);
}

void android::os::Vibrator::vibrate(local_ref< cpp_long_array<1> > const &a0, cpp_int const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void android::os::Vibrator::cancel()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>()
		)
	);
}


J2CPP_DEFINE_CLASS(android::os::Vibrator,"android/os/Vibrator")
J2CPP_DEFINE_METHOD(android::os::Vibrator,0,"<init>","()V")
J2CPP_DEFINE_METHOD(android::os::Vibrator,1,"vibrate","(J)V")
J2CPP_DEFINE_METHOD(android::os::Vibrator,2,"vibrate","([JI)V")
J2CPP_DEFINE_METHOD(android::os::Vibrator,3,"cancel","()V")

} //namespace j2cpp

#endif //J2CPP_ANDROID_OS_VIBRATOR_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
