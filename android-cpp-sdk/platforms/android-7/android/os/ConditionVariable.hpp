/*================================================================================
  code generated by: java2cpp
  class: android.os.ConditionVariable
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_OS_CONDITIONVARIABLE_HPP_DECL
#define J2CPP_ANDROID_OS_CONDITIONVARIABLE_HPP_DECL






namespace j2cpp {

namespace android { namespace os {

	class ConditionVariable;
	class ConditionVariable
		: public cpp_object<ConditionVariable>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)

		ConditionVariable(jobject jobj)
		: cpp_object<ConditionVariable>(jobj)
		{
		}

		void open();
		void close();
		void block();
		cpp_boolean block(cpp_long const&);
	}; //class ConditionVariable

} //namespace os
} //namespace android


} //namespace j2cpp

#endif //J2CPP_ANDROID_OS_CONDITIONVARIABLE_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_OS_CONDITIONVARIABLE_HPP_IMPL
#define J2CPP_ANDROID_OS_CONDITIONVARIABLE_HPP_IMPL

namespace j2cpp {


template <>
local_ref< android::os::ConditionVariable > create< android::os::ConditionVariable>()
{
	return local_ref< android::os::ConditionVariable >(
		environment::get().get_jenv()->NewObject(
			get_class<android::os::ConditionVariable::J2CPP_CLASS_NAME>(),
			get_method_id<android::os::ConditionVariable::J2CPP_CLASS_NAME, android::os::ConditionVariable::J2CPP_METHOD_NAME(0), android::os::ConditionVariable::J2CPP_METHOD_SIGNATURE(0), false>()
		)
	);
}

template <>
local_ref< android::os::ConditionVariable > create< android::os::ConditionVariable>(cpp_boolean const &a0)
{
	return local_ref< android::os::ConditionVariable >(
		environment::get().get_jenv()->NewObject(
			get_class<android::os::ConditionVariable::J2CPP_CLASS_NAME>(),
			get_method_id<android::os::ConditionVariable::J2CPP_CLASS_NAME, android::os::ConditionVariable::J2CPP_METHOD_NAME(1), android::os::ConditionVariable::J2CPP_METHOD_SIGNATURE(1), false>(),
			a0.get_jtype()
		)
	);
}

void android::os::ConditionVariable::open()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>()
		)
	);
}

void android::os::ConditionVariable::close()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>()
		)
	);
}

void android::os::ConditionVariable::block()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>()
		)
	);
}

cpp_boolean android::os::ConditionVariable::block(cpp_long const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>(),
			a0.get_jtype()
		)
	);
}


J2CPP_DEFINE_CLASS(android::os::ConditionVariable,"android/os/ConditionVariable")
J2CPP_DEFINE_METHOD(android::os::ConditionVariable,0,"<init>","()V")
J2CPP_DEFINE_METHOD(android::os::ConditionVariable,1,"<init>","(Z)V")
J2CPP_DEFINE_METHOD(android::os::ConditionVariable,2,"open","()V")
J2CPP_DEFINE_METHOD(android::os::ConditionVariable,3,"close","()V")
J2CPP_DEFINE_METHOD(android::os::ConditionVariable,4,"block","()V")
J2CPP_DEFINE_METHOD(android::os::ConditionVariable,5,"block","(J)Z")

} //namespace j2cpp

#endif //J2CPP_ANDROID_OS_CONDITIONVARIABLE_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
