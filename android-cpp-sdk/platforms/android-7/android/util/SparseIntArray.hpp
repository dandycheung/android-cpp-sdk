/*================================================================================
  code generated by: java2cpp
  class: android.util.SparseIntArray
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_UTIL_SPARSEINTARRAY_HPP_DECL
#define J2CPP_ANDROID_UTIL_SPARSEINTARRAY_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class Object; } } }


#include <java/lang/Object.hpp>


namespace j2cpp {

namespace android { namespace util {

	class SparseIntArray;
	class SparseIntArray
		: public cpp_object<SparseIntArray>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_METHOD(12)
		J2CPP_DECLARE_METHOD(13)

		explicit SparseIntArray(jobject jobj)
		: cpp_object<SparseIntArray>(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;


		SparseIntArray();
		SparseIntArray(cpp_int const&);
		cpp_int get(cpp_int const&);
		cpp_int get(cpp_int const&, cpp_int const&);
		void deleteThe(cpp_int const&);
		void removeAt(cpp_int const&);
		void put(cpp_int const&, cpp_int const&);
		cpp_int size();
		cpp_int keyAt(cpp_int const&);
		cpp_int valueAt(cpp_int const&);
		cpp_int indexOfKey(cpp_int const&);
		cpp_int indexOfValue(cpp_int const&);
		void clear();
		void append(cpp_int const&, cpp_int const&);
	}; //class SparseIntArray

} //namespace util
} //namespace android

} //namespace j2cpp

#endif //J2CPP_ANDROID_UTIL_SPARSEINTARRAY_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_UTIL_SPARSEINTARRAY_HPP_IMPL
#define J2CPP_ANDROID_UTIL_SPARSEINTARRAY_HPP_IMPL

namespace j2cpp {



android::util::SparseIntArray::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jtype());
}


android::util::SparseIntArray::SparseIntArray()
: cpp_object<android::util::SparseIntArray>(
	environment::get().get_jenv()->NewObject(
		get_class<android::util::SparseIntArray::J2CPP_CLASS_NAME>(),
		get_method_id<android::util::SparseIntArray::J2CPP_CLASS_NAME, android::util::SparseIntArray::J2CPP_METHOD_NAME(0), android::util::SparseIntArray::J2CPP_METHOD_SIGNATURE(0), false>()
	)
)
{
}



android::util::SparseIntArray::SparseIntArray(cpp_int const &a0)
: cpp_object<android::util::SparseIntArray>(
	environment::get().get_jenv()->NewObject(
		get_class<android::util::SparseIntArray::J2CPP_CLASS_NAME>(),
		get_method_id<android::util::SparseIntArray::J2CPP_CLASS_NAME, android::util::SparseIntArray::J2CPP_METHOD_NAME(1), android::util::SparseIntArray::J2CPP_METHOD_SIGNATURE(1), false>(),
		a0.get_jtype()
	)
)
{
}


cpp_int android::util::SparseIntArray::get(cpp_int const &a0)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int android::util::SparseIntArray::get(cpp_int const &a0, cpp_int const &a1)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void android::util::SparseIntArray::deleteThe(cpp_int const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>(),
			a0.get_jtype()
		)
	);
}

void android::util::SparseIntArray::removeAt(cpp_int const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>(),
			a0.get_jtype()
		)
	);
}

void android::util::SparseIntArray::put(cpp_int const &a0, cpp_int const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_int android::util::SparseIntArray::size()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(7), J2CPP_METHOD_SIGNATURE(7), false>()
		)
	);
}

cpp_int android::util::SparseIntArray::keyAt(cpp_int const &a0)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(8), J2CPP_METHOD_SIGNATURE(8), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int android::util::SparseIntArray::valueAt(cpp_int const &a0)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(9), J2CPP_METHOD_SIGNATURE(9), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int android::util::SparseIntArray::indexOfKey(cpp_int const &a0)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(10), J2CPP_METHOD_SIGNATURE(10), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int android::util::SparseIntArray::indexOfValue(cpp_int const &a0)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(11), J2CPP_METHOD_SIGNATURE(11), false>(),
			a0.get_jtype()
		)
	);
}

void android::util::SparseIntArray::clear()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(12), J2CPP_METHOD_SIGNATURE(12), false>()
		)
	);
}

void android::util::SparseIntArray::append(cpp_int const &a0, cpp_int const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(13), J2CPP_METHOD_SIGNATURE(13), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}


J2CPP_DEFINE_CLASS(android::util::SparseIntArray,"android/util/SparseIntArray")
J2CPP_DEFINE_METHOD(android::util::SparseIntArray,0,"<init>","()V")
J2CPP_DEFINE_METHOD(android::util::SparseIntArray,1,"<init>","(I)V")
J2CPP_DEFINE_METHOD(android::util::SparseIntArray,2,"get","(I)I")
J2CPP_DEFINE_METHOD(android::util::SparseIntArray,3,"get","(II)I")
J2CPP_DEFINE_METHOD(android::util::SparseIntArray,4,"delete","(I)V")
J2CPP_DEFINE_METHOD(android::util::SparseIntArray,5,"removeAt","(I)V")
J2CPP_DEFINE_METHOD(android::util::SparseIntArray,6,"put","(II)V")
J2CPP_DEFINE_METHOD(android::util::SparseIntArray,7,"size","()I")
J2CPP_DEFINE_METHOD(android::util::SparseIntArray,8,"keyAt","(I)I")
J2CPP_DEFINE_METHOD(android::util::SparseIntArray,9,"valueAt","(I)I")
J2CPP_DEFINE_METHOD(android::util::SparseIntArray,10,"indexOfKey","(I)I")
J2CPP_DEFINE_METHOD(android::util::SparseIntArray,11,"indexOfValue","(I)I")
J2CPP_DEFINE_METHOD(android::util::SparseIntArray,12,"clear","()V")
J2CPP_DEFINE_METHOD(android::util::SparseIntArray,13,"append","(II)V")

} //namespace j2cpp

#endif //J2CPP_ANDROID_UTIL_SPARSEINTARRAY_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
