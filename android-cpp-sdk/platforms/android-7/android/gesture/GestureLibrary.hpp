/*================================================================================
  code generated by: java2cpp
  class: android.gesture.GestureLibrary
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_GESTURE_GESTURELIBRARY_HPP_DECL
#define J2CPP_ANDROID_GESTURE_GESTURELIBRARY_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace util { class Set; } } }
namespace j2cpp { namespace java { namespace util { class ArrayList; } } }
namespace j2cpp { namespace android { namespace gesture { class Gesture; } } }


#include <android/gesture/Gesture.hpp>
#include <java/lang/String.hpp>
#include <java/util/ArrayList.hpp>
#include <java/util/Set.hpp>


namespace j2cpp {

namespace android { namespace gesture {

	class GestureLibrary;
	class GestureLibrary
		: public cpp_object<GestureLibrary>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_METHOD(12)
		J2CPP_DECLARE_METHOD(13)
		J2CPP_DECLARE_FIELD(0)

		GestureLibrary(jobject jobj)
		: cpp_object<GestureLibrary>(jobj)
		{
		}

		cpp_boolean save();
		cpp_boolean load();
		cpp_boolean isReadOnly();
		void setOrientationStyle(cpp_int const&);
		cpp_int getOrientationStyle();
		void setSequenceType(cpp_int const&);
		cpp_int getSequenceType();
		local_ref< java::util::Set > getGestureEntries();
		local_ref< java::util::ArrayList > recognize(local_ref< android::gesture::Gesture > const&);
		void addGesture(local_ref< java::lang::String > const&, local_ref< android::gesture::Gesture > const&);
		void removeGesture(local_ref< java::lang::String > const&, local_ref< android::gesture::Gesture > const&);
		void removeEntry(local_ref< java::lang::String > const&);
		local_ref< java::util::ArrayList > getGestures(local_ref< java::lang::String > const&);

	}; //class GestureLibrary

} //namespace gesture
} //namespace android


} //namespace j2cpp

#endif //J2CPP_ANDROID_GESTURE_GESTURELIBRARY_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_GESTURE_GESTURELIBRARY_HPP_IMPL
#define J2CPP_ANDROID_GESTURE_GESTURELIBRARY_HPP_IMPL

namespace j2cpp {


template <>
local_ref< android::gesture::GestureLibrary > create< android::gesture::GestureLibrary>()
{
	return local_ref< android::gesture::GestureLibrary >(
		environment::get().get_jenv()->NewObject(
			get_class<android::gesture::GestureLibrary::J2CPP_CLASS_NAME>(),
			get_method_id<android::gesture::GestureLibrary::J2CPP_CLASS_NAME, android::gesture::GestureLibrary::J2CPP_METHOD_NAME(0), android::gesture::GestureLibrary::J2CPP_METHOD_SIGNATURE(0), false>()
		)
	);
}

cpp_boolean android::gesture::GestureLibrary::save()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), false>()
		)
	);
}

cpp_boolean android::gesture::GestureLibrary::load()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>()
		)
	);
}

cpp_boolean android::gesture::GestureLibrary::isReadOnly()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>()
		)
	);
}

void android::gesture::GestureLibrary::setOrientationStyle(cpp_int const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int android::gesture::GestureLibrary::getOrientationStyle()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>()
		)
	);
}

void android::gesture::GestureLibrary::setSequenceType(cpp_int const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int android::gesture::GestureLibrary::getSequenceType()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(7), J2CPP_METHOD_SIGNATURE(7), false>()
		)
	);
}

local_ref< java::util::Set > android::gesture::GestureLibrary::getGestureEntries()
{
	return local_ref< java::util::Set >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(8), J2CPP_METHOD_SIGNATURE(8), false>()
		)
	);
}

local_ref< java::util::ArrayList > android::gesture::GestureLibrary::recognize(local_ref< android::gesture::Gesture > const &a0)
{
	return local_ref< java::util::ArrayList >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(9), J2CPP_METHOD_SIGNATURE(9), false>(),
			a0.get_jtype()
		)
	);
}

void android::gesture::GestureLibrary::addGesture(local_ref< java::lang::String > const &a0, local_ref< android::gesture::Gesture > const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(10), J2CPP_METHOD_SIGNATURE(10), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void android::gesture::GestureLibrary::removeGesture(local_ref< java::lang::String > const &a0, local_ref< android::gesture::Gesture > const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(11), J2CPP_METHOD_SIGNATURE(11), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void android::gesture::GestureLibrary::removeEntry(local_ref< java::lang::String > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(12), J2CPP_METHOD_SIGNATURE(12), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::util::ArrayList > android::gesture::GestureLibrary::getGestures(local_ref< java::lang::String > const &a0)
{
	return local_ref< java::util::ArrayList >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(13), J2CPP_METHOD_SIGNATURE(13), false>(),
			a0.get_jtype()
		)
	);
}



J2CPP_DEFINE_CLASS(android::gesture::GestureLibrary,"android/gesture/GestureLibrary")
J2CPP_DEFINE_METHOD(android::gesture::GestureLibrary,0,"<init>","()V")
J2CPP_DEFINE_METHOD(android::gesture::GestureLibrary,1,"save","()Z")
J2CPP_DEFINE_METHOD(android::gesture::GestureLibrary,2,"load","()Z")
J2CPP_DEFINE_METHOD(android::gesture::GestureLibrary,3,"isReadOnly","()Z")
J2CPP_DEFINE_METHOD(android::gesture::GestureLibrary,4,"setOrientationStyle","(I)V")
J2CPP_DEFINE_METHOD(android::gesture::GestureLibrary,5,"getOrientationStyle","()I")
J2CPP_DEFINE_METHOD(android::gesture::GestureLibrary,6,"setSequenceType","(I)V")
J2CPP_DEFINE_METHOD(android::gesture::GestureLibrary,7,"getSequenceType","()I")
J2CPP_DEFINE_METHOD(android::gesture::GestureLibrary,8,"getGestureEntries","()Ljava/util/Set;")
J2CPP_DEFINE_METHOD(android::gesture::GestureLibrary,9,"recognize","(Landroid/gesture/Gesture;)Ljava/util/ArrayList;")
J2CPP_DEFINE_METHOD(android::gesture::GestureLibrary,10,"addGesture","(Ljava/lang/String;Landroid/gesture/Gesture;)V")
J2CPP_DEFINE_METHOD(android::gesture::GestureLibrary,11,"removeGesture","(Ljava/lang/String;Landroid/gesture/Gesture;)V")
J2CPP_DEFINE_METHOD(android::gesture::GestureLibrary,12,"removeEntry","(Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(android::gesture::GestureLibrary,13,"getGestures","(Ljava/lang/String;)Ljava/util/ArrayList;")
J2CPP_DEFINE_FIELD(android::gesture::GestureLibrary,0,"mStore","Landroid/gesture/GestureStore;")

} //namespace j2cpp

#endif //J2CPP_ANDROID_GESTURE_GESTURELIBRARY_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
