/*================================================================================
  code generated by: java2cpp
  class: android.database.Observable
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_DATABASE_OBSERVABLE_HPP_DECL
#define J2CPP_ANDROID_DATABASE_OBSERVABLE_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class Object; } } }


#include <java/lang/Object.hpp>


namespace j2cpp {

namespace android { namespace database {

	class Observable;
	class Observable
		: public cpp_object<Observable>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_FIELD(0)

		explicit Observable(jobject jobj)
		: cpp_object<Observable>(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;


		Observable();
		void registerObserver(local_ref< java::lang::Object > const&);
		void unregisterObserver(local_ref< java::lang::Object > const&);
		void unregisterAll();

	}; //class Observable

} //namespace database
} //namespace android

} //namespace j2cpp

#endif //J2CPP_ANDROID_DATABASE_OBSERVABLE_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_DATABASE_OBSERVABLE_HPP_IMPL
#define J2CPP_ANDROID_DATABASE_OBSERVABLE_HPP_IMPL

namespace j2cpp {



android::database::Observable::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jtype());
}


android::database::Observable::Observable()
: cpp_object<android::database::Observable>(
	environment::get().get_jenv()->NewObject(
		get_class<android::database::Observable::J2CPP_CLASS_NAME>(),
		get_method_id<android::database::Observable::J2CPP_CLASS_NAME, android::database::Observable::J2CPP_METHOD_NAME(0), android::database::Observable::J2CPP_METHOD_SIGNATURE(0), false>()
	)
)
{
}


void android::database::Observable::registerObserver(local_ref< java::lang::Object > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), false>(),
			a0.get_jtype()
		)
	);
}

void android::database::Observable::unregisterObserver(local_ref< java::lang::Object > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>(),
			a0.get_jtype()
		)
	);
}

void android::database::Observable::unregisterAll()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>()
		)
	);
}



J2CPP_DEFINE_CLASS(android::database::Observable,"android/database/Observable")
J2CPP_DEFINE_METHOD(android::database::Observable,0,"<init>","()V")
J2CPP_DEFINE_METHOD(android::database::Observable,1,"registerObserver","(Ljava/lang/Object;)V")
J2CPP_DEFINE_METHOD(android::database::Observable,2,"unregisterObserver","(Ljava/lang/Object;)V")
J2CPP_DEFINE_METHOD(android::database::Observable,3,"unregisterAll","()V")
J2CPP_DEFINE_FIELD(android::database::Observable,0,"mObservers","Ljava/util/ArrayList;")

} //namespace j2cpp

#endif //J2CPP_ANDROID_DATABASE_OBSERVABLE_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
