/*================================================================================
  code generated by: java2cpp
  class: android.database.CursorWindow
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_DATABASE_CURSORWINDOW_HPP_DECL
#define J2CPP_ANDROID_DATABASE_CURSORWINDOW_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace android { namespace database { class CharArrayBuffer; } } }
namespace j2cpp { namespace android { namespace database { namespace sqlite { class SQLiteClosable; } } } }
namespace j2cpp { namespace android { namespace os { class Parcel; } } }
namespace j2cpp { namespace android { namespace os { class Parcelable; } } }
namespace j2cpp { namespace android { namespace os { namespace Parcelable_ { class Creator; } } } }


#include <android/database/CharArrayBuffer.hpp>
#include <android/database/sqlite/SQLiteClosable.hpp>
#include <android/os/Parcel.hpp>
#include <android/os/Parcelable.hpp>
#include <java/lang/String.hpp>


namespace j2cpp {

namespace android { namespace database {

	class CursorWindow;
	class CursorWindow
		: public cpp_object<CursorWindow>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_METHOD(12)
		J2CPP_DECLARE_METHOD(13)
		J2CPP_DECLARE_METHOD(14)
		J2CPP_DECLARE_METHOD(15)
		J2CPP_DECLARE_METHOD(16)
		J2CPP_DECLARE_METHOD(17)
		J2CPP_DECLARE_METHOD(18)
		J2CPP_DECLARE_METHOD(19)
		J2CPP_DECLARE_METHOD(20)
		J2CPP_DECLARE_METHOD(21)
		J2CPP_DECLARE_METHOD(22)
		J2CPP_DECLARE_METHOD(23)
		J2CPP_DECLARE_METHOD(24)
		J2CPP_DECLARE_METHOD(25)
		J2CPP_DECLARE_METHOD(26)
		J2CPP_DECLARE_METHOD(27)
		J2CPP_DECLARE_METHOD(28)
		J2CPP_DECLARE_METHOD(29)
		J2CPP_DECLARE_METHOD(30)
		J2CPP_DECLARE_METHOD(31)
		J2CPP_DECLARE_METHOD(32)
		J2CPP_DECLARE_FIELD(0)

		explicit CursorWindow(jobject jobj)
		: cpp_object<CursorWindow>(jobj)
		{
		}

		operator local_ref<android::database::sqlite::SQLiteClosable>() const;
		operator local_ref<android::os::Parcelable>() const;


		CursorWindow(cpp_boolean const&);
		cpp_int getStartPosition();
		void setStartPosition(cpp_int const&);
		cpp_int getNumRows();
		cpp_boolean setNumColumns(cpp_int const&);
		cpp_boolean allocRow();
		void freeLastRow();
		cpp_boolean putBlob(local_ref< cpp_byte_array<1> > const&, cpp_int const&, cpp_int const&);
		cpp_boolean putString(local_ref< java::lang::String > const&, cpp_int const&, cpp_int const&);
		cpp_boolean putLong(cpp_long const&, cpp_int const&, cpp_int const&);
		cpp_boolean putDouble(cpp_double const&, cpp_int const&, cpp_int const&);
		cpp_boolean putNull(cpp_int const&, cpp_int const&);
		cpp_boolean isNull(cpp_int const&, cpp_int const&);
		local_ref< cpp_byte_array<1> > getBlob(cpp_int const&, cpp_int const&);
		cpp_boolean isBlob(cpp_int const&, cpp_int const&);
		cpp_boolean isLong(cpp_int const&, cpp_int const&);
		cpp_boolean isFloat(cpp_int const&, cpp_int const&);
		cpp_boolean isString(cpp_int const&, cpp_int const&);
		local_ref< java::lang::String > getString(cpp_int const&, cpp_int const&);
		void copyStringToBuffer(cpp_int const&, cpp_int const&, local_ref< android::database::CharArrayBuffer > const&);
		cpp_long getLong(cpp_int const&, cpp_int const&);
		cpp_double getDouble(cpp_int const&, cpp_int const&);
		cpp_short getShort(cpp_int const&, cpp_int const&);
		cpp_int getInt(cpp_int const&, cpp_int const&);
		cpp_float getFloat(cpp_int const&, cpp_int const&);
		void clear();
		void close();
		static local_ref< android::database::CursorWindow > newFromParcel(local_ref< android::os::Parcel > const&);
		cpp_int describeContents();
		void writeToParcel(local_ref< android::os::Parcel > const&, cpp_int const&);

		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(0), J2CPP_FIELD_SIGNATURE(0), local_ref< android::os::Parcelable_::Creator > > CREATOR;
	}; //class CursorWindow

} //namespace database
} //namespace android

} //namespace j2cpp

#endif //J2CPP_ANDROID_DATABASE_CURSORWINDOW_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_DATABASE_CURSORWINDOW_HPP_IMPL
#define J2CPP_ANDROID_DATABASE_CURSORWINDOW_HPP_IMPL

namespace j2cpp {



android::database::CursorWindow::operator local_ref<android::database::sqlite::SQLiteClosable>() const
{
	return local_ref<android::database::sqlite::SQLiteClosable>(get_jtype());
}

android::database::CursorWindow::operator local_ref<android::os::Parcelable>() const
{
	return local_ref<android::os::Parcelable>(get_jtype());
}


android::database::CursorWindow::CursorWindow(cpp_boolean const &a0)
: cpp_object<android::database::CursorWindow>(
	environment::get().get_jenv()->NewObject(
		get_class<android::database::CursorWindow::J2CPP_CLASS_NAME>(),
		get_method_id<android::database::CursorWindow::J2CPP_CLASS_NAME, android::database::CursorWindow::J2CPP_METHOD_NAME(0), android::database::CursorWindow::J2CPP_METHOD_SIGNATURE(0), false>(),
		a0.get_jtype()
	)
)
{
}


cpp_int android::database::CursorWindow::getStartPosition()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), false>()
		)
	);
}

void android::database::CursorWindow::setStartPosition(cpp_int const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int android::database::CursorWindow::getNumRows()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>()
		)
	);
}

cpp_boolean android::database::CursorWindow::setNumColumns(cpp_int const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean android::database::CursorWindow::allocRow()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>()
		)
	);
}

void android::database::CursorWindow::freeLastRow()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>()
		)
	);
}

cpp_boolean android::database::CursorWindow::putBlob(local_ref< cpp_byte_array<1> > const &a0, cpp_int const &a1, cpp_int const &a2)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(7), J2CPP_METHOD_SIGNATURE(7), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

cpp_boolean android::database::CursorWindow::putString(local_ref< java::lang::String > const &a0, cpp_int const &a1, cpp_int const &a2)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(8), J2CPP_METHOD_SIGNATURE(8), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

cpp_boolean android::database::CursorWindow::putLong(cpp_long const &a0, cpp_int const &a1, cpp_int const &a2)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(9), J2CPP_METHOD_SIGNATURE(9), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

cpp_boolean android::database::CursorWindow::putDouble(cpp_double const &a0, cpp_int const &a1, cpp_int const &a2)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(10), J2CPP_METHOD_SIGNATURE(10), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

cpp_boolean android::database::CursorWindow::putNull(cpp_int const &a0, cpp_int const &a1)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(11), J2CPP_METHOD_SIGNATURE(11), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_boolean android::database::CursorWindow::isNull(cpp_int const &a0, cpp_int const &a1)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(12), J2CPP_METHOD_SIGNATURE(12), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< cpp_byte_array<1> > android::database::CursorWindow::getBlob(cpp_int const &a0, cpp_int const &a1)
{
	return local_ref< cpp_byte_array<1> >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(13), J2CPP_METHOD_SIGNATURE(13), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_boolean android::database::CursorWindow::isBlob(cpp_int const &a0, cpp_int const &a1)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(14), J2CPP_METHOD_SIGNATURE(14), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_boolean android::database::CursorWindow::isLong(cpp_int const &a0, cpp_int const &a1)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(15), J2CPP_METHOD_SIGNATURE(15), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_boolean android::database::CursorWindow::isFloat(cpp_int const &a0, cpp_int const &a1)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(16), J2CPP_METHOD_SIGNATURE(16), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_boolean android::database::CursorWindow::isString(cpp_int const &a0, cpp_int const &a1)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(17), J2CPP_METHOD_SIGNATURE(17), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< java::lang::String > android::database::CursorWindow::getString(cpp_int const &a0, cpp_int const &a1)
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(18), J2CPP_METHOD_SIGNATURE(18), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void android::database::CursorWindow::copyStringToBuffer(cpp_int const &a0, cpp_int const &a1, local_ref< android::database::CharArrayBuffer > const &a2)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(19), J2CPP_METHOD_SIGNATURE(19), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

cpp_long android::database::CursorWindow::getLong(cpp_int const &a0, cpp_int const &a1)
{
	return cpp_long(
		environment::get().get_jenv()->CallLongMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(20), J2CPP_METHOD_SIGNATURE(20), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_double android::database::CursorWindow::getDouble(cpp_int const &a0, cpp_int const &a1)
{
	return cpp_double(
		environment::get().get_jenv()->CallDoubleMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(21), J2CPP_METHOD_SIGNATURE(21), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_short android::database::CursorWindow::getShort(cpp_int const &a0, cpp_int const &a1)
{
	return cpp_short(
		environment::get().get_jenv()->CallShortMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(22), J2CPP_METHOD_SIGNATURE(22), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_int android::database::CursorWindow::getInt(cpp_int const &a0, cpp_int const &a1)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(23), J2CPP_METHOD_SIGNATURE(23), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_float android::database::CursorWindow::getFloat(cpp_int const &a0, cpp_int const &a1)
{
	return cpp_float(
		environment::get().get_jenv()->CallFloatMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(24), J2CPP_METHOD_SIGNATURE(24), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void android::database::CursorWindow::clear()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(25), J2CPP_METHOD_SIGNATURE(25), false>()
		)
	);
}

void android::database::CursorWindow::close()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(26), J2CPP_METHOD_SIGNATURE(26), false>()
		)
	);
}


local_ref< android::database::CursorWindow > android::database::CursorWindow::newFromParcel(local_ref< android::os::Parcel > const &a0)
{
	return local_ref< android::database::CursorWindow >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(28), J2CPP_METHOD_SIGNATURE(28), true>(),
			a0.get_jtype()
		)
	);
}

cpp_int android::database::CursorWindow::describeContents()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(29), J2CPP_METHOD_SIGNATURE(29), false>()
		)
	);
}

void android::database::CursorWindow::writeToParcel(local_ref< android::os::Parcel > const &a0, cpp_int const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(30), J2CPP_METHOD_SIGNATURE(30), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}




static_field<
	android::database::CursorWindow::J2CPP_CLASS_NAME,
	android::database::CursorWindow::J2CPP_FIELD_NAME(0),
	android::database::CursorWindow::J2CPP_FIELD_SIGNATURE(0),
	local_ref< android::os::Parcelable_::Creator >
> android::database::CursorWindow::CREATOR;


J2CPP_DEFINE_CLASS(android::database::CursorWindow,"android/database/CursorWindow")
J2CPP_DEFINE_METHOD(android::database::CursorWindow,0,"<init>","(Z)V")
J2CPP_DEFINE_METHOD(android::database::CursorWindow,1,"getStartPosition","()I")
J2CPP_DEFINE_METHOD(android::database::CursorWindow,2,"setStartPosition","(I)V")
J2CPP_DEFINE_METHOD(android::database::CursorWindow,3,"getNumRows","()I")
J2CPP_DEFINE_METHOD(android::database::CursorWindow,4,"setNumColumns","(I)Z")
J2CPP_DEFINE_METHOD(android::database::CursorWindow,5,"allocRow","()Z")
J2CPP_DEFINE_METHOD(android::database::CursorWindow,6,"freeLastRow","()V")
J2CPP_DEFINE_METHOD(android::database::CursorWindow,7,"putBlob","([BII)Z")
J2CPP_DEFINE_METHOD(android::database::CursorWindow,8,"putString","(Ljava/lang/String;II)Z")
J2CPP_DEFINE_METHOD(android::database::CursorWindow,9,"putLong","(JII)Z")
J2CPP_DEFINE_METHOD(android::database::CursorWindow,10,"putDouble","(DII)Z")
J2CPP_DEFINE_METHOD(android::database::CursorWindow,11,"putNull","(II)Z")
J2CPP_DEFINE_METHOD(android::database::CursorWindow,12,"isNull","(II)Z")
J2CPP_DEFINE_METHOD(android::database::CursorWindow,13,"getBlob","(II)[B")
J2CPP_DEFINE_METHOD(android::database::CursorWindow,14,"isBlob","(II)Z")
J2CPP_DEFINE_METHOD(android::database::CursorWindow,15,"isLong","(II)Z")
J2CPP_DEFINE_METHOD(android::database::CursorWindow,16,"isFloat","(II)Z")
J2CPP_DEFINE_METHOD(android::database::CursorWindow,17,"isString","(II)Z")
J2CPP_DEFINE_METHOD(android::database::CursorWindow,18,"getString","(II)Ljava/lang/String;")
J2CPP_DEFINE_METHOD(android::database::CursorWindow,19,"copyStringToBuffer","(IILandroid/database/CharArrayBuffer;)V")
J2CPP_DEFINE_METHOD(android::database::CursorWindow,20,"getLong","(II)J")
J2CPP_DEFINE_METHOD(android::database::CursorWindow,21,"getDouble","(II)D")
J2CPP_DEFINE_METHOD(android::database::CursorWindow,22,"getShort","(II)S")
J2CPP_DEFINE_METHOD(android::database::CursorWindow,23,"getInt","(II)I")
J2CPP_DEFINE_METHOD(android::database::CursorWindow,24,"getFloat","(II)F")
J2CPP_DEFINE_METHOD(android::database::CursorWindow,25,"clear","()V")
J2CPP_DEFINE_METHOD(android::database::CursorWindow,26,"close","()V")
J2CPP_DEFINE_METHOD(android::database::CursorWindow,27,"finalize","()V")
J2CPP_DEFINE_METHOD(android::database::CursorWindow,28,"newFromParcel","(Landroid/os/Parcel;)Landroid/database/CursorWindow;")
J2CPP_DEFINE_METHOD(android::database::CursorWindow,29,"describeContents","()I")
J2CPP_DEFINE_METHOD(android::database::CursorWindow,30,"writeToParcel","(Landroid/os/Parcel;I)V")
J2CPP_DEFINE_METHOD(android::database::CursorWindow,31,"onAllReferencesReleased","()V")
J2CPP_DEFINE_METHOD(android::database::CursorWindow,32,"<clinit>","()V")
J2CPP_DEFINE_FIELD(android::database::CursorWindow,0,"CREATOR","Landroid/os/Parcelable$Creator;")

} //namespace j2cpp

#endif //J2CPP_ANDROID_DATABASE_CURSORWINDOW_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
