/*================================================================================
  code generated by: java2cpp
  class: android.database.sqlite.SQLiteDatabase
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_DATABASE_SQLITE_SQLITEDATABASE_HPP_DECL
#define J2CPP_ANDROID_DATABASE_SQLITE_SQLITEDATABASE_HPP_DECL


namespace j2cpp { namespace java { namespace io { class File; } } }
namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace util { class Locale; } } }
namespace j2cpp { namespace java { namespace util { class Map; } } }
namespace j2cpp { namespace android { namespace database { class Cursor; } } }
namespace j2cpp { namespace android { namespace database { namespace sqlite { class SQLiteQuery; } } } }
namespace j2cpp { namespace android { namespace database { namespace sqlite { class SQLiteClosable; } } } }
namespace j2cpp { namespace android { namespace database { namespace sqlite { class SQLiteStatement; } } } }
namespace j2cpp { namespace android { namespace database { namespace sqlite { class SQLiteCursorDriver; } } } }
namespace j2cpp { namespace android { namespace database { namespace sqlite { namespace SQLiteDatabase_ { class CursorFactory; } } } } }
namespace j2cpp { namespace android { namespace database { namespace sqlite { class SQLiteTransactionListener; } } } }
namespace j2cpp { namespace android { namespace content { class ContentValues; } } }


#include <android/content/ContentValues.hpp>
#include <android/database/Cursor.hpp>
#include <android/database/sqlite/SQLiteClosable.hpp>
#include <android/database/sqlite/SQLiteCursorDriver.hpp>
#include <android/database/sqlite/SQLiteDatabase.hpp>
#include <android/database/sqlite/SQLiteQuery.hpp>
#include <android/database/sqlite/SQLiteStatement.hpp>
#include <android/database/sqlite/SQLiteTransactionListener.hpp>
#include <java/io/File.hpp>
#include <java/lang/Object.hpp>
#include <java/lang/String.hpp>
#include <java/util/Locale.hpp>
#include <java/util/Map.hpp>


namespace j2cpp {

namespace android { namespace database { namespace sqlite {

	class SQLiteDatabase;
	namespace SQLiteDatabase_ {

		class CursorFactory;
		class CursorFactory
			: public cpp_object<CursorFactory>
		{
		public:

			J2CPP_DECLARE_CLASS

			J2CPP_DECLARE_METHOD(0)

			explicit CursorFactory(jobject jobj)
			: cpp_object<CursorFactory>(jobj)
			{
			}

			operator local_ref<java::lang::Object>() const;


			local_ref< android::database::Cursor > newCursor(local_ref< android::database::sqlite::SQLiteDatabase > const&, local_ref< android::database::sqlite::SQLiteCursorDriver > const&, local_ref< java::lang::String > const&, local_ref< android::database::sqlite::SQLiteQuery > const&);
		}; //class CursorFactory

	} //namespace SQLiteDatabase_

	class SQLiteDatabase
		: public cpp_object<SQLiteDatabase>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_METHOD(12)
		J2CPP_DECLARE_METHOD(13)
		J2CPP_DECLARE_METHOD(14)
		J2CPP_DECLARE_METHOD(15)
		J2CPP_DECLARE_METHOD(16)
		J2CPP_DECLARE_METHOD(17)
		J2CPP_DECLARE_METHOD(18)
		J2CPP_DECLARE_METHOD(19)
		J2CPP_DECLARE_METHOD(20)
		J2CPP_DECLARE_METHOD(21)
		J2CPP_DECLARE_METHOD(22)
		J2CPP_DECLARE_METHOD(23)
		J2CPP_DECLARE_METHOD(24)
		J2CPP_DECLARE_METHOD(25)
		J2CPP_DECLARE_METHOD(26)
		J2CPP_DECLARE_METHOD(27)
		J2CPP_DECLARE_METHOD(28)
		J2CPP_DECLARE_METHOD(29)
		J2CPP_DECLARE_METHOD(30)
		J2CPP_DECLARE_METHOD(31)
		J2CPP_DECLARE_METHOD(32)
		J2CPP_DECLARE_METHOD(33)
		J2CPP_DECLARE_METHOD(34)
		J2CPP_DECLARE_METHOD(35)
		J2CPP_DECLARE_METHOD(36)
		J2CPP_DECLARE_METHOD(37)
		J2CPP_DECLARE_METHOD(38)
		J2CPP_DECLARE_METHOD(39)
		J2CPP_DECLARE_METHOD(40)
		J2CPP_DECLARE_METHOD(41)
		J2CPP_DECLARE_METHOD(42)
		J2CPP_DECLARE_METHOD(43)
		J2CPP_DECLARE_METHOD(44)
		J2CPP_DECLARE_METHOD(45)
		J2CPP_DECLARE_METHOD(46)
		J2CPP_DECLARE_METHOD(47)
		J2CPP_DECLARE_METHOD(48)
		J2CPP_DECLARE_METHOD(49)
		J2CPP_DECLARE_FIELD(0)
		J2CPP_DECLARE_FIELD(1)
		J2CPP_DECLARE_FIELD(2)
		J2CPP_DECLARE_FIELD(3)
		J2CPP_DECLARE_FIELD(4)

		typedef SQLiteDatabase_::CursorFactory CursorFactory;

		explicit SQLiteDatabase(jobject jobj)
		: cpp_object<SQLiteDatabase>(jobj)
		{
		}

		operator local_ref<android::database::sqlite::SQLiteClosable>() const;


		static cpp_int releaseMemory();
		void setLockingEnabled(cpp_boolean const&);
		void beginTransaction();
		void beginTransactionWithListener(local_ref< android::database::sqlite::SQLiteTransactionListener > const&);
		void endTransaction();
		void setTransactionSuccessful();
		cpp_boolean inTransaction();
		cpp_boolean isDbLockedByCurrentThread();
		cpp_boolean isDbLockedByOtherThreads();
		cpp_boolean yieldIfContended();
		cpp_boolean yieldIfContendedSafely();
		cpp_boolean yieldIfContendedSafely(cpp_long const&);
		local_ref< java::util::Map > getSyncedTables();
		static local_ref< android::database::sqlite::SQLiteDatabase > openDatabase(local_ref< java::lang::String > const&, local_ref< android::database::sqlite::SQLiteDatabase_::CursorFactory > const&, cpp_int const&);
		static local_ref< android::database::sqlite::SQLiteDatabase > openOrCreateDatabase(local_ref< java::io::File > const&, local_ref< android::database::sqlite::SQLiteDatabase_::CursorFactory > const&);
		static local_ref< android::database::sqlite::SQLiteDatabase > openOrCreateDatabase(local_ref< java::lang::String > const&, local_ref< android::database::sqlite::SQLiteDatabase_::CursorFactory > const&);
		static local_ref< android::database::sqlite::SQLiteDatabase > create(local_ref< android::database::sqlite::SQLiteDatabase_::CursorFactory > const&);
		void close();
		cpp_int getVersion();
		void setVersion(cpp_int const&);
		cpp_long getMaximumSize();
		cpp_long setMaximumSize(cpp_long const&);
		cpp_long getPageSize();
		void setPageSize(cpp_long const&);
		void markTableSyncable(local_ref< java::lang::String > const&, local_ref< java::lang::String > const&);
		void markTableSyncable(local_ref< java::lang::String > const&, local_ref< java::lang::String > const&, local_ref< java::lang::String > const&);
		static local_ref< java::lang::String > findEditTable(local_ref< java::lang::String > const&);
		local_ref< android::database::sqlite::SQLiteStatement > compileStatement(local_ref< java::lang::String > const&);
		local_ref< android::database::Cursor > query(cpp_boolean const&, local_ref< java::lang::String > const&, local_ref< cpp_object_array<java::lang::String, 1> > const&, local_ref< java::lang::String > const&, local_ref< cpp_object_array<java::lang::String, 1> > const&, local_ref< java::lang::String > const&, local_ref< java::lang::String > const&, local_ref< java::lang::String > const&, local_ref< java::lang::String > const&);
		local_ref< android::database::Cursor > queryWithFactory(local_ref< android::database::sqlite::SQLiteDatabase_::CursorFactory > const&, cpp_boolean const&, local_ref< java::lang::String > const&, local_ref< cpp_object_array<java::lang::String, 1> > const&, local_ref< java::lang::String > const&, local_ref< cpp_object_array<java::lang::String, 1> > const&, local_ref< java::lang::String > const&, local_ref< java::lang::String > const&, local_ref< java::lang::String > const&, local_ref< java::lang::String > const&);
		local_ref< android::database::Cursor > query(local_ref< java::lang::String > const&, local_ref< cpp_object_array<java::lang::String, 1> > const&, local_ref< java::lang::String > const&, local_ref< cpp_object_array<java::lang::String, 1> > const&, local_ref< java::lang::String > const&, local_ref< java::lang::String > const&, local_ref< java::lang::String > const&);
		local_ref< android::database::Cursor > query(local_ref< java::lang::String > const&, local_ref< cpp_object_array<java::lang::String, 1> > const&, local_ref< java::lang::String > const&, local_ref< cpp_object_array<java::lang::String, 1> > const&, local_ref< java::lang::String > const&, local_ref< java::lang::String > const&, local_ref< java::lang::String > const&, local_ref< java::lang::String > const&);
		local_ref< android::database::Cursor > rawQuery(local_ref< java::lang::String > const&, local_ref< cpp_object_array<java::lang::String, 1> > const&);
		local_ref< android::database::Cursor > rawQueryWithFactory(local_ref< android::database::sqlite::SQLiteDatabase_::CursorFactory > const&, local_ref< java::lang::String > const&, local_ref< cpp_object_array<java::lang::String, 1> > const&, local_ref< java::lang::String > const&);
		cpp_long insert(local_ref< java::lang::String > const&, local_ref< java::lang::String > const&, local_ref< android::content::ContentValues > const&);
		cpp_long insertOrThrow(local_ref< java::lang::String > const&, local_ref< java::lang::String > const&, local_ref< android::content::ContentValues > const&);
		cpp_long replace(local_ref< java::lang::String > const&, local_ref< java::lang::String > const&, local_ref< android::content::ContentValues > const&);
		cpp_long replaceOrThrow(local_ref< java::lang::String > const&, local_ref< java::lang::String > const&, local_ref< android::content::ContentValues > const&);
		cpp_int deleteThe(local_ref< java::lang::String > const&, local_ref< java::lang::String > const&, local_ref< cpp_object_array<java::lang::String, 1> > const&);
		cpp_int update(local_ref< java::lang::String > const&, local_ref< android::content::ContentValues > const&, local_ref< java::lang::String > const&, local_ref< cpp_object_array<java::lang::String, 1> > const&);
		void execSQL(local_ref< java::lang::String > const&);
		void execSQL(local_ref< java::lang::String > const&, local_ref< cpp_object_array<java::lang::Object, 1> > const&);
		cpp_boolean isReadOnly();
		cpp_boolean isOpen();
		cpp_boolean needUpgrade(cpp_int const&);
		local_ref< java::lang::String > getPath();
		void setLocale(local_ref< java::util::Locale > const&);

		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(0), J2CPP_FIELD_SIGNATURE(0), cpp_int > SQLITE_MAX_LIKE_PATTERN_LENGTH;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(1), J2CPP_FIELD_SIGNATURE(1), cpp_int > OPEN_READWRITE;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(2), J2CPP_FIELD_SIGNATURE(2), cpp_int > OPEN_READONLY;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(3), J2CPP_FIELD_SIGNATURE(3), cpp_int > NO_LOCALIZED_COLLATORS;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(4), J2CPP_FIELD_SIGNATURE(4), cpp_int > CREATE_IF_NECESSARY;
	}; //class SQLiteDatabase

} //namespace sqlite
} //namespace database
} //namespace android

} //namespace j2cpp

#endif //J2CPP_ANDROID_DATABASE_SQLITE_SQLITEDATABASE_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_DATABASE_SQLITE_SQLITEDATABASE_HPP_IMPL
#define J2CPP_ANDROID_DATABASE_SQLITE_SQLITEDATABASE_HPP_IMPL

namespace j2cpp {




android::database::sqlite::SQLiteDatabase_::CursorFactory::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jtype());
}

local_ref< android::database::Cursor > android::database::sqlite::SQLiteDatabase_::CursorFactory::newCursor(local_ref< android::database::sqlite::SQLiteDatabase > const &a0, local_ref< android::database::sqlite::SQLiteCursorDriver > const &a1, local_ref< java::lang::String > const &a2, local_ref< android::database::sqlite::SQLiteQuery > const &a3)
{
	return local_ref< android::database::Cursor >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(0), J2CPP_METHOD_SIGNATURE(0), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype(), a3.get_jtype()
		)
	);
}


J2CPP_DEFINE_CLASS(android::database::sqlite::SQLiteDatabase_::CursorFactory,"android/database/sqlite/SQLiteDatabase$CursorFactory")
J2CPP_DEFINE_METHOD(android::database::sqlite::SQLiteDatabase_::CursorFactory,0,"newCursor","(Landroid/database/sqlite/SQLiteDatabase;Landroid/database/sqlite/SQLiteCursorDriver;Ljava/lang/String;Landroid/database/sqlite/SQLiteQuery;)Landroid/database/Cursor;")



android::database::sqlite::SQLiteDatabase::operator local_ref<android::database::sqlite::SQLiteClosable>() const
{
	return local_ref<android::database::sqlite::SQLiteClosable>(get_jtype());
}



cpp_int android::database::sqlite::SQLiteDatabase::releaseMemory()
{
	return cpp_int(
		environment::get().get_jenv()->CallStaticIntMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), true>()
		)
	);
}

void android::database::sqlite::SQLiteDatabase::setLockingEnabled(cpp_boolean const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>(),
			a0.get_jtype()
		)
	);
}

void android::database::sqlite::SQLiteDatabase::beginTransaction()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>()
		)
	);
}

void android::database::sqlite::SQLiteDatabase::beginTransactionWithListener(local_ref< android::database::sqlite::SQLiteTransactionListener > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>(),
			a0.get_jtype()
		)
	);
}

void android::database::sqlite::SQLiteDatabase::endTransaction()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>()
		)
	);
}

void android::database::sqlite::SQLiteDatabase::setTransactionSuccessful()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(7), J2CPP_METHOD_SIGNATURE(7), false>()
		)
	);
}

cpp_boolean android::database::sqlite::SQLiteDatabase::inTransaction()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(8), J2CPP_METHOD_SIGNATURE(8), false>()
		)
	);
}

cpp_boolean android::database::sqlite::SQLiteDatabase::isDbLockedByCurrentThread()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(9), J2CPP_METHOD_SIGNATURE(9), false>()
		)
	);
}

cpp_boolean android::database::sqlite::SQLiteDatabase::isDbLockedByOtherThreads()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(10), J2CPP_METHOD_SIGNATURE(10), false>()
		)
	);
}

cpp_boolean android::database::sqlite::SQLiteDatabase::yieldIfContended()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(11), J2CPP_METHOD_SIGNATURE(11), false>()
		)
	);
}

cpp_boolean android::database::sqlite::SQLiteDatabase::yieldIfContendedSafely()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(12), J2CPP_METHOD_SIGNATURE(12), false>()
		)
	);
}

cpp_boolean android::database::sqlite::SQLiteDatabase::yieldIfContendedSafely(cpp_long const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(13), J2CPP_METHOD_SIGNATURE(13), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::util::Map > android::database::sqlite::SQLiteDatabase::getSyncedTables()
{
	return local_ref< java::util::Map >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(14), J2CPP_METHOD_SIGNATURE(14), false>()
		)
	);
}

local_ref< android::database::sqlite::SQLiteDatabase > android::database::sqlite::SQLiteDatabase::openDatabase(local_ref< java::lang::String > const &a0, local_ref< android::database::sqlite::SQLiteDatabase_::CursorFactory > const &a1, cpp_int const &a2)
{
	return local_ref< android::database::sqlite::SQLiteDatabase >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(15), J2CPP_METHOD_SIGNATURE(15), true>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

local_ref< android::database::sqlite::SQLiteDatabase > android::database::sqlite::SQLiteDatabase::openOrCreateDatabase(local_ref< java::io::File > const &a0, local_ref< android::database::sqlite::SQLiteDatabase_::CursorFactory > const &a1)
{
	return local_ref< android::database::sqlite::SQLiteDatabase >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(16), J2CPP_METHOD_SIGNATURE(16), true>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< android::database::sqlite::SQLiteDatabase > android::database::sqlite::SQLiteDatabase::openOrCreateDatabase(local_ref< java::lang::String > const &a0, local_ref< android::database::sqlite::SQLiteDatabase_::CursorFactory > const &a1)
{
	return local_ref< android::database::sqlite::SQLiteDatabase >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(17), J2CPP_METHOD_SIGNATURE(17), true>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< android::database::sqlite::SQLiteDatabase > android::database::sqlite::SQLiteDatabase::create(local_ref< android::database::sqlite::SQLiteDatabase_::CursorFactory > const &a0)
{
	return local_ref< android::database::sqlite::SQLiteDatabase >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(18), J2CPP_METHOD_SIGNATURE(18), true>(),
			a0.get_jtype()
		)
	);
}

void android::database::sqlite::SQLiteDatabase::close()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(19), J2CPP_METHOD_SIGNATURE(19), false>()
		)
	);
}

cpp_int android::database::sqlite::SQLiteDatabase::getVersion()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(20), J2CPP_METHOD_SIGNATURE(20), false>()
		)
	);
}

void android::database::sqlite::SQLiteDatabase::setVersion(cpp_int const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(21), J2CPP_METHOD_SIGNATURE(21), false>(),
			a0.get_jtype()
		)
	);
}

cpp_long android::database::sqlite::SQLiteDatabase::getMaximumSize()
{
	return cpp_long(
		environment::get().get_jenv()->CallLongMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(22), J2CPP_METHOD_SIGNATURE(22), false>()
		)
	);
}

cpp_long android::database::sqlite::SQLiteDatabase::setMaximumSize(cpp_long const &a0)
{
	return cpp_long(
		environment::get().get_jenv()->CallLongMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(23), J2CPP_METHOD_SIGNATURE(23), false>(),
			a0.get_jtype()
		)
	);
}

cpp_long android::database::sqlite::SQLiteDatabase::getPageSize()
{
	return cpp_long(
		environment::get().get_jenv()->CallLongMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(24), J2CPP_METHOD_SIGNATURE(24), false>()
		)
	);
}

void android::database::sqlite::SQLiteDatabase::setPageSize(cpp_long const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(25), J2CPP_METHOD_SIGNATURE(25), false>(),
			a0.get_jtype()
		)
	);
}

void android::database::sqlite::SQLiteDatabase::markTableSyncable(local_ref< java::lang::String > const &a0, local_ref< java::lang::String > const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(26), J2CPP_METHOD_SIGNATURE(26), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void android::database::sqlite::SQLiteDatabase::markTableSyncable(local_ref< java::lang::String > const &a0, local_ref< java::lang::String > const &a1, local_ref< java::lang::String > const &a2)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(27), J2CPP_METHOD_SIGNATURE(27), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

local_ref< java::lang::String > android::database::sqlite::SQLiteDatabase::findEditTable(local_ref< java::lang::String > const &a0)
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(28), J2CPP_METHOD_SIGNATURE(28), true>(),
			a0.get_jtype()
		)
	);
}

local_ref< android::database::sqlite::SQLiteStatement > android::database::sqlite::SQLiteDatabase::compileStatement(local_ref< java::lang::String > const &a0)
{
	return local_ref< android::database::sqlite::SQLiteStatement >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(29), J2CPP_METHOD_SIGNATURE(29), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< android::database::Cursor > android::database::sqlite::SQLiteDatabase::query(cpp_boolean const &a0, local_ref< java::lang::String > const &a1, local_ref< cpp_object_array<java::lang::String, 1> > const &a2, local_ref< java::lang::String > const &a3, local_ref< cpp_object_array<java::lang::String, 1> > const &a4, local_ref< java::lang::String > const &a5, local_ref< java::lang::String > const &a6, local_ref< java::lang::String > const &a7, local_ref< java::lang::String > const &a8)
{
	return local_ref< android::database::Cursor >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(30), J2CPP_METHOD_SIGNATURE(30), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype(), a3.get_jtype(), a4.get_jtype(), a5.get_jtype(), a6.get_jtype(), a7.get_jtype(), a8.get_jtype()
		)
	);
}

local_ref< android::database::Cursor > android::database::sqlite::SQLiteDatabase::queryWithFactory(local_ref< android::database::sqlite::SQLiteDatabase_::CursorFactory > const &a0, cpp_boolean const &a1, local_ref< java::lang::String > const &a2, local_ref< cpp_object_array<java::lang::String, 1> > const &a3, local_ref< java::lang::String > const &a4, local_ref< cpp_object_array<java::lang::String, 1> > const &a5, local_ref< java::lang::String > const &a6, local_ref< java::lang::String > const &a7, local_ref< java::lang::String > const &a8, local_ref< java::lang::String > const &a9)
{
	return local_ref< android::database::Cursor >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(31), J2CPP_METHOD_SIGNATURE(31), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype(), a3.get_jtype(), a4.get_jtype(), a5.get_jtype(), a6.get_jtype(), a7.get_jtype(), a8.get_jtype(), a9.get_jtype()
		)
	);
}

local_ref< android::database::Cursor > android::database::sqlite::SQLiteDatabase::query(local_ref< java::lang::String > const &a0, local_ref< cpp_object_array<java::lang::String, 1> > const &a1, local_ref< java::lang::String > const &a2, local_ref< cpp_object_array<java::lang::String, 1> > const &a3, local_ref< java::lang::String > const &a4, local_ref< java::lang::String > const &a5, local_ref< java::lang::String > const &a6)
{
	return local_ref< android::database::Cursor >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(32), J2CPP_METHOD_SIGNATURE(32), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype(), a3.get_jtype(), a4.get_jtype(), a5.get_jtype(), a6.get_jtype()
		)
	);
}

local_ref< android::database::Cursor > android::database::sqlite::SQLiteDatabase::query(local_ref< java::lang::String > const &a0, local_ref< cpp_object_array<java::lang::String, 1> > const &a1, local_ref< java::lang::String > const &a2, local_ref< cpp_object_array<java::lang::String, 1> > const &a3, local_ref< java::lang::String > const &a4, local_ref< java::lang::String > const &a5, local_ref< java::lang::String > const &a6, local_ref< java::lang::String > const &a7)
{
	return local_ref< android::database::Cursor >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(33), J2CPP_METHOD_SIGNATURE(33), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype(), a3.get_jtype(), a4.get_jtype(), a5.get_jtype(), a6.get_jtype(), a7.get_jtype()
		)
	);
}

local_ref< android::database::Cursor > android::database::sqlite::SQLiteDatabase::rawQuery(local_ref< java::lang::String > const &a0, local_ref< cpp_object_array<java::lang::String, 1> > const &a1)
{
	return local_ref< android::database::Cursor >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(34), J2CPP_METHOD_SIGNATURE(34), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< android::database::Cursor > android::database::sqlite::SQLiteDatabase::rawQueryWithFactory(local_ref< android::database::sqlite::SQLiteDatabase_::CursorFactory > const &a0, local_ref< java::lang::String > const &a1, local_ref< cpp_object_array<java::lang::String, 1> > const &a2, local_ref< java::lang::String > const &a3)
{
	return local_ref< android::database::Cursor >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(35), J2CPP_METHOD_SIGNATURE(35), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype(), a3.get_jtype()
		)
	);
}

cpp_long android::database::sqlite::SQLiteDatabase::insert(local_ref< java::lang::String > const &a0, local_ref< java::lang::String > const &a1, local_ref< android::content::ContentValues > const &a2)
{
	return cpp_long(
		environment::get().get_jenv()->CallLongMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(36), J2CPP_METHOD_SIGNATURE(36), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

cpp_long android::database::sqlite::SQLiteDatabase::insertOrThrow(local_ref< java::lang::String > const &a0, local_ref< java::lang::String > const &a1, local_ref< android::content::ContentValues > const &a2)
{
	return cpp_long(
		environment::get().get_jenv()->CallLongMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(37), J2CPP_METHOD_SIGNATURE(37), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

cpp_long android::database::sqlite::SQLiteDatabase::replace(local_ref< java::lang::String > const &a0, local_ref< java::lang::String > const &a1, local_ref< android::content::ContentValues > const &a2)
{
	return cpp_long(
		environment::get().get_jenv()->CallLongMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(38), J2CPP_METHOD_SIGNATURE(38), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

cpp_long android::database::sqlite::SQLiteDatabase::replaceOrThrow(local_ref< java::lang::String > const &a0, local_ref< java::lang::String > const &a1, local_ref< android::content::ContentValues > const &a2)
{
	return cpp_long(
		environment::get().get_jenv()->CallLongMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(39), J2CPP_METHOD_SIGNATURE(39), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

cpp_int android::database::sqlite::SQLiteDatabase::deleteThe(local_ref< java::lang::String > const &a0, local_ref< java::lang::String > const &a1, local_ref< cpp_object_array<java::lang::String, 1> > const &a2)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(40), J2CPP_METHOD_SIGNATURE(40), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

cpp_int android::database::sqlite::SQLiteDatabase::update(local_ref< java::lang::String > const &a0, local_ref< android::content::ContentValues > const &a1, local_ref< java::lang::String > const &a2, local_ref< cpp_object_array<java::lang::String, 1> > const &a3)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(41), J2CPP_METHOD_SIGNATURE(41), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype(), a3.get_jtype()
		)
	);
}

void android::database::sqlite::SQLiteDatabase::execSQL(local_ref< java::lang::String > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(42), J2CPP_METHOD_SIGNATURE(42), false>(),
			a0.get_jtype()
		)
	);
}

void android::database::sqlite::SQLiteDatabase::execSQL(local_ref< java::lang::String > const &a0, local_ref< cpp_object_array<java::lang::Object, 1> > const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(43), J2CPP_METHOD_SIGNATURE(43), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}


cpp_boolean android::database::sqlite::SQLiteDatabase::isReadOnly()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(45), J2CPP_METHOD_SIGNATURE(45), false>()
		)
	);
}

cpp_boolean android::database::sqlite::SQLiteDatabase::isOpen()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(46), J2CPP_METHOD_SIGNATURE(46), false>()
		)
	);
}

cpp_boolean android::database::sqlite::SQLiteDatabase::needUpgrade(cpp_int const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(47), J2CPP_METHOD_SIGNATURE(47), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::String > android::database::sqlite::SQLiteDatabase::getPath()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(48), J2CPP_METHOD_SIGNATURE(48), false>()
		)
	);
}

void android::database::sqlite::SQLiteDatabase::setLocale(local_ref< java::util::Locale > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(49), J2CPP_METHOD_SIGNATURE(49), false>(),
			a0.get_jtype()
		)
	);
}


static_field<
	android::database::sqlite::SQLiteDatabase::J2CPP_CLASS_NAME,
	android::database::sqlite::SQLiteDatabase::J2CPP_FIELD_NAME(0),
	android::database::sqlite::SQLiteDatabase::J2CPP_FIELD_SIGNATURE(0),
	cpp_int
> android::database::sqlite::SQLiteDatabase::SQLITE_MAX_LIKE_PATTERN_LENGTH;

static_field<
	android::database::sqlite::SQLiteDatabase::J2CPP_CLASS_NAME,
	android::database::sqlite::SQLiteDatabase::J2CPP_FIELD_NAME(1),
	android::database::sqlite::SQLiteDatabase::J2CPP_FIELD_SIGNATURE(1),
	cpp_int
> android::database::sqlite::SQLiteDatabase::OPEN_READWRITE;

static_field<
	android::database::sqlite::SQLiteDatabase::J2CPP_CLASS_NAME,
	android::database::sqlite::SQLiteDatabase::J2CPP_FIELD_NAME(2),
	android::database::sqlite::SQLiteDatabase::J2CPP_FIELD_SIGNATURE(2),
	cpp_int
> android::database::sqlite::SQLiteDatabase::OPEN_READONLY;

static_field<
	android::database::sqlite::SQLiteDatabase::J2CPP_CLASS_NAME,
	android::database::sqlite::SQLiteDatabase::J2CPP_FIELD_NAME(3),
	android::database::sqlite::SQLiteDatabase::J2CPP_FIELD_SIGNATURE(3),
	cpp_int
> android::database::sqlite::SQLiteDatabase::NO_LOCALIZED_COLLATORS;

static_field<
	android::database::sqlite::SQLiteDatabase::J2CPP_CLASS_NAME,
	android::database::sqlite::SQLiteDatabase::J2CPP_FIELD_NAME(4),
	android::database::sqlite::SQLiteDatabase::J2CPP_FIELD_SIGNATURE(4),
	cpp_int
> android::database::sqlite::SQLiteDatabase::CREATE_IF_NECESSARY;


J2CPP_DEFINE_CLASS(android::database::sqlite::SQLiteDatabase,"android/database/sqlite/SQLiteDatabase")
J2CPP_DEFINE_METHOD(android::database::sqlite::SQLiteDatabase,0,"<init>","()V")
J2CPP_DEFINE_METHOD(android::database::sqlite::SQLiteDatabase,1,"onAllReferencesReleased","()V")
J2CPP_DEFINE_METHOD(android::database::sqlite::SQLiteDatabase,2,"releaseMemory","()I")
J2CPP_DEFINE_METHOD(android::database::sqlite::SQLiteDatabase,3,"setLockingEnabled","(Z)V")
J2CPP_DEFINE_METHOD(android::database::sqlite::SQLiteDatabase,4,"beginTransaction","()V")
J2CPP_DEFINE_METHOD(android::database::sqlite::SQLiteDatabase,5,"beginTransactionWithListener","(Landroid/database/sqlite/SQLiteTransactionListener;)V")
J2CPP_DEFINE_METHOD(android::database::sqlite::SQLiteDatabase,6,"endTransaction","()V")
J2CPP_DEFINE_METHOD(android::database::sqlite::SQLiteDatabase,7,"setTransactionSuccessful","()V")
J2CPP_DEFINE_METHOD(android::database::sqlite::SQLiteDatabase,8,"inTransaction","()Z")
J2CPP_DEFINE_METHOD(android::database::sqlite::SQLiteDatabase,9,"isDbLockedByCurrentThread","()Z")
J2CPP_DEFINE_METHOD(android::database::sqlite::SQLiteDatabase,10,"isDbLockedByOtherThreads","()Z")
J2CPP_DEFINE_METHOD(android::database::sqlite::SQLiteDatabase,11,"yieldIfContended","()Z")
J2CPP_DEFINE_METHOD(android::database::sqlite::SQLiteDatabase,12,"yieldIfContendedSafely","()Z")
J2CPP_DEFINE_METHOD(android::database::sqlite::SQLiteDatabase,13,"yieldIfContendedSafely","(J)Z")
J2CPP_DEFINE_METHOD(android::database::sqlite::SQLiteDatabase,14,"getSyncedTables","()Ljava/util/Map;")
J2CPP_DEFINE_METHOD(android::database::sqlite::SQLiteDatabase,15,"openDatabase","(Ljava/lang/String;Landroid/database/sqlite/SQLiteDatabase$CursorFactory;I)Landroid/database/sqlite/SQLiteDatabase;")
J2CPP_DEFINE_METHOD(android::database::sqlite::SQLiteDatabase,16,"openOrCreateDatabase","(Ljava/io/File;Landroid/database/sqlite/SQLiteDatabase$CursorFactory;)Landroid/database/sqlite/SQLiteDatabase;")
J2CPP_DEFINE_METHOD(android::database::sqlite::SQLiteDatabase,17,"openOrCreateDatabase","(Ljava/lang/String;Landroid/database/sqlite/SQLiteDatabase$CursorFactory;)Landroid/database/sqlite/SQLiteDatabase;")
J2CPP_DEFINE_METHOD(android::database::sqlite::SQLiteDatabase,18,"create","(Landroid/database/sqlite/SQLiteDatabase$CursorFactory;)Landroid/database/sqlite/SQLiteDatabase;")
J2CPP_DEFINE_METHOD(android::database::sqlite::SQLiteDatabase,19,"close","()V")
J2CPP_DEFINE_METHOD(android::database::sqlite::SQLiteDatabase,20,"getVersion","()I")
J2CPP_DEFINE_METHOD(android::database::sqlite::SQLiteDatabase,21,"setVersion","(I)V")
J2CPP_DEFINE_METHOD(android::database::sqlite::SQLiteDatabase,22,"getMaximumSize","()J")
J2CPP_DEFINE_METHOD(android::database::sqlite::SQLiteDatabase,23,"setMaximumSize","(J)J")
J2CPP_DEFINE_METHOD(android::database::sqlite::SQLiteDatabase,24,"getPageSize","()J")
J2CPP_DEFINE_METHOD(android::database::sqlite::SQLiteDatabase,25,"setPageSize","(J)V")
J2CPP_DEFINE_METHOD(android::database::sqlite::SQLiteDatabase,26,"markTableSyncable","(Ljava/lang/String;Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(android::database::sqlite::SQLiteDatabase,27,"markTableSyncable","(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(android::database::sqlite::SQLiteDatabase,28,"findEditTable","(Ljava/lang/String;)Ljava/lang/String;")
J2CPP_DEFINE_METHOD(android::database::sqlite::SQLiteDatabase,29,"compileStatement","(Ljava/lang/String;)Landroid/database/sqlite/SQLiteStatement;")
J2CPP_DEFINE_METHOD(android::database::sqlite::SQLiteDatabase,30,"query","(ZLjava/lang/String;[java.lang.StringLjava/lang/String;[java.lang.StringLjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor;")
J2CPP_DEFINE_METHOD(android::database::sqlite::SQLiteDatabase,31,"queryWithFactory","(Landroid/database/sqlite/SQLiteDatabase$CursorFactory;ZLjava/lang/String;[java.lang.StringLjava/lang/String;[java.lang.StringLjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor;")
J2CPP_DEFINE_METHOD(android::database::sqlite::SQLiteDatabase,32,"query","(Ljava/lang/String;[java.lang.StringLjava/lang/String;[java.lang.StringLjava/lang/String;Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor;")
J2CPP_DEFINE_METHOD(android::database::sqlite::SQLiteDatabase,33,"query","(Ljava/lang/String;[java.lang.StringLjava/lang/String;[java.lang.StringLjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor;")
J2CPP_DEFINE_METHOD(android::database::sqlite::SQLiteDatabase,34,"rawQuery","(Ljava/lang/String;[java.lang.String)Landroid/database/Cursor;")
J2CPP_DEFINE_METHOD(android::database::sqlite::SQLiteDatabase,35,"rawQueryWithFactory","(Landroid/database/sqlite/SQLiteDatabase$CursorFactory;Ljava/lang/String;[java.lang.StringLjava/lang/String;)Landroid/database/Cursor;")
J2CPP_DEFINE_METHOD(android::database::sqlite::SQLiteDatabase,36,"insert","(Ljava/lang/String;Ljava/lang/String;Landroid/content/ContentValues;)J")
J2CPP_DEFINE_METHOD(android::database::sqlite::SQLiteDatabase,37,"insertOrThrow","(Ljava/lang/String;Ljava/lang/String;Landroid/content/ContentValues;)J")
J2CPP_DEFINE_METHOD(android::database::sqlite::SQLiteDatabase,38,"replace","(Ljava/lang/String;Ljava/lang/String;Landroid/content/ContentValues;)J")
J2CPP_DEFINE_METHOD(android::database::sqlite::SQLiteDatabase,39,"replaceOrThrow","(Ljava/lang/String;Ljava/lang/String;Landroid/content/ContentValues;)J")
J2CPP_DEFINE_METHOD(android::database::sqlite::SQLiteDatabase,40,"delete","(Ljava/lang/String;Ljava/lang/String;[java.lang.String)I")
J2CPP_DEFINE_METHOD(android::database::sqlite::SQLiteDatabase,41,"update","(Ljava/lang/String;Landroid/content/ContentValues;Ljava/lang/String;[java.lang.String)I")
J2CPP_DEFINE_METHOD(android::database::sqlite::SQLiteDatabase,42,"execSQL","(Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(android::database::sqlite::SQLiteDatabase,43,"execSQL","(Ljava/lang/String;[java.lang.Object)V")
J2CPP_DEFINE_METHOD(android::database::sqlite::SQLiteDatabase,44,"finalize","()V")
J2CPP_DEFINE_METHOD(android::database::sqlite::SQLiteDatabase,45,"isReadOnly","()Z")
J2CPP_DEFINE_METHOD(android::database::sqlite::SQLiteDatabase,46,"isOpen","()Z")
J2CPP_DEFINE_METHOD(android::database::sqlite::SQLiteDatabase,47,"needUpgrade","(I)Z")
J2CPP_DEFINE_METHOD(android::database::sqlite::SQLiteDatabase,48,"getPath","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(android::database::sqlite::SQLiteDatabase,49,"setLocale","(Ljava/util/Locale;)V")
J2CPP_DEFINE_FIELD(android::database::sqlite::SQLiteDatabase,0,"SQLITE_MAX_LIKE_PATTERN_LENGTH","I")
J2CPP_DEFINE_FIELD(android::database::sqlite::SQLiteDatabase,1,"OPEN_READWRITE","I")
J2CPP_DEFINE_FIELD(android::database::sqlite::SQLiteDatabase,2,"OPEN_READONLY","I")
J2CPP_DEFINE_FIELD(android::database::sqlite::SQLiteDatabase,3,"NO_LOCALIZED_COLLATORS","I")
J2CPP_DEFINE_FIELD(android::database::sqlite::SQLiteDatabase,4,"CREATE_IF_NECESSARY","I")

} //namespace j2cpp

#endif //J2CPP_ANDROID_DATABASE_SQLITE_SQLITEDATABASE_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
