/*================================================================================
  code generated by: java2cpp
  class: android.media.AudioTrack
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_MEDIA_AUDIOTRACK_HPP_DECL
#define J2CPP_ANDROID_MEDIA_AUDIOTRACK_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace android { namespace os { class Handler; } } }
namespace j2cpp { namespace android { namespace media { namespace AudioTrack_ { class OnPlaybackPositionUpdateListener; } } } }


#include <android/media/AudioTrack.hpp>
#include <android/os/Handler.hpp>
#include <java/lang/Object.hpp>


namespace j2cpp {

namespace android { namespace media {

	class AudioTrack;
	namespace AudioTrack_ {

		class OnPlaybackPositionUpdateListener;
		class OnPlaybackPositionUpdateListener
			: public cpp_object<OnPlaybackPositionUpdateListener>
		{
		public:

			J2CPP_DECLARE_CLASS

			J2CPP_DECLARE_METHOD(0)
			J2CPP_DECLARE_METHOD(1)

			explicit OnPlaybackPositionUpdateListener(jobject jobj)
			: cpp_object<OnPlaybackPositionUpdateListener>(jobj)
			{
			}

			operator local_ref<java::lang::Object>() const;


			void onMarkerReached(local_ref< android::media::AudioTrack > const&);
			void onPeriodicNotification(local_ref< android::media::AudioTrack > const&);
		}; //class OnPlaybackPositionUpdateListener

	} //namespace AudioTrack_

	class AudioTrack
		: public cpp_object<AudioTrack>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_METHOD(12)
		J2CPP_DECLARE_METHOD(13)
		J2CPP_DECLARE_METHOD(14)
		J2CPP_DECLARE_METHOD(15)
		J2CPP_DECLARE_METHOD(16)
		J2CPP_DECLARE_METHOD(17)
		J2CPP_DECLARE_METHOD(18)
		J2CPP_DECLARE_METHOD(19)
		J2CPP_DECLARE_METHOD(20)
		J2CPP_DECLARE_METHOD(21)
		J2CPP_DECLARE_METHOD(22)
		J2CPP_DECLARE_METHOD(23)
		J2CPP_DECLARE_METHOD(24)
		J2CPP_DECLARE_METHOD(25)
		J2CPP_DECLARE_METHOD(26)
		J2CPP_DECLARE_METHOD(27)
		J2CPP_DECLARE_METHOD(28)
		J2CPP_DECLARE_METHOD(29)
		J2CPP_DECLARE_METHOD(30)
		J2CPP_DECLARE_METHOD(31)
		J2CPP_DECLARE_METHOD(32)
		J2CPP_DECLARE_METHOD(33)
		J2CPP_DECLARE_METHOD(34)
		J2CPP_DECLARE_FIELD(0)
		J2CPP_DECLARE_FIELD(1)
		J2CPP_DECLARE_FIELD(2)
		J2CPP_DECLARE_FIELD(3)
		J2CPP_DECLARE_FIELD(4)
		J2CPP_DECLARE_FIELD(5)
		J2CPP_DECLARE_FIELD(6)
		J2CPP_DECLARE_FIELD(7)
		J2CPP_DECLARE_FIELD(8)
		J2CPP_DECLARE_FIELD(9)
		J2CPP_DECLARE_FIELD(10)
		J2CPP_DECLARE_FIELD(11)

		typedef AudioTrack_::OnPlaybackPositionUpdateListener OnPlaybackPositionUpdateListener;

		explicit AudioTrack(jobject jobj)
		: cpp_object<AudioTrack>(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;


		AudioTrack(cpp_int const&, cpp_int const&, cpp_int const&, cpp_int const&, cpp_int const&, cpp_int const&);
		void release();
		static cpp_float getMinVolume();
		static cpp_float getMaxVolume();
		cpp_int getSampleRate();
		cpp_int getPlaybackRate();
		cpp_int getAudioFormat();
		cpp_int getStreamType();
		cpp_int getChannelConfiguration();
		cpp_int getChannelCount();
		cpp_int getState();
		cpp_int getPlayState();
		cpp_int getNotificationMarkerPosition();
		cpp_int getPositionNotificationPeriod();
		cpp_int getPlaybackHeadPosition();
		static cpp_int getNativeOutputSampleRate(cpp_int const&);
		static cpp_int getMinBufferSize(cpp_int const&, cpp_int const&, cpp_int const&);
		void setPlaybackPositionUpdateListener(local_ref< android::media::AudioTrack_::OnPlaybackPositionUpdateListener > const&);
		void setPlaybackPositionUpdateListener(local_ref< android::media::AudioTrack_::OnPlaybackPositionUpdateListener > const&, local_ref< android::os::Handler > const&);
		cpp_int setStereoVolume(cpp_float const&, cpp_float const&);
		cpp_int setPlaybackRate(cpp_int const&);
		cpp_int setNotificationMarkerPosition(cpp_int const&);
		cpp_int setPositionNotificationPeriod(cpp_int const&);
		cpp_int setPlaybackHeadPosition(cpp_int const&);
		cpp_int setLoopPoints(cpp_int const&, cpp_int const&, cpp_int const&);
		void play();
		void stop();
		void pause();
		void flush();
		cpp_int write(local_ref< cpp_byte_array<1> > const&, cpp_int const&, cpp_int const&);
		cpp_int write(local_ref< cpp_short_array<1> > const&, cpp_int const&, cpp_int const&);
		cpp_int reloadStaticData();

		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(0), J2CPP_FIELD_SIGNATURE(0), cpp_int > PLAYSTATE_STOPPED;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(1), J2CPP_FIELD_SIGNATURE(1), cpp_int > PLAYSTATE_PAUSED;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(2), J2CPP_FIELD_SIGNATURE(2), cpp_int > PLAYSTATE_PLAYING;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(3), J2CPP_FIELD_SIGNATURE(3), cpp_int > MODE_STATIC;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(4), J2CPP_FIELD_SIGNATURE(4), cpp_int > MODE_STREAM;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(5), J2CPP_FIELD_SIGNATURE(5), cpp_int > STATE_UNINITIALIZED;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(6), J2CPP_FIELD_SIGNATURE(6), cpp_int > STATE_INITIALIZED;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(7), J2CPP_FIELD_SIGNATURE(7), cpp_int > STATE_NO_STATIC_DATA;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(8), J2CPP_FIELD_SIGNATURE(8), cpp_int > SUCCESS;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(9), J2CPP_FIELD_SIGNATURE(9), cpp_int > ERROR;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(10), J2CPP_FIELD_SIGNATURE(10), cpp_int > ERROR_BAD_VALUE;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(11), J2CPP_FIELD_SIGNATURE(11), cpp_int > ERROR_INVALID_OPERATION;
	}; //class AudioTrack

} //namespace media
} //namespace android

} //namespace j2cpp

#endif //J2CPP_ANDROID_MEDIA_AUDIOTRACK_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_MEDIA_AUDIOTRACK_HPP_IMPL
#define J2CPP_ANDROID_MEDIA_AUDIOTRACK_HPP_IMPL

namespace j2cpp {




android::media::AudioTrack_::OnPlaybackPositionUpdateListener::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jtype());
}

void android::media::AudioTrack_::OnPlaybackPositionUpdateListener::onMarkerReached(local_ref< android::media::AudioTrack > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(0), J2CPP_METHOD_SIGNATURE(0), false>(),
			a0.get_jtype()
		)
	);
}

void android::media::AudioTrack_::OnPlaybackPositionUpdateListener::onPeriodicNotification(local_ref< android::media::AudioTrack > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), false>(),
			a0.get_jtype()
		)
	);
}


J2CPP_DEFINE_CLASS(android::media::AudioTrack_::OnPlaybackPositionUpdateListener,"android/media/AudioTrack$OnPlaybackPositionUpdateListener")
J2CPP_DEFINE_METHOD(android::media::AudioTrack_::OnPlaybackPositionUpdateListener,0,"onMarkerReached","(Landroid/media/AudioTrack;)V")
J2CPP_DEFINE_METHOD(android::media::AudioTrack_::OnPlaybackPositionUpdateListener,1,"onPeriodicNotification","(Landroid/media/AudioTrack;)V")



android::media::AudioTrack::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jtype());
}


android::media::AudioTrack::AudioTrack(cpp_int const &a0, cpp_int const &a1, cpp_int const &a2, cpp_int const &a3, cpp_int const &a4, cpp_int const &a5)
: cpp_object<android::media::AudioTrack>(
	environment::get().get_jenv()->NewObject(
		get_class<android::media::AudioTrack::J2CPP_CLASS_NAME>(),
		get_method_id<android::media::AudioTrack::J2CPP_CLASS_NAME, android::media::AudioTrack::J2CPP_METHOD_NAME(0), android::media::AudioTrack::J2CPP_METHOD_SIGNATURE(0), false>(),
		a0.get_jtype(), a1.get_jtype(), a2.get_jtype(), a3.get_jtype(), a4.get_jtype(), a5.get_jtype()
	)
)
{
}


void android::media::AudioTrack::release()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), false>()
		)
	);
}


cpp_float android::media::AudioTrack::getMinVolume()
{
	return cpp_float(
		environment::get().get_jenv()->CallStaticFloatMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), true>()
		)
	);
}

cpp_float android::media::AudioTrack::getMaxVolume()
{
	return cpp_float(
		environment::get().get_jenv()->CallStaticFloatMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), true>()
		)
	);
}

cpp_int android::media::AudioTrack::getSampleRate()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>()
		)
	);
}

cpp_int android::media::AudioTrack::getPlaybackRate()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>()
		)
	);
}

cpp_int android::media::AudioTrack::getAudioFormat()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(7), J2CPP_METHOD_SIGNATURE(7), false>()
		)
	);
}

cpp_int android::media::AudioTrack::getStreamType()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(8), J2CPP_METHOD_SIGNATURE(8), false>()
		)
	);
}

cpp_int android::media::AudioTrack::getChannelConfiguration()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(9), J2CPP_METHOD_SIGNATURE(9), false>()
		)
	);
}

cpp_int android::media::AudioTrack::getChannelCount()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(10), J2CPP_METHOD_SIGNATURE(10), false>()
		)
	);
}

cpp_int android::media::AudioTrack::getState()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(11), J2CPP_METHOD_SIGNATURE(11), false>()
		)
	);
}

cpp_int android::media::AudioTrack::getPlayState()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(12), J2CPP_METHOD_SIGNATURE(12), false>()
		)
	);
}


cpp_int android::media::AudioTrack::getNotificationMarkerPosition()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(14), J2CPP_METHOD_SIGNATURE(14), false>()
		)
	);
}

cpp_int android::media::AudioTrack::getPositionNotificationPeriod()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(15), J2CPP_METHOD_SIGNATURE(15), false>()
		)
	);
}

cpp_int android::media::AudioTrack::getPlaybackHeadPosition()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(16), J2CPP_METHOD_SIGNATURE(16), false>()
		)
	);
}

cpp_int android::media::AudioTrack::getNativeOutputSampleRate(cpp_int const &a0)
{
	return cpp_int(
		environment::get().get_jenv()->CallStaticIntMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(17), J2CPP_METHOD_SIGNATURE(17), true>(),
			a0.get_jtype()
		)
	);
}

cpp_int android::media::AudioTrack::getMinBufferSize(cpp_int const &a0, cpp_int const &a1, cpp_int const &a2)
{
	return cpp_int(
		environment::get().get_jenv()->CallStaticIntMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(18), J2CPP_METHOD_SIGNATURE(18), true>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

void android::media::AudioTrack::setPlaybackPositionUpdateListener(local_ref< android::media::AudioTrack_::OnPlaybackPositionUpdateListener > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(19), J2CPP_METHOD_SIGNATURE(19), false>(),
			a0.get_jtype()
		)
	);
}

void android::media::AudioTrack::setPlaybackPositionUpdateListener(local_ref< android::media::AudioTrack_::OnPlaybackPositionUpdateListener > const &a0, local_ref< android::os::Handler > const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(20), J2CPP_METHOD_SIGNATURE(20), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_int android::media::AudioTrack::setStereoVolume(cpp_float const &a0, cpp_float const &a1)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(21), J2CPP_METHOD_SIGNATURE(21), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_int android::media::AudioTrack::setPlaybackRate(cpp_int const &a0)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(22), J2CPP_METHOD_SIGNATURE(22), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int android::media::AudioTrack::setNotificationMarkerPosition(cpp_int const &a0)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(23), J2CPP_METHOD_SIGNATURE(23), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int android::media::AudioTrack::setPositionNotificationPeriod(cpp_int const &a0)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(24), J2CPP_METHOD_SIGNATURE(24), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int android::media::AudioTrack::setPlaybackHeadPosition(cpp_int const &a0)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(25), J2CPP_METHOD_SIGNATURE(25), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int android::media::AudioTrack::setLoopPoints(cpp_int const &a0, cpp_int const &a1, cpp_int const &a2)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(26), J2CPP_METHOD_SIGNATURE(26), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}


void android::media::AudioTrack::play()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(28), J2CPP_METHOD_SIGNATURE(28), false>()
		)
	);
}

void android::media::AudioTrack::stop()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(29), J2CPP_METHOD_SIGNATURE(29), false>()
		)
	);
}

void android::media::AudioTrack::pause()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(30), J2CPP_METHOD_SIGNATURE(30), false>()
		)
	);
}

void android::media::AudioTrack::flush()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(31), J2CPP_METHOD_SIGNATURE(31), false>()
		)
	);
}

cpp_int android::media::AudioTrack::write(local_ref< cpp_byte_array<1> > const &a0, cpp_int const &a1, cpp_int const &a2)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(32), J2CPP_METHOD_SIGNATURE(32), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

cpp_int android::media::AudioTrack::write(local_ref< cpp_short_array<1> > const &a0, cpp_int const &a1, cpp_int const &a2)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(33), J2CPP_METHOD_SIGNATURE(33), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

cpp_int android::media::AudioTrack::reloadStaticData()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(34), J2CPP_METHOD_SIGNATURE(34), false>()
		)
	);
}


static_field<
	android::media::AudioTrack::J2CPP_CLASS_NAME,
	android::media::AudioTrack::J2CPP_FIELD_NAME(0),
	android::media::AudioTrack::J2CPP_FIELD_SIGNATURE(0),
	cpp_int
> android::media::AudioTrack::PLAYSTATE_STOPPED;

static_field<
	android::media::AudioTrack::J2CPP_CLASS_NAME,
	android::media::AudioTrack::J2CPP_FIELD_NAME(1),
	android::media::AudioTrack::J2CPP_FIELD_SIGNATURE(1),
	cpp_int
> android::media::AudioTrack::PLAYSTATE_PAUSED;

static_field<
	android::media::AudioTrack::J2CPP_CLASS_NAME,
	android::media::AudioTrack::J2CPP_FIELD_NAME(2),
	android::media::AudioTrack::J2CPP_FIELD_SIGNATURE(2),
	cpp_int
> android::media::AudioTrack::PLAYSTATE_PLAYING;

static_field<
	android::media::AudioTrack::J2CPP_CLASS_NAME,
	android::media::AudioTrack::J2CPP_FIELD_NAME(3),
	android::media::AudioTrack::J2CPP_FIELD_SIGNATURE(3),
	cpp_int
> android::media::AudioTrack::MODE_STATIC;

static_field<
	android::media::AudioTrack::J2CPP_CLASS_NAME,
	android::media::AudioTrack::J2CPP_FIELD_NAME(4),
	android::media::AudioTrack::J2CPP_FIELD_SIGNATURE(4),
	cpp_int
> android::media::AudioTrack::MODE_STREAM;

static_field<
	android::media::AudioTrack::J2CPP_CLASS_NAME,
	android::media::AudioTrack::J2CPP_FIELD_NAME(5),
	android::media::AudioTrack::J2CPP_FIELD_SIGNATURE(5),
	cpp_int
> android::media::AudioTrack::STATE_UNINITIALIZED;

static_field<
	android::media::AudioTrack::J2CPP_CLASS_NAME,
	android::media::AudioTrack::J2CPP_FIELD_NAME(6),
	android::media::AudioTrack::J2CPP_FIELD_SIGNATURE(6),
	cpp_int
> android::media::AudioTrack::STATE_INITIALIZED;

static_field<
	android::media::AudioTrack::J2CPP_CLASS_NAME,
	android::media::AudioTrack::J2CPP_FIELD_NAME(7),
	android::media::AudioTrack::J2CPP_FIELD_SIGNATURE(7),
	cpp_int
> android::media::AudioTrack::STATE_NO_STATIC_DATA;

static_field<
	android::media::AudioTrack::J2CPP_CLASS_NAME,
	android::media::AudioTrack::J2CPP_FIELD_NAME(8),
	android::media::AudioTrack::J2CPP_FIELD_SIGNATURE(8),
	cpp_int
> android::media::AudioTrack::SUCCESS;

static_field<
	android::media::AudioTrack::J2CPP_CLASS_NAME,
	android::media::AudioTrack::J2CPP_FIELD_NAME(9),
	android::media::AudioTrack::J2CPP_FIELD_SIGNATURE(9),
	cpp_int
> android::media::AudioTrack::ERROR;

static_field<
	android::media::AudioTrack::J2CPP_CLASS_NAME,
	android::media::AudioTrack::J2CPP_FIELD_NAME(10),
	android::media::AudioTrack::J2CPP_FIELD_SIGNATURE(10),
	cpp_int
> android::media::AudioTrack::ERROR_BAD_VALUE;

static_field<
	android::media::AudioTrack::J2CPP_CLASS_NAME,
	android::media::AudioTrack::J2CPP_FIELD_NAME(11),
	android::media::AudioTrack::J2CPP_FIELD_SIGNATURE(11),
	cpp_int
> android::media::AudioTrack::ERROR_INVALID_OPERATION;


J2CPP_DEFINE_CLASS(android::media::AudioTrack,"android/media/AudioTrack")
J2CPP_DEFINE_METHOD(android::media::AudioTrack,0,"<init>","(IIIIII)V")
J2CPP_DEFINE_METHOD(android::media::AudioTrack,1,"release","()V")
J2CPP_DEFINE_METHOD(android::media::AudioTrack,2,"finalize","()V")
J2CPP_DEFINE_METHOD(android::media::AudioTrack,3,"getMinVolume","()F")
J2CPP_DEFINE_METHOD(android::media::AudioTrack,4,"getMaxVolume","()F")
J2CPP_DEFINE_METHOD(android::media::AudioTrack,5,"getSampleRate","()I")
J2CPP_DEFINE_METHOD(android::media::AudioTrack,6,"getPlaybackRate","()I")
J2CPP_DEFINE_METHOD(android::media::AudioTrack,7,"getAudioFormat","()I")
J2CPP_DEFINE_METHOD(android::media::AudioTrack,8,"getStreamType","()I")
J2CPP_DEFINE_METHOD(android::media::AudioTrack,9,"getChannelConfiguration","()I")
J2CPP_DEFINE_METHOD(android::media::AudioTrack,10,"getChannelCount","()I")
J2CPP_DEFINE_METHOD(android::media::AudioTrack,11,"getState","()I")
J2CPP_DEFINE_METHOD(android::media::AudioTrack,12,"getPlayState","()I")
J2CPP_DEFINE_METHOD(android::media::AudioTrack,13,"getNativeFrameCount","()I")
J2CPP_DEFINE_METHOD(android::media::AudioTrack,14,"getNotificationMarkerPosition","()I")
J2CPP_DEFINE_METHOD(android::media::AudioTrack,15,"getPositionNotificationPeriod","()I")
J2CPP_DEFINE_METHOD(android::media::AudioTrack,16,"getPlaybackHeadPosition","()I")
J2CPP_DEFINE_METHOD(android::media::AudioTrack,17,"getNativeOutputSampleRate","(I)I")
J2CPP_DEFINE_METHOD(android::media::AudioTrack,18,"getMinBufferSize","(III)I")
J2CPP_DEFINE_METHOD(android::media::AudioTrack,19,"setPlaybackPositionUpdateListener","(Landroid/media/AudioTrack$OnPlaybackPositionUpdateListener;)V")
J2CPP_DEFINE_METHOD(android::media::AudioTrack,20,"setPlaybackPositionUpdateListener","(Landroid/media/AudioTrack$OnPlaybackPositionUpdateListener;Landroid/os/Handler;)V")
J2CPP_DEFINE_METHOD(android::media::AudioTrack,21,"setStereoVolume","(FF)I")
J2CPP_DEFINE_METHOD(android::media::AudioTrack,22,"setPlaybackRate","(I)I")
J2CPP_DEFINE_METHOD(android::media::AudioTrack,23,"setNotificationMarkerPosition","(I)I")
J2CPP_DEFINE_METHOD(android::media::AudioTrack,24,"setPositionNotificationPeriod","(I)I")
J2CPP_DEFINE_METHOD(android::media::AudioTrack,25,"setPlaybackHeadPosition","(I)I")
J2CPP_DEFINE_METHOD(android::media::AudioTrack,26,"setLoopPoints","(III)I")
J2CPP_DEFINE_METHOD(android::media::AudioTrack,27,"setState","(I)V")
J2CPP_DEFINE_METHOD(android::media::AudioTrack,28,"play","()V")
J2CPP_DEFINE_METHOD(android::media::AudioTrack,29,"stop","()V")
J2CPP_DEFINE_METHOD(android::media::AudioTrack,30,"pause","()V")
J2CPP_DEFINE_METHOD(android::media::AudioTrack,31,"flush","()V")
J2CPP_DEFINE_METHOD(android::media::AudioTrack,32,"write","([BII)I")
J2CPP_DEFINE_METHOD(android::media::AudioTrack,33,"write","([SII)I")
J2CPP_DEFINE_METHOD(android::media::AudioTrack,34,"reloadStaticData","()I")
J2CPP_DEFINE_FIELD(android::media::AudioTrack,0,"PLAYSTATE_STOPPED","I")
J2CPP_DEFINE_FIELD(android::media::AudioTrack,1,"PLAYSTATE_PAUSED","I")
J2CPP_DEFINE_FIELD(android::media::AudioTrack,2,"PLAYSTATE_PLAYING","I")
J2CPP_DEFINE_FIELD(android::media::AudioTrack,3,"MODE_STATIC","I")
J2CPP_DEFINE_FIELD(android::media::AudioTrack,4,"MODE_STREAM","I")
J2CPP_DEFINE_FIELD(android::media::AudioTrack,5,"STATE_UNINITIALIZED","I")
J2CPP_DEFINE_FIELD(android::media::AudioTrack,6,"STATE_INITIALIZED","I")
J2CPP_DEFINE_FIELD(android::media::AudioTrack,7,"STATE_NO_STATIC_DATA","I")
J2CPP_DEFINE_FIELD(android::media::AudioTrack,8,"SUCCESS","I")
J2CPP_DEFINE_FIELD(android::media::AudioTrack,9,"ERROR","I")
J2CPP_DEFINE_FIELD(android::media::AudioTrack,10,"ERROR_BAD_VALUE","I")
J2CPP_DEFINE_FIELD(android::media::AudioTrack,11,"ERROR_INVALID_OPERATION","I")

} //namespace j2cpp

#endif //J2CPP_ANDROID_MEDIA_AUDIOTRACK_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
