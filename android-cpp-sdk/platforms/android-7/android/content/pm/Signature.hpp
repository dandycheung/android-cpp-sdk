/*================================================================================
  code generated by: java2cpp
  class: android.content.pm.Signature
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_CONTENT_PM_SIGNATURE_HPP_DECL
#define J2CPP_ANDROID_CONTENT_PM_SIGNATURE_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace android { namespace os { class Parcel; } } }
namespace j2cpp { namespace android { namespace os { namespace Parcelable_ { class Creator; } } } }


#include <android/os/Parcel.hpp>
#include <android/os/Parcelable.hpp>
#include <java/lang/Object.hpp>
#include <java/lang/String.hpp>


namespace j2cpp {

namespace android { namespace content { namespace pm {

	class Signature;
	class Signature
		: public cpp_object<Signature>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_FIELD(0)

		Signature(jobject jobj)
		: cpp_object<Signature>(jobj)
		{
		}

		local_ref< cpp_char_array<1> > toChars();
		local_ref< cpp_char_array<1> > toChars(local_ref< cpp_char_array<1> > const&, local_ref< cpp_int_array<1> > const&);
		local_ref< java::lang::String > toCharsString();
		local_ref< cpp_byte_array<1> > toByteArray();
		cpp_boolean equals(local_ref< java::lang::Object > const&);
		cpp_int hashCode();
		cpp_int describeContents();
		void writeToParcel(local_ref< android::os::Parcel > const&, cpp_int const&);

		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(0), J2CPP_FIELD_SIGNATURE(0), local_ref< android::os::Parcelable_::Creator > > CREATOR;
	}; //class Signature

} //namespace pm
} //namespace content
} //namespace android


} //namespace j2cpp

#endif //J2CPP_ANDROID_CONTENT_PM_SIGNATURE_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_CONTENT_PM_SIGNATURE_HPP_IMPL
#define J2CPP_ANDROID_CONTENT_PM_SIGNATURE_HPP_IMPL

namespace j2cpp {


template <>
local_ref< android::content::pm::Signature > create< android::content::pm::Signature>(local_ref< cpp_byte_array<1> > const &a0)
{
	return local_ref< android::content::pm::Signature >(
		environment::get().get_jenv()->NewObject(
			get_class<android::content::pm::Signature::J2CPP_CLASS_NAME>(),
			get_method_id<android::content::pm::Signature::J2CPP_CLASS_NAME, android::content::pm::Signature::J2CPP_METHOD_NAME(0), android::content::pm::Signature::J2CPP_METHOD_SIGNATURE(0), false>(),
			a0.get_jtype()
		)
	);
}

template <>
local_ref< android::content::pm::Signature > create< android::content::pm::Signature>(local_ref< java::lang::String > const &a0)
{
	return local_ref< android::content::pm::Signature >(
		environment::get().get_jenv()->NewObject(
			get_class<android::content::pm::Signature::J2CPP_CLASS_NAME>(),
			get_method_id<android::content::pm::Signature::J2CPP_CLASS_NAME, android::content::pm::Signature::J2CPP_METHOD_NAME(1), android::content::pm::Signature::J2CPP_METHOD_SIGNATURE(1), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< cpp_char_array<1> > android::content::pm::Signature::toChars()
{
	return local_ref< cpp_char_array<1> >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>()
		)
	);
}

local_ref< cpp_char_array<1> > android::content::pm::Signature::toChars(local_ref< cpp_char_array<1> > const &a0, local_ref< cpp_int_array<1> > const &a1)
{
	return local_ref< cpp_char_array<1> >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< java::lang::String > android::content::pm::Signature::toCharsString()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>()
		)
	);
}

local_ref< cpp_byte_array<1> > android::content::pm::Signature::toByteArray()
{
	return local_ref< cpp_byte_array<1> >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>()
		)
	);
}

cpp_boolean android::content::pm::Signature::equals(local_ref< java::lang::Object > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int android::content::pm::Signature::hashCode()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(7), J2CPP_METHOD_SIGNATURE(7), false>()
		)
	);
}

cpp_int android::content::pm::Signature::describeContents()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(8), J2CPP_METHOD_SIGNATURE(8), false>()
		)
	);
}

void android::content::pm::Signature::writeToParcel(local_ref< android::os::Parcel > const &a0, cpp_int const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(9), J2CPP_METHOD_SIGNATURE(9), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}


static_field<
	android::content::pm::Signature::J2CPP_CLASS_NAME,
	android::content::pm::Signature::J2CPP_FIELD_NAME(0),
	android::content::pm::Signature::J2CPP_FIELD_SIGNATURE(0),
	local_ref< android::os::Parcelable_::Creator >
> android::content::pm::Signature::CREATOR;


J2CPP_DEFINE_CLASS(android::content::pm::Signature,"android/content/pm/Signature")
J2CPP_DEFINE_METHOD(android::content::pm::Signature,0,"<init>","([B)V")
J2CPP_DEFINE_METHOD(android::content::pm::Signature,1,"<init>","(Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(android::content::pm::Signature,2,"toChars","()[C")
J2CPP_DEFINE_METHOD(android::content::pm::Signature,3,"toChars","([C[I)[C")
J2CPP_DEFINE_METHOD(android::content::pm::Signature,4,"toCharsString","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(android::content::pm::Signature,5,"toByteArray","()[B")
J2CPP_DEFINE_METHOD(android::content::pm::Signature,6,"equals","(Ljava/lang/Object;)Z")
J2CPP_DEFINE_METHOD(android::content::pm::Signature,7,"hashCode","()I")
J2CPP_DEFINE_METHOD(android::content::pm::Signature,8,"describeContents","()I")
J2CPP_DEFINE_METHOD(android::content::pm::Signature,9,"writeToParcel","(Landroid/os/Parcel;I)V")
J2CPP_DEFINE_METHOD(android::content::pm::Signature,10,"<clinit>","()V")
J2CPP_DEFINE_FIELD(android::content::pm::Signature,0,"CREATOR","Landroid/os/Parcelable$Creator;")

} //namespace j2cpp

#endif //J2CPP_ANDROID_CONTENT_PM_SIGNATURE_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
