/*================================================================================
  code generated by: java2cpp
  class: android.content.res.ColorStateList
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_CONTENT_RES_COLORSTATELIST_HPP_DECL
#define J2CPP_ANDROID_CONTENT_RES_COLORSTATELIST_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace org { namespace xmlpull { namespace v1 { class XmlPullParser; } } } }
namespace j2cpp { namespace android { namespace content { namespace res { class Resources; } } } }
namespace j2cpp { namespace android { namespace os { class Parcel; } } }
namespace j2cpp { namespace android { namespace os { class Parcelable; } } }
namespace j2cpp { namespace android { namespace os { namespace Parcelable_ { class Creator; } } } }


#include <android/content/res/Resources.hpp>
#include <android/os/Parcel.hpp>
#include <android/os/Parcelable.hpp>
#include <java/lang/Object.hpp>
#include <java/lang/String.hpp>
#include <org/xmlpull/v1/XmlPullParser.hpp>


namespace j2cpp {

namespace android { namespace content { namespace res {

	class ColorStateList;
	class ColorStateList
		: public cpp_object<ColorStateList>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_FIELD(0)

		explicit ColorStateList(jobject jobj)
		: cpp_object<ColorStateList>(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;
		operator local_ref<android::os::Parcelable>() const;


		ColorStateList(local_ref< cpp_int_array<2> > const&, local_ref< cpp_int_array<1> > const&);
		static local_ref< android::content::res::ColorStateList > valueOf(cpp_int const&);
		static local_ref< android::content::res::ColorStateList > createFromXml(local_ref< android::content::res::Resources > const&, local_ref< org::xmlpull::v1::XmlPullParser > const&);
		local_ref< android::content::res::ColorStateList > withAlpha(cpp_int const&);
		cpp_boolean isStateful();
		cpp_int getColorForState(local_ref< cpp_int_array<1> > const&, cpp_int const&);
		cpp_int getDefaultColor();
		local_ref< java::lang::String > toString();
		cpp_int describeContents();
		void writeToParcel(local_ref< android::os::Parcel > const&, cpp_int const&);

		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(0), J2CPP_FIELD_SIGNATURE(0), local_ref< android::os::Parcelable_::Creator > > CREATOR;
	}; //class ColorStateList

} //namespace res
} //namespace content
} //namespace android

} //namespace j2cpp

#endif //J2CPP_ANDROID_CONTENT_RES_COLORSTATELIST_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_CONTENT_RES_COLORSTATELIST_HPP_IMPL
#define J2CPP_ANDROID_CONTENT_RES_COLORSTATELIST_HPP_IMPL

namespace j2cpp {



android::content::res::ColorStateList::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jtype());
}

android::content::res::ColorStateList::operator local_ref<android::os::Parcelable>() const
{
	return local_ref<android::os::Parcelable>(get_jtype());
}


android::content::res::ColorStateList::ColorStateList(local_ref< cpp_int_array<2> > const &a0, local_ref< cpp_int_array<1> > const &a1)
: cpp_object<android::content::res::ColorStateList>(
	environment::get().get_jenv()->NewObject(
		get_class<android::content::res::ColorStateList::J2CPP_CLASS_NAME>(),
		get_method_id<android::content::res::ColorStateList::J2CPP_CLASS_NAME, android::content::res::ColorStateList::J2CPP_METHOD_NAME(0), android::content::res::ColorStateList::J2CPP_METHOD_SIGNATURE(0), false>(),
		a0.get_jtype(), a1.get_jtype()
	)
)
{
}


local_ref< android::content::res::ColorStateList > android::content::res::ColorStateList::valueOf(cpp_int const &a0)
{
	return local_ref< android::content::res::ColorStateList >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), true>(),
			a0.get_jtype()
		)
	);
}

local_ref< android::content::res::ColorStateList > android::content::res::ColorStateList::createFromXml(local_ref< android::content::res::Resources > const &a0, local_ref< org::xmlpull::v1::XmlPullParser > const &a1)
{
	return local_ref< android::content::res::ColorStateList >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), true>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< android::content::res::ColorStateList > android::content::res::ColorStateList::withAlpha(cpp_int const &a0)
{
	return local_ref< android::content::res::ColorStateList >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean android::content::res::ColorStateList::isStateful()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>()
		)
	);
}

cpp_int android::content::res::ColorStateList::getColorForState(local_ref< cpp_int_array<1> > const &a0, cpp_int const &a1)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_int android::content::res::ColorStateList::getDefaultColor()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>()
		)
	);
}

local_ref< java::lang::String > android::content::res::ColorStateList::toString()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(7), J2CPP_METHOD_SIGNATURE(7), false>()
		)
	);
}

cpp_int android::content::res::ColorStateList::describeContents()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(8), J2CPP_METHOD_SIGNATURE(8), false>()
		)
	);
}

void android::content::res::ColorStateList::writeToParcel(local_ref< android::os::Parcel > const &a0, cpp_int const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(9), J2CPP_METHOD_SIGNATURE(9), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}



static_field<
	android::content::res::ColorStateList::J2CPP_CLASS_NAME,
	android::content::res::ColorStateList::J2CPP_FIELD_NAME(0),
	android::content::res::ColorStateList::J2CPP_FIELD_SIGNATURE(0),
	local_ref< android::os::Parcelable_::Creator >
> android::content::res::ColorStateList::CREATOR;


J2CPP_DEFINE_CLASS(android::content::res::ColorStateList,"android/content/res/ColorStateList")
J2CPP_DEFINE_METHOD(android::content::res::ColorStateList,0,"<init>","([[I[I)V")
J2CPP_DEFINE_METHOD(android::content::res::ColorStateList,1,"valueOf","(I)Landroid/content/res/ColorStateList;")
J2CPP_DEFINE_METHOD(android::content::res::ColorStateList,2,"createFromXml","(Landroid/content/res/Resources;Lorg/xmlpull/v1/XmlPullParser;)Landroid/content/res/ColorStateList;")
J2CPP_DEFINE_METHOD(android::content::res::ColorStateList,3,"withAlpha","(I)Landroid/content/res/ColorStateList;")
J2CPP_DEFINE_METHOD(android::content::res::ColorStateList,4,"isStateful","()Z")
J2CPP_DEFINE_METHOD(android::content::res::ColorStateList,5,"getColorForState","([II)I")
J2CPP_DEFINE_METHOD(android::content::res::ColorStateList,6,"getDefaultColor","()I")
J2CPP_DEFINE_METHOD(android::content::res::ColorStateList,7,"toString","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(android::content::res::ColorStateList,8,"describeContents","()I")
J2CPP_DEFINE_METHOD(android::content::res::ColorStateList,9,"writeToParcel","(Landroid/os/Parcel;I)V")
J2CPP_DEFINE_METHOD(android::content::res::ColorStateList,10,"<clinit>","()V")
J2CPP_DEFINE_FIELD(android::content::res::ColorStateList,0,"CREATOR","Landroid/os/Parcelable$Creator;")

} //namespace j2cpp

#endif //J2CPP_ANDROID_CONTENT_RES_COLORSTATELIST_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
