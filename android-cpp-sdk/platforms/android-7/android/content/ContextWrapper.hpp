/*================================================================================
  code generated by: java2cpp
  class: android.content.ContextWrapper
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_CONTENT_CONTEXTWRAPPER_HPP_DECL
#define J2CPP_ANDROID_CONTENT_CONTEXTWRAPPER_HPP_DECL


namespace j2cpp { namespace java { namespace io { class FileOutputStream; } } }
namespace j2cpp { namespace java { namespace io { class File; } } }
namespace j2cpp { namespace java { namespace io { class FileInputStream; } } }
namespace j2cpp { namespace java { namespace io { class InputStream; } } }
namespace j2cpp { namespace java { namespace lang { class ClassLoader; } } }
namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace android { namespace net { class Uri; } } }
namespace j2cpp { namespace android { namespace database { namespace sqlite { class SQLiteDatabase; } } } }
namespace j2cpp { namespace android { namespace database { namespace sqlite { namespace SQLiteDatabase_ { class CursorFactory; } } } } }
namespace j2cpp { namespace android { namespace graphics { class Bitmap; } } }
namespace j2cpp { namespace android { namespace graphics { namespace drawable { class Drawable; } } } }
namespace j2cpp { namespace android { namespace content { class ContentResolver; } } }
namespace j2cpp { namespace android { namespace content { namespace pm { class PackageManager; } } } }
namespace j2cpp { namespace android { namespace content { namespace pm { class ApplicationInfo; } } } }
namespace j2cpp { namespace android { namespace content { class IntentSender; } } }
namespace j2cpp { namespace android { namespace content { namespace res { class Resources; } } } }
namespace j2cpp { namespace android { namespace content { namespace res { class AssetManager; } } } }
namespace j2cpp { namespace android { namespace content { namespace res { namespace Resources_ { class Theme; } } } } }
namespace j2cpp { namespace android { namespace content { class ComponentName; } } }
namespace j2cpp { namespace android { namespace content { class Intent; } } }
namespace j2cpp { namespace android { namespace content { class BroadcastReceiver; } } }
namespace j2cpp { namespace android { namespace content { class SharedPreferences; } } }
namespace j2cpp { namespace android { namespace content { class Context; } } }
namespace j2cpp { namespace android { namespace content { class IntentFilter; } } }
namespace j2cpp { namespace android { namespace content { class ServiceConnection; } } }
namespace j2cpp { namespace android { namespace os { class Bundle; } } }
namespace j2cpp { namespace android { namespace os { class Handler; } } }
namespace j2cpp { namespace android { namespace os { class Looper; } } }


#include <android/content/BroadcastReceiver.hpp>
#include <android/content/ComponentName.hpp>
#include <android/content/ContentResolver.hpp>
#include <android/content/Context.hpp>
#include <android/content/Intent.hpp>
#include <android/content/IntentFilter.hpp>
#include <android/content/IntentSender.hpp>
#include <android/content/ServiceConnection.hpp>
#include <android/content/SharedPreferences.hpp>
#include <android/content/pm/ApplicationInfo.hpp>
#include <android/content/pm/PackageManager.hpp>
#include <android/content/res/AssetManager.hpp>
#include <android/content/res/Resources.hpp>
#include <android/database/sqlite/SQLiteDatabase.hpp>
#include <android/graphics/Bitmap.hpp>
#include <android/graphics/drawable/Drawable.hpp>
#include <android/net/Uri.hpp>
#include <android/os/Bundle.hpp>
#include <android/os/Handler.hpp>
#include <android/os/Looper.hpp>
#include <java/io/File.hpp>
#include <java/io/FileInputStream.hpp>
#include <java/io/FileOutputStream.hpp>
#include <java/io/InputStream.hpp>
#include <java/lang/ClassLoader.hpp>
#include <java/lang/Object.hpp>
#include <java/lang/String.hpp>


namespace j2cpp {

namespace android { namespace content {

	class ContextWrapper;
	class ContextWrapper
		: public cpp_object<ContextWrapper>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_METHOD(12)
		J2CPP_DECLARE_METHOD(13)
		J2CPP_DECLARE_METHOD(14)
		J2CPP_DECLARE_METHOD(15)
		J2CPP_DECLARE_METHOD(16)
		J2CPP_DECLARE_METHOD(17)
		J2CPP_DECLARE_METHOD(18)
		J2CPP_DECLARE_METHOD(19)
		J2CPP_DECLARE_METHOD(20)
		J2CPP_DECLARE_METHOD(21)
		J2CPP_DECLARE_METHOD(22)
		J2CPP_DECLARE_METHOD(23)
		J2CPP_DECLARE_METHOD(24)
		J2CPP_DECLARE_METHOD(25)
		J2CPP_DECLARE_METHOD(26)
		J2CPP_DECLARE_METHOD(27)
		J2CPP_DECLARE_METHOD(28)
		J2CPP_DECLARE_METHOD(29)
		J2CPP_DECLARE_METHOD(30)
		J2CPP_DECLARE_METHOD(31)
		J2CPP_DECLARE_METHOD(32)
		J2CPP_DECLARE_METHOD(33)
		J2CPP_DECLARE_METHOD(34)
		J2CPP_DECLARE_METHOD(35)
		J2CPP_DECLARE_METHOD(36)
		J2CPP_DECLARE_METHOD(37)
		J2CPP_DECLARE_METHOD(38)
		J2CPP_DECLARE_METHOD(39)
		J2CPP_DECLARE_METHOD(40)
		J2CPP_DECLARE_METHOD(41)
		J2CPP_DECLARE_METHOD(42)
		J2CPP_DECLARE_METHOD(43)
		J2CPP_DECLARE_METHOD(44)
		J2CPP_DECLARE_METHOD(45)
		J2CPP_DECLARE_METHOD(46)
		J2CPP_DECLARE_METHOD(47)
		J2CPP_DECLARE_METHOD(48)
		J2CPP_DECLARE_METHOD(49)
		J2CPP_DECLARE_METHOD(50)
		J2CPP_DECLARE_METHOD(51)
		J2CPP_DECLARE_METHOD(52)
		J2CPP_DECLARE_METHOD(53)
		J2CPP_DECLARE_METHOD(54)
		J2CPP_DECLARE_METHOD(55)
		J2CPP_DECLARE_METHOD(56)
		J2CPP_DECLARE_METHOD(57)
		J2CPP_DECLARE_METHOD(58)
		J2CPP_DECLARE_METHOD(59)
		J2CPP_DECLARE_METHOD(60)
		J2CPP_DECLARE_METHOD(61)
		J2CPP_DECLARE_METHOD(62)
		J2CPP_DECLARE_METHOD(63)
		J2CPP_DECLARE_METHOD(64)
		J2CPP_DECLARE_METHOD(65)
		J2CPP_DECLARE_METHOD(66)
		J2CPP_DECLARE_METHOD(67)
		J2CPP_DECLARE_METHOD(68)
		J2CPP_DECLARE_METHOD(69)
		J2CPP_DECLARE_METHOD(70)
		J2CPP_DECLARE_METHOD(71)

		explicit ContextWrapper(jobject jobj)
		: cpp_object<ContextWrapper>(jobj)
		{
		}

		operator local_ref<android::content::Context>() const;


		ContextWrapper(local_ref< android::content::Context > const&);
		local_ref< android::content::Context > getBaseContext();
		local_ref< android::content::res::AssetManager > getAssets();
		local_ref< android::content::res::Resources > getResources();
		local_ref< android::content::pm::PackageManager > getPackageManager();
		local_ref< android::content::ContentResolver > getContentResolver();
		local_ref< android::os::Looper > getMainLooper();
		local_ref< android::content::Context > getApplicationContext();
		void setTheme(cpp_int const&);
		local_ref< android::content::res::Resources_::Theme > getTheme();
		local_ref< java::lang::ClassLoader > getClassLoader();
		local_ref< java::lang::String > getPackageName();
		local_ref< android::content::pm::ApplicationInfo > getApplicationInfo();
		local_ref< java::lang::String > getPackageResourcePath();
		local_ref< java::lang::String > getPackageCodePath();
		local_ref< android::content::SharedPreferences > getSharedPreferences(local_ref< java::lang::String > const&, cpp_int const&);
		local_ref< java::io::FileInputStream > openFileInput(local_ref< java::lang::String > const&);
		local_ref< java::io::FileOutputStream > openFileOutput(local_ref< java::lang::String > const&, cpp_int const&);
		cpp_boolean deleteFile(local_ref< java::lang::String > const&);
		local_ref< java::io::File > getFileStreamPath(local_ref< java::lang::String > const&);
		local_ref< cpp_object_array<java::lang::String, 1> > fileList();
		local_ref< java::io::File > getFilesDir();
		local_ref< java::io::File > getCacheDir();
		local_ref< java::io::File > getDir(local_ref< java::lang::String > const&, cpp_int const&);
		local_ref< android::database::sqlite::SQLiteDatabase > openOrCreateDatabase(local_ref< java::lang::String > const&, cpp_int const&, local_ref< android::database::sqlite::SQLiteDatabase_::CursorFactory > const&);
		cpp_boolean deleteDatabase(local_ref< java::lang::String > const&);
		local_ref< java::io::File > getDatabasePath(local_ref< java::lang::String > const&);
		local_ref< cpp_object_array<java::lang::String, 1> > databaseList();
		local_ref< android::graphics::drawable::Drawable > getWallpaper();
		local_ref< android::graphics::drawable::Drawable > peekWallpaper();
		cpp_int getWallpaperDesiredMinimumWidth();
		cpp_int getWallpaperDesiredMinimumHeight();
		void setWallpaper(local_ref< android::graphics::Bitmap > const&);
		void setWallpaper(local_ref< java::io::InputStream > const&);
		void clearWallpaper();
		void startActivity(local_ref< android::content::Intent > const&);
		void startIntentSender(local_ref< android::content::IntentSender > const&, local_ref< android::content::Intent > const&, cpp_int const&, cpp_int const&, cpp_int const&);
		void sendBroadcast(local_ref< android::content::Intent > const&);
		void sendBroadcast(local_ref< android::content::Intent > const&, local_ref< java::lang::String > const&);
		void sendOrderedBroadcast(local_ref< android::content::Intent > const&, local_ref< java::lang::String > const&);
		void sendOrderedBroadcast(local_ref< android::content::Intent > const&, local_ref< java::lang::String > const&, local_ref< android::content::BroadcastReceiver > const&, local_ref< android::os::Handler > const&, cpp_int const&, local_ref< java::lang::String > const&, local_ref< android::os::Bundle > const&);
		void sendStickyBroadcast(local_ref< android::content::Intent > const&);
		void sendStickyOrderedBroadcast(local_ref< android::content::Intent > const&, local_ref< android::content::BroadcastReceiver > const&, local_ref< android::os::Handler > const&, cpp_int const&, local_ref< java::lang::String > const&, local_ref< android::os::Bundle > const&);
		void removeStickyBroadcast(local_ref< android::content::Intent > const&);
		local_ref< android::content::Intent > registerReceiver(local_ref< android::content::BroadcastReceiver > const&, local_ref< android::content::IntentFilter > const&);
		local_ref< android::content::Intent > registerReceiver(local_ref< android::content::BroadcastReceiver > const&, local_ref< android::content::IntentFilter > const&, local_ref< java::lang::String > const&, local_ref< android::os::Handler > const&);
		void unregisterReceiver(local_ref< android::content::BroadcastReceiver > const&);
		local_ref< android::content::ComponentName > startService(local_ref< android::content::Intent > const&);
		cpp_boolean stopService(local_ref< android::content::Intent > const&);
		cpp_boolean bindService(local_ref< android::content::Intent > const&, local_ref< android::content::ServiceConnection > const&, cpp_int const&);
		void unbindService(local_ref< android::content::ServiceConnection > const&);
		cpp_boolean startInstrumentation(local_ref< android::content::ComponentName > const&, local_ref< java::lang::String > const&, local_ref< android::os::Bundle > const&);
		local_ref< java::lang::Object > getSystemService(local_ref< java::lang::String > const&);
		cpp_int checkPermission(local_ref< java::lang::String > const&, cpp_int const&, cpp_int const&);
		cpp_int checkCallingPermission(local_ref< java::lang::String > const&);
		cpp_int checkCallingOrSelfPermission(local_ref< java::lang::String > const&);
		void enforcePermission(local_ref< java::lang::String > const&, cpp_int const&, cpp_int const&, local_ref< java::lang::String > const&);
		void enforceCallingPermission(local_ref< java::lang::String > const&, local_ref< java::lang::String > const&);
		void enforceCallingOrSelfPermission(local_ref< java::lang::String > const&, local_ref< java::lang::String > const&);
		void grantUriPermission(local_ref< java::lang::String > const&, local_ref< android::net::Uri > const&, cpp_int const&);
		void revokeUriPermission(local_ref< android::net::Uri > const&, cpp_int const&);
		cpp_int checkUriPermission(local_ref< android::net::Uri > const&, cpp_int const&, cpp_int const&, cpp_int const&);
		cpp_int checkCallingUriPermission(local_ref< android::net::Uri > const&, cpp_int const&);
		cpp_int checkCallingOrSelfUriPermission(local_ref< android::net::Uri > const&, cpp_int const&);
		cpp_int checkUriPermission(local_ref< android::net::Uri > const&, local_ref< java::lang::String > const&, local_ref< java::lang::String > const&, cpp_int const&, cpp_int const&, cpp_int const&);
		void enforceUriPermission(local_ref< android::net::Uri > const&, cpp_int const&, cpp_int const&, cpp_int const&, local_ref< java::lang::String > const&);
		void enforceCallingUriPermission(local_ref< android::net::Uri > const&, cpp_int const&, local_ref< java::lang::String > const&);
		void enforceCallingOrSelfUriPermission(local_ref< android::net::Uri > const&, cpp_int const&, local_ref< java::lang::String > const&);
		void enforceUriPermission(local_ref< android::net::Uri > const&, local_ref< java::lang::String > const&, local_ref< java::lang::String > const&, cpp_int const&, cpp_int const&, cpp_int const&, local_ref< java::lang::String > const&);
		local_ref< android::content::Context > createPackageContext(local_ref< java::lang::String > const&, cpp_int const&);
		cpp_boolean isRestricted();
	}; //class ContextWrapper

} //namespace content
} //namespace android

} //namespace j2cpp

#endif //J2CPP_ANDROID_CONTENT_CONTEXTWRAPPER_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_CONTENT_CONTEXTWRAPPER_HPP_IMPL
#define J2CPP_ANDROID_CONTENT_CONTEXTWRAPPER_HPP_IMPL

namespace j2cpp {



android::content::ContextWrapper::operator local_ref<android::content::Context>() const
{
	return local_ref<android::content::Context>(get_jtype());
}


android::content::ContextWrapper::ContextWrapper(local_ref< android::content::Context > const &a0)
: cpp_object<android::content::ContextWrapper>(
	environment::get().get_jenv()->NewObject(
		get_class<android::content::ContextWrapper::J2CPP_CLASS_NAME>(),
		get_method_id<android::content::ContextWrapper::J2CPP_CLASS_NAME, android::content::ContextWrapper::J2CPP_METHOD_NAME(0), android::content::ContextWrapper::J2CPP_METHOD_SIGNATURE(0), false>(),
		a0.get_jtype()
	)
)
{
}



local_ref< android::content::Context > android::content::ContextWrapper::getBaseContext()
{
	return local_ref< android::content::Context >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>()
		)
	);
}

local_ref< android::content::res::AssetManager > android::content::ContextWrapper::getAssets()
{
	return local_ref< android::content::res::AssetManager >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>()
		)
	);
}

local_ref< android::content::res::Resources > android::content::ContextWrapper::getResources()
{
	return local_ref< android::content::res::Resources >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>()
		)
	);
}

local_ref< android::content::pm::PackageManager > android::content::ContextWrapper::getPackageManager()
{
	return local_ref< android::content::pm::PackageManager >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>()
		)
	);
}

local_ref< android::content::ContentResolver > android::content::ContextWrapper::getContentResolver()
{
	return local_ref< android::content::ContentResolver >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>()
		)
	);
}

local_ref< android::os::Looper > android::content::ContextWrapper::getMainLooper()
{
	return local_ref< android::os::Looper >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(7), J2CPP_METHOD_SIGNATURE(7), false>()
		)
	);
}

local_ref< android::content::Context > android::content::ContextWrapper::getApplicationContext()
{
	return local_ref< android::content::Context >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(8), J2CPP_METHOD_SIGNATURE(8), false>()
		)
	);
}

void android::content::ContextWrapper::setTheme(cpp_int const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(9), J2CPP_METHOD_SIGNATURE(9), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< android::content::res::Resources_::Theme > android::content::ContextWrapper::getTheme()
{
	return local_ref< android::content::res::Resources_::Theme >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(10), J2CPP_METHOD_SIGNATURE(10), false>()
		)
	);
}

local_ref< java::lang::ClassLoader > android::content::ContextWrapper::getClassLoader()
{
	return local_ref< java::lang::ClassLoader >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(11), J2CPP_METHOD_SIGNATURE(11), false>()
		)
	);
}

local_ref< java::lang::String > android::content::ContextWrapper::getPackageName()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(12), J2CPP_METHOD_SIGNATURE(12), false>()
		)
	);
}

local_ref< android::content::pm::ApplicationInfo > android::content::ContextWrapper::getApplicationInfo()
{
	return local_ref< android::content::pm::ApplicationInfo >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(13), J2CPP_METHOD_SIGNATURE(13), false>()
		)
	);
}

local_ref< java::lang::String > android::content::ContextWrapper::getPackageResourcePath()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(14), J2CPP_METHOD_SIGNATURE(14), false>()
		)
	);
}

local_ref< java::lang::String > android::content::ContextWrapper::getPackageCodePath()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(15), J2CPP_METHOD_SIGNATURE(15), false>()
		)
	);
}

local_ref< android::content::SharedPreferences > android::content::ContextWrapper::getSharedPreferences(local_ref< java::lang::String > const &a0, cpp_int const &a1)
{
	return local_ref< android::content::SharedPreferences >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(16), J2CPP_METHOD_SIGNATURE(16), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< java::io::FileInputStream > android::content::ContextWrapper::openFileInput(local_ref< java::lang::String > const &a0)
{
	return local_ref< java::io::FileInputStream >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(17), J2CPP_METHOD_SIGNATURE(17), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::io::FileOutputStream > android::content::ContextWrapper::openFileOutput(local_ref< java::lang::String > const &a0, cpp_int const &a1)
{
	return local_ref< java::io::FileOutputStream >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(18), J2CPP_METHOD_SIGNATURE(18), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_boolean android::content::ContextWrapper::deleteFile(local_ref< java::lang::String > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(19), J2CPP_METHOD_SIGNATURE(19), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::io::File > android::content::ContextWrapper::getFileStreamPath(local_ref< java::lang::String > const &a0)
{
	return local_ref< java::io::File >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(20), J2CPP_METHOD_SIGNATURE(20), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< cpp_object_array<java::lang::String, 1> > android::content::ContextWrapper::fileList()
{
	return local_ref< cpp_object_array<java::lang::String, 1> >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(21), J2CPP_METHOD_SIGNATURE(21), false>()
		)
	);
}

local_ref< java::io::File > android::content::ContextWrapper::getFilesDir()
{
	return local_ref< java::io::File >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(22), J2CPP_METHOD_SIGNATURE(22), false>()
		)
	);
}

local_ref< java::io::File > android::content::ContextWrapper::getCacheDir()
{
	return local_ref< java::io::File >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(23), J2CPP_METHOD_SIGNATURE(23), false>()
		)
	);
}

local_ref< java::io::File > android::content::ContextWrapper::getDir(local_ref< java::lang::String > const &a0, cpp_int const &a1)
{
	return local_ref< java::io::File >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(24), J2CPP_METHOD_SIGNATURE(24), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< android::database::sqlite::SQLiteDatabase > android::content::ContextWrapper::openOrCreateDatabase(local_ref< java::lang::String > const &a0, cpp_int const &a1, local_ref< android::database::sqlite::SQLiteDatabase_::CursorFactory > const &a2)
{
	return local_ref< android::database::sqlite::SQLiteDatabase >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(25), J2CPP_METHOD_SIGNATURE(25), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

cpp_boolean android::content::ContextWrapper::deleteDatabase(local_ref< java::lang::String > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(26), J2CPP_METHOD_SIGNATURE(26), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::io::File > android::content::ContextWrapper::getDatabasePath(local_ref< java::lang::String > const &a0)
{
	return local_ref< java::io::File >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(27), J2CPP_METHOD_SIGNATURE(27), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< cpp_object_array<java::lang::String, 1> > android::content::ContextWrapper::databaseList()
{
	return local_ref< cpp_object_array<java::lang::String, 1> >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(28), J2CPP_METHOD_SIGNATURE(28), false>()
		)
	);
}

local_ref< android::graphics::drawable::Drawable > android::content::ContextWrapper::getWallpaper()
{
	return local_ref< android::graphics::drawable::Drawable >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(29), J2CPP_METHOD_SIGNATURE(29), false>()
		)
	);
}

local_ref< android::graphics::drawable::Drawable > android::content::ContextWrapper::peekWallpaper()
{
	return local_ref< android::graphics::drawable::Drawable >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(30), J2CPP_METHOD_SIGNATURE(30), false>()
		)
	);
}

cpp_int android::content::ContextWrapper::getWallpaperDesiredMinimumWidth()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(31), J2CPP_METHOD_SIGNATURE(31), false>()
		)
	);
}

cpp_int android::content::ContextWrapper::getWallpaperDesiredMinimumHeight()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(32), J2CPP_METHOD_SIGNATURE(32), false>()
		)
	);
}

void android::content::ContextWrapper::setWallpaper(local_ref< android::graphics::Bitmap > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(33), J2CPP_METHOD_SIGNATURE(33), false>(),
			a0.get_jtype()
		)
	);
}

void android::content::ContextWrapper::setWallpaper(local_ref< java::io::InputStream > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(34), J2CPP_METHOD_SIGNATURE(34), false>(),
			a0.get_jtype()
		)
	);
}

void android::content::ContextWrapper::clearWallpaper()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(35), J2CPP_METHOD_SIGNATURE(35), false>()
		)
	);
}

void android::content::ContextWrapper::startActivity(local_ref< android::content::Intent > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(36), J2CPP_METHOD_SIGNATURE(36), false>(),
			a0.get_jtype()
		)
	);
}

void android::content::ContextWrapper::startIntentSender(local_ref< android::content::IntentSender > const &a0, local_ref< android::content::Intent > const &a1, cpp_int const &a2, cpp_int const &a3, cpp_int const &a4)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(37), J2CPP_METHOD_SIGNATURE(37), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype(), a3.get_jtype(), a4.get_jtype()
		)
	);
}

void android::content::ContextWrapper::sendBroadcast(local_ref< android::content::Intent > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(38), J2CPP_METHOD_SIGNATURE(38), false>(),
			a0.get_jtype()
		)
	);
}

void android::content::ContextWrapper::sendBroadcast(local_ref< android::content::Intent > const &a0, local_ref< java::lang::String > const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(39), J2CPP_METHOD_SIGNATURE(39), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void android::content::ContextWrapper::sendOrderedBroadcast(local_ref< android::content::Intent > const &a0, local_ref< java::lang::String > const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(40), J2CPP_METHOD_SIGNATURE(40), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void android::content::ContextWrapper::sendOrderedBroadcast(local_ref< android::content::Intent > const &a0, local_ref< java::lang::String > const &a1, local_ref< android::content::BroadcastReceiver > const &a2, local_ref< android::os::Handler > const &a3, cpp_int const &a4, local_ref< java::lang::String > const &a5, local_ref< android::os::Bundle > const &a6)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(41), J2CPP_METHOD_SIGNATURE(41), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype(), a3.get_jtype(), a4.get_jtype(), a5.get_jtype(), a6.get_jtype()
		)
	);
}

void android::content::ContextWrapper::sendStickyBroadcast(local_ref< android::content::Intent > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(42), J2CPP_METHOD_SIGNATURE(42), false>(),
			a0.get_jtype()
		)
	);
}

void android::content::ContextWrapper::sendStickyOrderedBroadcast(local_ref< android::content::Intent > const &a0, local_ref< android::content::BroadcastReceiver > const &a1, local_ref< android::os::Handler > const &a2, cpp_int const &a3, local_ref< java::lang::String > const &a4, local_ref< android::os::Bundle > const &a5)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(43), J2CPP_METHOD_SIGNATURE(43), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype(), a3.get_jtype(), a4.get_jtype(), a5.get_jtype()
		)
	);
}

void android::content::ContextWrapper::removeStickyBroadcast(local_ref< android::content::Intent > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(44), J2CPP_METHOD_SIGNATURE(44), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< android::content::Intent > android::content::ContextWrapper::registerReceiver(local_ref< android::content::BroadcastReceiver > const &a0, local_ref< android::content::IntentFilter > const &a1)
{
	return local_ref< android::content::Intent >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(45), J2CPP_METHOD_SIGNATURE(45), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< android::content::Intent > android::content::ContextWrapper::registerReceiver(local_ref< android::content::BroadcastReceiver > const &a0, local_ref< android::content::IntentFilter > const &a1, local_ref< java::lang::String > const &a2, local_ref< android::os::Handler > const &a3)
{
	return local_ref< android::content::Intent >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(46), J2CPP_METHOD_SIGNATURE(46), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype(), a3.get_jtype()
		)
	);
}

void android::content::ContextWrapper::unregisterReceiver(local_ref< android::content::BroadcastReceiver > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(47), J2CPP_METHOD_SIGNATURE(47), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< android::content::ComponentName > android::content::ContextWrapper::startService(local_ref< android::content::Intent > const &a0)
{
	return local_ref< android::content::ComponentName >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(48), J2CPP_METHOD_SIGNATURE(48), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean android::content::ContextWrapper::stopService(local_ref< android::content::Intent > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(49), J2CPP_METHOD_SIGNATURE(49), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean android::content::ContextWrapper::bindService(local_ref< android::content::Intent > const &a0, local_ref< android::content::ServiceConnection > const &a1, cpp_int const &a2)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(50), J2CPP_METHOD_SIGNATURE(50), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

void android::content::ContextWrapper::unbindService(local_ref< android::content::ServiceConnection > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(51), J2CPP_METHOD_SIGNATURE(51), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean android::content::ContextWrapper::startInstrumentation(local_ref< android::content::ComponentName > const &a0, local_ref< java::lang::String > const &a1, local_ref< android::os::Bundle > const &a2)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(52), J2CPP_METHOD_SIGNATURE(52), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

local_ref< java::lang::Object > android::content::ContextWrapper::getSystemService(local_ref< java::lang::String > const &a0)
{
	return local_ref< java::lang::Object >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(53), J2CPP_METHOD_SIGNATURE(53), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int android::content::ContextWrapper::checkPermission(local_ref< java::lang::String > const &a0, cpp_int const &a1, cpp_int const &a2)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(54), J2CPP_METHOD_SIGNATURE(54), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

cpp_int android::content::ContextWrapper::checkCallingPermission(local_ref< java::lang::String > const &a0)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(55), J2CPP_METHOD_SIGNATURE(55), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int android::content::ContextWrapper::checkCallingOrSelfPermission(local_ref< java::lang::String > const &a0)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(56), J2CPP_METHOD_SIGNATURE(56), false>(),
			a0.get_jtype()
		)
	);
}

void android::content::ContextWrapper::enforcePermission(local_ref< java::lang::String > const &a0, cpp_int const &a1, cpp_int const &a2, local_ref< java::lang::String > const &a3)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(57), J2CPP_METHOD_SIGNATURE(57), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype(), a3.get_jtype()
		)
	);
}

void android::content::ContextWrapper::enforceCallingPermission(local_ref< java::lang::String > const &a0, local_ref< java::lang::String > const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(58), J2CPP_METHOD_SIGNATURE(58), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void android::content::ContextWrapper::enforceCallingOrSelfPermission(local_ref< java::lang::String > const &a0, local_ref< java::lang::String > const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(59), J2CPP_METHOD_SIGNATURE(59), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void android::content::ContextWrapper::grantUriPermission(local_ref< java::lang::String > const &a0, local_ref< android::net::Uri > const &a1, cpp_int const &a2)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(60), J2CPP_METHOD_SIGNATURE(60), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

void android::content::ContextWrapper::revokeUriPermission(local_ref< android::net::Uri > const &a0, cpp_int const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(61), J2CPP_METHOD_SIGNATURE(61), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_int android::content::ContextWrapper::checkUriPermission(local_ref< android::net::Uri > const &a0, cpp_int const &a1, cpp_int const &a2, cpp_int const &a3)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(62), J2CPP_METHOD_SIGNATURE(62), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype(), a3.get_jtype()
		)
	);
}

cpp_int android::content::ContextWrapper::checkCallingUriPermission(local_ref< android::net::Uri > const &a0, cpp_int const &a1)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(63), J2CPP_METHOD_SIGNATURE(63), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_int android::content::ContextWrapper::checkCallingOrSelfUriPermission(local_ref< android::net::Uri > const &a0, cpp_int const &a1)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(64), J2CPP_METHOD_SIGNATURE(64), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_int android::content::ContextWrapper::checkUriPermission(local_ref< android::net::Uri > const &a0, local_ref< java::lang::String > const &a1, local_ref< java::lang::String > const &a2, cpp_int const &a3, cpp_int const &a4, cpp_int const &a5)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(65), J2CPP_METHOD_SIGNATURE(65), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype(), a3.get_jtype(), a4.get_jtype(), a5.get_jtype()
		)
	);
}

void android::content::ContextWrapper::enforceUriPermission(local_ref< android::net::Uri > const &a0, cpp_int const &a1, cpp_int const &a2, cpp_int const &a3, local_ref< java::lang::String > const &a4)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(66), J2CPP_METHOD_SIGNATURE(66), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype(), a3.get_jtype(), a4.get_jtype()
		)
	);
}

void android::content::ContextWrapper::enforceCallingUriPermission(local_ref< android::net::Uri > const &a0, cpp_int const &a1, local_ref< java::lang::String > const &a2)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(67), J2CPP_METHOD_SIGNATURE(67), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

void android::content::ContextWrapper::enforceCallingOrSelfUriPermission(local_ref< android::net::Uri > const &a0, cpp_int const &a1, local_ref< java::lang::String > const &a2)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(68), J2CPP_METHOD_SIGNATURE(68), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

void android::content::ContextWrapper::enforceUriPermission(local_ref< android::net::Uri > const &a0, local_ref< java::lang::String > const &a1, local_ref< java::lang::String > const &a2, cpp_int const &a3, cpp_int const &a4, cpp_int const &a5, local_ref< java::lang::String > const &a6)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(69), J2CPP_METHOD_SIGNATURE(69), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype(), a3.get_jtype(), a4.get_jtype(), a5.get_jtype(), a6.get_jtype()
		)
	);
}

local_ref< android::content::Context > android::content::ContextWrapper::createPackageContext(local_ref< java::lang::String > const &a0, cpp_int const &a1)
{
	return local_ref< android::content::Context >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(70), J2CPP_METHOD_SIGNATURE(70), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_boolean android::content::ContextWrapper::isRestricted()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(71), J2CPP_METHOD_SIGNATURE(71), false>()
		)
	);
}


J2CPP_DEFINE_CLASS(android::content::ContextWrapper,"android/content/ContextWrapper")
J2CPP_DEFINE_METHOD(android::content::ContextWrapper,0,"<init>","(Landroid/content/Context;)V")
J2CPP_DEFINE_METHOD(android::content::ContextWrapper,1,"attachBaseContext","(Landroid/content/Context;)V")
J2CPP_DEFINE_METHOD(android::content::ContextWrapper,2,"getBaseContext","()Landroid/content/Context;")
J2CPP_DEFINE_METHOD(android::content::ContextWrapper,3,"getAssets","()Landroid/content/res/AssetManager;")
J2CPP_DEFINE_METHOD(android::content::ContextWrapper,4,"getResources","()Landroid/content/res/Resources;")
J2CPP_DEFINE_METHOD(android::content::ContextWrapper,5,"getPackageManager","()Landroid/content/pm/PackageManager;")
J2CPP_DEFINE_METHOD(android::content::ContextWrapper,6,"getContentResolver","()Landroid/content/ContentResolver;")
J2CPP_DEFINE_METHOD(android::content::ContextWrapper,7,"getMainLooper","()Landroid/os/Looper;")
J2CPP_DEFINE_METHOD(android::content::ContextWrapper,8,"getApplicationContext","()Landroid/content/Context;")
J2CPP_DEFINE_METHOD(android::content::ContextWrapper,9,"setTheme","(I)V")
J2CPP_DEFINE_METHOD(android::content::ContextWrapper,10,"getTheme","()Landroid/content/res/Resources$Theme;")
J2CPP_DEFINE_METHOD(android::content::ContextWrapper,11,"getClassLoader","()Ljava/lang/ClassLoader;")
J2CPP_DEFINE_METHOD(android::content::ContextWrapper,12,"getPackageName","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(android::content::ContextWrapper,13,"getApplicationInfo","()Landroid/content/pm/ApplicationInfo;")
J2CPP_DEFINE_METHOD(android::content::ContextWrapper,14,"getPackageResourcePath","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(android::content::ContextWrapper,15,"getPackageCodePath","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(android::content::ContextWrapper,16,"getSharedPreferences","(Ljava/lang/String;I)Landroid/content/SharedPreferences;")
J2CPP_DEFINE_METHOD(android::content::ContextWrapper,17,"openFileInput","(Ljava/lang/String;)Ljava/io/FileInputStream;")
J2CPP_DEFINE_METHOD(android::content::ContextWrapper,18,"openFileOutput","(Ljava/lang/String;I)Ljava/io/FileOutputStream;")
J2CPP_DEFINE_METHOD(android::content::ContextWrapper,19,"deleteFile","(Ljava/lang/String;)Z")
J2CPP_DEFINE_METHOD(android::content::ContextWrapper,20,"getFileStreamPath","(Ljava/lang/String;)Ljava/io/File;")
J2CPP_DEFINE_METHOD(android::content::ContextWrapper,21,"fileList","()[java.lang.String")
J2CPP_DEFINE_METHOD(android::content::ContextWrapper,22,"getFilesDir","()Ljava/io/File;")
J2CPP_DEFINE_METHOD(android::content::ContextWrapper,23,"getCacheDir","()Ljava/io/File;")
J2CPP_DEFINE_METHOD(android::content::ContextWrapper,24,"getDir","(Ljava/lang/String;I)Ljava/io/File;")
J2CPP_DEFINE_METHOD(android::content::ContextWrapper,25,"openOrCreateDatabase","(Ljava/lang/String;ILandroid/database/sqlite/SQLiteDatabase$CursorFactory;)Landroid/database/sqlite/SQLiteDatabase;")
J2CPP_DEFINE_METHOD(android::content::ContextWrapper,26,"deleteDatabase","(Ljava/lang/String;)Z")
J2CPP_DEFINE_METHOD(android::content::ContextWrapper,27,"getDatabasePath","(Ljava/lang/String;)Ljava/io/File;")
J2CPP_DEFINE_METHOD(android::content::ContextWrapper,28,"databaseList","()[java.lang.String")
J2CPP_DEFINE_METHOD(android::content::ContextWrapper,29,"getWallpaper","()Landroid/graphics/drawable/Drawable;")
J2CPP_DEFINE_METHOD(android::content::ContextWrapper,30,"peekWallpaper","()Landroid/graphics/drawable/Drawable;")
J2CPP_DEFINE_METHOD(android::content::ContextWrapper,31,"getWallpaperDesiredMinimumWidth","()I")
J2CPP_DEFINE_METHOD(android::content::ContextWrapper,32,"getWallpaperDesiredMinimumHeight","()I")
J2CPP_DEFINE_METHOD(android::content::ContextWrapper,33,"setWallpaper","(Landroid/graphics/Bitmap;)V")
J2CPP_DEFINE_METHOD(android::content::ContextWrapper,34,"setWallpaper","(Ljava/io/InputStream;)V")
J2CPP_DEFINE_METHOD(android::content::ContextWrapper,35,"clearWallpaper","()V")
J2CPP_DEFINE_METHOD(android::content::ContextWrapper,36,"startActivity","(Landroid/content/Intent;)V")
J2CPP_DEFINE_METHOD(android::content::ContextWrapper,37,"startIntentSender","(Landroid/content/IntentSender;Landroid/content/Intent;III)V")
J2CPP_DEFINE_METHOD(android::content::ContextWrapper,38,"sendBroadcast","(Landroid/content/Intent;)V")
J2CPP_DEFINE_METHOD(android::content::ContextWrapper,39,"sendBroadcast","(Landroid/content/Intent;Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(android::content::ContextWrapper,40,"sendOrderedBroadcast","(Landroid/content/Intent;Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(android::content::ContextWrapper,41,"sendOrderedBroadcast","(Landroid/content/Intent;Ljava/lang/String;Landroid/content/BroadcastReceiver;Landroid/os/Handler;ILjava/lang/String;Landroid/os/Bundle;)V")
J2CPP_DEFINE_METHOD(android::content::ContextWrapper,42,"sendStickyBroadcast","(Landroid/content/Intent;)V")
J2CPP_DEFINE_METHOD(android::content::ContextWrapper,43,"sendStickyOrderedBroadcast","(Landroid/content/Intent;Landroid/content/BroadcastReceiver;Landroid/os/Handler;ILjava/lang/String;Landroid/os/Bundle;)V")
J2CPP_DEFINE_METHOD(android::content::ContextWrapper,44,"removeStickyBroadcast","(Landroid/content/Intent;)V")
J2CPP_DEFINE_METHOD(android::content::ContextWrapper,45,"registerReceiver","(Landroid/content/BroadcastReceiver;Landroid/content/IntentFilter;)Landroid/content/Intent;")
J2CPP_DEFINE_METHOD(android::content::ContextWrapper,46,"registerReceiver","(Landroid/content/BroadcastReceiver;Landroid/content/IntentFilter;Ljava/lang/String;Landroid/os/Handler;)Landroid/content/Intent;")
J2CPP_DEFINE_METHOD(android::content::ContextWrapper,47,"unregisterReceiver","(Landroid/content/BroadcastReceiver;)V")
J2CPP_DEFINE_METHOD(android::content::ContextWrapper,48,"startService","(Landroid/content/Intent;)Landroid/content/ComponentName;")
J2CPP_DEFINE_METHOD(android::content::ContextWrapper,49,"stopService","(Landroid/content/Intent;)Z")
J2CPP_DEFINE_METHOD(android::content::ContextWrapper,50,"bindService","(Landroid/content/Intent;Landroid/content/ServiceConnection;I)Z")
J2CPP_DEFINE_METHOD(android::content::ContextWrapper,51,"unbindService","(Landroid/content/ServiceConnection;)V")
J2CPP_DEFINE_METHOD(android::content::ContextWrapper,52,"startInstrumentation","(Landroid/content/ComponentName;Ljava/lang/String;Landroid/os/Bundle;)Z")
J2CPP_DEFINE_METHOD(android::content::ContextWrapper,53,"getSystemService","(Ljava/lang/String;)Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(android::content::ContextWrapper,54,"checkPermission","(Ljava/lang/String;II)I")
J2CPP_DEFINE_METHOD(android::content::ContextWrapper,55,"checkCallingPermission","(Ljava/lang/String;)I")
J2CPP_DEFINE_METHOD(android::content::ContextWrapper,56,"checkCallingOrSelfPermission","(Ljava/lang/String;)I")
J2CPP_DEFINE_METHOD(android::content::ContextWrapper,57,"enforcePermission","(Ljava/lang/String;IILjava/lang/String;)V")
J2CPP_DEFINE_METHOD(android::content::ContextWrapper,58,"enforceCallingPermission","(Ljava/lang/String;Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(android::content::ContextWrapper,59,"enforceCallingOrSelfPermission","(Ljava/lang/String;Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(android::content::ContextWrapper,60,"grantUriPermission","(Ljava/lang/String;Landroid/net/Uri;I)V")
J2CPP_DEFINE_METHOD(android::content::ContextWrapper,61,"revokeUriPermission","(Landroid/net/Uri;I)V")
J2CPP_DEFINE_METHOD(android::content::ContextWrapper,62,"checkUriPermission","(Landroid/net/Uri;III)I")
J2CPP_DEFINE_METHOD(android::content::ContextWrapper,63,"checkCallingUriPermission","(Landroid/net/Uri;I)I")
J2CPP_DEFINE_METHOD(android::content::ContextWrapper,64,"checkCallingOrSelfUriPermission","(Landroid/net/Uri;I)I")
J2CPP_DEFINE_METHOD(android::content::ContextWrapper,65,"checkUriPermission","(Landroid/net/Uri;Ljava/lang/String;Ljava/lang/String;III)I")
J2CPP_DEFINE_METHOD(android::content::ContextWrapper,66,"enforceUriPermission","(Landroid/net/Uri;IIILjava/lang/String;)V")
J2CPP_DEFINE_METHOD(android::content::ContextWrapper,67,"enforceCallingUriPermission","(Landroid/net/Uri;ILjava/lang/String;)V")
J2CPP_DEFINE_METHOD(android::content::ContextWrapper,68,"enforceCallingOrSelfUriPermission","(Landroid/net/Uri;ILjava/lang/String;)V")
J2CPP_DEFINE_METHOD(android::content::ContextWrapper,69,"enforceUriPermission","(Landroid/net/Uri;Ljava/lang/String;Ljava/lang/String;IIILjava/lang/String;)V")
J2CPP_DEFINE_METHOD(android::content::ContextWrapper,70,"createPackageContext","(Ljava/lang/String;I)Landroid/content/Context;")
J2CPP_DEFINE_METHOD(android::content::ContextWrapper,71,"isRestricted","()Z")

} //namespace j2cpp

#endif //J2CPP_ANDROID_CONTENT_CONTEXTWRAPPER_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
