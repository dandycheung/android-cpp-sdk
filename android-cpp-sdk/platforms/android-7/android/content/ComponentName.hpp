/*================================================================================
  code generated by: java2cpp
  class: android.content.ComponentName
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_CONTENT_COMPONENTNAME_HPP_DECL
#define J2CPP_ANDROID_CONTENT_COMPONENTNAME_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace lang { class Class; } } }
namespace j2cpp { namespace java { namespace lang { class Comparable; } } }
namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace android { namespace content { class Context; } } }
namespace j2cpp { namespace android { namespace os { class Parcel; } } }
namespace j2cpp { namespace android { namespace os { class Parcelable; } } }
namespace j2cpp { namespace android { namespace os { namespace Parcelable_ { class Creator; } } } }


#include <android/content/Context.hpp>
#include <android/os/Parcel.hpp>
#include <android/os/Parcelable.hpp>
#include <java/lang/Class.hpp>
#include <java/lang/Comparable.hpp>
#include <java/lang/Object.hpp>
#include <java/lang/String.hpp>


namespace j2cpp {

namespace android { namespace content {

	class ComponentName;
	class ComponentName
		: public cpp_object<ComponentName>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_METHOD(12)
		J2CPP_DECLARE_METHOD(13)
		J2CPP_DECLARE_METHOD(14)
		J2CPP_DECLARE_METHOD(15)
		J2CPP_DECLARE_METHOD(16)
		J2CPP_DECLARE_METHOD(17)
		J2CPP_DECLARE_METHOD(18)
		J2CPP_DECLARE_METHOD(19)
		J2CPP_DECLARE_METHOD(20)
		J2CPP_DECLARE_FIELD(0)

		explicit ComponentName(jobject jobj)
		: cpp_object<ComponentName>(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;
		operator local_ref<android::os::Parcelable>() const;
		operator local_ref<java::lang::Comparable>() const;


		ComponentName(local_ref< java::lang::String > const&, local_ref< java::lang::String > const&);
		ComponentName(local_ref< android::content::Context > const&, local_ref< java::lang::String > const&);
		ComponentName(local_ref< android::content::Context > const&, local_ref< java::lang::Class > const&);
		ComponentName(local_ref< android::os::Parcel > const&);
		local_ref< java::lang::String > getPackageName();
		local_ref< java::lang::String > getClassName();
		local_ref< java::lang::String > getShortClassName();
		local_ref< java::lang::String > flattenToString();
		local_ref< java::lang::String > flattenToShortString();
		static local_ref< android::content::ComponentName > unflattenFromString(local_ref< java::lang::String > const&);
		local_ref< java::lang::String > toShortString();
		local_ref< java::lang::String > toString();
		cpp_boolean equals(local_ref< java::lang::Object > const&);
		cpp_int hashCode();
		cpp_int compareTo(local_ref< android::content::ComponentName > const&);
		cpp_int describeContents();
		void writeToParcel(local_ref< android::os::Parcel > const&, cpp_int const&);
		static void writeToParcel(local_ref< android::content::ComponentName > const&, local_ref< android::os::Parcel > const&);
		static local_ref< android::content::ComponentName > readFromParcel(local_ref< android::os::Parcel > const&);
		cpp_int compareTo(local_ref< java::lang::Object > const&);

		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(0), J2CPP_FIELD_SIGNATURE(0), local_ref< android::os::Parcelable_::Creator > > CREATOR;
	}; //class ComponentName

} //namespace content
} //namespace android

} //namespace j2cpp

#endif //J2CPP_ANDROID_CONTENT_COMPONENTNAME_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_CONTENT_COMPONENTNAME_HPP_IMPL
#define J2CPP_ANDROID_CONTENT_COMPONENTNAME_HPP_IMPL

namespace j2cpp {



android::content::ComponentName::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jtype());
}

android::content::ComponentName::operator local_ref<android::os::Parcelable>() const
{
	return local_ref<android::os::Parcelable>(get_jtype());
}

android::content::ComponentName::operator local_ref<java::lang::Comparable>() const
{
	return local_ref<java::lang::Comparable>(get_jtype());
}


android::content::ComponentName::ComponentName(local_ref< java::lang::String > const &a0, local_ref< java::lang::String > const &a1)
: cpp_object<android::content::ComponentName>(
	environment::get().get_jenv()->NewObject(
		get_class<android::content::ComponentName::J2CPP_CLASS_NAME>(),
		get_method_id<android::content::ComponentName::J2CPP_CLASS_NAME, android::content::ComponentName::J2CPP_METHOD_NAME(0), android::content::ComponentName::J2CPP_METHOD_SIGNATURE(0), false>(),
		a0.get_jtype(), a1.get_jtype()
	)
)
{
}



android::content::ComponentName::ComponentName(local_ref< android::content::Context > const &a0, local_ref< java::lang::String > const &a1)
: cpp_object<android::content::ComponentName>(
	environment::get().get_jenv()->NewObject(
		get_class<android::content::ComponentName::J2CPP_CLASS_NAME>(),
		get_method_id<android::content::ComponentName::J2CPP_CLASS_NAME, android::content::ComponentName::J2CPP_METHOD_NAME(1), android::content::ComponentName::J2CPP_METHOD_SIGNATURE(1), false>(),
		a0.get_jtype(), a1.get_jtype()
	)
)
{
}



android::content::ComponentName::ComponentName(local_ref< android::content::Context > const &a0, local_ref< java::lang::Class > const &a1)
: cpp_object<android::content::ComponentName>(
	environment::get().get_jenv()->NewObject(
		get_class<android::content::ComponentName::J2CPP_CLASS_NAME>(),
		get_method_id<android::content::ComponentName::J2CPP_CLASS_NAME, android::content::ComponentName::J2CPP_METHOD_NAME(2), android::content::ComponentName::J2CPP_METHOD_SIGNATURE(2), false>(),
		a0.get_jtype(), a1.get_jtype()
	)
)
{
}



android::content::ComponentName::ComponentName(local_ref< android::os::Parcel > const &a0)
: cpp_object<android::content::ComponentName>(
	environment::get().get_jenv()->NewObject(
		get_class<android::content::ComponentName::J2CPP_CLASS_NAME>(),
		get_method_id<android::content::ComponentName::J2CPP_CLASS_NAME, android::content::ComponentName::J2CPP_METHOD_NAME(3), android::content::ComponentName::J2CPP_METHOD_SIGNATURE(3), false>(),
		a0.get_jtype()
	)
)
{
}


local_ref< java::lang::String > android::content::ComponentName::getPackageName()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>()
		)
	);
}

local_ref< java::lang::String > android::content::ComponentName::getClassName()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>()
		)
	);
}

local_ref< java::lang::String > android::content::ComponentName::getShortClassName()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>()
		)
	);
}

local_ref< java::lang::String > android::content::ComponentName::flattenToString()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(7), J2CPP_METHOD_SIGNATURE(7), false>()
		)
	);
}

local_ref< java::lang::String > android::content::ComponentName::flattenToShortString()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(8), J2CPP_METHOD_SIGNATURE(8), false>()
		)
	);
}

local_ref< android::content::ComponentName > android::content::ComponentName::unflattenFromString(local_ref< java::lang::String > const &a0)
{
	return local_ref< android::content::ComponentName >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(9), J2CPP_METHOD_SIGNATURE(9), true>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::String > android::content::ComponentName::toShortString()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(10), J2CPP_METHOD_SIGNATURE(10), false>()
		)
	);
}

local_ref< java::lang::String > android::content::ComponentName::toString()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(11), J2CPP_METHOD_SIGNATURE(11), false>()
		)
	);
}

cpp_boolean android::content::ComponentName::equals(local_ref< java::lang::Object > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(12), J2CPP_METHOD_SIGNATURE(12), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int android::content::ComponentName::hashCode()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(13), J2CPP_METHOD_SIGNATURE(13), false>()
		)
	);
}

cpp_int android::content::ComponentName::compareTo(local_ref< android::content::ComponentName > const &a0)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(14), J2CPP_METHOD_SIGNATURE(14), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int android::content::ComponentName::describeContents()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(15), J2CPP_METHOD_SIGNATURE(15), false>()
		)
	);
}

void android::content::ComponentName::writeToParcel(local_ref< android::os::Parcel > const &a0, cpp_int const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(16), J2CPP_METHOD_SIGNATURE(16), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void android::content::ComponentName::writeToParcel(local_ref< android::content::ComponentName > const &a0, local_ref< android::os::Parcel > const &a1)
{
	return void(
		environment::get().get_jenv()->CallStaticVoidMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(17), J2CPP_METHOD_SIGNATURE(17), true>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< android::content::ComponentName > android::content::ComponentName::readFromParcel(local_ref< android::os::Parcel > const &a0)
{
	return local_ref< android::content::ComponentName >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(18), J2CPP_METHOD_SIGNATURE(18), true>(),
			a0.get_jtype()
		)
	);
}

cpp_int android::content::ComponentName::compareTo(local_ref< java::lang::Object > const &a0)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(19), J2CPP_METHOD_SIGNATURE(19), false>(),
			a0.get_jtype()
		)
	);
}



static_field<
	android::content::ComponentName::J2CPP_CLASS_NAME,
	android::content::ComponentName::J2CPP_FIELD_NAME(0),
	android::content::ComponentName::J2CPP_FIELD_SIGNATURE(0),
	local_ref< android::os::Parcelable_::Creator >
> android::content::ComponentName::CREATOR;


J2CPP_DEFINE_CLASS(android::content::ComponentName,"android/content/ComponentName")
J2CPP_DEFINE_METHOD(android::content::ComponentName,0,"<init>","(Ljava/lang/String;Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(android::content::ComponentName,1,"<init>","(Landroid/content/Context;Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(android::content::ComponentName,2,"<init>","(Landroid/content/Context;Ljava/lang/Class;)V")
J2CPP_DEFINE_METHOD(android::content::ComponentName,3,"<init>","(Landroid/os/Parcel;)V")
J2CPP_DEFINE_METHOD(android::content::ComponentName,4,"getPackageName","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(android::content::ComponentName,5,"getClassName","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(android::content::ComponentName,6,"getShortClassName","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(android::content::ComponentName,7,"flattenToString","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(android::content::ComponentName,8,"flattenToShortString","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(android::content::ComponentName,9,"unflattenFromString","(Ljava/lang/String;)Landroid/content/ComponentName;")
J2CPP_DEFINE_METHOD(android::content::ComponentName,10,"toShortString","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(android::content::ComponentName,11,"toString","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(android::content::ComponentName,12,"equals","(Ljava/lang/Object;)Z")
J2CPP_DEFINE_METHOD(android::content::ComponentName,13,"hashCode","()I")
J2CPP_DEFINE_METHOD(android::content::ComponentName,14,"compareTo","(Landroid/content/ComponentName;)I")
J2CPP_DEFINE_METHOD(android::content::ComponentName,15,"describeContents","()I")
J2CPP_DEFINE_METHOD(android::content::ComponentName,16,"writeToParcel","(Landroid/os/Parcel;I)V")
J2CPP_DEFINE_METHOD(android::content::ComponentName,17,"writeToParcel","(Landroid/content/ComponentName;Landroid/os/Parcel;)V")
J2CPP_DEFINE_METHOD(android::content::ComponentName,18,"readFromParcel","(Landroid/os/Parcel;)Landroid/content/ComponentName;")
J2CPP_DEFINE_METHOD(android::content::ComponentName,19,"compareTo","(Ljava/lang/Object;)I")
J2CPP_DEFINE_METHOD(android::content::ComponentName,20,"<clinit>","()V")
J2CPP_DEFINE_FIELD(android::content::ComponentName,0,"CREATOR","Landroid/os/Parcelable$Creator;")

} //namespace j2cpp

#endif //J2CPP_ANDROID_CONTENT_COMPONENTNAME_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
