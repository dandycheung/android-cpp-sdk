/*================================================================================
  code generated by: java2cpp
  class: android.widget.Adapter
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_WIDGET_ADAPTER_HPP_DECL
#define J2CPP_ANDROID_WIDGET_ADAPTER_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace android { namespace database { class DataSetObserver; } } }
namespace j2cpp { namespace android { namespace view { class View; } } }
namespace j2cpp { namespace android { namespace view { class ViewGroup; } } }


#include <android/database/DataSetObserver.hpp>
#include <android/view/View.hpp>
#include <android/view/ViewGroup.hpp>
#include <java/lang/Object.hpp>


namespace j2cpp {

namespace android { namespace widget {

	class Adapter;
	class Adapter
		: public cpp_object<Adapter>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_FIELD(0)
		J2CPP_DECLARE_FIELD(1)

		explicit Adapter(jobject jobj)
		: cpp_object<Adapter>(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;


		void registerDataSetObserver(local_ref< android::database::DataSetObserver > const&);
		void unregisterDataSetObserver(local_ref< android::database::DataSetObserver > const&);
		cpp_int getCount();
		local_ref< java::lang::Object > getItem(cpp_int const&);
		cpp_long getItemId(cpp_int const&);
		cpp_boolean hasStableIds();
		local_ref< android::view::View > getView(cpp_int const&, local_ref< android::view::View > const&, local_ref< android::view::ViewGroup > const&);
		cpp_int getItemViewType(cpp_int const&);
		cpp_int getViewTypeCount();
		cpp_boolean isEmpty();

		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(0), J2CPP_FIELD_SIGNATURE(0), cpp_int > IGNORE_ITEM_VIEW_TYPE;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(1), J2CPP_FIELD_SIGNATURE(1), cpp_int > NO_SELECTION;
	}; //class Adapter

} //namespace widget
} //namespace android

} //namespace j2cpp

#endif //J2CPP_ANDROID_WIDGET_ADAPTER_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_WIDGET_ADAPTER_HPP_IMPL
#define J2CPP_ANDROID_WIDGET_ADAPTER_HPP_IMPL

namespace j2cpp {



android::widget::Adapter::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jtype());
}

void android::widget::Adapter::registerDataSetObserver(local_ref< android::database::DataSetObserver > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(0), J2CPP_METHOD_SIGNATURE(0), false>(),
			a0.get_jtype()
		)
	);
}

void android::widget::Adapter::unregisterDataSetObserver(local_ref< android::database::DataSetObserver > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int android::widget::Adapter::getCount()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>()
		)
	);
}

local_ref< java::lang::Object > android::widget::Adapter::getItem(cpp_int const &a0)
{
	return local_ref< java::lang::Object >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>(),
			a0.get_jtype()
		)
	);
}

cpp_long android::widget::Adapter::getItemId(cpp_int const &a0)
{
	return cpp_long(
		environment::get().get_jenv()->CallLongMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean android::widget::Adapter::hasStableIds()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>()
		)
	);
}

local_ref< android::view::View > android::widget::Adapter::getView(cpp_int const &a0, local_ref< android::view::View > const &a1, local_ref< android::view::ViewGroup > const &a2)
{
	return local_ref< android::view::View >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

cpp_int android::widget::Adapter::getItemViewType(cpp_int const &a0)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(7), J2CPP_METHOD_SIGNATURE(7), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int android::widget::Adapter::getViewTypeCount()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(8), J2CPP_METHOD_SIGNATURE(8), false>()
		)
	);
}

cpp_boolean android::widget::Adapter::isEmpty()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(9), J2CPP_METHOD_SIGNATURE(9), false>()
		)
	);
}


static_field<
	android::widget::Adapter::J2CPP_CLASS_NAME,
	android::widget::Adapter::J2CPP_FIELD_NAME(0),
	android::widget::Adapter::J2CPP_FIELD_SIGNATURE(0),
	cpp_int
> android::widget::Adapter::IGNORE_ITEM_VIEW_TYPE;

static_field<
	android::widget::Adapter::J2CPP_CLASS_NAME,
	android::widget::Adapter::J2CPP_FIELD_NAME(1),
	android::widget::Adapter::J2CPP_FIELD_SIGNATURE(1),
	cpp_int
> android::widget::Adapter::NO_SELECTION;


J2CPP_DEFINE_CLASS(android::widget::Adapter,"android/widget/Adapter")
J2CPP_DEFINE_METHOD(android::widget::Adapter,0,"registerDataSetObserver","(Landroid/database/DataSetObserver;)V")
J2CPP_DEFINE_METHOD(android::widget::Adapter,1,"unregisterDataSetObserver","(Landroid/database/DataSetObserver;)V")
J2CPP_DEFINE_METHOD(android::widget::Adapter,2,"getCount","()I")
J2CPP_DEFINE_METHOD(android::widget::Adapter,3,"getItem","(I)Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(android::widget::Adapter,4,"getItemId","(I)J")
J2CPP_DEFINE_METHOD(android::widget::Adapter,5,"hasStableIds","()Z")
J2CPP_DEFINE_METHOD(android::widget::Adapter,6,"getView","(ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;")
J2CPP_DEFINE_METHOD(android::widget::Adapter,7,"getItemViewType","(I)I")
J2CPP_DEFINE_METHOD(android::widget::Adapter,8,"getViewTypeCount","()I")
J2CPP_DEFINE_METHOD(android::widget::Adapter,9,"isEmpty","()Z")
J2CPP_DEFINE_FIELD(android::widget::Adapter,0,"IGNORE_ITEM_VIEW_TYPE","I")
J2CPP_DEFINE_FIELD(android::widget::Adapter,1,"NO_SELECTION","I")

} //namespace j2cpp

#endif //J2CPP_ANDROID_WIDGET_ADAPTER_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
