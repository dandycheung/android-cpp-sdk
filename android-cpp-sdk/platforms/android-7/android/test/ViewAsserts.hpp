/*================================================================================
  code generated by: java2cpp
  class: android.test.ViewAsserts
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_TEST_VIEWASSERTS_HPP_DECL
#define J2CPP_ANDROID_TEST_VIEWASSERTS_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace android { namespace view { class View; } } }
namespace j2cpp { namespace android { namespace view { class ViewGroup; } } }


#include <android/view/View.hpp>
#include <android/view/ViewGroup.hpp>
#include <java/lang/Object.hpp>


namespace j2cpp {

namespace android { namespace test {

	class ViewAsserts;
	class ViewAsserts
		: public cpp_object<ViewAsserts>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_METHOD(12)
		J2CPP_DECLARE_METHOD(13)
		J2CPP_DECLARE_METHOD(14)
		J2CPP_DECLARE_METHOD(15)
		J2CPP_DECLARE_METHOD(16)
		J2CPP_DECLARE_METHOD(17)
		J2CPP_DECLARE_METHOD(18)

		explicit ViewAsserts(jobject jobj)
		: cpp_object<ViewAsserts>(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;


		static void assertOnScreen(local_ref< android::view::View > const&, local_ref< android::view::View > const&);
		static void assertOffScreenBelow(local_ref< android::view::View > const&, local_ref< android::view::View > const&);
		static void assertOffScreenAbove(local_ref< android::view::View > const&, local_ref< android::view::View > const&);
		static void assertHasScreenCoordinates(local_ref< android::view::View > const&, local_ref< android::view::View > const&, cpp_int const&, cpp_int const&);
		static void assertBaselineAligned(local_ref< android::view::View > const&, local_ref< android::view::View > const&);
		static void assertRightAligned(local_ref< android::view::View > const&, local_ref< android::view::View > const&);
		static void assertRightAligned(local_ref< android::view::View > const&, local_ref< android::view::View > const&, cpp_int const&);
		static void assertLeftAligned(local_ref< android::view::View > const&, local_ref< android::view::View > const&);
		static void assertLeftAligned(local_ref< android::view::View > const&, local_ref< android::view::View > const&, cpp_int const&);
		static void assertBottomAligned(local_ref< android::view::View > const&, local_ref< android::view::View > const&);
		static void assertBottomAligned(local_ref< android::view::View > const&, local_ref< android::view::View > const&, cpp_int const&);
		static void assertTopAligned(local_ref< android::view::View > const&, local_ref< android::view::View > const&);
		static void assertTopAligned(local_ref< android::view::View > const&, local_ref< android::view::View > const&, cpp_int const&);
		static void assertHorizontalCenterAligned(local_ref< android::view::View > const&, local_ref< android::view::View > const&);
		static void assertVerticalCenterAligned(local_ref< android::view::View > const&, local_ref< android::view::View > const&);
		static void assertGroupIntegrity(local_ref< android::view::ViewGroup > const&);
		static void assertGroupContains(local_ref< android::view::ViewGroup > const&, local_ref< android::view::View > const&);
		static void assertGroupNotContains(local_ref< android::view::ViewGroup > const&, local_ref< android::view::View > const&);
	}; //class ViewAsserts

} //namespace test
} //namespace android

} //namespace j2cpp

#endif //J2CPP_ANDROID_TEST_VIEWASSERTS_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_TEST_VIEWASSERTS_HPP_IMPL
#define J2CPP_ANDROID_TEST_VIEWASSERTS_HPP_IMPL

namespace j2cpp {



android::test::ViewAsserts::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jtype());
}


void android::test::ViewAsserts::assertOnScreen(local_ref< android::view::View > const &a0, local_ref< android::view::View > const &a1)
{
	return void(
		environment::get().get_jenv()->CallStaticVoidMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), true>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void android::test::ViewAsserts::assertOffScreenBelow(local_ref< android::view::View > const &a0, local_ref< android::view::View > const &a1)
{
	return void(
		environment::get().get_jenv()->CallStaticVoidMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), true>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void android::test::ViewAsserts::assertOffScreenAbove(local_ref< android::view::View > const &a0, local_ref< android::view::View > const &a1)
{
	return void(
		environment::get().get_jenv()->CallStaticVoidMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), true>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void android::test::ViewAsserts::assertHasScreenCoordinates(local_ref< android::view::View > const &a0, local_ref< android::view::View > const &a1, cpp_int const &a2, cpp_int const &a3)
{
	return void(
		environment::get().get_jenv()->CallStaticVoidMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), true>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype(), a3.get_jtype()
		)
	);
}

void android::test::ViewAsserts::assertBaselineAligned(local_ref< android::view::View > const &a0, local_ref< android::view::View > const &a1)
{
	return void(
		environment::get().get_jenv()->CallStaticVoidMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), true>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void android::test::ViewAsserts::assertRightAligned(local_ref< android::view::View > const &a0, local_ref< android::view::View > const &a1)
{
	return void(
		environment::get().get_jenv()->CallStaticVoidMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), true>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void android::test::ViewAsserts::assertRightAligned(local_ref< android::view::View > const &a0, local_ref< android::view::View > const &a1, cpp_int const &a2)
{
	return void(
		environment::get().get_jenv()->CallStaticVoidMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(7), J2CPP_METHOD_SIGNATURE(7), true>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

void android::test::ViewAsserts::assertLeftAligned(local_ref< android::view::View > const &a0, local_ref< android::view::View > const &a1)
{
	return void(
		environment::get().get_jenv()->CallStaticVoidMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(8), J2CPP_METHOD_SIGNATURE(8), true>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void android::test::ViewAsserts::assertLeftAligned(local_ref< android::view::View > const &a0, local_ref< android::view::View > const &a1, cpp_int const &a2)
{
	return void(
		environment::get().get_jenv()->CallStaticVoidMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(9), J2CPP_METHOD_SIGNATURE(9), true>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

void android::test::ViewAsserts::assertBottomAligned(local_ref< android::view::View > const &a0, local_ref< android::view::View > const &a1)
{
	return void(
		environment::get().get_jenv()->CallStaticVoidMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(10), J2CPP_METHOD_SIGNATURE(10), true>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void android::test::ViewAsserts::assertBottomAligned(local_ref< android::view::View > const &a0, local_ref< android::view::View > const &a1, cpp_int const &a2)
{
	return void(
		environment::get().get_jenv()->CallStaticVoidMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(11), J2CPP_METHOD_SIGNATURE(11), true>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

void android::test::ViewAsserts::assertTopAligned(local_ref< android::view::View > const &a0, local_ref< android::view::View > const &a1)
{
	return void(
		environment::get().get_jenv()->CallStaticVoidMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(12), J2CPP_METHOD_SIGNATURE(12), true>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void android::test::ViewAsserts::assertTopAligned(local_ref< android::view::View > const &a0, local_ref< android::view::View > const &a1, cpp_int const &a2)
{
	return void(
		environment::get().get_jenv()->CallStaticVoidMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(13), J2CPP_METHOD_SIGNATURE(13), true>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

void android::test::ViewAsserts::assertHorizontalCenterAligned(local_ref< android::view::View > const &a0, local_ref< android::view::View > const &a1)
{
	return void(
		environment::get().get_jenv()->CallStaticVoidMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(14), J2CPP_METHOD_SIGNATURE(14), true>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void android::test::ViewAsserts::assertVerticalCenterAligned(local_ref< android::view::View > const &a0, local_ref< android::view::View > const &a1)
{
	return void(
		environment::get().get_jenv()->CallStaticVoidMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(15), J2CPP_METHOD_SIGNATURE(15), true>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void android::test::ViewAsserts::assertGroupIntegrity(local_ref< android::view::ViewGroup > const &a0)
{
	return void(
		environment::get().get_jenv()->CallStaticVoidMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(16), J2CPP_METHOD_SIGNATURE(16), true>(),
			a0.get_jtype()
		)
	);
}

void android::test::ViewAsserts::assertGroupContains(local_ref< android::view::ViewGroup > const &a0, local_ref< android::view::View > const &a1)
{
	return void(
		environment::get().get_jenv()->CallStaticVoidMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(17), J2CPP_METHOD_SIGNATURE(17), true>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void android::test::ViewAsserts::assertGroupNotContains(local_ref< android::view::ViewGroup > const &a0, local_ref< android::view::View > const &a1)
{
	return void(
		environment::get().get_jenv()->CallStaticVoidMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(18), J2CPP_METHOD_SIGNATURE(18), true>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}


J2CPP_DEFINE_CLASS(android::test::ViewAsserts,"android/test/ViewAsserts")
J2CPP_DEFINE_METHOD(android::test::ViewAsserts,0,"<init>","()V")
J2CPP_DEFINE_METHOD(android::test::ViewAsserts,1,"assertOnScreen","(Landroid/view/View;Landroid/view/View;)V")
J2CPP_DEFINE_METHOD(android::test::ViewAsserts,2,"assertOffScreenBelow","(Landroid/view/View;Landroid/view/View;)V")
J2CPP_DEFINE_METHOD(android::test::ViewAsserts,3,"assertOffScreenAbove","(Landroid/view/View;Landroid/view/View;)V")
J2CPP_DEFINE_METHOD(android::test::ViewAsserts,4,"assertHasScreenCoordinates","(Landroid/view/View;Landroid/view/View;II)V")
J2CPP_DEFINE_METHOD(android::test::ViewAsserts,5,"assertBaselineAligned","(Landroid/view/View;Landroid/view/View;)V")
J2CPP_DEFINE_METHOD(android::test::ViewAsserts,6,"assertRightAligned","(Landroid/view/View;Landroid/view/View;)V")
J2CPP_DEFINE_METHOD(android::test::ViewAsserts,7,"assertRightAligned","(Landroid/view/View;Landroid/view/View;I)V")
J2CPP_DEFINE_METHOD(android::test::ViewAsserts,8,"assertLeftAligned","(Landroid/view/View;Landroid/view/View;)V")
J2CPP_DEFINE_METHOD(android::test::ViewAsserts,9,"assertLeftAligned","(Landroid/view/View;Landroid/view/View;I)V")
J2CPP_DEFINE_METHOD(android::test::ViewAsserts,10,"assertBottomAligned","(Landroid/view/View;Landroid/view/View;)V")
J2CPP_DEFINE_METHOD(android::test::ViewAsserts,11,"assertBottomAligned","(Landroid/view/View;Landroid/view/View;I)V")
J2CPP_DEFINE_METHOD(android::test::ViewAsserts,12,"assertTopAligned","(Landroid/view/View;Landroid/view/View;)V")
J2CPP_DEFINE_METHOD(android::test::ViewAsserts,13,"assertTopAligned","(Landroid/view/View;Landroid/view/View;I)V")
J2CPP_DEFINE_METHOD(android::test::ViewAsserts,14,"assertHorizontalCenterAligned","(Landroid/view/View;Landroid/view/View;)V")
J2CPP_DEFINE_METHOD(android::test::ViewAsserts,15,"assertVerticalCenterAligned","(Landroid/view/View;Landroid/view/View;)V")
J2CPP_DEFINE_METHOD(android::test::ViewAsserts,16,"assertGroupIntegrity","(Landroid/view/ViewGroup;)V")
J2CPP_DEFINE_METHOD(android::test::ViewAsserts,17,"assertGroupContains","(Landroid/view/ViewGroup;Landroid/view/View;)V")
J2CPP_DEFINE_METHOD(android::test::ViewAsserts,18,"assertGroupNotContains","(Landroid/view/ViewGroup;Landroid/view/View;)V")

} //namespace j2cpp

#endif //J2CPP_ANDROID_TEST_VIEWASSERTS_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
