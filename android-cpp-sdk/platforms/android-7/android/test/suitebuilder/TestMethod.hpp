/*================================================================================
  code generated by: java2cpp
  class: android.test.suitebuilder.TestMethod
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_TEST_SUITEBUILDER_TESTMETHOD_HPP_DECL
#define J2CPP_ANDROID_TEST_SUITEBUILDER_TESTMETHOD_HPP_DECL


namespace j2cpp { namespace junit { namespace framework { class TestCase; } } }
namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace lang { class Class; } } }
namespace j2cpp { namespace java { namespace lang { namespace annotation { class Annotation; } } } }
namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace lang { namespace reflect { class Method; } } } }


#include <java/lang/Class.hpp>
#include <java/lang/Object.hpp>
#include <java/lang/String.hpp>
#include <java/lang/annotation/Annotation.hpp>
#include <java/lang/reflect/Method.hpp>
#include <junit/framework/TestCase.hpp>


namespace j2cpp {

namespace android { namespace test { namespace suitebuilder {

	class TestMethod;
	class TestMethod
		: public cpp_object<TestMethod>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)

		TestMethod(jobject jobj)
		: cpp_object<TestMethod>(jobj)
		{
		}

		local_ref< java::lang::String > getName();
		local_ref< java::lang::String > getEnclosingClassname();
		local_ref< java::lang::annotation::Annotation > getAnnotation(local_ref< java::lang::Class > const&);
		local_ref< java::lang::Class > getEnclosingClass();
		local_ref< junit::framework::TestCase > createTest();
		cpp_boolean equals(local_ref< java::lang::Object > const&);
		cpp_int hashCode();
		local_ref< java::lang::String > toString();
	}; //class TestMethod

} //namespace suitebuilder
} //namespace test
} //namespace android


} //namespace j2cpp

#endif //J2CPP_ANDROID_TEST_SUITEBUILDER_TESTMETHOD_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_TEST_SUITEBUILDER_TESTMETHOD_HPP_IMPL
#define J2CPP_ANDROID_TEST_SUITEBUILDER_TESTMETHOD_HPP_IMPL

namespace j2cpp {


template <>
local_ref< android::test::suitebuilder::TestMethod > create< android::test::suitebuilder::TestMethod>(local_ref< java::lang::reflect::Method > const &a0, local_ref< java::lang::Class > const &a1)
{
	return local_ref< android::test::suitebuilder::TestMethod >(
		environment::get().get_jenv()->NewObject(
			get_class<android::test::suitebuilder::TestMethod::J2CPP_CLASS_NAME>(),
			get_method_id<android::test::suitebuilder::TestMethod::J2CPP_CLASS_NAME, android::test::suitebuilder::TestMethod::J2CPP_METHOD_NAME(0), android::test::suitebuilder::TestMethod::J2CPP_METHOD_SIGNATURE(0), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

template <>
local_ref< android::test::suitebuilder::TestMethod > create< android::test::suitebuilder::TestMethod>(local_ref< java::lang::String > const &a0, local_ref< java::lang::Class > const &a1)
{
	return local_ref< android::test::suitebuilder::TestMethod >(
		environment::get().get_jenv()->NewObject(
			get_class<android::test::suitebuilder::TestMethod::J2CPP_CLASS_NAME>(),
			get_method_id<android::test::suitebuilder::TestMethod::J2CPP_CLASS_NAME, android::test::suitebuilder::TestMethod::J2CPP_METHOD_NAME(1), android::test::suitebuilder::TestMethod::J2CPP_METHOD_SIGNATURE(1), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

template <>
local_ref< android::test::suitebuilder::TestMethod > create< android::test::suitebuilder::TestMethod>(local_ref< junit::framework::TestCase > const &a0)
{
	return local_ref< android::test::suitebuilder::TestMethod >(
		environment::get().get_jenv()->NewObject(
			get_class<android::test::suitebuilder::TestMethod::J2CPP_CLASS_NAME>(),
			get_method_id<android::test::suitebuilder::TestMethod::J2CPP_CLASS_NAME, android::test::suitebuilder::TestMethod::J2CPP_METHOD_NAME(2), android::test::suitebuilder::TestMethod::J2CPP_METHOD_SIGNATURE(2), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::String > android::test::suitebuilder::TestMethod::getName()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>()
		)
	);
}

local_ref< java::lang::String > android::test::suitebuilder::TestMethod::getEnclosingClassname()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>()
		)
	);
}

local_ref< java::lang::annotation::Annotation > android::test::suitebuilder::TestMethod::getAnnotation(local_ref< java::lang::Class > const &a0)
{
	return local_ref< java::lang::annotation::Annotation >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::Class > android::test::suitebuilder::TestMethod::getEnclosingClass()
{
	return local_ref< java::lang::Class >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>()
		)
	);
}

local_ref< junit::framework::TestCase > android::test::suitebuilder::TestMethod::createTest()
{
	return local_ref< junit::framework::TestCase >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(7), J2CPP_METHOD_SIGNATURE(7), false>()
		)
	);
}

cpp_boolean android::test::suitebuilder::TestMethod::equals(local_ref< java::lang::Object > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(8), J2CPP_METHOD_SIGNATURE(8), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int android::test::suitebuilder::TestMethod::hashCode()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(9), J2CPP_METHOD_SIGNATURE(9), false>()
		)
	);
}

local_ref< java::lang::String > android::test::suitebuilder::TestMethod::toString()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(10), J2CPP_METHOD_SIGNATURE(10), false>()
		)
	);
}


J2CPP_DEFINE_CLASS(android::test::suitebuilder::TestMethod,"android/test/suitebuilder/TestMethod")
J2CPP_DEFINE_METHOD(android::test::suitebuilder::TestMethod,0,"<init>","(Ljava/lang/reflect/Method;Ljava/lang/Class;)V")
J2CPP_DEFINE_METHOD(android::test::suitebuilder::TestMethod,1,"<init>","(Ljava/lang/String;Ljava/lang/Class;)V")
J2CPP_DEFINE_METHOD(android::test::suitebuilder::TestMethod,2,"<init>","(Ljunit/framework/TestCase;)V")
J2CPP_DEFINE_METHOD(android::test::suitebuilder::TestMethod,3,"getName","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(android::test::suitebuilder::TestMethod,4,"getEnclosingClassname","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(android::test::suitebuilder::TestMethod,5,"getAnnotation","(Ljava/lang/Class;)Ljava/lang/annotation/Annotation;")
J2CPP_DEFINE_METHOD(android::test::suitebuilder::TestMethod,6,"getEnclosingClass","()Ljava/lang/Class;")
J2CPP_DEFINE_METHOD(android::test::suitebuilder::TestMethod,7,"createTest","()Ljunit/framework/TestCase;")
J2CPP_DEFINE_METHOD(android::test::suitebuilder::TestMethod,8,"equals","(Ljava/lang/Object;)Z")
J2CPP_DEFINE_METHOD(android::test::suitebuilder::TestMethod,9,"hashCode","()I")
J2CPP_DEFINE_METHOD(android::test::suitebuilder::TestMethod,10,"toString","()Ljava/lang/String;")

} //namespace j2cpp

#endif //J2CPP_ANDROID_TEST_SUITEBUILDER_TESTMETHOD_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
