/*================================================================================
  code generated by: java2cpp
  class: android.test.PerformanceTestCase
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_TEST_PERFORMANCETESTCASE_HPP_DECL
#define J2CPP_ANDROID_TEST_PERFORMANCETESTCASE_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace android { namespace test { namespace PerformanceTestCase_ { class Intermediates; } } } }


#include <android/test/PerformanceTestCase.hpp>
#include <java/lang/Object.hpp>
#include <java/lang/String.hpp>


namespace j2cpp {

namespace android { namespace test {

	class PerformanceTestCase;
	namespace PerformanceTestCase_ {

		class Intermediates;
		class Intermediates
			: public cpp_object<Intermediates>
		{
		public:

			J2CPP_DECLARE_CLASS

			J2CPP_DECLARE_METHOD(0)
			J2CPP_DECLARE_METHOD(1)
			J2CPP_DECLARE_METHOD(2)
			J2CPP_DECLARE_METHOD(3)
			J2CPP_DECLARE_METHOD(4)

			explicit Intermediates(jobject jobj)
			: cpp_object<Intermediates>(jobj)
			{
			}

			operator local_ref<java::lang::Object>() const;


			void setInternalIterations(cpp_int const&);
			void startTiming(cpp_boolean const&);
			void addIntermediate(local_ref< java::lang::String > const&);
			void addIntermediate(local_ref< java::lang::String > const&, cpp_long const&);
			void finishTiming(cpp_boolean const&);
		}; //class Intermediates

	} //namespace PerformanceTestCase_

	class PerformanceTestCase
		: public cpp_object<PerformanceTestCase>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)

		typedef PerformanceTestCase_::Intermediates Intermediates;

		explicit PerformanceTestCase(jobject jobj)
		: cpp_object<PerformanceTestCase>(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;


		cpp_int startPerformance(local_ref< android::test::PerformanceTestCase_::Intermediates > const&);
		cpp_boolean isPerformanceOnly();
	}; //class PerformanceTestCase

} //namespace test
} //namespace android

} //namespace j2cpp

#endif //J2CPP_ANDROID_TEST_PERFORMANCETESTCASE_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_TEST_PERFORMANCETESTCASE_HPP_IMPL
#define J2CPP_ANDROID_TEST_PERFORMANCETESTCASE_HPP_IMPL

namespace j2cpp {




android::test::PerformanceTestCase_::Intermediates::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jtype());
}

void android::test::PerformanceTestCase_::Intermediates::setInternalIterations(cpp_int const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(0), J2CPP_METHOD_SIGNATURE(0), false>(),
			a0.get_jtype()
		)
	);
}

void android::test::PerformanceTestCase_::Intermediates::startTiming(cpp_boolean const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), false>(),
			a0.get_jtype()
		)
	);
}

void android::test::PerformanceTestCase_::Intermediates::addIntermediate(local_ref< java::lang::String > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>(),
			a0.get_jtype()
		)
	);
}

void android::test::PerformanceTestCase_::Intermediates::addIntermediate(local_ref< java::lang::String > const &a0, cpp_long const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void android::test::PerformanceTestCase_::Intermediates::finishTiming(cpp_boolean const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>(),
			a0.get_jtype()
		)
	);
}


J2CPP_DEFINE_CLASS(android::test::PerformanceTestCase_::Intermediates,"android/test/PerformanceTestCase$Intermediates")
J2CPP_DEFINE_METHOD(android::test::PerformanceTestCase_::Intermediates,0,"setInternalIterations","(I)V")
J2CPP_DEFINE_METHOD(android::test::PerformanceTestCase_::Intermediates,1,"startTiming","(Z)V")
J2CPP_DEFINE_METHOD(android::test::PerformanceTestCase_::Intermediates,2,"addIntermediate","(Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(android::test::PerformanceTestCase_::Intermediates,3,"addIntermediate","(Ljava/lang/String;J)V")
J2CPP_DEFINE_METHOD(android::test::PerformanceTestCase_::Intermediates,4,"finishTiming","(Z)V")



android::test::PerformanceTestCase::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jtype());
}

cpp_int android::test::PerformanceTestCase::startPerformance(local_ref< android::test::PerformanceTestCase_::Intermediates > const &a0)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(0), J2CPP_METHOD_SIGNATURE(0), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean android::test::PerformanceTestCase::isPerformanceOnly()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), false>()
		)
	);
}


J2CPP_DEFINE_CLASS(android::test::PerformanceTestCase,"android/test/PerformanceTestCase")
J2CPP_DEFINE_METHOD(android::test::PerformanceTestCase,0,"startPerformance","(Landroid/test/PerformanceTestCase$Intermediates;)I")
J2CPP_DEFINE_METHOD(android::test::PerformanceTestCase,1,"isPerformanceOnly","()Z")

} //namespace j2cpp

#endif //J2CPP_ANDROID_TEST_PERFORMANCETESTCASE_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
