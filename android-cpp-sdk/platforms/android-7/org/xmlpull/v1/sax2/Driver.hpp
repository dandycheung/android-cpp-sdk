/*================================================================================
  code generated by: java2cpp
  class: org.xmlpull.v1.sax2.Driver
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ORG_XMLPULL_V1_SAX2_DRIVER_HPP_DECL
#define J2CPP_ORG_XMLPULL_V1_SAX2_DRIVER_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace org { namespace xmlpull { namespace v1 { class XmlPullParser; } } } }
namespace j2cpp { namespace org { namespace xml { namespace sax { class ContentHandler; } } } }
namespace j2cpp { namespace org { namespace xml { namespace sax { class EntityResolver; } } } }
namespace j2cpp { namespace org { namespace xml { namespace sax { class ErrorHandler; } } } }
namespace j2cpp { namespace org { namespace xml { namespace sax { class InputSource; } } } }
namespace j2cpp { namespace org { namespace xml { namespace sax { class DTDHandler; } } } }
namespace j2cpp { namespace org { namespace xml { namespace sax { class Attributes; } } } }
namespace j2cpp { namespace org { namespace xml { namespace sax { class Locator; } } } }
namespace j2cpp { namespace org { namespace xml { namespace sax { class XMLReader; } } } }


#include <java/lang/Object.hpp>
#include <java/lang/String.hpp>
#include <org/xml/sax/Attributes.hpp>
#include <org/xml/sax/ContentHandler.hpp>
#include <org/xml/sax/DTDHandler.hpp>
#include <org/xml/sax/EntityResolver.hpp>
#include <org/xml/sax/ErrorHandler.hpp>
#include <org/xml/sax/InputSource.hpp>
#include <org/xml/sax/Locator.hpp>
#include <org/xml/sax/XMLReader.hpp>
#include <org/xmlpull/v1/XmlPullParser.hpp>


namespace j2cpp {

namespace org { namespace xmlpull { namespace v1 { namespace sax2 {

	class Driver;
	class Driver
		: public cpp_object<Driver>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_METHOD(12)
		J2CPP_DECLARE_METHOD(13)
		J2CPP_DECLARE_METHOD(14)
		J2CPP_DECLARE_METHOD(15)
		J2CPP_DECLARE_METHOD(16)
		J2CPP_DECLARE_METHOD(17)
		J2CPP_DECLARE_METHOD(18)
		J2CPP_DECLARE_METHOD(19)
		J2CPP_DECLARE_METHOD(20)
		J2CPP_DECLARE_METHOD(21)
		J2CPP_DECLARE_METHOD(22)
		J2CPP_DECLARE_METHOD(23)
		J2CPP_DECLARE_METHOD(24)
		J2CPP_DECLARE_METHOD(25)
		J2CPP_DECLARE_METHOD(26)
		J2CPP_DECLARE_METHOD(27)
		J2CPP_DECLARE_METHOD(28)
		J2CPP_DECLARE_METHOD(29)
		J2CPP_DECLARE_METHOD(30)
		J2CPP_DECLARE_METHOD(31)
		J2CPP_DECLARE_METHOD(32)
		J2CPP_DECLARE_METHOD(33)
		J2CPP_DECLARE_FIELD(0)
		J2CPP_DECLARE_FIELD(1)
		J2CPP_DECLARE_FIELD(2)
		J2CPP_DECLARE_FIELD(3)
		J2CPP_DECLARE_FIELD(4)
		J2CPP_DECLARE_FIELD(5)
		J2CPP_DECLARE_FIELD(6)
		J2CPP_DECLARE_FIELD(7)
		J2CPP_DECLARE_FIELD(8)
		J2CPP_DECLARE_FIELD(9)
		J2CPP_DECLARE_FIELD(10)

		explicit Driver(jobject jobj)
		: cpp_object<Driver>(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;
		operator local_ref<org::xml::sax::Locator>() const;
		operator local_ref<org::xml::sax::XMLReader>() const;
		operator local_ref<org::xml::sax::Attributes>() const;


		Driver();
		Driver(local_ref< org::xmlpull::v1::XmlPullParser > const&);
		cpp_int getLength();
		local_ref< java::lang::String > getURI(cpp_int const&);
		local_ref< java::lang::String > getLocalName(cpp_int const&);
		local_ref< java::lang::String > getQName(cpp_int const&);
		local_ref< java::lang::String > getType(cpp_int const&);
		local_ref< java::lang::String > getValue(cpp_int const&);
		cpp_int getIndex(local_ref< java::lang::String > const&, local_ref< java::lang::String > const&);
		cpp_int getIndex(local_ref< java::lang::String > const&);
		local_ref< java::lang::String > getType(local_ref< java::lang::String > const&, local_ref< java::lang::String > const&);
		local_ref< java::lang::String > getType(local_ref< java::lang::String > const&);
		local_ref< java::lang::String > getValue(local_ref< java::lang::String > const&, local_ref< java::lang::String > const&);
		local_ref< java::lang::String > getValue(local_ref< java::lang::String > const&);
		local_ref< java::lang::String > getPublicId();
		local_ref< java::lang::String > getSystemId();
		cpp_int getLineNumber();
		cpp_int getColumnNumber();
		cpp_boolean getFeature(local_ref< java::lang::String > const&);
		void setFeature(local_ref< java::lang::String > const&, cpp_boolean const&);
		local_ref< java::lang::Object > getProperty(local_ref< java::lang::String > const&);
		void setProperty(local_ref< java::lang::String > const&, local_ref< java::lang::Object > const&);
		void setEntityResolver(local_ref< org::xml::sax::EntityResolver > const&);
		local_ref< org::xml::sax::EntityResolver > getEntityResolver();
		void setDTDHandler(local_ref< org::xml::sax::DTDHandler > const&);
		local_ref< org::xml::sax::DTDHandler > getDTDHandler();
		void setContentHandler(local_ref< org::xml::sax::ContentHandler > const&);
		local_ref< org::xml::sax::ContentHandler > getContentHandler();
		void setErrorHandler(local_ref< org::xml::sax::ErrorHandler > const&);
		local_ref< org::xml::sax::ErrorHandler > getErrorHandler();
		void parse(local_ref< org::xml::sax::InputSource > const&);
		void parse(local_ref< java::lang::String > const&);
		void parseSubTree(local_ref< org::xmlpull::v1::XmlPullParser > const&);

	}; //class Driver

} //namespace sax2
} //namespace v1
} //namespace xmlpull
} //namespace org

} //namespace j2cpp

#endif //J2CPP_ORG_XMLPULL_V1_SAX2_DRIVER_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ORG_XMLPULL_V1_SAX2_DRIVER_HPP_IMPL
#define J2CPP_ORG_XMLPULL_V1_SAX2_DRIVER_HPP_IMPL

namespace j2cpp {



org::xmlpull::v1::sax2::Driver::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jtype());
}

org::xmlpull::v1::sax2::Driver::operator local_ref<org::xml::sax::Locator>() const
{
	return local_ref<org::xml::sax::Locator>(get_jtype());
}

org::xmlpull::v1::sax2::Driver::operator local_ref<org::xml::sax::XMLReader>() const
{
	return local_ref<org::xml::sax::XMLReader>(get_jtype());
}

org::xmlpull::v1::sax2::Driver::operator local_ref<org::xml::sax::Attributes>() const
{
	return local_ref<org::xml::sax::Attributes>(get_jtype());
}


org::xmlpull::v1::sax2::Driver::Driver()
: cpp_object<org::xmlpull::v1::sax2::Driver>(
	environment::get().get_jenv()->NewObject(
		get_class<org::xmlpull::v1::sax2::Driver::J2CPP_CLASS_NAME>(),
		get_method_id<org::xmlpull::v1::sax2::Driver::J2CPP_CLASS_NAME, org::xmlpull::v1::sax2::Driver::J2CPP_METHOD_NAME(0), org::xmlpull::v1::sax2::Driver::J2CPP_METHOD_SIGNATURE(0), false>()
	)
)
{
}



org::xmlpull::v1::sax2::Driver::Driver(local_ref< org::xmlpull::v1::XmlPullParser > const &a0)
: cpp_object<org::xmlpull::v1::sax2::Driver>(
	environment::get().get_jenv()->NewObject(
		get_class<org::xmlpull::v1::sax2::Driver::J2CPP_CLASS_NAME>(),
		get_method_id<org::xmlpull::v1::sax2::Driver::J2CPP_CLASS_NAME, org::xmlpull::v1::sax2::Driver::J2CPP_METHOD_NAME(1), org::xmlpull::v1::sax2::Driver::J2CPP_METHOD_SIGNATURE(1), false>(),
		a0.get_jtype()
	)
)
{
}


cpp_int org::xmlpull::v1::sax2::Driver::getLength()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>()
		)
	);
}

local_ref< java::lang::String > org::xmlpull::v1::sax2::Driver::getURI(cpp_int const &a0)
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::String > org::xmlpull::v1::sax2::Driver::getLocalName(cpp_int const &a0)
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::String > org::xmlpull::v1::sax2::Driver::getQName(cpp_int const &a0)
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::String > org::xmlpull::v1::sax2::Driver::getType(cpp_int const &a0)
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::String > org::xmlpull::v1::sax2::Driver::getValue(cpp_int const &a0)
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(7), J2CPP_METHOD_SIGNATURE(7), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int org::xmlpull::v1::sax2::Driver::getIndex(local_ref< java::lang::String > const &a0, local_ref< java::lang::String > const &a1)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(8), J2CPP_METHOD_SIGNATURE(8), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_int org::xmlpull::v1::sax2::Driver::getIndex(local_ref< java::lang::String > const &a0)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(9), J2CPP_METHOD_SIGNATURE(9), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::String > org::xmlpull::v1::sax2::Driver::getType(local_ref< java::lang::String > const &a0, local_ref< java::lang::String > const &a1)
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(10), J2CPP_METHOD_SIGNATURE(10), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< java::lang::String > org::xmlpull::v1::sax2::Driver::getType(local_ref< java::lang::String > const &a0)
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(11), J2CPP_METHOD_SIGNATURE(11), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::String > org::xmlpull::v1::sax2::Driver::getValue(local_ref< java::lang::String > const &a0, local_ref< java::lang::String > const &a1)
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(12), J2CPP_METHOD_SIGNATURE(12), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< java::lang::String > org::xmlpull::v1::sax2::Driver::getValue(local_ref< java::lang::String > const &a0)
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(13), J2CPP_METHOD_SIGNATURE(13), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::String > org::xmlpull::v1::sax2::Driver::getPublicId()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(14), J2CPP_METHOD_SIGNATURE(14), false>()
		)
	);
}

local_ref< java::lang::String > org::xmlpull::v1::sax2::Driver::getSystemId()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(15), J2CPP_METHOD_SIGNATURE(15), false>()
		)
	);
}

cpp_int org::xmlpull::v1::sax2::Driver::getLineNumber()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(16), J2CPP_METHOD_SIGNATURE(16), false>()
		)
	);
}

cpp_int org::xmlpull::v1::sax2::Driver::getColumnNumber()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(17), J2CPP_METHOD_SIGNATURE(17), false>()
		)
	);
}

cpp_boolean org::xmlpull::v1::sax2::Driver::getFeature(local_ref< java::lang::String > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(18), J2CPP_METHOD_SIGNATURE(18), false>(),
			a0.get_jtype()
		)
	);
}

void org::xmlpull::v1::sax2::Driver::setFeature(local_ref< java::lang::String > const &a0, cpp_boolean const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(19), J2CPP_METHOD_SIGNATURE(19), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< java::lang::Object > org::xmlpull::v1::sax2::Driver::getProperty(local_ref< java::lang::String > const &a0)
{
	return local_ref< java::lang::Object >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(20), J2CPP_METHOD_SIGNATURE(20), false>(),
			a0.get_jtype()
		)
	);
}

void org::xmlpull::v1::sax2::Driver::setProperty(local_ref< java::lang::String > const &a0, local_ref< java::lang::Object > const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(21), J2CPP_METHOD_SIGNATURE(21), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void org::xmlpull::v1::sax2::Driver::setEntityResolver(local_ref< org::xml::sax::EntityResolver > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(22), J2CPP_METHOD_SIGNATURE(22), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< org::xml::sax::EntityResolver > org::xmlpull::v1::sax2::Driver::getEntityResolver()
{
	return local_ref< org::xml::sax::EntityResolver >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(23), J2CPP_METHOD_SIGNATURE(23), false>()
		)
	);
}

void org::xmlpull::v1::sax2::Driver::setDTDHandler(local_ref< org::xml::sax::DTDHandler > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(24), J2CPP_METHOD_SIGNATURE(24), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< org::xml::sax::DTDHandler > org::xmlpull::v1::sax2::Driver::getDTDHandler()
{
	return local_ref< org::xml::sax::DTDHandler >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(25), J2CPP_METHOD_SIGNATURE(25), false>()
		)
	);
}

void org::xmlpull::v1::sax2::Driver::setContentHandler(local_ref< org::xml::sax::ContentHandler > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(26), J2CPP_METHOD_SIGNATURE(26), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< org::xml::sax::ContentHandler > org::xmlpull::v1::sax2::Driver::getContentHandler()
{
	return local_ref< org::xml::sax::ContentHandler >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(27), J2CPP_METHOD_SIGNATURE(27), false>()
		)
	);
}

void org::xmlpull::v1::sax2::Driver::setErrorHandler(local_ref< org::xml::sax::ErrorHandler > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(28), J2CPP_METHOD_SIGNATURE(28), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< org::xml::sax::ErrorHandler > org::xmlpull::v1::sax2::Driver::getErrorHandler()
{
	return local_ref< org::xml::sax::ErrorHandler >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(29), J2CPP_METHOD_SIGNATURE(29), false>()
		)
	);
}

void org::xmlpull::v1::sax2::Driver::parse(local_ref< org::xml::sax::InputSource > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(30), J2CPP_METHOD_SIGNATURE(30), false>(),
			a0.get_jtype()
		)
	);
}

void org::xmlpull::v1::sax2::Driver::parse(local_ref< java::lang::String > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(31), J2CPP_METHOD_SIGNATURE(31), false>(),
			a0.get_jtype()
		)
	);
}

void org::xmlpull::v1::sax2::Driver::parseSubTree(local_ref< org::xmlpull::v1::XmlPullParser > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(32), J2CPP_METHOD_SIGNATURE(32), false>(),
			a0.get_jtype()
		)
	);
}




J2CPP_DEFINE_CLASS(org::xmlpull::v1::sax2::Driver,"org/xmlpull/v1/sax2/Driver")
J2CPP_DEFINE_METHOD(org::xmlpull::v1::sax2::Driver,0,"<init>","()V")
J2CPP_DEFINE_METHOD(org::xmlpull::v1::sax2::Driver,1,"<init>","(Lorg/xmlpull/v1/XmlPullParser;)V")
J2CPP_DEFINE_METHOD(org::xmlpull::v1::sax2::Driver,2,"getLength","()I")
J2CPP_DEFINE_METHOD(org::xmlpull::v1::sax2::Driver,3,"getURI","(I)Ljava/lang/String;")
J2CPP_DEFINE_METHOD(org::xmlpull::v1::sax2::Driver,4,"getLocalName","(I)Ljava/lang/String;")
J2CPP_DEFINE_METHOD(org::xmlpull::v1::sax2::Driver,5,"getQName","(I)Ljava/lang/String;")
J2CPP_DEFINE_METHOD(org::xmlpull::v1::sax2::Driver,6,"getType","(I)Ljava/lang/String;")
J2CPP_DEFINE_METHOD(org::xmlpull::v1::sax2::Driver,7,"getValue","(I)Ljava/lang/String;")
J2CPP_DEFINE_METHOD(org::xmlpull::v1::sax2::Driver,8,"getIndex","(Ljava/lang/String;Ljava/lang/String;)I")
J2CPP_DEFINE_METHOD(org::xmlpull::v1::sax2::Driver,9,"getIndex","(Ljava/lang/String;)I")
J2CPP_DEFINE_METHOD(org::xmlpull::v1::sax2::Driver,10,"getType","(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;")
J2CPP_DEFINE_METHOD(org::xmlpull::v1::sax2::Driver,11,"getType","(Ljava/lang/String;)Ljava/lang/String;")
J2CPP_DEFINE_METHOD(org::xmlpull::v1::sax2::Driver,12,"getValue","(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;")
J2CPP_DEFINE_METHOD(org::xmlpull::v1::sax2::Driver,13,"getValue","(Ljava/lang/String;)Ljava/lang/String;")
J2CPP_DEFINE_METHOD(org::xmlpull::v1::sax2::Driver,14,"getPublicId","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(org::xmlpull::v1::sax2::Driver,15,"getSystemId","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(org::xmlpull::v1::sax2::Driver,16,"getLineNumber","()I")
J2CPP_DEFINE_METHOD(org::xmlpull::v1::sax2::Driver,17,"getColumnNumber","()I")
J2CPP_DEFINE_METHOD(org::xmlpull::v1::sax2::Driver,18,"getFeature","(Ljava/lang/String;)Z")
J2CPP_DEFINE_METHOD(org::xmlpull::v1::sax2::Driver,19,"setFeature","(Ljava/lang/String;Z)V")
J2CPP_DEFINE_METHOD(org::xmlpull::v1::sax2::Driver,20,"getProperty","(Ljava/lang/String;)Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(org::xmlpull::v1::sax2::Driver,21,"setProperty","(Ljava/lang/String;Ljava/lang/Object;)V")
J2CPP_DEFINE_METHOD(org::xmlpull::v1::sax2::Driver,22,"setEntityResolver","(Lorg/xml/sax/EntityResolver;)V")
J2CPP_DEFINE_METHOD(org::xmlpull::v1::sax2::Driver,23,"getEntityResolver","()Lorg/xml/sax/EntityResolver;")
J2CPP_DEFINE_METHOD(org::xmlpull::v1::sax2::Driver,24,"setDTDHandler","(Lorg/xml/sax/DTDHandler;)V")
J2CPP_DEFINE_METHOD(org::xmlpull::v1::sax2::Driver,25,"getDTDHandler","()Lorg/xml/sax/DTDHandler;")
J2CPP_DEFINE_METHOD(org::xmlpull::v1::sax2::Driver,26,"setContentHandler","(Lorg/xml/sax/ContentHandler;)V")
J2CPP_DEFINE_METHOD(org::xmlpull::v1::sax2::Driver,27,"getContentHandler","()Lorg/xml/sax/ContentHandler;")
J2CPP_DEFINE_METHOD(org::xmlpull::v1::sax2::Driver,28,"setErrorHandler","(Lorg/xml/sax/ErrorHandler;)V")
J2CPP_DEFINE_METHOD(org::xmlpull::v1::sax2::Driver,29,"getErrorHandler","()Lorg/xml/sax/ErrorHandler;")
J2CPP_DEFINE_METHOD(org::xmlpull::v1::sax2::Driver,30,"parse","(Lorg/xml/sax/InputSource;)V")
J2CPP_DEFINE_METHOD(org::xmlpull::v1::sax2::Driver,31,"parse","(Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(org::xmlpull::v1::sax2::Driver,32,"parseSubTree","(Lorg/xmlpull/v1/XmlPullParser;)V")
J2CPP_DEFINE_METHOD(org::xmlpull::v1::sax2::Driver,33,"startElement","(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V")
J2CPP_DEFINE_FIELD(org::xmlpull::v1::sax2::Driver,0,"DECLARATION_HANDLER_PROPERTY","Ljava/lang/String;")
J2CPP_DEFINE_FIELD(org::xmlpull::v1::sax2::Driver,1,"LEXICAL_HANDLER_PROPERTY","Ljava/lang/String;")
J2CPP_DEFINE_FIELD(org::xmlpull::v1::sax2::Driver,2,"NAMESPACES_FEATURE","Ljava/lang/String;")
J2CPP_DEFINE_FIELD(org::xmlpull::v1::sax2::Driver,3,"NAMESPACE_PREFIXES_FEATURE","Ljava/lang/String;")
J2CPP_DEFINE_FIELD(org::xmlpull::v1::sax2::Driver,4,"VALIDATION_FEATURE","Ljava/lang/String;")
J2CPP_DEFINE_FIELD(org::xmlpull::v1::sax2::Driver,5,"APACHE_SCHEMA_VALIDATION_FEATURE","Ljava/lang/String;")
J2CPP_DEFINE_FIELD(org::xmlpull::v1::sax2::Driver,6,"APACHE_DYNAMIC_VALIDATION_FEATURE","Ljava/lang/String;")
J2CPP_DEFINE_FIELD(org::xmlpull::v1::sax2::Driver,7,"contentHandler","Lorg/xml/sax/ContentHandler;")
J2CPP_DEFINE_FIELD(org::xmlpull::v1::sax2::Driver,8,"errorHandler","Lorg/xml/sax/ErrorHandler;")
J2CPP_DEFINE_FIELD(org::xmlpull::v1::sax2::Driver,9,"systemId","Ljava/lang/String;")
J2CPP_DEFINE_FIELD(org::xmlpull::v1::sax2::Driver,10,"pp","Lorg/xmlpull/v1/XmlPullParser;")

} //namespace j2cpp

#endif //J2CPP_ORG_XMLPULL_V1_SAX2_DRIVER_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
