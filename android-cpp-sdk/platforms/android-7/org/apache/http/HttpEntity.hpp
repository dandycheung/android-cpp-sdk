/*================================================================================
  code generated by: java2cpp
  class: org.apache.http.HttpEntity
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ORG_APACHE_HTTP_HTTPENTITY_HPP_DECL
#define J2CPP_ORG_APACHE_HTTP_HTTPENTITY_HPP_DECL


namespace j2cpp { namespace java { namespace io { class InputStream; } } }
namespace j2cpp { namespace java { namespace io { class OutputStream; } } }
namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace org { namespace apache { namespace http { class Header; } } } }


#include <java/io/InputStream.hpp>
#include <java/io/OutputStream.hpp>
#include <java/lang/Object.hpp>
#include <org/apache/http/Header.hpp>


namespace j2cpp {

namespace org { namespace apache { namespace http {

	class HttpEntity;
	class HttpEntity
		: public cpp_object<HttpEntity>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)

		explicit HttpEntity(jobject jobj)
		: cpp_object<HttpEntity>(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;


		cpp_boolean isRepeatable();
		cpp_boolean isChunked();
		cpp_long getContentLength();
		local_ref< org::apache::http::Header > getContentType();
		local_ref< org::apache::http::Header > getContentEncoding();
		local_ref< java::io::InputStream > getContent();
		void writeTo(local_ref< java::io::OutputStream > const&);
		cpp_boolean isStreaming();
		void consumeContent();
	}; //class HttpEntity

} //namespace http
} //namespace apache
} //namespace org

} //namespace j2cpp

#endif //J2CPP_ORG_APACHE_HTTP_HTTPENTITY_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ORG_APACHE_HTTP_HTTPENTITY_HPP_IMPL
#define J2CPP_ORG_APACHE_HTTP_HTTPENTITY_HPP_IMPL

namespace j2cpp {



org::apache::http::HttpEntity::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jtype());
}

cpp_boolean org::apache::http::HttpEntity::isRepeatable()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(0), J2CPP_METHOD_SIGNATURE(0), false>()
		)
	);
}

cpp_boolean org::apache::http::HttpEntity::isChunked()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), false>()
		)
	);
}

cpp_long org::apache::http::HttpEntity::getContentLength()
{
	return cpp_long(
		environment::get().get_jenv()->CallLongMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>()
		)
	);
}

local_ref< org::apache::http::Header > org::apache::http::HttpEntity::getContentType()
{
	return local_ref< org::apache::http::Header >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>()
		)
	);
}

local_ref< org::apache::http::Header > org::apache::http::HttpEntity::getContentEncoding()
{
	return local_ref< org::apache::http::Header >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>()
		)
	);
}

local_ref< java::io::InputStream > org::apache::http::HttpEntity::getContent()
{
	return local_ref< java::io::InputStream >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>()
		)
	);
}

void org::apache::http::HttpEntity::writeTo(local_ref< java::io::OutputStream > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean org::apache::http::HttpEntity::isStreaming()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(7), J2CPP_METHOD_SIGNATURE(7), false>()
		)
	);
}

void org::apache::http::HttpEntity::consumeContent()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(8), J2CPP_METHOD_SIGNATURE(8), false>()
		)
	);
}


J2CPP_DEFINE_CLASS(org::apache::http::HttpEntity,"org/apache/http/HttpEntity")
J2CPP_DEFINE_METHOD(org::apache::http::HttpEntity,0,"isRepeatable","()Z")
J2CPP_DEFINE_METHOD(org::apache::http::HttpEntity,1,"isChunked","()Z")
J2CPP_DEFINE_METHOD(org::apache::http::HttpEntity,2,"getContentLength","()J")
J2CPP_DEFINE_METHOD(org::apache::http::HttpEntity,3,"getContentType","()Lorg/apache/http/Header;")
J2CPP_DEFINE_METHOD(org::apache::http::HttpEntity,4,"getContentEncoding","()Lorg/apache/http/Header;")
J2CPP_DEFINE_METHOD(org::apache::http::HttpEntity,5,"getContent","()Ljava/io/InputStream;")
J2CPP_DEFINE_METHOD(org::apache::http::HttpEntity,6,"writeTo","(Ljava/io/OutputStream;)V")
J2CPP_DEFINE_METHOD(org::apache::http::HttpEntity,7,"isStreaming","()Z")
J2CPP_DEFINE_METHOD(org::apache::http::HttpEntity,8,"consumeContent","()V")

} //namespace j2cpp

#endif //J2CPP_ORG_APACHE_HTTP_HTTPENTITY_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
