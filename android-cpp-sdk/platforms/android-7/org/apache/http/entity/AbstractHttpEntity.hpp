/*================================================================================
  code generated by: java2cpp
  class: org.apache.http.entity.AbstractHttpEntity
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ORG_APACHE_HTTP_ENTITY_ABSTRACTHTTPENTITY_HPP_DECL
#define J2CPP_ORG_APACHE_HTTP_ENTITY_ABSTRACTHTTPENTITY_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace org { namespace apache { namespace http { class Header; } } } }
namespace j2cpp { namespace org { namespace apache { namespace http { class HttpEntity; } } } }


#include <java/lang/Object.hpp>
#include <java/lang/String.hpp>
#include <org/apache/http/Header.hpp>
#include <org/apache/http/HttpEntity.hpp>


namespace j2cpp {

namespace org { namespace apache { namespace http { namespace entity {

	class AbstractHttpEntity;
	class AbstractHttpEntity
		: public cpp_object<AbstractHttpEntity>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_FIELD(0)
		J2CPP_DECLARE_FIELD(1)
		J2CPP_DECLARE_FIELD(2)

		explicit AbstractHttpEntity(jobject jobj)
		: cpp_object<AbstractHttpEntity>(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;
		operator local_ref<org::apache::http::HttpEntity>() const;


		local_ref< org::apache::http::Header > getContentType();
		local_ref< org::apache::http::Header > getContentEncoding();
		cpp_boolean isChunked();
		void setContentType(local_ref< org::apache::http::Header > const&);
		void setContentType(local_ref< java::lang::String > const&);
		void setContentEncoding(local_ref< org::apache::http::Header > const&);
		void setContentEncoding(local_ref< java::lang::String > const&);
		void setChunked(cpp_boolean const&);
		void consumeContent();

	}; //class AbstractHttpEntity

} //namespace entity
} //namespace http
} //namespace apache
} //namespace org

} //namespace j2cpp

#endif //J2CPP_ORG_APACHE_HTTP_ENTITY_ABSTRACTHTTPENTITY_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ORG_APACHE_HTTP_ENTITY_ABSTRACTHTTPENTITY_HPP_IMPL
#define J2CPP_ORG_APACHE_HTTP_ENTITY_ABSTRACTHTTPENTITY_HPP_IMPL

namespace j2cpp {



org::apache::http::entity::AbstractHttpEntity::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jtype());
}

org::apache::http::entity::AbstractHttpEntity::operator local_ref<org::apache::http::HttpEntity>() const
{
	return local_ref<org::apache::http::HttpEntity>(get_jtype());
}


local_ref< org::apache::http::Header > org::apache::http::entity::AbstractHttpEntity::getContentType()
{
	return local_ref< org::apache::http::Header >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), false>()
		)
	);
}

local_ref< org::apache::http::Header > org::apache::http::entity::AbstractHttpEntity::getContentEncoding()
{
	return local_ref< org::apache::http::Header >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>()
		)
	);
}

cpp_boolean org::apache::http::entity::AbstractHttpEntity::isChunked()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>()
		)
	);
}

void org::apache::http::entity::AbstractHttpEntity::setContentType(local_ref< org::apache::http::Header > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>(),
			a0.get_jtype()
		)
	);
}

void org::apache::http::entity::AbstractHttpEntity::setContentType(local_ref< java::lang::String > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>(),
			a0.get_jtype()
		)
	);
}

void org::apache::http::entity::AbstractHttpEntity::setContentEncoding(local_ref< org::apache::http::Header > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>(),
			a0.get_jtype()
		)
	);
}

void org::apache::http::entity::AbstractHttpEntity::setContentEncoding(local_ref< java::lang::String > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(7), J2CPP_METHOD_SIGNATURE(7), false>(),
			a0.get_jtype()
		)
	);
}

void org::apache::http::entity::AbstractHttpEntity::setChunked(cpp_boolean const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(8), J2CPP_METHOD_SIGNATURE(8), false>(),
			a0.get_jtype()
		)
	);
}

void org::apache::http::entity::AbstractHttpEntity::consumeContent()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(9), J2CPP_METHOD_SIGNATURE(9), false>()
		)
	);
}



J2CPP_DEFINE_CLASS(org::apache::http::entity::AbstractHttpEntity,"org/apache/http/entity/AbstractHttpEntity")
J2CPP_DEFINE_METHOD(org::apache::http::entity::AbstractHttpEntity,0,"<init>","()V")
J2CPP_DEFINE_METHOD(org::apache::http::entity::AbstractHttpEntity,1,"getContentType","()Lorg/apache/http/Header;")
J2CPP_DEFINE_METHOD(org::apache::http::entity::AbstractHttpEntity,2,"getContentEncoding","()Lorg/apache/http/Header;")
J2CPP_DEFINE_METHOD(org::apache::http::entity::AbstractHttpEntity,3,"isChunked","()Z")
J2CPP_DEFINE_METHOD(org::apache::http::entity::AbstractHttpEntity,4,"setContentType","(Lorg/apache/http/Header;)V")
J2CPP_DEFINE_METHOD(org::apache::http::entity::AbstractHttpEntity,5,"setContentType","(Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(org::apache::http::entity::AbstractHttpEntity,6,"setContentEncoding","(Lorg/apache/http/Header;)V")
J2CPP_DEFINE_METHOD(org::apache::http::entity::AbstractHttpEntity,7,"setContentEncoding","(Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(org::apache::http::entity::AbstractHttpEntity,8,"setChunked","(Z)V")
J2CPP_DEFINE_METHOD(org::apache::http::entity::AbstractHttpEntity,9,"consumeContent","()V")
J2CPP_DEFINE_FIELD(org::apache::http::entity::AbstractHttpEntity,0,"contentType","Lorg/apache/http/Header;")
J2CPP_DEFINE_FIELD(org::apache::http::entity::AbstractHttpEntity,1,"contentEncoding","Lorg/apache/http/Header;")
J2CPP_DEFINE_FIELD(org::apache::http::entity::AbstractHttpEntity,2,"chunked","Z")

} //namespace j2cpp

#endif //J2CPP_ORG_APACHE_HTTP_ENTITY_ABSTRACTHTTPENTITY_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
