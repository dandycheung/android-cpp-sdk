/*================================================================================
  code generated by: java2cpp
  class: org.apache.http.conn.EofSensorInputStream
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ORG_APACHE_HTTP_CONN_EOFSENSORINPUTSTREAM_HPP_DECL
#define J2CPP_ORG_APACHE_HTTP_CONN_EOFSENSORINPUTSTREAM_HPP_DECL


namespace j2cpp { namespace java { namespace io { class InputStream; } } }
namespace j2cpp { namespace org { namespace apache { namespace http { namespace conn { class EofSensorWatcher; } } } } }


#include <java/io/InputStream.hpp>
#include <org/apache/http/conn/EofSensorWatcher.hpp>


namespace j2cpp {

namespace org { namespace apache { namespace http { namespace conn {

	class EofSensorInputStream;
	class EofSensorInputStream
		: public cpp_object<EofSensorInputStream>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_FIELD(0)

		EofSensorInputStream(jobject jobj)
		: cpp_object<EofSensorInputStream>(jobj)
		{
		}

		cpp_int read();
		cpp_int read(local_ref< cpp_byte_array<1> > const&, cpp_int const&, cpp_int const&);
		cpp_int read(local_ref< cpp_byte_array<1> > const&);
		cpp_int available();
		void close();
		void releaseConnection();
		void abortConnection();

	}; //class EofSensorInputStream

} //namespace conn
} //namespace http
} //namespace apache
} //namespace org


} //namespace j2cpp

#endif //J2CPP_ORG_APACHE_HTTP_CONN_EOFSENSORINPUTSTREAM_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ORG_APACHE_HTTP_CONN_EOFSENSORINPUTSTREAM_HPP_IMPL
#define J2CPP_ORG_APACHE_HTTP_CONN_EOFSENSORINPUTSTREAM_HPP_IMPL

namespace j2cpp {


template <>
local_ref< org::apache::http::conn::EofSensorInputStream > create< org::apache::http::conn::EofSensorInputStream>(local_ref< java::io::InputStream > const &a0, local_ref< org::apache::http::conn::EofSensorWatcher > const &a1)
{
	return local_ref< org::apache::http::conn::EofSensorInputStream >(
		environment::get().get_jenv()->NewObject(
			get_class<org::apache::http::conn::EofSensorInputStream::J2CPP_CLASS_NAME>(),
			get_method_id<org::apache::http::conn::EofSensorInputStream::J2CPP_CLASS_NAME, org::apache::http::conn::EofSensorInputStream::J2CPP_METHOD_NAME(0), org::apache::http::conn::EofSensorInputStream::J2CPP_METHOD_SIGNATURE(0), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}


cpp_int org::apache::http::conn::EofSensorInputStream::read()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>()
		)
	);
}

cpp_int org::apache::http::conn::EofSensorInputStream::read(local_ref< cpp_byte_array<1> > const &a0, cpp_int const &a1, cpp_int const &a2)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

cpp_int org::apache::http::conn::EofSensorInputStream::read(local_ref< cpp_byte_array<1> > const &a0)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int org::apache::http::conn::EofSensorInputStream::available()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>()
		)
	);
}

void org::apache::http::conn::EofSensorInputStream::close()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>()
		)
	);
}




void org::apache::http::conn::EofSensorInputStream::releaseConnection()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(10), J2CPP_METHOD_SIGNATURE(10), false>()
		)
	);
}

void org::apache::http::conn::EofSensorInputStream::abortConnection()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(11), J2CPP_METHOD_SIGNATURE(11), false>()
		)
	);
}



J2CPP_DEFINE_CLASS(org::apache::http::conn::EofSensorInputStream,"org/apache/http/conn/EofSensorInputStream")
J2CPP_DEFINE_METHOD(org::apache::http::conn::EofSensorInputStream,0,"<init>","(Ljava/io/InputStream;Lorg/apache/http/conn/EofSensorWatcher;)V")
J2CPP_DEFINE_METHOD(org::apache::http::conn::EofSensorInputStream,1,"isReadAllowed","()Z")
J2CPP_DEFINE_METHOD(org::apache::http::conn::EofSensorInputStream,2,"read","()I")
J2CPP_DEFINE_METHOD(org::apache::http::conn::EofSensorInputStream,3,"read","([BII)I")
J2CPP_DEFINE_METHOD(org::apache::http::conn::EofSensorInputStream,4,"read","([B)I")
J2CPP_DEFINE_METHOD(org::apache::http::conn::EofSensorInputStream,5,"available","()I")
J2CPP_DEFINE_METHOD(org::apache::http::conn::EofSensorInputStream,6,"close","()V")
J2CPP_DEFINE_METHOD(org::apache::http::conn::EofSensorInputStream,7,"checkEOF","(I)V")
J2CPP_DEFINE_METHOD(org::apache::http::conn::EofSensorInputStream,8,"checkClose","()V")
J2CPP_DEFINE_METHOD(org::apache::http::conn::EofSensorInputStream,9,"checkAbort","()V")
J2CPP_DEFINE_METHOD(org::apache::http::conn::EofSensorInputStream,10,"releaseConnection","()V")
J2CPP_DEFINE_METHOD(org::apache::http::conn::EofSensorInputStream,11,"abortConnection","()V")
J2CPP_DEFINE_FIELD(org::apache::http::conn::EofSensorInputStream,0,"wrappedStream","Ljava/io/InputStream;")

} //namespace j2cpp

#endif //J2CPP_ORG_APACHE_HTTP_CONN_EOFSENSORINPUTSTREAM_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
