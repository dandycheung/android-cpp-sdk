/*================================================================================
  code generated by: java2cpp
  class: org.apache.http.conn.BasicManagedEntity
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ORG_APACHE_HTTP_CONN_BASICMANAGEDENTITY_HPP_DECL
#define J2CPP_ORG_APACHE_HTTP_CONN_BASICMANAGEDENTITY_HPP_DECL


namespace j2cpp { namespace java { namespace io { class InputStream; } } }
namespace j2cpp { namespace java { namespace io { class OutputStream; } } }
namespace j2cpp { namespace org { namespace apache { namespace http { namespace conn { class ManagedClientConnection; } } } } }
namespace j2cpp { namespace org { namespace apache { namespace http { class HttpEntity; } } } }


#include <java/io/InputStream.hpp>
#include <java/io/OutputStream.hpp>
#include <org/apache/http/HttpEntity.hpp>
#include <org/apache/http/conn/ManagedClientConnection.hpp>


namespace j2cpp {

namespace org { namespace apache { namespace http { namespace conn {

	class BasicManagedEntity;
	class BasicManagedEntity
		: public cpp_object<BasicManagedEntity>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_FIELD(0)
		J2CPP_DECLARE_FIELD(1)

		BasicManagedEntity(jobject jobj)
		: cpp_object<BasicManagedEntity>(jobj)
		{
		}

		cpp_boolean isRepeatable();
		local_ref< java::io::InputStream > getContent();
		void consumeContent();
		void writeTo(local_ref< java::io::OutputStream > const&);
		void releaseConnection();
		void abortConnection();
		cpp_boolean eofDetected(local_ref< java::io::InputStream > const&);
		cpp_boolean streamClosed(local_ref< java::io::InputStream > const&);
		cpp_boolean streamAbort(local_ref< java::io::InputStream > const&);

	}; //class BasicManagedEntity

} //namespace conn
} //namespace http
} //namespace apache
} //namespace org


} //namespace j2cpp

#endif //J2CPP_ORG_APACHE_HTTP_CONN_BASICMANAGEDENTITY_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ORG_APACHE_HTTP_CONN_BASICMANAGEDENTITY_HPP_IMPL
#define J2CPP_ORG_APACHE_HTTP_CONN_BASICMANAGEDENTITY_HPP_IMPL

namespace j2cpp {


template <>
local_ref< org::apache::http::conn::BasicManagedEntity > create< org::apache::http::conn::BasicManagedEntity>(local_ref< org::apache::http::HttpEntity > const &a0, local_ref< org::apache::http::conn::ManagedClientConnection > const &a1, cpp_boolean const &a2)
{
	return local_ref< org::apache::http::conn::BasicManagedEntity >(
		environment::get().get_jenv()->NewObject(
			get_class<org::apache::http::conn::BasicManagedEntity::J2CPP_CLASS_NAME>(),
			get_method_id<org::apache::http::conn::BasicManagedEntity::J2CPP_CLASS_NAME, org::apache::http::conn::BasicManagedEntity::J2CPP_METHOD_NAME(0), org::apache::http::conn::BasicManagedEntity::J2CPP_METHOD_SIGNATURE(0), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

cpp_boolean org::apache::http::conn::BasicManagedEntity::isRepeatable()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), false>()
		)
	);
}

local_ref< java::io::InputStream > org::apache::http::conn::BasicManagedEntity::getContent()
{
	return local_ref< java::io::InputStream >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>()
		)
	);
}

void org::apache::http::conn::BasicManagedEntity::consumeContent()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>()
		)
	);
}

void org::apache::http::conn::BasicManagedEntity::writeTo(local_ref< java::io::OutputStream > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>(),
			a0.get_jtype()
		)
	);
}

void org::apache::http::conn::BasicManagedEntity::releaseConnection()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>()
		)
	);
}

void org::apache::http::conn::BasicManagedEntity::abortConnection()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>()
		)
	);
}

cpp_boolean org::apache::http::conn::BasicManagedEntity::eofDetected(local_ref< java::io::InputStream > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(7), J2CPP_METHOD_SIGNATURE(7), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean org::apache::http::conn::BasicManagedEntity::streamClosed(local_ref< java::io::InputStream > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(8), J2CPP_METHOD_SIGNATURE(8), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean org::apache::http::conn::BasicManagedEntity::streamAbort(local_ref< java::io::InputStream > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(9), J2CPP_METHOD_SIGNATURE(9), false>(),
			a0.get_jtype()
		)
	);
}




J2CPP_DEFINE_CLASS(org::apache::http::conn::BasicManagedEntity,"org/apache/http/conn/BasicManagedEntity")
J2CPP_DEFINE_METHOD(org::apache::http::conn::BasicManagedEntity,0,"<init>","(Lorg/apache/http/HttpEntity;Lorg/apache/http/conn/ManagedClientConnection;Z)V")
J2CPP_DEFINE_METHOD(org::apache::http::conn::BasicManagedEntity,1,"isRepeatable","()Z")
J2CPP_DEFINE_METHOD(org::apache::http::conn::BasicManagedEntity,2,"getContent","()Ljava/io/InputStream;")
J2CPP_DEFINE_METHOD(org::apache::http::conn::BasicManagedEntity,3,"consumeContent","()V")
J2CPP_DEFINE_METHOD(org::apache::http::conn::BasicManagedEntity,4,"writeTo","(Ljava/io/OutputStream;)V")
J2CPP_DEFINE_METHOD(org::apache::http::conn::BasicManagedEntity,5,"releaseConnection","()V")
J2CPP_DEFINE_METHOD(org::apache::http::conn::BasicManagedEntity,6,"abortConnection","()V")
J2CPP_DEFINE_METHOD(org::apache::http::conn::BasicManagedEntity,7,"eofDetected","(Ljava/io/InputStream;)Z")
J2CPP_DEFINE_METHOD(org::apache::http::conn::BasicManagedEntity,8,"streamClosed","(Ljava/io/InputStream;)Z")
J2CPP_DEFINE_METHOD(org::apache::http::conn::BasicManagedEntity,9,"streamAbort","(Ljava/io/InputStream;)Z")
J2CPP_DEFINE_METHOD(org::apache::http::conn::BasicManagedEntity,10,"releaseManagedConnection","()V")
J2CPP_DEFINE_FIELD(org::apache::http::conn::BasicManagedEntity,0,"managedConn","Lorg/apache/http/conn/ManagedClientConnection;")
J2CPP_DEFINE_FIELD(org::apache::http::conn::BasicManagedEntity,1,"attemptReuse","Z")

} //namespace j2cpp

#endif //J2CPP_ORG_APACHE_HTTP_CONN_BASICMANAGEDENTITY_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
