/*================================================================================
  code generated by: java2cpp
  class: org.apache.http.message.ParserCursor
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ORG_APACHE_HTTP_MESSAGE_PARSERCURSOR_HPP_DECL
#define J2CPP_ORG_APACHE_HTTP_MESSAGE_PARSERCURSOR_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class String; } } }


#include <java/lang/String.hpp>


namespace j2cpp {

namespace org { namespace apache { namespace http { namespace message {

	class ParserCursor;
	class ParserCursor
		: public cpp_object<ParserCursor>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)

		ParserCursor(jobject jobj)
		: cpp_object<ParserCursor>(jobj)
		{
		}

		cpp_int getLowerBound();
		cpp_int getUpperBound();
		cpp_int getPos();
		void updatePos(cpp_int const&);
		cpp_boolean atEnd();
		local_ref< java::lang::String > toString();
	}; //class ParserCursor

} //namespace message
} //namespace http
} //namespace apache
} //namespace org


} //namespace j2cpp

#endif //J2CPP_ORG_APACHE_HTTP_MESSAGE_PARSERCURSOR_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ORG_APACHE_HTTP_MESSAGE_PARSERCURSOR_HPP_IMPL
#define J2CPP_ORG_APACHE_HTTP_MESSAGE_PARSERCURSOR_HPP_IMPL

namespace j2cpp {


template <>
local_ref< org::apache::http::message::ParserCursor > create< org::apache::http::message::ParserCursor>(cpp_int const &a0, cpp_int const &a1)
{
	return local_ref< org::apache::http::message::ParserCursor >(
		environment::get().get_jenv()->NewObject(
			get_class<org::apache::http::message::ParserCursor::J2CPP_CLASS_NAME>(),
			get_method_id<org::apache::http::message::ParserCursor::J2CPP_CLASS_NAME, org::apache::http::message::ParserCursor::J2CPP_METHOD_NAME(0), org::apache::http::message::ParserCursor::J2CPP_METHOD_SIGNATURE(0), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_int org::apache::http::message::ParserCursor::getLowerBound()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), false>()
		)
	);
}

cpp_int org::apache::http::message::ParserCursor::getUpperBound()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>()
		)
	);
}

cpp_int org::apache::http::message::ParserCursor::getPos()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>()
		)
	);
}

void org::apache::http::message::ParserCursor::updatePos(cpp_int const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean org::apache::http::message::ParserCursor::atEnd()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>()
		)
	);
}

local_ref< java::lang::String > org::apache::http::message::ParserCursor::toString()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>()
		)
	);
}


J2CPP_DEFINE_CLASS(org::apache::http::message::ParserCursor,"org/apache/http/message/ParserCursor")
J2CPP_DEFINE_METHOD(org::apache::http::message::ParserCursor,0,"<init>","(II)V")
J2CPP_DEFINE_METHOD(org::apache::http::message::ParserCursor,1,"getLowerBound","()I")
J2CPP_DEFINE_METHOD(org::apache::http::message::ParserCursor,2,"getUpperBound","()I")
J2CPP_DEFINE_METHOD(org::apache::http::message::ParserCursor,3,"getPos","()I")
J2CPP_DEFINE_METHOD(org::apache::http::message::ParserCursor,4,"updatePos","(I)V")
J2CPP_DEFINE_METHOD(org::apache::http::message::ParserCursor,5,"atEnd","()Z")
J2CPP_DEFINE_METHOD(org::apache::http::message::ParserCursor,6,"toString","()Ljava/lang/String;")

} //namespace j2cpp

#endif //J2CPP_ORG_APACHE_HTTP_MESSAGE_PARSERCURSOR_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
