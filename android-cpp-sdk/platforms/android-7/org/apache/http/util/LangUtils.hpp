/*================================================================================
  code generated by: java2cpp
  class: org.apache.http.util.LangUtils
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ORG_APACHE_HTTP_UTIL_LANGUTILS_HPP_DECL
#define J2CPP_ORG_APACHE_HTTP_UTIL_LANGUTILS_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class Object; } } }


#include <java/lang/Object.hpp>


namespace j2cpp {

namespace org { namespace apache { namespace http { namespace util {

	class LangUtils;
	class LangUtils
		: public cpp_object<LangUtils>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_FIELD(0)
		J2CPP_DECLARE_FIELD(1)

		explicit LangUtils(jobject jobj)
		: cpp_object<LangUtils>(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;


		static cpp_int hashCode(cpp_int const&, cpp_int const&);
		static cpp_int hashCode(cpp_int const&, cpp_boolean const&);
		static cpp_int hashCode(cpp_int const&, local_ref< java::lang::Object > const&);
		static cpp_boolean equals(local_ref< java::lang::Object > const&, local_ref< java::lang::Object > const&);
		static cpp_boolean equals(local_ref< cpp_object_array<java::lang::Object, 1> > const&, local_ref< cpp_object_array<java::lang::Object, 1> > const&);

		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(0), J2CPP_FIELD_SIGNATURE(0), cpp_int > HASH_SEED;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(1), J2CPP_FIELD_SIGNATURE(1), cpp_int > HASH_OFFSET;
	}; //class LangUtils

} //namespace util
} //namespace http
} //namespace apache
} //namespace org

} //namespace j2cpp

#endif //J2CPP_ORG_APACHE_HTTP_UTIL_LANGUTILS_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ORG_APACHE_HTTP_UTIL_LANGUTILS_HPP_IMPL
#define J2CPP_ORG_APACHE_HTTP_UTIL_LANGUTILS_HPP_IMPL

namespace j2cpp {



org::apache::http::util::LangUtils::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jtype());
}


cpp_int org::apache::http::util::LangUtils::hashCode(cpp_int const &a0, cpp_int const &a1)
{
	return cpp_int(
		environment::get().get_jenv()->CallStaticIntMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), true>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_int org::apache::http::util::LangUtils::hashCode(cpp_int const &a0, cpp_boolean const &a1)
{
	return cpp_int(
		environment::get().get_jenv()->CallStaticIntMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), true>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_int org::apache::http::util::LangUtils::hashCode(cpp_int const &a0, local_ref< java::lang::Object > const &a1)
{
	return cpp_int(
		environment::get().get_jenv()->CallStaticIntMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), true>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_boolean org::apache::http::util::LangUtils::equals(local_ref< java::lang::Object > const &a0, local_ref< java::lang::Object > const &a1)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallStaticBooleanMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), true>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_boolean org::apache::http::util::LangUtils::equals(local_ref< cpp_object_array<java::lang::Object, 1> > const &a0, local_ref< cpp_object_array<java::lang::Object, 1> > const &a1)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallStaticBooleanMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), true>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}


static_field<
	org::apache::http::util::LangUtils::J2CPP_CLASS_NAME,
	org::apache::http::util::LangUtils::J2CPP_FIELD_NAME(0),
	org::apache::http::util::LangUtils::J2CPP_FIELD_SIGNATURE(0),
	cpp_int
> org::apache::http::util::LangUtils::HASH_SEED;

static_field<
	org::apache::http::util::LangUtils::J2CPP_CLASS_NAME,
	org::apache::http::util::LangUtils::J2CPP_FIELD_NAME(1),
	org::apache::http::util::LangUtils::J2CPP_FIELD_SIGNATURE(1),
	cpp_int
> org::apache::http::util::LangUtils::HASH_OFFSET;


J2CPP_DEFINE_CLASS(org::apache::http::util::LangUtils,"org/apache/http/util/LangUtils")
J2CPP_DEFINE_METHOD(org::apache::http::util::LangUtils,0,"<init>","()V")
J2CPP_DEFINE_METHOD(org::apache::http::util::LangUtils,1,"hashCode","(II)I")
J2CPP_DEFINE_METHOD(org::apache::http::util::LangUtils,2,"hashCode","(IZ)I")
J2CPP_DEFINE_METHOD(org::apache::http::util::LangUtils,3,"hashCode","(ILjava/lang/Object;)I")
J2CPP_DEFINE_METHOD(org::apache::http::util::LangUtils,4,"equals","(Ljava/lang/Object;Ljava/lang/Object;)Z")
J2CPP_DEFINE_METHOD(org::apache::http::util::LangUtils,5,"equals","([java.lang.Object[java.lang.Object)Z")
J2CPP_DEFINE_FIELD(org::apache::http::util::LangUtils,0,"HASH_SEED","I")
J2CPP_DEFINE_FIELD(org::apache::http::util::LangUtils,1,"HASH_OFFSET","I")

} //namespace j2cpp

#endif //J2CPP_ORG_APACHE_HTTP_UTIL_LANGUTILS_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
