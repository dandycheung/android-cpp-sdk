/*================================================================================
  code generated by: java2cpp
  class: org.apache.http.impl.DefaultHttpClientConnection
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ORG_APACHE_HTTP_IMPL_DEFAULTHTTPCLIENTCONNECTION_HPP_DECL
#define J2CPP_ORG_APACHE_HTTP_IMPL_DEFAULTHTTPCLIENTCONNECTION_HPP_DECL


namespace j2cpp { namespace java { namespace net { class Socket; } } }
namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace org { namespace apache { namespace http { namespace params { class HttpParams; } } } } }


#include <java/lang/String.hpp>
#include <java/net/Socket.hpp>
#include <org/apache/http/params/HttpParams.hpp>


namespace j2cpp {

namespace org { namespace apache { namespace http { namespace impl {

	class DefaultHttpClientConnection;
	class DefaultHttpClientConnection
		: public cpp_object<DefaultHttpClientConnection>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)

		DefaultHttpClientConnection(jobject jobj)
		: cpp_object<DefaultHttpClientConnection>(jobj)
		{
		}

		void bind(local_ref< java::net::Socket > const&, local_ref< org::apache::http::params::HttpParams > const&);
		local_ref< java::lang::String > toString();
	}; //class DefaultHttpClientConnection

} //namespace impl
} //namespace http
} //namespace apache
} //namespace org


} //namespace j2cpp

#endif //J2CPP_ORG_APACHE_HTTP_IMPL_DEFAULTHTTPCLIENTCONNECTION_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ORG_APACHE_HTTP_IMPL_DEFAULTHTTPCLIENTCONNECTION_HPP_IMPL
#define J2CPP_ORG_APACHE_HTTP_IMPL_DEFAULTHTTPCLIENTCONNECTION_HPP_IMPL

namespace j2cpp {


template <>
local_ref< org::apache::http::impl::DefaultHttpClientConnection > create< org::apache::http::impl::DefaultHttpClientConnection>()
{
	return local_ref< org::apache::http::impl::DefaultHttpClientConnection >(
		environment::get().get_jenv()->NewObject(
			get_class<org::apache::http::impl::DefaultHttpClientConnection::J2CPP_CLASS_NAME>(),
			get_method_id<org::apache::http::impl::DefaultHttpClientConnection::J2CPP_CLASS_NAME, org::apache::http::impl::DefaultHttpClientConnection::J2CPP_METHOD_NAME(0), org::apache::http::impl::DefaultHttpClientConnection::J2CPP_METHOD_SIGNATURE(0), false>()
		)
	);
}

void org::apache::http::impl::DefaultHttpClientConnection::bind(local_ref< java::net::Socket > const &a0, local_ref< org::apache::http::params::HttpParams > const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< java::lang::String > org::apache::http::impl::DefaultHttpClientConnection::toString()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>()
		)
	);
}


J2CPP_DEFINE_CLASS(org::apache::http::impl::DefaultHttpClientConnection,"org/apache/http/impl/DefaultHttpClientConnection")
J2CPP_DEFINE_METHOD(org::apache::http::impl::DefaultHttpClientConnection,0,"<init>","()V")
J2CPP_DEFINE_METHOD(org::apache::http::impl::DefaultHttpClientConnection,1,"bind","(Ljava/net/Socket;Lorg/apache/http/params/HttpParams;)V")
J2CPP_DEFINE_METHOD(org::apache::http::impl::DefaultHttpClientConnection,2,"toString","()Ljava/lang/String;")

} //namespace j2cpp

#endif //J2CPP_ORG_APACHE_HTTP_IMPL_DEFAULTHTTPCLIENTCONNECTION_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
