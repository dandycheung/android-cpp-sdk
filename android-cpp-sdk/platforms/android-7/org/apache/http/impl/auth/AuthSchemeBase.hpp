/*================================================================================
  code generated by: java2cpp
  class: org.apache.http.impl.auth.AuthSchemeBase
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ORG_APACHE_HTTP_IMPL_AUTH_AUTHSCHEMEBASE_HPP_DECL
#define J2CPP_ORG_APACHE_HTTP_IMPL_AUTH_AUTHSCHEMEBASE_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace org { namespace apache { namespace http { class Header; } } } }
namespace j2cpp { namespace org { namespace apache { namespace http { namespace auth { class AuthScheme; } } } } }


#include <java/lang/Object.hpp>
#include <org/apache/http/Header.hpp>
#include <org/apache/http/auth/AuthScheme.hpp>


namespace j2cpp {

namespace org { namespace apache { namespace http { namespace impl { namespace auth {

	class AuthSchemeBase;
	class AuthSchemeBase
		: public cpp_object<AuthSchemeBase>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)

		explicit AuthSchemeBase(jobject jobj)
		: cpp_object<AuthSchemeBase>(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;
		operator local_ref<org::apache::http::auth::AuthScheme>() const;


		AuthSchemeBase();
		void processChallenge(local_ref< org::apache::http::Header > const&);
		cpp_boolean isProxy();
	}; //class AuthSchemeBase

} //namespace auth
} //namespace impl
} //namespace http
} //namespace apache
} //namespace org

} //namespace j2cpp

#endif //J2CPP_ORG_APACHE_HTTP_IMPL_AUTH_AUTHSCHEMEBASE_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ORG_APACHE_HTTP_IMPL_AUTH_AUTHSCHEMEBASE_HPP_IMPL
#define J2CPP_ORG_APACHE_HTTP_IMPL_AUTH_AUTHSCHEMEBASE_HPP_IMPL

namespace j2cpp {



org::apache::http::impl::auth::AuthSchemeBase::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jtype());
}

org::apache::http::impl::auth::AuthSchemeBase::operator local_ref<org::apache::http::auth::AuthScheme>() const
{
	return local_ref<org::apache::http::auth::AuthScheme>(get_jtype());
}


org::apache::http::impl::auth::AuthSchemeBase::AuthSchemeBase()
: cpp_object<org::apache::http::impl::auth::AuthSchemeBase>(
	environment::get().get_jenv()->NewObject(
		get_class<org::apache::http::impl::auth::AuthSchemeBase::J2CPP_CLASS_NAME>(),
		get_method_id<org::apache::http::impl::auth::AuthSchemeBase::J2CPP_CLASS_NAME, org::apache::http::impl::auth::AuthSchemeBase::J2CPP_METHOD_NAME(0), org::apache::http::impl::auth::AuthSchemeBase::J2CPP_METHOD_SIGNATURE(0), false>()
	)
)
{
}


void org::apache::http::impl::auth::AuthSchemeBase::processChallenge(local_ref< org::apache::http::Header > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), false>(),
			a0.get_jtype()
		)
	);
}


cpp_boolean org::apache::http::impl::auth::AuthSchemeBase::isProxy()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>()
		)
	);
}


J2CPP_DEFINE_CLASS(org::apache::http::impl::auth::AuthSchemeBase,"org/apache/http/impl/auth/AuthSchemeBase")
J2CPP_DEFINE_METHOD(org::apache::http::impl::auth::AuthSchemeBase,0,"<init>","()V")
J2CPP_DEFINE_METHOD(org::apache::http::impl::auth::AuthSchemeBase,1,"processChallenge","(Lorg/apache/http/Header;)V")
J2CPP_DEFINE_METHOD(org::apache::http::impl::auth::AuthSchemeBase,2,"parseChallenge","(Lorg/apache/http/util/CharArrayBuffer;II)V")
J2CPP_DEFINE_METHOD(org::apache::http::impl::auth::AuthSchemeBase,3,"isProxy","()Z")

} //namespace j2cpp

#endif //J2CPP_ORG_APACHE_HTTP_IMPL_AUTH_AUTHSCHEMEBASE_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
