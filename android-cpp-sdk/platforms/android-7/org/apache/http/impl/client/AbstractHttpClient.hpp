/*================================================================================
  code generated by: java2cpp
  class: org.apache.http.impl.client.AbstractHttpClient
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ORG_APACHE_HTTP_IMPL_CLIENT_ABSTRACTHTTPCLIENT_HPP_DECL
#define J2CPP_ORG_APACHE_HTTP_IMPL_CLIENT_ABSTRACTHTTPCLIENT_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace lang { class Class; } } }
namespace j2cpp { namespace org { namespace apache { namespace http { class HttpRequest; } } } }
namespace j2cpp { namespace org { namespace apache { namespace http { namespace cookie { class CookieSpecRegistry; } } } } }
namespace j2cpp { namespace org { namespace apache { namespace http { class ConnectionReuseStrategy; } } } }
namespace j2cpp { namespace org { namespace apache { namespace http { class HttpRequestInterceptor; } } } }
namespace j2cpp { namespace org { namespace apache { namespace http { namespace client { class HttpClient; } } } } }
namespace j2cpp { namespace org { namespace apache { namespace http { namespace client { namespace methods { class HttpUriRequest; } } } } } }
namespace j2cpp { namespace org { namespace apache { namespace http { namespace client { class UserTokenHandler; } } } } }
namespace j2cpp { namespace org { namespace apache { namespace http { namespace client { class ResponseHandler; } } } } }
namespace j2cpp { namespace org { namespace apache { namespace http { namespace client { class RedirectHandler; } } } } }
namespace j2cpp { namespace org { namespace apache { namespace http { namespace client { class HttpRequestRetryHandler; } } } } }
namespace j2cpp { namespace org { namespace apache { namespace http { namespace client { class CredentialsProvider; } } } } }
namespace j2cpp { namespace org { namespace apache { namespace http { namespace client { class CookieStore; } } } } }
namespace j2cpp { namespace org { namespace apache { namespace http { namespace client { class AuthenticationHandler; } } } } }
namespace j2cpp { namespace org { namespace apache { namespace http { namespace protocol { class HttpRequestExecutor; } } } } }
namespace j2cpp { namespace org { namespace apache { namespace http { namespace protocol { class HttpContext; } } } } }
namespace j2cpp { namespace org { namespace apache { namespace http { namespace conn { class ConnectionKeepAliveStrategy; } } } } }
namespace j2cpp { namespace org { namespace apache { namespace http { namespace conn { namespace routing { class HttpRoutePlanner; } } } } } }
namespace j2cpp { namespace org { namespace apache { namespace http { namespace conn { class ClientConnectionManager; } } } } }
namespace j2cpp { namespace org { namespace apache { namespace http { class HttpResponseInterceptor; } } } }
namespace j2cpp { namespace org { namespace apache { namespace http { namespace params { class HttpParams; } } } } }
namespace j2cpp { namespace org { namespace apache { namespace http { class HttpHost; } } } }
namespace j2cpp { namespace org { namespace apache { namespace http { class HttpResponse; } } } }
namespace j2cpp { namespace org { namespace apache { namespace http { namespace auth { class AuthSchemeRegistry; } } } } }


#include <java/lang/Class.hpp>
#include <java/lang/Object.hpp>
#include <org/apache/http/ConnectionReuseStrategy.hpp>
#include <org/apache/http/HttpHost.hpp>
#include <org/apache/http/HttpRequest.hpp>
#include <org/apache/http/HttpRequestInterceptor.hpp>
#include <org/apache/http/HttpResponse.hpp>
#include <org/apache/http/HttpResponseInterceptor.hpp>
#include <org/apache/http/auth/AuthSchemeRegistry.hpp>
#include <org/apache/http/client/AuthenticationHandler.hpp>
#include <org/apache/http/client/CookieStore.hpp>
#include <org/apache/http/client/CredentialsProvider.hpp>
#include <org/apache/http/client/HttpClient.hpp>
#include <org/apache/http/client/HttpRequestRetryHandler.hpp>
#include <org/apache/http/client/RedirectHandler.hpp>
#include <org/apache/http/client/ResponseHandler.hpp>
#include <org/apache/http/client/UserTokenHandler.hpp>
#include <org/apache/http/client/methods/HttpUriRequest.hpp>
#include <org/apache/http/conn/ClientConnectionManager.hpp>
#include <org/apache/http/conn/ConnectionKeepAliveStrategy.hpp>
#include <org/apache/http/conn/routing/HttpRoutePlanner.hpp>
#include <org/apache/http/cookie/CookieSpecRegistry.hpp>
#include <org/apache/http/params/HttpParams.hpp>
#include <org/apache/http/protocol/HttpContext.hpp>
#include <org/apache/http/protocol/HttpRequestExecutor.hpp>


namespace j2cpp {

namespace org { namespace apache { namespace http { namespace impl { namespace client {

	class AbstractHttpClient;
	class AbstractHttpClient
		: public cpp_object<AbstractHttpClient>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_METHOD(12)
		J2CPP_DECLARE_METHOD(13)
		J2CPP_DECLARE_METHOD(14)
		J2CPP_DECLARE_METHOD(15)
		J2CPP_DECLARE_METHOD(16)
		J2CPP_DECLARE_METHOD(17)
		J2CPP_DECLARE_METHOD(18)
		J2CPP_DECLARE_METHOD(19)
		J2CPP_DECLARE_METHOD(20)
		J2CPP_DECLARE_METHOD(21)
		J2CPP_DECLARE_METHOD(22)
		J2CPP_DECLARE_METHOD(23)
		J2CPP_DECLARE_METHOD(24)
		J2CPP_DECLARE_METHOD(25)
		J2CPP_DECLARE_METHOD(26)
		J2CPP_DECLARE_METHOD(27)
		J2CPP_DECLARE_METHOD(28)
		J2CPP_DECLARE_METHOD(29)
		J2CPP_DECLARE_METHOD(30)
		J2CPP_DECLARE_METHOD(31)
		J2CPP_DECLARE_METHOD(32)
		J2CPP_DECLARE_METHOD(33)
		J2CPP_DECLARE_METHOD(34)
		J2CPP_DECLARE_METHOD(35)
		J2CPP_DECLARE_METHOD(36)
		J2CPP_DECLARE_METHOD(37)
		J2CPP_DECLARE_METHOD(38)
		J2CPP_DECLARE_METHOD(39)
		J2CPP_DECLARE_METHOD(40)
		J2CPP_DECLARE_METHOD(41)
		J2CPP_DECLARE_METHOD(42)
		J2CPP_DECLARE_METHOD(43)
		J2CPP_DECLARE_METHOD(44)
		J2CPP_DECLARE_METHOD(45)
		J2CPP_DECLARE_METHOD(46)
		J2CPP_DECLARE_METHOD(47)
		J2CPP_DECLARE_METHOD(48)
		J2CPP_DECLARE_METHOD(49)
		J2CPP_DECLARE_METHOD(50)
		J2CPP_DECLARE_METHOD(51)
		J2CPP_DECLARE_METHOD(52)
		J2CPP_DECLARE_METHOD(53)
		J2CPP_DECLARE_METHOD(54)
		J2CPP_DECLARE_METHOD(55)
		J2CPP_DECLARE_METHOD(56)
		J2CPP_DECLARE_METHOD(57)
		J2CPP_DECLARE_METHOD(58)
		J2CPP_DECLARE_METHOD(59)
		J2CPP_DECLARE_METHOD(60)
		J2CPP_DECLARE_METHOD(61)
		J2CPP_DECLARE_METHOD(62)
		J2CPP_DECLARE_METHOD(63)
		J2CPP_DECLARE_METHOD(64)
		J2CPP_DECLARE_METHOD(65)
		J2CPP_DECLARE_METHOD(66)
		J2CPP_DECLARE_METHOD(67)
		J2CPP_DECLARE_METHOD(68)

		explicit AbstractHttpClient(jobject jobj)
		: cpp_object<AbstractHttpClient>(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;
		operator local_ref<org::apache::http::client::HttpClient>() const;


		local_ref< org::apache::http::params::HttpParams > getParams();
		void setParams(local_ref< org::apache::http::params::HttpParams > const&);
		local_ref< org::apache::http::conn::ClientConnectionManager > getConnectionManager();
		local_ref< org::apache::http::protocol::HttpRequestExecutor > getRequestExecutor();
		local_ref< org::apache::http::auth::AuthSchemeRegistry > getAuthSchemes();
		void setAuthSchemes(local_ref< org::apache::http::auth::AuthSchemeRegistry > const&);
		local_ref< org::apache::http::cookie::CookieSpecRegistry > getCookieSpecs();
		void setCookieSpecs(local_ref< org::apache::http::cookie::CookieSpecRegistry > const&);
		local_ref< org::apache::http::ConnectionReuseStrategy > getConnectionReuseStrategy();
		void setReuseStrategy(local_ref< org::apache::http::ConnectionReuseStrategy > const&);
		local_ref< org::apache::http::conn::ConnectionKeepAliveStrategy > getConnectionKeepAliveStrategy();
		void setKeepAliveStrategy(local_ref< org::apache::http::conn::ConnectionKeepAliveStrategy > const&);
		local_ref< org::apache::http::client::HttpRequestRetryHandler > getHttpRequestRetryHandler();
		void setHttpRequestRetryHandler(local_ref< org::apache::http::client::HttpRequestRetryHandler > const&);
		local_ref< org::apache::http::client::RedirectHandler > getRedirectHandler();
		void setRedirectHandler(local_ref< org::apache::http::client::RedirectHandler > const&);
		local_ref< org::apache::http::client::AuthenticationHandler > getTargetAuthenticationHandler();
		void setTargetAuthenticationHandler(local_ref< org::apache::http::client::AuthenticationHandler > const&);
		local_ref< org::apache::http::client::AuthenticationHandler > getProxyAuthenticationHandler();
		void setProxyAuthenticationHandler(local_ref< org::apache::http::client::AuthenticationHandler > const&);
		local_ref< org::apache::http::client::CookieStore > getCookieStore();
		void setCookieStore(local_ref< org::apache::http::client::CookieStore > const&);
		local_ref< org::apache::http::client::CredentialsProvider > getCredentialsProvider();
		void setCredentialsProvider(local_ref< org::apache::http::client::CredentialsProvider > const&);
		local_ref< org::apache::http::conn::routing::HttpRoutePlanner > getRoutePlanner();
		void setRoutePlanner(local_ref< org::apache::http::conn::routing::HttpRoutePlanner > const&);
		local_ref< org::apache::http::client::UserTokenHandler > getUserTokenHandler();
		void setUserTokenHandler(local_ref< org::apache::http::client::UserTokenHandler > const&);
		void addResponseInterceptor(local_ref< org::apache::http::HttpResponseInterceptor > const&);
		void addResponseInterceptor(local_ref< org::apache::http::HttpResponseInterceptor > const&, cpp_int const&);
		local_ref< org::apache::http::HttpResponseInterceptor > getResponseInterceptor(cpp_int const&);
		cpp_int getResponseInterceptorCount();
		void clearResponseInterceptors();
		void removeResponseInterceptorByClass(local_ref< java::lang::Class > const&);
		void addRequestInterceptor(local_ref< org::apache::http::HttpRequestInterceptor > const&);
		void addRequestInterceptor(local_ref< org::apache::http::HttpRequestInterceptor > const&, cpp_int const&);
		local_ref< org::apache::http::HttpRequestInterceptor > getRequestInterceptor(cpp_int const&);
		cpp_int getRequestInterceptorCount();
		void clearRequestInterceptors();
		void removeRequestInterceptorByClass(local_ref< java::lang::Class > const&);
		local_ref< org::apache::http::HttpResponse > execute(local_ref< org::apache::http::client::methods::HttpUriRequest > const&);
		local_ref< org::apache::http::HttpResponse > execute(local_ref< org::apache::http::client::methods::HttpUriRequest > const&, local_ref< org::apache::http::protocol::HttpContext > const&);
		local_ref< org::apache::http::HttpResponse > execute(local_ref< org::apache::http::HttpHost > const&, local_ref< org::apache::http::HttpRequest > const&);
		local_ref< org::apache::http::HttpResponse > execute(local_ref< org::apache::http::HttpHost > const&, local_ref< org::apache::http::HttpRequest > const&, local_ref< org::apache::http::protocol::HttpContext > const&);
		local_ref< java::lang::Object > execute(local_ref< org::apache::http::client::methods::HttpUriRequest > const&, local_ref< org::apache::http::client::ResponseHandler > const&);
		local_ref< java::lang::Object > execute(local_ref< org::apache::http::client::methods::HttpUriRequest > const&, local_ref< org::apache::http::client::ResponseHandler > const&, local_ref< org::apache::http::protocol::HttpContext > const&);
		local_ref< java::lang::Object > execute(local_ref< org::apache::http::HttpHost > const&, local_ref< org::apache::http::HttpRequest > const&, local_ref< org::apache::http::client::ResponseHandler > const&);
		local_ref< java::lang::Object > execute(local_ref< org::apache::http::HttpHost > const&, local_ref< org::apache::http::HttpRequest > const&, local_ref< org::apache::http::client::ResponseHandler > const&, local_ref< org::apache::http::protocol::HttpContext > const&);
	}; //class AbstractHttpClient

} //namespace client
} //namespace impl
} //namespace http
} //namespace apache
} //namespace org

} //namespace j2cpp

#endif //J2CPP_ORG_APACHE_HTTP_IMPL_CLIENT_ABSTRACTHTTPCLIENT_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ORG_APACHE_HTTP_IMPL_CLIENT_ABSTRACTHTTPCLIENT_HPP_IMPL
#define J2CPP_ORG_APACHE_HTTP_IMPL_CLIENT_ABSTRACTHTTPCLIENT_HPP_IMPL

namespace j2cpp {



org::apache::http::impl::client::AbstractHttpClient::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jtype());
}

org::apache::http::impl::client::AbstractHttpClient::operator local_ref<org::apache::http::client::HttpClient>() const
{
	return local_ref<org::apache::http::client::HttpClient>(get_jtype());
}



















local_ref< org::apache::http::params::HttpParams > org::apache::http::impl::client::AbstractHttpClient::getParams()
{
	return local_ref< org::apache::http::params::HttpParams >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(18), J2CPP_METHOD_SIGNATURE(18), false>()
		)
	);
}

void org::apache::http::impl::client::AbstractHttpClient::setParams(local_ref< org::apache::http::params::HttpParams > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(19), J2CPP_METHOD_SIGNATURE(19), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< org::apache::http::conn::ClientConnectionManager > org::apache::http::impl::client::AbstractHttpClient::getConnectionManager()
{
	return local_ref< org::apache::http::conn::ClientConnectionManager >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(20), J2CPP_METHOD_SIGNATURE(20), false>()
		)
	);
}

local_ref< org::apache::http::protocol::HttpRequestExecutor > org::apache::http::impl::client::AbstractHttpClient::getRequestExecutor()
{
	return local_ref< org::apache::http::protocol::HttpRequestExecutor >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(21), J2CPP_METHOD_SIGNATURE(21), false>()
		)
	);
}

local_ref< org::apache::http::auth::AuthSchemeRegistry > org::apache::http::impl::client::AbstractHttpClient::getAuthSchemes()
{
	return local_ref< org::apache::http::auth::AuthSchemeRegistry >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(22), J2CPP_METHOD_SIGNATURE(22), false>()
		)
	);
}

void org::apache::http::impl::client::AbstractHttpClient::setAuthSchemes(local_ref< org::apache::http::auth::AuthSchemeRegistry > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(23), J2CPP_METHOD_SIGNATURE(23), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< org::apache::http::cookie::CookieSpecRegistry > org::apache::http::impl::client::AbstractHttpClient::getCookieSpecs()
{
	return local_ref< org::apache::http::cookie::CookieSpecRegistry >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(24), J2CPP_METHOD_SIGNATURE(24), false>()
		)
	);
}

void org::apache::http::impl::client::AbstractHttpClient::setCookieSpecs(local_ref< org::apache::http::cookie::CookieSpecRegistry > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(25), J2CPP_METHOD_SIGNATURE(25), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< org::apache::http::ConnectionReuseStrategy > org::apache::http::impl::client::AbstractHttpClient::getConnectionReuseStrategy()
{
	return local_ref< org::apache::http::ConnectionReuseStrategy >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(26), J2CPP_METHOD_SIGNATURE(26), false>()
		)
	);
}

void org::apache::http::impl::client::AbstractHttpClient::setReuseStrategy(local_ref< org::apache::http::ConnectionReuseStrategy > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(27), J2CPP_METHOD_SIGNATURE(27), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< org::apache::http::conn::ConnectionKeepAliveStrategy > org::apache::http::impl::client::AbstractHttpClient::getConnectionKeepAliveStrategy()
{
	return local_ref< org::apache::http::conn::ConnectionKeepAliveStrategy >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(28), J2CPP_METHOD_SIGNATURE(28), false>()
		)
	);
}

void org::apache::http::impl::client::AbstractHttpClient::setKeepAliveStrategy(local_ref< org::apache::http::conn::ConnectionKeepAliveStrategy > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(29), J2CPP_METHOD_SIGNATURE(29), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< org::apache::http::client::HttpRequestRetryHandler > org::apache::http::impl::client::AbstractHttpClient::getHttpRequestRetryHandler()
{
	return local_ref< org::apache::http::client::HttpRequestRetryHandler >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(30), J2CPP_METHOD_SIGNATURE(30), false>()
		)
	);
}

void org::apache::http::impl::client::AbstractHttpClient::setHttpRequestRetryHandler(local_ref< org::apache::http::client::HttpRequestRetryHandler > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(31), J2CPP_METHOD_SIGNATURE(31), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< org::apache::http::client::RedirectHandler > org::apache::http::impl::client::AbstractHttpClient::getRedirectHandler()
{
	return local_ref< org::apache::http::client::RedirectHandler >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(32), J2CPP_METHOD_SIGNATURE(32), false>()
		)
	);
}

void org::apache::http::impl::client::AbstractHttpClient::setRedirectHandler(local_ref< org::apache::http::client::RedirectHandler > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(33), J2CPP_METHOD_SIGNATURE(33), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< org::apache::http::client::AuthenticationHandler > org::apache::http::impl::client::AbstractHttpClient::getTargetAuthenticationHandler()
{
	return local_ref< org::apache::http::client::AuthenticationHandler >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(34), J2CPP_METHOD_SIGNATURE(34), false>()
		)
	);
}

void org::apache::http::impl::client::AbstractHttpClient::setTargetAuthenticationHandler(local_ref< org::apache::http::client::AuthenticationHandler > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(35), J2CPP_METHOD_SIGNATURE(35), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< org::apache::http::client::AuthenticationHandler > org::apache::http::impl::client::AbstractHttpClient::getProxyAuthenticationHandler()
{
	return local_ref< org::apache::http::client::AuthenticationHandler >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(36), J2CPP_METHOD_SIGNATURE(36), false>()
		)
	);
}

void org::apache::http::impl::client::AbstractHttpClient::setProxyAuthenticationHandler(local_ref< org::apache::http::client::AuthenticationHandler > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(37), J2CPP_METHOD_SIGNATURE(37), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< org::apache::http::client::CookieStore > org::apache::http::impl::client::AbstractHttpClient::getCookieStore()
{
	return local_ref< org::apache::http::client::CookieStore >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(38), J2CPP_METHOD_SIGNATURE(38), false>()
		)
	);
}

void org::apache::http::impl::client::AbstractHttpClient::setCookieStore(local_ref< org::apache::http::client::CookieStore > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(39), J2CPP_METHOD_SIGNATURE(39), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< org::apache::http::client::CredentialsProvider > org::apache::http::impl::client::AbstractHttpClient::getCredentialsProvider()
{
	return local_ref< org::apache::http::client::CredentialsProvider >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(40), J2CPP_METHOD_SIGNATURE(40), false>()
		)
	);
}

void org::apache::http::impl::client::AbstractHttpClient::setCredentialsProvider(local_ref< org::apache::http::client::CredentialsProvider > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(41), J2CPP_METHOD_SIGNATURE(41), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< org::apache::http::conn::routing::HttpRoutePlanner > org::apache::http::impl::client::AbstractHttpClient::getRoutePlanner()
{
	return local_ref< org::apache::http::conn::routing::HttpRoutePlanner >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(42), J2CPP_METHOD_SIGNATURE(42), false>()
		)
	);
}

void org::apache::http::impl::client::AbstractHttpClient::setRoutePlanner(local_ref< org::apache::http::conn::routing::HttpRoutePlanner > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(43), J2CPP_METHOD_SIGNATURE(43), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< org::apache::http::client::UserTokenHandler > org::apache::http::impl::client::AbstractHttpClient::getUserTokenHandler()
{
	return local_ref< org::apache::http::client::UserTokenHandler >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(44), J2CPP_METHOD_SIGNATURE(44), false>()
		)
	);
}

void org::apache::http::impl::client::AbstractHttpClient::setUserTokenHandler(local_ref< org::apache::http::client::UserTokenHandler > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(45), J2CPP_METHOD_SIGNATURE(45), false>(),
			a0.get_jtype()
		)
	);
}


void org::apache::http::impl::client::AbstractHttpClient::addResponseInterceptor(local_ref< org::apache::http::HttpResponseInterceptor > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(47), J2CPP_METHOD_SIGNATURE(47), false>(),
			a0.get_jtype()
		)
	);
}

void org::apache::http::impl::client::AbstractHttpClient::addResponseInterceptor(local_ref< org::apache::http::HttpResponseInterceptor > const &a0, cpp_int const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(48), J2CPP_METHOD_SIGNATURE(48), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< org::apache::http::HttpResponseInterceptor > org::apache::http::impl::client::AbstractHttpClient::getResponseInterceptor(cpp_int const &a0)
{
	return local_ref< org::apache::http::HttpResponseInterceptor >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(49), J2CPP_METHOD_SIGNATURE(49), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int org::apache::http::impl::client::AbstractHttpClient::getResponseInterceptorCount()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(50), J2CPP_METHOD_SIGNATURE(50), false>()
		)
	);
}

void org::apache::http::impl::client::AbstractHttpClient::clearResponseInterceptors()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(51), J2CPP_METHOD_SIGNATURE(51), false>()
		)
	);
}

void org::apache::http::impl::client::AbstractHttpClient::removeResponseInterceptorByClass(local_ref< java::lang::Class > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(52), J2CPP_METHOD_SIGNATURE(52), false>(),
			a0.get_jtype()
		)
	);
}

void org::apache::http::impl::client::AbstractHttpClient::addRequestInterceptor(local_ref< org::apache::http::HttpRequestInterceptor > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(53), J2CPP_METHOD_SIGNATURE(53), false>(),
			a0.get_jtype()
		)
	);
}

void org::apache::http::impl::client::AbstractHttpClient::addRequestInterceptor(local_ref< org::apache::http::HttpRequestInterceptor > const &a0, cpp_int const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(54), J2CPP_METHOD_SIGNATURE(54), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< org::apache::http::HttpRequestInterceptor > org::apache::http::impl::client::AbstractHttpClient::getRequestInterceptor(cpp_int const &a0)
{
	return local_ref< org::apache::http::HttpRequestInterceptor >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(55), J2CPP_METHOD_SIGNATURE(55), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int org::apache::http::impl::client::AbstractHttpClient::getRequestInterceptorCount()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(56), J2CPP_METHOD_SIGNATURE(56), false>()
		)
	);
}

void org::apache::http::impl::client::AbstractHttpClient::clearRequestInterceptors()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(57), J2CPP_METHOD_SIGNATURE(57), false>()
		)
	);
}

void org::apache::http::impl::client::AbstractHttpClient::removeRequestInterceptorByClass(local_ref< java::lang::Class > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(58), J2CPP_METHOD_SIGNATURE(58), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< org::apache::http::HttpResponse > org::apache::http::impl::client::AbstractHttpClient::execute(local_ref< org::apache::http::client::methods::HttpUriRequest > const &a0)
{
	return local_ref< org::apache::http::HttpResponse >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(59), J2CPP_METHOD_SIGNATURE(59), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< org::apache::http::HttpResponse > org::apache::http::impl::client::AbstractHttpClient::execute(local_ref< org::apache::http::client::methods::HttpUriRequest > const &a0, local_ref< org::apache::http::protocol::HttpContext > const &a1)
{
	return local_ref< org::apache::http::HttpResponse >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(60), J2CPP_METHOD_SIGNATURE(60), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< org::apache::http::HttpResponse > org::apache::http::impl::client::AbstractHttpClient::execute(local_ref< org::apache::http::HttpHost > const &a0, local_ref< org::apache::http::HttpRequest > const &a1)
{
	return local_ref< org::apache::http::HttpResponse >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(61), J2CPP_METHOD_SIGNATURE(61), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< org::apache::http::HttpResponse > org::apache::http::impl::client::AbstractHttpClient::execute(local_ref< org::apache::http::HttpHost > const &a0, local_ref< org::apache::http::HttpRequest > const &a1, local_ref< org::apache::http::protocol::HttpContext > const &a2)
{
	return local_ref< org::apache::http::HttpResponse >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(62), J2CPP_METHOD_SIGNATURE(62), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}



local_ref< java::lang::Object > org::apache::http::impl::client::AbstractHttpClient::execute(local_ref< org::apache::http::client::methods::HttpUriRequest > const &a0, local_ref< org::apache::http::client::ResponseHandler > const &a1)
{
	return local_ref< java::lang::Object >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(65), J2CPP_METHOD_SIGNATURE(65), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< java::lang::Object > org::apache::http::impl::client::AbstractHttpClient::execute(local_ref< org::apache::http::client::methods::HttpUriRequest > const &a0, local_ref< org::apache::http::client::ResponseHandler > const &a1, local_ref< org::apache::http::protocol::HttpContext > const &a2)
{
	return local_ref< java::lang::Object >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(66), J2CPP_METHOD_SIGNATURE(66), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

local_ref< java::lang::Object > org::apache::http::impl::client::AbstractHttpClient::execute(local_ref< org::apache::http::HttpHost > const &a0, local_ref< org::apache::http::HttpRequest > const &a1, local_ref< org::apache::http::client::ResponseHandler > const &a2)
{
	return local_ref< java::lang::Object >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(67), J2CPP_METHOD_SIGNATURE(67), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

local_ref< java::lang::Object > org::apache::http::impl::client::AbstractHttpClient::execute(local_ref< org::apache::http::HttpHost > const &a0, local_ref< org::apache::http::HttpRequest > const &a1, local_ref< org::apache::http::client::ResponseHandler > const &a2, local_ref< org::apache::http::protocol::HttpContext > const &a3)
{
	return local_ref< java::lang::Object >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(68), J2CPP_METHOD_SIGNATURE(68), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype(), a3.get_jtype()
		)
	);
}


J2CPP_DEFINE_CLASS(org::apache::http::impl::client::AbstractHttpClient,"org/apache/http/impl/client/AbstractHttpClient")
J2CPP_DEFINE_METHOD(org::apache::http::impl::client::AbstractHttpClient,0,"<init>","(Lorg/apache/http/conn/ClientConnectionManager;Lorg/apache/http/params/HttpParams;)V")
J2CPP_DEFINE_METHOD(org::apache::http::impl::client::AbstractHttpClient,1,"createHttpParams","()Lorg/apache/http/params/HttpParams;")
J2CPP_DEFINE_METHOD(org::apache::http::impl::client::AbstractHttpClient,2,"createHttpContext","()Lorg/apache/http/protocol/HttpContext;")
J2CPP_DEFINE_METHOD(org::apache::http::impl::client::AbstractHttpClient,3,"createRequestExecutor","()Lorg/apache/http/protocol/HttpRequestExecutor;")
J2CPP_DEFINE_METHOD(org::apache::http::impl::client::AbstractHttpClient,4,"createClientConnectionManager","()Lorg/apache/http/conn/ClientConnectionManager;")
J2CPP_DEFINE_METHOD(org::apache::http::impl::client::AbstractHttpClient,5,"createAuthSchemeRegistry","()Lorg/apache/http/auth/AuthSchemeRegistry;")
J2CPP_DEFINE_METHOD(org::apache::http::impl::client::AbstractHttpClient,6,"createCookieSpecRegistry","()Lorg/apache/http/cookie/CookieSpecRegistry;")
J2CPP_DEFINE_METHOD(org::apache::http::impl::client::AbstractHttpClient,7,"createConnectionReuseStrategy","()Lorg/apache/http/ConnectionReuseStrategy;")
J2CPP_DEFINE_METHOD(org::apache::http::impl::client::AbstractHttpClient,8,"createConnectionKeepAliveStrategy","()Lorg/apache/http/conn/ConnectionKeepAliveStrategy;")
J2CPP_DEFINE_METHOD(org::apache::http::impl::client::AbstractHttpClient,9,"createHttpProcessor","()Lorg/apache/http/protocol/BasicHttpProcessor;")
J2CPP_DEFINE_METHOD(org::apache::http::impl::client::AbstractHttpClient,10,"createHttpRequestRetryHandler","()Lorg/apache/http/client/HttpRequestRetryHandler;")
J2CPP_DEFINE_METHOD(org::apache::http::impl::client::AbstractHttpClient,11,"createRedirectHandler","()Lorg/apache/http/client/RedirectHandler;")
J2CPP_DEFINE_METHOD(org::apache::http::impl::client::AbstractHttpClient,12,"createTargetAuthenticationHandler","()Lorg/apache/http/client/AuthenticationHandler;")
J2CPP_DEFINE_METHOD(org::apache::http::impl::client::AbstractHttpClient,13,"createProxyAuthenticationHandler","()Lorg/apache/http/client/AuthenticationHandler;")
J2CPP_DEFINE_METHOD(org::apache::http::impl::client::AbstractHttpClient,14,"createCookieStore","()Lorg/apache/http/client/CookieStore;")
J2CPP_DEFINE_METHOD(org::apache::http::impl::client::AbstractHttpClient,15,"createCredentialsProvider","()Lorg/apache/http/client/CredentialsProvider;")
J2CPP_DEFINE_METHOD(org::apache::http::impl::client::AbstractHttpClient,16,"createHttpRoutePlanner","()Lorg/apache/http/conn/routing/HttpRoutePlanner;")
J2CPP_DEFINE_METHOD(org::apache::http::impl::client::AbstractHttpClient,17,"createUserTokenHandler","()Lorg/apache/http/client/UserTokenHandler;")
J2CPP_DEFINE_METHOD(org::apache::http::impl::client::AbstractHttpClient,18,"getParams","()Lorg/apache/http/params/HttpParams;")
J2CPP_DEFINE_METHOD(org::apache::http::impl::client::AbstractHttpClient,19,"setParams","(Lorg/apache/http/params/HttpParams;)V")
J2CPP_DEFINE_METHOD(org::apache::http::impl::client::AbstractHttpClient,20,"getConnectionManager","()Lorg/apache/http/conn/ClientConnectionManager;")
J2CPP_DEFINE_METHOD(org::apache::http::impl::client::AbstractHttpClient,21,"getRequestExecutor","()Lorg/apache/http/protocol/HttpRequestExecutor;")
J2CPP_DEFINE_METHOD(org::apache::http::impl::client::AbstractHttpClient,22,"getAuthSchemes","()Lorg/apache/http/auth/AuthSchemeRegistry;")
J2CPP_DEFINE_METHOD(org::apache::http::impl::client::AbstractHttpClient,23,"setAuthSchemes","(Lorg/apache/http/auth/AuthSchemeRegistry;)V")
J2CPP_DEFINE_METHOD(org::apache::http::impl::client::AbstractHttpClient,24,"getCookieSpecs","()Lorg/apache/http/cookie/CookieSpecRegistry;")
J2CPP_DEFINE_METHOD(org::apache::http::impl::client::AbstractHttpClient,25,"setCookieSpecs","(Lorg/apache/http/cookie/CookieSpecRegistry;)V")
J2CPP_DEFINE_METHOD(org::apache::http::impl::client::AbstractHttpClient,26,"getConnectionReuseStrategy","()Lorg/apache/http/ConnectionReuseStrategy;")
J2CPP_DEFINE_METHOD(org::apache::http::impl::client::AbstractHttpClient,27,"setReuseStrategy","(Lorg/apache/http/ConnectionReuseStrategy;)V")
J2CPP_DEFINE_METHOD(org::apache::http::impl::client::AbstractHttpClient,28,"getConnectionKeepAliveStrategy","()Lorg/apache/http/conn/ConnectionKeepAliveStrategy;")
J2CPP_DEFINE_METHOD(org::apache::http::impl::client::AbstractHttpClient,29,"setKeepAliveStrategy","(Lorg/apache/http/conn/ConnectionKeepAliveStrategy;)V")
J2CPP_DEFINE_METHOD(org::apache::http::impl::client::AbstractHttpClient,30,"getHttpRequestRetryHandler","()Lorg/apache/http/client/HttpRequestRetryHandler;")
J2CPP_DEFINE_METHOD(org::apache::http::impl::client::AbstractHttpClient,31,"setHttpRequestRetryHandler","(Lorg/apache/http/client/HttpRequestRetryHandler;)V")
J2CPP_DEFINE_METHOD(org::apache::http::impl::client::AbstractHttpClient,32,"getRedirectHandler","()Lorg/apache/http/client/RedirectHandler;")
J2CPP_DEFINE_METHOD(org::apache::http::impl::client::AbstractHttpClient,33,"setRedirectHandler","(Lorg/apache/http/client/RedirectHandler;)V")
J2CPP_DEFINE_METHOD(org::apache::http::impl::client::AbstractHttpClient,34,"getTargetAuthenticationHandler","()Lorg/apache/http/client/AuthenticationHandler;")
J2CPP_DEFINE_METHOD(org::apache::http::impl::client::AbstractHttpClient,35,"setTargetAuthenticationHandler","(Lorg/apache/http/client/AuthenticationHandler;)V")
J2CPP_DEFINE_METHOD(org::apache::http::impl::client::AbstractHttpClient,36,"getProxyAuthenticationHandler","()Lorg/apache/http/client/AuthenticationHandler;")
J2CPP_DEFINE_METHOD(org::apache::http::impl::client::AbstractHttpClient,37,"setProxyAuthenticationHandler","(Lorg/apache/http/client/AuthenticationHandler;)V")
J2CPP_DEFINE_METHOD(org::apache::http::impl::client::AbstractHttpClient,38,"getCookieStore","()Lorg/apache/http/client/CookieStore;")
J2CPP_DEFINE_METHOD(org::apache::http::impl::client::AbstractHttpClient,39,"setCookieStore","(Lorg/apache/http/client/CookieStore;)V")
J2CPP_DEFINE_METHOD(org::apache::http::impl::client::AbstractHttpClient,40,"getCredentialsProvider","()Lorg/apache/http/client/CredentialsProvider;")
J2CPP_DEFINE_METHOD(org::apache::http::impl::client::AbstractHttpClient,41,"setCredentialsProvider","(Lorg/apache/http/client/CredentialsProvider;)V")
J2CPP_DEFINE_METHOD(org::apache::http::impl::client::AbstractHttpClient,42,"getRoutePlanner","()Lorg/apache/http/conn/routing/HttpRoutePlanner;")
J2CPP_DEFINE_METHOD(org::apache::http::impl::client::AbstractHttpClient,43,"setRoutePlanner","(Lorg/apache/http/conn/routing/HttpRoutePlanner;)V")
J2CPP_DEFINE_METHOD(org::apache::http::impl::client::AbstractHttpClient,44,"getUserTokenHandler","()Lorg/apache/http/client/UserTokenHandler;")
J2CPP_DEFINE_METHOD(org::apache::http::impl::client::AbstractHttpClient,45,"setUserTokenHandler","(Lorg/apache/http/client/UserTokenHandler;)V")
J2CPP_DEFINE_METHOD(org::apache::http::impl::client::AbstractHttpClient,46,"getHttpProcessor","()Lorg/apache/http/protocol/BasicHttpProcessor;")
J2CPP_DEFINE_METHOD(org::apache::http::impl::client::AbstractHttpClient,47,"addResponseInterceptor","(Lorg/apache/http/HttpResponseInterceptor;)V")
J2CPP_DEFINE_METHOD(org::apache::http::impl::client::AbstractHttpClient,48,"addResponseInterceptor","(Lorg/apache/http/HttpResponseInterceptor;I)V")
J2CPP_DEFINE_METHOD(org::apache::http::impl::client::AbstractHttpClient,49,"getResponseInterceptor","(I)Lorg/apache/http/HttpResponseInterceptor;")
J2CPP_DEFINE_METHOD(org::apache::http::impl::client::AbstractHttpClient,50,"getResponseInterceptorCount","()I")
J2CPP_DEFINE_METHOD(org::apache::http::impl::client::AbstractHttpClient,51,"clearResponseInterceptors","()V")
J2CPP_DEFINE_METHOD(org::apache::http::impl::client::AbstractHttpClient,52,"removeResponseInterceptorByClass","(Ljava/lang/Class;)V")
J2CPP_DEFINE_METHOD(org::apache::http::impl::client::AbstractHttpClient,53,"addRequestInterceptor","(Lorg/apache/http/HttpRequestInterceptor;)V")
J2CPP_DEFINE_METHOD(org::apache::http::impl::client::AbstractHttpClient,54,"addRequestInterceptor","(Lorg/apache/http/HttpRequestInterceptor;I)V")
J2CPP_DEFINE_METHOD(org::apache::http::impl::client::AbstractHttpClient,55,"getRequestInterceptor","(I)Lorg/apache/http/HttpRequestInterceptor;")
J2CPP_DEFINE_METHOD(org::apache::http::impl::client::AbstractHttpClient,56,"getRequestInterceptorCount","()I")
J2CPP_DEFINE_METHOD(org::apache::http::impl::client::AbstractHttpClient,57,"clearRequestInterceptors","()V")
J2CPP_DEFINE_METHOD(org::apache::http::impl::client::AbstractHttpClient,58,"removeRequestInterceptorByClass","(Ljava/lang/Class;)V")
J2CPP_DEFINE_METHOD(org::apache::http::impl::client::AbstractHttpClient,59,"execute","(Lorg/apache/http/client/methods/HttpUriRequest;)Lorg/apache/http/HttpResponse;")
J2CPP_DEFINE_METHOD(org::apache::http::impl::client::AbstractHttpClient,60,"execute","(Lorg/apache/http/client/methods/HttpUriRequest;Lorg/apache/http/protocol/HttpContext;)Lorg/apache/http/HttpResponse;")
J2CPP_DEFINE_METHOD(org::apache::http::impl::client::AbstractHttpClient,61,"execute","(Lorg/apache/http/HttpHost;Lorg/apache/http/HttpRequest;)Lorg/apache/http/HttpResponse;")
J2CPP_DEFINE_METHOD(org::apache::http::impl::client::AbstractHttpClient,62,"execute","(Lorg/apache/http/HttpHost;Lorg/apache/http/HttpRequest;Lorg/apache/http/protocol/HttpContext;)Lorg/apache/http/HttpResponse;")
J2CPP_DEFINE_METHOD(org::apache::http::impl::client::AbstractHttpClient,63,"createClientRequestDirector","(Lorg/apache/http/protocol/HttpRequestExecutor;Lorg/apache/http/conn/ClientConnectionManager;Lorg/apache/http/ConnectionReuseStrategy;Lorg/apache/http/conn/ConnectionKeepAliveStrategy;Lorg/apache/http/conn/routing/HttpRoutePlanner;Lorg/apache/http/protocol/HttpProcessor;Lorg/apache/http/client/HttpRequestRetryHandler;Lorg/apache/http/client/RedirectHandler;Lorg/apache/http/client/AuthenticationHandler;Lorg/apache/http/client/AuthenticationHandler;Lorg/apache/http/client/UserTokenHandler;Lorg/apache/http/params/HttpParams;)Lorg/apache/http/client/RequestDirector;")
J2CPP_DEFINE_METHOD(org::apache::http::impl::client::AbstractHttpClient,64,"determineParams","(Lorg/apache/http/HttpRequest;)Lorg/apache/http/params/HttpParams;")
J2CPP_DEFINE_METHOD(org::apache::http::impl::client::AbstractHttpClient,65,"execute","(Lorg/apache/http/client/methods/HttpUriRequest;Lorg/apache/http/client/ResponseHandler;)Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(org::apache::http::impl::client::AbstractHttpClient,66,"execute","(Lorg/apache/http/client/methods/HttpUriRequest;Lorg/apache/http/client/ResponseHandler;Lorg/apache/http/protocol/HttpContext;)Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(org::apache::http::impl::client::AbstractHttpClient,67,"execute","(Lorg/apache/http/HttpHost;Lorg/apache/http/HttpRequest;Lorg/apache/http/client/ResponseHandler;)Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(org::apache::http::impl::client::AbstractHttpClient,68,"execute","(Lorg/apache/http/HttpHost;Lorg/apache/http/HttpRequest;Lorg/apache/http/client/ResponseHandler;Lorg/apache/http/protocol/HttpContext;)Ljava/lang/Object;")

} //namespace j2cpp

#endif //J2CPP_ORG_APACHE_HTTP_IMPL_CLIENT_ABSTRACTHTTPCLIENT_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
