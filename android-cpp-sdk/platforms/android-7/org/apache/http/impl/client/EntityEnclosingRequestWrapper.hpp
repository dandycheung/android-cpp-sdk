/*================================================================================
  code generated by: java2cpp
  class: org.apache.http.impl.client.EntityEnclosingRequestWrapper
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ORG_APACHE_HTTP_IMPL_CLIENT_ENTITYENCLOSINGREQUESTWRAPPER_HPP_DECL
#define J2CPP_ORG_APACHE_HTTP_IMPL_CLIENT_ENTITYENCLOSINGREQUESTWRAPPER_HPP_DECL


namespace j2cpp { namespace org { namespace apache { namespace http { class HttpEntityEnclosingRequest; } } } }
namespace j2cpp { namespace org { namespace apache { namespace http { namespace impl { namespace client { class RequestWrapper; } } } } } }
namespace j2cpp { namespace org { namespace apache { namespace http { class HttpEntity; } } } }


#include <org/apache/http/HttpEntity.hpp>
#include <org/apache/http/HttpEntityEnclosingRequest.hpp>
#include <org/apache/http/impl/client/RequestWrapper.hpp>


namespace j2cpp {

namespace org { namespace apache { namespace http { namespace impl { namespace client {

	class EntityEnclosingRequestWrapper;
	class EntityEnclosingRequestWrapper
		: public cpp_object<EntityEnclosingRequestWrapper>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)

		explicit EntityEnclosingRequestWrapper(jobject jobj)
		: cpp_object<EntityEnclosingRequestWrapper>(jobj)
		{
		}

		operator local_ref<org::apache::http::impl::client::RequestWrapper>() const;
		operator local_ref<org::apache::http::HttpEntityEnclosingRequest>() const;


		EntityEnclosingRequestWrapper(local_ref< org::apache::http::HttpEntityEnclosingRequest > const&);
		local_ref< org::apache::http::HttpEntity > getEntity();
		void setEntity(local_ref< org::apache::http::HttpEntity > const&);
		cpp_boolean expectContinue();
		cpp_boolean isRepeatable();
	}; //class EntityEnclosingRequestWrapper

} //namespace client
} //namespace impl
} //namespace http
} //namespace apache
} //namespace org

} //namespace j2cpp

#endif //J2CPP_ORG_APACHE_HTTP_IMPL_CLIENT_ENTITYENCLOSINGREQUESTWRAPPER_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ORG_APACHE_HTTP_IMPL_CLIENT_ENTITYENCLOSINGREQUESTWRAPPER_HPP_IMPL
#define J2CPP_ORG_APACHE_HTTP_IMPL_CLIENT_ENTITYENCLOSINGREQUESTWRAPPER_HPP_IMPL

namespace j2cpp {



org::apache::http::impl::client::EntityEnclosingRequestWrapper::operator local_ref<org::apache::http::impl::client::RequestWrapper>() const
{
	return local_ref<org::apache::http::impl::client::RequestWrapper>(get_jtype());
}

org::apache::http::impl::client::EntityEnclosingRequestWrapper::operator local_ref<org::apache::http::HttpEntityEnclosingRequest>() const
{
	return local_ref<org::apache::http::HttpEntityEnclosingRequest>(get_jtype());
}


org::apache::http::impl::client::EntityEnclosingRequestWrapper::EntityEnclosingRequestWrapper(local_ref< org::apache::http::HttpEntityEnclosingRequest > const &a0)
: cpp_object<org::apache::http::impl::client::EntityEnclosingRequestWrapper>(
	environment::get().get_jenv()->NewObject(
		get_class<org::apache::http::impl::client::EntityEnclosingRequestWrapper::J2CPP_CLASS_NAME>(),
		get_method_id<org::apache::http::impl::client::EntityEnclosingRequestWrapper::J2CPP_CLASS_NAME, org::apache::http::impl::client::EntityEnclosingRequestWrapper::J2CPP_METHOD_NAME(0), org::apache::http::impl::client::EntityEnclosingRequestWrapper::J2CPP_METHOD_SIGNATURE(0), false>(),
		a0.get_jtype()
	)
)
{
}


local_ref< org::apache::http::HttpEntity > org::apache::http::impl::client::EntityEnclosingRequestWrapper::getEntity()
{
	return local_ref< org::apache::http::HttpEntity >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), false>()
		)
	);
}

void org::apache::http::impl::client::EntityEnclosingRequestWrapper::setEntity(local_ref< org::apache::http::HttpEntity > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean org::apache::http::impl::client::EntityEnclosingRequestWrapper::expectContinue()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>()
		)
	);
}

cpp_boolean org::apache::http::impl::client::EntityEnclosingRequestWrapper::isRepeatable()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>()
		)
	);
}


J2CPP_DEFINE_CLASS(org::apache::http::impl::client::EntityEnclosingRequestWrapper,"org/apache/http/impl/client/EntityEnclosingRequestWrapper")
J2CPP_DEFINE_METHOD(org::apache::http::impl::client::EntityEnclosingRequestWrapper,0,"<init>","(Lorg/apache/http/HttpEntityEnclosingRequest;)V")
J2CPP_DEFINE_METHOD(org::apache::http::impl::client::EntityEnclosingRequestWrapper,1,"getEntity","()Lorg/apache/http/HttpEntity;")
J2CPP_DEFINE_METHOD(org::apache::http::impl::client::EntityEnclosingRequestWrapper,2,"setEntity","(Lorg/apache/http/HttpEntity;)V")
J2CPP_DEFINE_METHOD(org::apache::http::impl::client::EntityEnclosingRequestWrapper,3,"expectContinue","()Z")
J2CPP_DEFINE_METHOD(org::apache::http::impl::client::EntityEnclosingRequestWrapper,4,"isRepeatable","()Z")

} //namespace j2cpp

#endif //J2CPP_ORG_APACHE_HTTP_IMPL_CLIENT_ENTITYENCLOSINGREQUESTWRAPPER_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
