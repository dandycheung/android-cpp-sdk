/*================================================================================
  code generated by: java2cpp
  class: org.apache.http.impl.cookie.BasicExpiresHandler
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ORG_APACHE_HTTP_IMPL_COOKIE_BASICEXPIRESHANDLER_HPP_DECL
#define J2CPP_ORG_APACHE_HTTP_IMPL_COOKIE_BASICEXPIRESHANDLER_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace org { namespace apache { namespace http { namespace cookie { class SetCookie; } } } } }
namespace j2cpp { namespace org { namespace apache { namespace http { namespace impl { namespace cookie { class AbstractCookieAttributeHandler; } } } } } }


#include <java/lang/String.hpp>
#include <org/apache/http/cookie/SetCookie.hpp>
#include <org/apache/http/impl/cookie/AbstractCookieAttributeHandler.hpp>


namespace j2cpp {

namespace org { namespace apache { namespace http { namespace impl { namespace cookie {

	class BasicExpiresHandler;
	class BasicExpiresHandler
		: public cpp_object<BasicExpiresHandler>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)

		explicit BasicExpiresHandler(jobject jobj)
		: cpp_object<BasicExpiresHandler>(jobj)
		{
		}

		operator local_ref<org::apache::http::impl::cookie::AbstractCookieAttributeHandler>() const;


		BasicExpiresHandler(local_ref< cpp_object_array<java::lang::String, 1> > const&);
		void parse(local_ref< org::apache::http::cookie::SetCookie > const&, local_ref< java::lang::String > const&);
	}; //class BasicExpiresHandler

} //namespace cookie
} //namespace impl
} //namespace http
} //namespace apache
} //namespace org

} //namespace j2cpp

#endif //J2CPP_ORG_APACHE_HTTP_IMPL_COOKIE_BASICEXPIRESHANDLER_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ORG_APACHE_HTTP_IMPL_COOKIE_BASICEXPIRESHANDLER_HPP_IMPL
#define J2CPP_ORG_APACHE_HTTP_IMPL_COOKIE_BASICEXPIRESHANDLER_HPP_IMPL

namespace j2cpp {



org::apache::http::impl::cookie::BasicExpiresHandler::operator local_ref<org::apache::http::impl::cookie::AbstractCookieAttributeHandler>() const
{
	return local_ref<org::apache::http::impl::cookie::AbstractCookieAttributeHandler>(get_jtype());
}


org::apache::http::impl::cookie::BasicExpiresHandler::BasicExpiresHandler(local_ref< cpp_object_array<java::lang::String, 1> > const &a0)
: cpp_object<org::apache::http::impl::cookie::BasicExpiresHandler>(
	environment::get().get_jenv()->NewObject(
		get_class<org::apache::http::impl::cookie::BasicExpiresHandler::J2CPP_CLASS_NAME>(),
		get_method_id<org::apache::http::impl::cookie::BasicExpiresHandler::J2CPP_CLASS_NAME, org::apache::http::impl::cookie::BasicExpiresHandler::J2CPP_METHOD_NAME(0), org::apache::http::impl::cookie::BasicExpiresHandler::J2CPP_METHOD_SIGNATURE(0), false>(),
		a0.get_jtype()
	)
)
{
}


void org::apache::http::impl::cookie::BasicExpiresHandler::parse(local_ref< org::apache::http::cookie::SetCookie > const &a0, local_ref< java::lang::String > const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}


J2CPP_DEFINE_CLASS(org::apache::http::impl::cookie::BasicExpiresHandler,"org/apache/http/impl/cookie/BasicExpiresHandler")
J2CPP_DEFINE_METHOD(org::apache::http::impl::cookie::BasicExpiresHandler,0,"<init>","([java.lang.String)V")
J2CPP_DEFINE_METHOD(org::apache::http::impl::cookie::BasicExpiresHandler,1,"parse","(Lorg/apache/http/cookie/SetCookie;Ljava/lang/String;)V")

} //namespace j2cpp

#endif //J2CPP_ORG_APACHE_HTTP_IMPL_COOKIE_BASICEXPIRESHANDLER_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
