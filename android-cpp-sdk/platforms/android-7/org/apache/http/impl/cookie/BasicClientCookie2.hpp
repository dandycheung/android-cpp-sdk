/*================================================================================
  code generated by: java2cpp
  class: org.apache.http.impl.cookie.BasicClientCookie2
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ORG_APACHE_HTTP_IMPL_COOKIE_BASICCLIENTCOOKIE2_HPP_DECL
#define J2CPP_ORG_APACHE_HTTP_IMPL_COOKIE_BASICCLIENTCOOKIE2_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace util { class Date; } } }


#include <java/lang/Object.hpp>
#include <java/lang/String.hpp>
#include <java/util/Date.hpp>


namespace j2cpp {

namespace org { namespace apache { namespace http { namespace impl { namespace cookie {

	class BasicClientCookie2;
	class BasicClientCookie2
		: public cpp_object<BasicClientCookie2>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)

		BasicClientCookie2(jobject jobj)
		: cpp_object<BasicClientCookie2>(jobj)
		{
		}

		local_ref< cpp_int_array<1> > getPorts();
		void setPorts(local_ref< cpp_int_array<1> > const&);
		local_ref< java::lang::String > getCommentURL();
		void setCommentURL(local_ref< java::lang::String > const&);
		void setDiscard(cpp_boolean const&);
		cpp_boolean isPersistent();
		cpp_boolean isExpired(local_ref< java::util::Date > const&);
		local_ref< java::lang::Object > clone();
	}; //class BasicClientCookie2

} //namespace cookie
} //namespace impl
} //namespace http
} //namespace apache
} //namespace org


} //namespace j2cpp

#endif //J2CPP_ORG_APACHE_HTTP_IMPL_COOKIE_BASICCLIENTCOOKIE2_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ORG_APACHE_HTTP_IMPL_COOKIE_BASICCLIENTCOOKIE2_HPP_IMPL
#define J2CPP_ORG_APACHE_HTTP_IMPL_COOKIE_BASICCLIENTCOOKIE2_HPP_IMPL

namespace j2cpp {


template <>
local_ref< org::apache::http::impl::cookie::BasicClientCookie2 > create< org::apache::http::impl::cookie::BasicClientCookie2>(local_ref< java::lang::String > const &a0, local_ref< java::lang::String > const &a1)
{
	return local_ref< org::apache::http::impl::cookie::BasicClientCookie2 >(
		environment::get().get_jenv()->NewObject(
			get_class<org::apache::http::impl::cookie::BasicClientCookie2::J2CPP_CLASS_NAME>(),
			get_method_id<org::apache::http::impl::cookie::BasicClientCookie2::J2CPP_CLASS_NAME, org::apache::http::impl::cookie::BasicClientCookie2::J2CPP_METHOD_NAME(0), org::apache::http::impl::cookie::BasicClientCookie2::J2CPP_METHOD_SIGNATURE(0), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< cpp_int_array<1> > org::apache::http::impl::cookie::BasicClientCookie2::getPorts()
{
	return local_ref< cpp_int_array<1> >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), false>()
		)
	);
}

void org::apache::http::impl::cookie::BasicClientCookie2::setPorts(local_ref< cpp_int_array<1> > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::String > org::apache::http::impl::cookie::BasicClientCookie2::getCommentURL()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>()
		)
	);
}

void org::apache::http::impl::cookie::BasicClientCookie2::setCommentURL(local_ref< java::lang::String > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>(),
			a0.get_jtype()
		)
	);
}

void org::apache::http::impl::cookie::BasicClientCookie2::setDiscard(cpp_boolean const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean org::apache::http::impl::cookie::BasicClientCookie2::isPersistent()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>()
		)
	);
}

cpp_boolean org::apache::http::impl::cookie::BasicClientCookie2::isExpired(local_ref< java::util::Date > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(7), J2CPP_METHOD_SIGNATURE(7), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::Object > org::apache::http::impl::cookie::BasicClientCookie2::clone()
{
	return local_ref< java::lang::Object >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(8), J2CPP_METHOD_SIGNATURE(8), false>()
		)
	);
}


J2CPP_DEFINE_CLASS(org::apache::http::impl::cookie::BasicClientCookie2,"org/apache/http/impl/cookie/BasicClientCookie2")
J2CPP_DEFINE_METHOD(org::apache::http::impl::cookie::BasicClientCookie2,0,"<init>","(Ljava/lang/String;Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(org::apache::http::impl::cookie::BasicClientCookie2,1,"getPorts","()[I")
J2CPP_DEFINE_METHOD(org::apache::http::impl::cookie::BasicClientCookie2,2,"setPorts","([I)V")
J2CPP_DEFINE_METHOD(org::apache::http::impl::cookie::BasicClientCookie2,3,"getCommentURL","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(org::apache::http::impl::cookie::BasicClientCookie2,4,"setCommentURL","(Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(org::apache::http::impl::cookie::BasicClientCookie2,5,"setDiscard","(Z)V")
J2CPP_DEFINE_METHOD(org::apache::http::impl::cookie::BasicClientCookie2,6,"isPersistent","()Z")
J2CPP_DEFINE_METHOD(org::apache::http::impl::cookie::BasicClientCookie2,7,"isExpired","(Ljava/util/Date;)Z")
J2CPP_DEFINE_METHOD(org::apache::http::impl::cookie::BasicClientCookie2,8,"clone","()Ljava/lang/Object;")

} //namespace j2cpp

#endif //J2CPP_ORG_APACHE_HTTP_IMPL_COOKIE_BASICCLIENTCOOKIE2_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
