/*================================================================================
  code generated by: java2cpp
  class: org.apache.http.impl.io.IdentityInputStream
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ORG_APACHE_HTTP_IMPL_IO_IDENTITYINPUTSTREAM_HPP_DECL
#define J2CPP_ORG_APACHE_HTTP_IMPL_IO_IDENTITYINPUTSTREAM_HPP_DECL


namespace j2cpp { namespace java { namespace io { class InputStream; } } }
namespace j2cpp { namespace org { namespace apache { namespace http { namespace io { class SessionInputBuffer; } } } } }


#include <java/io/InputStream.hpp>
#include <org/apache/http/io/SessionInputBuffer.hpp>


namespace j2cpp {

namespace org { namespace apache { namespace http { namespace impl { namespace io {

	class IdentityInputStream;
	class IdentityInputStream
		: public cpp_object<IdentityInputStream>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)

		explicit IdentityInputStream(jobject jobj)
		: cpp_object<IdentityInputStream>(jobj)
		{
		}

		operator local_ref<java::io::InputStream>() const;


		IdentityInputStream(local_ref< org::apache::http::io::SessionInputBuffer > const&);
		cpp_int available();
		void close();
		cpp_int read();
		cpp_int read(local_ref< cpp_byte_array<1> > const&, cpp_int const&, cpp_int const&);
	}; //class IdentityInputStream

} //namespace io
} //namespace impl
} //namespace http
} //namespace apache
} //namespace org

} //namespace j2cpp

#endif //J2CPP_ORG_APACHE_HTTP_IMPL_IO_IDENTITYINPUTSTREAM_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ORG_APACHE_HTTP_IMPL_IO_IDENTITYINPUTSTREAM_HPP_IMPL
#define J2CPP_ORG_APACHE_HTTP_IMPL_IO_IDENTITYINPUTSTREAM_HPP_IMPL

namespace j2cpp {



org::apache::http::impl::io::IdentityInputStream::operator local_ref<java::io::InputStream>() const
{
	return local_ref<java::io::InputStream>(get_jtype());
}


org::apache::http::impl::io::IdentityInputStream::IdentityInputStream(local_ref< org::apache::http::io::SessionInputBuffer > const &a0)
: cpp_object<org::apache::http::impl::io::IdentityInputStream>(
	environment::get().get_jenv()->NewObject(
		get_class<org::apache::http::impl::io::IdentityInputStream::J2CPP_CLASS_NAME>(),
		get_method_id<org::apache::http::impl::io::IdentityInputStream::J2CPP_CLASS_NAME, org::apache::http::impl::io::IdentityInputStream::J2CPP_METHOD_NAME(0), org::apache::http::impl::io::IdentityInputStream::J2CPP_METHOD_SIGNATURE(0), false>(),
		a0.get_jtype()
	)
)
{
}


cpp_int org::apache::http::impl::io::IdentityInputStream::available()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), false>()
		)
	);
}

void org::apache::http::impl::io::IdentityInputStream::close()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>()
		)
	);
}

cpp_int org::apache::http::impl::io::IdentityInputStream::read()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>()
		)
	);
}

cpp_int org::apache::http::impl::io::IdentityInputStream::read(local_ref< cpp_byte_array<1> > const &a0, cpp_int const &a1, cpp_int const &a2)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}


J2CPP_DEFINE_CLASS(org::apache::http::impl::io::IdentityInputStream,"org/apache/http/impl/io/IdentityInputStream")
J2CPP_DEFINE_METHOD(org::apache::http::impl::io::IdentityInputStream,0,"<init>","(Lorg/apache/http/io/SessionInputBuffer;)V")
J2CPP_DEFINE_METHOD(org::apache::http::impl::io::IdentityInputStream,1,"available","()I")
J2CPP_DEFINE_METHOD(org::apache::http::impl::io::IdentityInputStream,2,"close","()V")
J2CPP_DEFINE_METHOD(org::apache::http::impl::io::IdentityInputStream,3,"read","()I")
J2CPP_DEFINE_METHOD(org::apache::http::impl::io::IdentityInputStream,4,"read","([BII)I")

} //namespace j2cpp

#endif //J2CPP_ORG_APACHE_HTTP_IMPL_IO_IDENTITYINPUTSTREAM_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
