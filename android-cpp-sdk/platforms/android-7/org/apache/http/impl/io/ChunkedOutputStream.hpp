/*================================================================================
  code generated by: java2cpp
  class: org.apache.http.impl.io.ChunkedOutputStream
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ORG_APACHE_HTTP_IMPL_IO_CHUNKEDOUTPUTSTREAM_HPP_DECL
#define J2CPP_ORG_APACHE_HTTP_IMPL_IO_CHUNKEDOUTPUTSTREAM_HPP_DECL


namespace j2cpp { namespace org { namespace apache { namespace http { namespace io { class SessionOutputBuffer; } } } } }


#include <org/apache/http/io/SessionOutputBuffer.hpp>


namespace j2cpp {

namespace org { namespace apache { namespace http { namespace impl { namespace io {

	class ChunkedOutputStream;
	class ChunkedOutputStream
		: public cpp_object<ChunkedOutputStream>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)

		ChunkedOutputStream(jobject jobj)
		: cpp_object<ChunkedOutputStream>(jobj)
		{
		}

		void finish();
		void write(cpp_int const&);
		void write(local_ref< cpp_byte_array<1> > const&);
		void write(local_ref< cpp_byte_array<1> > const&, cpp_int const&, cpp_int const&);
		void flush();
		void close();
	}; //class ChunkedOutputStream

} //namespace io
} //namespace impl
} //namespace http
} //namespace apache
} //namespace org


} //namespace j2cpp

#endif //J2CPP_ORG_APACHE_HTTP_IMPL_IO_CHUNKEDOUTPUTSTREAM_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ORG_APACHE_HTTP_IMPL_IO_CHUNKEDOUTPUTSTREAM_HPP_IMPL
#define J2CPP_ORG_APACHE_HTTP_IMPL_IO_CHUNKEDOUTPUTSTREAM_HPP_IMPL

namespace j2cpp {


template <>
local_ref< org::apache::http::impl::io::ChunkedOutputStream > create< org::apache::http::impl::io::ChunkedOutputStream>(local_ref< org::apache::http::io::SessionOutputBuffer > const &a0, cpp_int const &a1)
{
	return local_ref< org::apache::http::impl::io::ChunkedOutputStream >(
		environment::get().get_jenv()->NewObject(
			get_class<org::apache::http::impl::io::ChunkedOutputStream::J2CPP_CLASS_NAME>(),
			get_method_id<org::apache::http::impl::io::ChunkedOutputStream::J2CPP_CLASS_NAME, org::apache::http::impl::io::ChunkedOutputStream::J2CPP_METHOD_NAME(0), org::apache::http::impl::io::ChunkedOutputStream::J2CPP_METHOD_SIGNATURE(0), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

template <>
local_ref< org::apache::http::impl::io::ChunkedOutputStream > create< org::apache::http::impl::io::ChunkedOutputStream>(local_ref< org::apache::http::io::SessionOutputBuffer > const &a0)
{
	return local_ref< org::apache::http::impl::io::ChunkedOutputStream >(
		environment::get().get_jenv()->NewObject(
			get_class<org::apache::http::impl::io::ChunkedOutputStream::J2CPP_CLASS_NAME>(),
			get_method_id<org::apache::http::impl::io::ChunkedOutputStream::J2CPP_CLASS_NAME, org::apache::http::impl::io::ChunkedOutputStream::J2CPP_METHOD_NAME(1), org::apache::http::impl::io::ChunkedOutputStream::J2CPP_METHOD_SIGNATURE(1), false>(),
			a0.get_jtype()
		)
	);
}




void org::apache::http::impl::io::ChunkedOutputStream::finish()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>()
		)
	);
}

void org::apache::http::impl::io::ChunkedOutputStream::write(cpp_int const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>(),
			a0.get_jtype()
		)
	);
}

void org::apache::http::impl::io::ChunkedOutputStream::write(local_ref< cpp_byte_array<1> > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(7), J2CPP_METHOD_SIGNATURE(7), false>(),
			a0.get_jtype()
		)
	);
}

void org::apache::http::impl::io::ChunkedOutputStream::write(local_ref< cpp_byte_array<1> > const &a0, cpp_int const &a1, cpp_int const &a2)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(8), J2CPP_METHOD_SIGNATURE(8), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

void org::apache::http::impl::io::ChunkedOutputStream::flush()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(9), J2CPP_METHOD_SIGNATURE(9), false>()
		)
	);
}

void org::apache::http::impl::io::ChunkedOutputStream::close()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(10), J2CPP_METHOD_SIGNATURE(10), false>()
		)
	);
}


J2CPP_DEFINE_CLASS(org::apache::http::impl::io::ChunkedOutputStream,"org/apache/http/impl/io/ChunkedOutputStream")
J2CPP_DEFINE_METHOD(org::apache::http::impl::io::ChunkedOutputStream,0,"<init>","(Lorg/apache/http/io/SessionOutputBuffer;I)V")
J2CPP_DEFINE_METHOD(org::apache::http::impl::io::ChunkedOutputStream,1,"<init>","(Lorg/apache/http/io/SessionOutputBuffer;)V")
J2CPP_DEFINE_METHOD(org::apache::http::impl::io::ChunkedOutputStream,2,"flushCache","()V")
J2CPP_DEFINE_METHOD(org::apache::http::impl::io::ChunkedOutputStream,3,"flushCacheWithAppend","([BII)V")
J2CPP_DEFINE_METHOD(org::apache::http::impl::io::ChunkedOutputStream,4,"writeClosingChunk","()V")
J2CPP_DEFINE_METHOD(org::apache::http::impl::io::ChunkedOutputStream,5,"finish","()V")
J2CPP_DEFINE_METHOD(org::apache::http::impl::io::ChunkedOutputStream,6,"write","(I)V")
J2CPP_DEFINE_METHOD(org::apache::http::impl::io::ChunkedOutputStream,7,"write","([B)V")
J2CPP_DEFINE_METHOD(org::apache::http::impl::io::ChunkedOutputStream,8,"write","([BII)V")
J2CPP_DEFINE_METHOD(org::apache::http::impl::io::ChunkedOutputStream,9,"flush","()V")
J2CPP_DEFINE_METHOD(org::apache::http::impl::io::ChunkedOutputStream,10,"close","()V")

} //namespace j2cpp

#endif //J2CPP_ORG_APACHE_HTTP_IMPL_IO_CHUNKEDOUTPUTSTREAM_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
