/*================================================================================
  code generated by: java2cpp
  class: dalvik.system.TouchDex
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_DALVIK_SYSTEM_TOUCHDEX_HPP_DECL
#define J2CPP_DALVIK_SYSTEM_TOUCHDEX_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace lang { class String; } } }


#include <java/lang/Object.hpp>
#include <java/lang/String.hpp>


namespace j2cpp {

namespace dalvik { namespace system {

	class TouchDex;
	class TouchDex
		: public cpp_object<TouchDex>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)

		explicit TouchDex(jobject jobj)
		: cpp_object<TouchDex>(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;


		TouchDex();
		static cpp_int start(local_ref< java::lang::String > const&);
		static void main(local_ref< cpp_object_array<java::lang::String, 1> > const&);
	}; //class TouchDex

} //namespace system
} //namespace dalvik

} //namespace j2cpp

#endif //J2CPP_DALVIK_SYSTEM_TOUCHDEX_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_DALVIK_SYSTEM_TOUCHDEX_HPP_IMPL
#define J2CPP_DALVIK_SYSTEM_TOUCHDEX_HPP_IMPL

namespace j2cpp {



dalvik::system::TouchDex::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jtype());
}


dalvik::system::TouchDex::TouchDex()
: cpp_object<dalvik::system::TouchDex>(
	environment::get().get_jenv()->NewObject(
		get_class<dalvik::system::TouchDex::J2CPP_CLASS_NAME>(),
		get_method_id<dalvik::system::TouchDex::J2CPP_CLASS_NAME, dalvik::system::TouchDex::J2CPP_METHOD_NAME(0), dalvik::system::TouchDex::J2CPP_METHOD_SIGNATURE(0), false>()
	)
)
{
}


cpp_int dalvik::system::TouchDex::start(local_ref< java::lang::String > const &a0)
{
	return cpp_int(
		environment::get().get_jenv()->CallStaticIntMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), true>(),
			a0.get_jtype()
		)
	);
}

void dalvik::system::TouchDex::main(local_ref< cpp_object_array<java::lang::String, 1> > const &a0)
{
	return void(
		environment::get().get_jenv()->CallStaticVoidMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), true>(),
			a0.get_jtype()
		)
	);
}


J2CPP_DEFINE_CLASS(dalvik::system::TouchDex,"dalvik/system/TouchDex")
J2CPP_DEFINE_METHOD(dalvik::system::TouchDex,0,"<init>","()V")
J2CPP_DEFINE_METHOD(dalvik::system::TouchDex,1,"start","(Ljava/lang/String;)I")
J2CPP_DEFINE_METHOD(dalvik::system::TouchDex,2,"main","([java.lang.String)V")

} //namespace j2cpp

#endif //J2CPP_DALVIK_SYSTEM_TOUCHDEX_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
