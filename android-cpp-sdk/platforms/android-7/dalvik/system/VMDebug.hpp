/*================================================================================
  code generated by: java2cpp
  class: dalvik.system.VMDebug
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_DALVIK_SYSTEM_VMDEBUG_HPP_DECL
#define J2CPP_DALVIK_SYSTEM_VMDEBUG_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace lang { class String; } } }


#include <java/lang/Object.hpp>
#include <java/lang/String.hpp>


namespace j2cpp {

namespace dalvik { namespace system {

	class VMDebug;
	class VMDebug
		: public cpp_object<VMDebug>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_METHOD(12)
		J2CPP_DECLARE_METHOD(13)
		J2CPP_DECLARE_METHOD(14)
		J2CPP_DECLARE_METHOD(15)
		J2CPP_DECLARE_METHOD(16)
		J2CPP_DECLARE_METHOD(17)
		J2CPP_DECLARE_METHOD(18)
		J2CPP_DECLARE_METHOD(19)
		J2CPP_DECLARE_METHOD(20)
		J2CPP_DECLARE_METHOD(21)
		J2CPP_DECLARE_METHOD(22)
		J2CPP_DECLARE_FIELD(0)
		J2CPP_DECLARE_FIELD(1)
		J2CPP_DECLARE_FIELD(2)
		J2CPP_DECLARE_FIELD(3)
		J2CPP_DECLARE_FIELD(4)
		J2CPP_DECLARE_FIELD(5)
		J2CPP_DECLARE_FIELD(6)
		J2CPP_DECLARE_FIELD(7)
		J2CPP_DECLARE_FIELD(8)
		J2CPP_DECLARE_FIELD(9)
		J2CPP_DECLARE_FIELD(10)
		J2CPP_DECLARE_FIELD(11)
		J2CPP_DECLARE_FIELD(12)
		J2CPP_DECLARE_FIELD(13)
		J2CPP_DECLARE_FIELD(14)
		J2CPP_DECLARE_FIELD(15)
		J2CPP_DECLARE_FIELD(16)
		J2CPP_DECLARE_FIELD(17)
		J2CPP_DECLARE_FIELD(18)
		J2CPP_DECLARE_FIELD(19)
		J2CPP_DECLARE_FIELD(20)

		explicit VMDebug(jobject jobj)
		: cpp_object<VMDebug>(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;


		static cpp_long lastDebuggerActivity();
		static cpp_boolean isDebuggingEnabled();
		static cpp_boolean isDebuggerConnected();
		static void startMethodTracing();
		static void startMethodTracing(local_ref< java::lang::String > const&, cpp_int const&, cpp_int const&);
		static void stopMethodTracing();
		static void startEmulatorTracing();
		static void stopEmulatorTracing();
		static cpp_long threadCpuTimeNanos();
		static void startAllocCounting();
		static void stopAllocCounting();
		static cpp_int getAllocCount(cpp_int const&);
		static void resetAllocCount(cpp_int const&);
		static cpp_int setAllocationLimit(cpp_int const&);
		static cpp_int setGlobalAllocationLimit(cpp_int const&);
		static void startInstructionCounting();
		static void stopInstructionCounting();
		static void getInstructionCount(local_ref< cpp_int_array<1> > const&);
		static void resetInstructionCount();
		static void printLoadedClasses(cpp_int const&);
		static cpp_int getLoadedClassCount();
		static void dumpHprofData(local_ref< java::lang::String > const&);

		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(0), J2CPP_FIELD_SIGNATURE(0), local_ref< java::lang::String > > DEFAULT_METHOD_TRACE_FILE_NAME;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(1), J2CPP_FIELD_SIGNATURE(1), cpp_int > TRACE_COUNT_ALLOCS;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(2), J2CPP_FIELD_SIGNATURE(2), cpp_int > KIND_GLOBAL_ALLOCATED_OBJECTS;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(3), J2CPP_FIELD_SIGNATURE(3), cpp_int > KIND_GLOBAL_ALLOCATED_BYTES;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(4), J2CPP_FIELD_SIGNATURE(4), cpp_int > KIND_GLOBAL_FREED_OBJECTS;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(5), J2CPP_FIELD_SIGNATURE(5), cpp_int > KIND_GLOBAL_FREED_BYTES;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(6), J2CPP_FIELD_SIGNATURE(6), cpp_int > KIND_GLOBAL_GC_INVOCATIONS;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(7), J2CPP_FIELD_SIGNATURE(7), cpp_int > KIND_GLOBAL_EXT_ALLOCATED_OBJECTS;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(8), J2CPP_FIELD_SIGNATURE(8), cpp_int > KIND_GLOBAL_EXT_ALLOCATED_BYTES;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(9), J2CPP_FIELD_SIGNATURE(9), cpp_int > KIND_GLOBAL_EXT_FREED_OBJECTS;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(10), J2CPP_FIELD_SIGNATURE(10), cpp_int > KIND_GLOBAL_EXT_FREED_BYTES;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(11), J2CPP_FIELD_SIGNATURE(11), cpp_int > KIND_THREAD_ALLOCATED_OBJECTS;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(12), J2CPP_FIELD_SIGNATURE(12), cpp_int > KIND_THREAD_ALLOCATED_BYTES;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(13), J2CPP_FIELD_SIGNATURE(13), cpp_int > KIND_THREAD_FREED_OBJECTS;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(14), J2CPP_FIELD_SIGNATURE(14), cpp_int > KIND_THREAD_FREED_BYTES;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(15), J2CPP_FIELD_SIGNATURE(15), cpp_int > KIND_THREAD_GC_INVOCATIONS;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(16), J2CPP_FIELD_SIGNATURE(16), cpp_int > KIND_THREAD_EXT_ALLOCATED_OBJECTS;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(17), J2CPP_FIELD_SIGNATURE(17), cpp_int > KIND_THREAD_EXT_ALLOCATED_BYTES;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(18), J2CPP_FIELD_SIGNATURE(18), cpp_int > KIND_THREAD_EXT_FREED_OBJECTS;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(19), J2CPP_FIELD_SIGNATURE(19), cpp_int > KIND_THREAD_EXT_FREED_BYTES;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(20), J2CPP_FIELD_SIGNATURE(20), cpp_int > KIND_ALL_COUNTS;
	}; //class VMDebug

} //namespace system
} //namespace dalvik

} //namespace j2cpp

#endif //J2CPP_DALVIK_SYSTEM_VMDEBUG_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_DALVIK_SYSTEM_VMDEBUG_HPP_IMPL
#define J2CPP_DALVIK_SYSTEM_VMDEBUG_HPP_IMPL

namespace j2cpp {



dalvik::system::VMDebug::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jtype());
}


cpp_long dalvik::system::VMDebug::lastDebuggerActivity()
{
	return cpp_long(
		environment::get().get_jenv()->CallStaticLongMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), true>()
		)
	);
}

cpp_boolean dalvik::system::VMDebug::isDebuggingEnabled()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallStaticBooleanMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), true>()
		)
	);
}

cpp_boolean dalvik::system::VMDebug::isDebuggerConnected()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallStaticBooleanMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), true>()
		)
	);
}

void dalvik::system::VMDebug::startMethodTracing()
{
	return void(
		environment::get().get_jenv()->CallStaticVoidMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), true>()
		)
	);
}

void dalvik::system::VMDebug::startMethodTracing(local_ref< java::lang::String > const &a0, cpp_int const &a1, cpp_int const &a2)
{
	return void(
		environment::get().get_jenv()->CallStaticVoidMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), true>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

void dalvik::system::VMDebug::stopMethodTracing()
{
	return void(
		environment::get().get_jenv()->CallStaticVoidMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), true>()
		)
	);
}

void dalvik::system::VMDebug::startEmulatorTracing()
{
	return void(
		environment::get().get_jenv()->CallStaticVoidMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(7), J2CPP_METHOD_SIGNATURE(7), true>()
		)
	);
}

void dalvik::system::VMDebug::stopEmulatorTracing()
{
	return void(
		environment::get().get_jenv()->CallStaticVoidMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(8), J2CPP_METHOD_SIGNATURE(8), true>()
		)
	);
}

cpp_long dalvik::system::VMDebug::threadCpuTimeNanos()
{
	return cpp_long(
		environment::get().get_jenv()->CallStaticLongMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(9), J2CPP_METHOD_SIGNATURE(9), true>()
		)
	);
}

void dalvik::system::VMDebug::startAllocCounting()
{
	return void(
		environment::get().get_jenv()->CallStaticVoidMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(10), J2CPP_METHOD_SIGNATURE(10), true>()
		)
	);
}

void dalvik::system::VMDebug::stopAllocCounting()
{
	return void(
		environment::get().get_jenv()->CallStaticVoidMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(11), J2CPP_METHOD_SIGNATURE(11), true>()
		)
	);
}

cpp_int dalvik::system::VMDebug::getAllocCount(cpp_int const &a0)
{
	return cpp_int(
		environment::get().get_jenv()->CallStaticIntMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(12), J2CPP_METHOD_SIGNATURE(12), true>(),
			a0.get_jtype()
		)
	);
}

void dalvik::system::VMDebug::resetAllocCount(cpp_int const &a0)
{
	return void(
		environment::get().get_jenv()->CallStaticVoidMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(13), J2CPP_METHOD_SIGNATURE(13), true>(),
			a0.get_jtype()
		)
	);
}

cpp_int dalvik::system::VMDebug::setAllocationLimit(cpp_int const &a0)
{
	return cpp_int(
		environment::get().get_jenv()->CallStaticIntMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(14), J2CPP_METHOD_SIGNATURE(14), true>(),
			a0.get_jtype()
		)
	);
}

cpp_int dalvik::system::VMDebug::setGlobalAllocationLimit(cpp_int const &a0)
{
	return cpp_int(
		environment::get().get_jenv()->CallStaticIntMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(15), J2CPP_METHOD_SIGNATURE(15), true>(),
			a0.get_jtype()
		)
	);
}

void dalvik::system::VMDebug::startInstructionCounting()
{
	return void(
		environment::get().get_jenv()->CallStaticVoidMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(16), J2CPP_METHOD_SIGNATURE(16), true>()
		)
	);
}

void dalvik::system::VMDebug::stopInstructionCounting()
{
	return void(
		environment::get().get_jenv()->CallStaticVoidMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(17), J2CPP_METHOD_SIGNATURE(17), true>()
		)
	);
}

void dalvik::system::VMDebug::getInstructionCount(local_ref< cpp_int_array<1> > const &a0)
{
	return void(
		environment::get().get_jenv()->CallStaticVoidMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(18), J2CPP_METHOD_SIGNATURE(18), true>(),
			a0.get_jtype()
		)
	);
}

void dalvik::system::VMDebug::resetInstructionCount()
{
	return void(
		environment::get().get_jenv()->CallStaticVoidMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(19), J2CPP_METHOD_SIGNATURE(19), true>()
		)
	);
}

void dalvik::system::VMDebug::printLoadedClasses(cpp_int const &a0)
{
	return void(
		environment::get().get_jenv()->CallStaticVoidMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(20), J2CPP_METHOD_SIGNATURE(20), true>(),
			a0.get_jtype()
		)
	);
}

cpp_int dalvik::system::VMDebug::getLoadedClassCount()
{
	return cpp_int(
		environment::get().get_jenv()->CallStaticIntMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(21), J2CPP_METHOD_SIGNATURE(21), true>()
		)
	);
}

void dalvik::system::VMDebug::dumpHprofData(local_ref< java::lang::String > const &a0)
{
	return void(
		environment::get().get_jenv()->CallStaticVoidMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(22), J2CPP_METHOD_SIGNATURE(22), true>(),
			a0.get_jtype()
		)
	);
}


static_field<
	dalvik::system::VMDebug::J2CPP_CLASS_NAME,
	dalvik::system::VMDebug::J2CPP_FIELD_NAME(0),
	dalvik::system::VMDebug::J2CPP_FIELD_SIGNATURE(0),
	local_ref< java::lang::String >
> dalvik::system::VMDebug::DEFAULT_METHOD_TRACE_FILE_NAME;

static_field<
	dalvik::system::VMDebug::J2CPP_CLASS_NAME,
	dalvik::system::VMDebug::J2CPP_FIELD_NAME(1),
	dalvik::system::VMDebug::J2CPP_FIELD_SIGNATURE(1),
	cpp_int
> dalvik::system::VMDebug::TRACE_COUNT_ALLOCS;

static_field<
	dalvik::system::VMDebug::J2CPP_CLASS_NAME,
	dalvik::system::VMDebug::J2CPP_FIELD_NAME(2),
	dalvik::system::VMDebug::J2CPP_FIELD_SIGNATURE(2),
	cpp_int
> dalvik::system::VMDebug::KIND_GLOBAL_ALLOCATED_OBJECTS;

static_field<
	dalvik::system::VMDebug::J2CPP_CLASS_NAME,
	dalvik::system::VMDebug::J2CPP_FIELD_NAME(3),
	dalvik::system::VMDebug::J2CPP_FIELD_SIGNATURE(3),
	cpp_int
> dalvik::system::VMDebug::KIND_GLOBAL_ALLOCATED_BYTES;

static_field<
	dalvik::system::VMDebug::J2CPP_CLASS_NAME,
	dalvik::system::VMDebug::J2CPP_FIELD_NAME(4),
	dalvik::system::VMDebug::J2CPP_FIELD_SIGNATURE(4),
	cpp_int
> dalvik::system::VMDebug::KIND_GLOBAL_FREED_OBJECTS;

static_field<
	dalvik::system::VMDebug::J2CPP_CLASS_NAME,
	dalvik::system::VMDebug::J2CPP_FIELD_NAME(5),
	dalvik::system::VMDebug::J2CPP_FIELD_SIGNATURE(5),
	cpp_int
> dalvik::system::VMDebug::KIND_GLOBAL_FREED_BYTES;

static_field<
	dalvik::system::VMDebug::J2CPP_CLASS_NAME,
	dalvik::system::VMDebug::J2CPP_FIELD_NAME(6),
	dalvik::system::VMDebug::J2CPP_FIELD_SIGNATURE(6),
	cpp_int
> dalvik::system::VMDebug::KIND_GLOBAL_GC_INVOCATIONS;

static_field<
	dalvik::system::VMDebug::J2CPP_CLASS_NAME,
	dalvik::system::VMDebug::J2CPP_FIELD_NAME(7),
	dalvik::system::VMDebug::J2CPP_FIELD_SIGNATURE(7),
	cpp_int
> dalvik::system::VMDebug::KIND_GLOBAL_EXT_ALLOCATED_OBJECTS;

static_field<
	dalvik::system::VMDebug::J2CPP_CLASS_NAME,
	dalvik::system::VMDebug::J2CPP_FIELD_NAME(8),
	dalvik::system::VMDebug::J2CPP_FIELD_SIGNATURE(8),
	cpp_int
> dalvik::system::VMDebug::KIND_GLOBAL_EXT_ALLOCATED_BYTES;

static_field<
	dalvik::system::VMDebug::J2CPP_CLASS_NAME,
	dalvik::system::VMDebug::J2CPP_FIELD_NAME(9),
	dalvik::system::VMDebug::J2CPP_FIELD_SIGNATURE(9),
	cpp_int
> dalvik::system::VMDebug::KIND_GLOBAL_EXT_FREED_OBJECTS;

static_field<
	dalvik::system::VMDebug::J2CPP_CLASS_NAME,
	dalvik::system::VMDebug::J2CPP_FIELD_NAME(10),
	dalvik::system::VMDebug::J2CPP_FIELD_SIGNATURE(10),
	cpp_int
> dalvik::system::VMDebug::KIND_GLOBAL_EXT_FREED_BYTES;

static_field<
	dalvik::system::VMDebug::J2CPP_CLASS_NAME,
	dalvik::system::VMDebug::J2CPP_FIELD_NAME(11),
	dalvik::system::VMDebug::J2CPP_FIELD_SIGNATURE(11),
	cpp_int
> dalvik::system::VMDebug::KIND_THREAD_ALLOCATED_OBJECTS;

static_field<
	dalvik::system::VMDebug::J2CPP_CLASS_NAME,
	dalvik::system::VMDebug::J2CPP_FIELD_NAME(12),
	dalvik::system::VMDebug::J2CPP_FIELD_SIGNATURE(12),
	cpp_int
> dalvik::system::VMDebug::KIND_THREAD_ALLOCATED_BYTES;

static_field<
	dalvik::system::VMDebug::J2CPP_CLASS_NAME,
	dalvik::system::VMDebug::J2CPP_FIELD_NAME(13),
	dalvik::system::VMDebug::J2CPP_FIELD_SIGNATURE(13),
	cpp_int
> dalvik::system::VMDebug::KIND_THREAD_FREED_OBJECTS;

static_field<
	dalvik::system::VMDebug::J2CPP_CLASS_NAME,
	dalvik::system::VMDebug::J2CPP_FIELD_NAME(14),
	dalvik::system::VMDebug::J2CPP_FIELD_SIGNATURE(14),
	cpp_int
> dalvik::system::VMDebug::KIND_THREAD_FREED_BYTES;

static_field<
	dalvik::system::VMDebug::J2CPP_CLASS_NAME,
	dalvik::system::VMDebug::J2CPP_FIELD_NAME(15),
	dalvik::system::VMDebug::J2CPP_FIELD_SIGNATURE(15),
	cpp_int
> dalvik::system::VMDebug::KIND_THREAD_GC_INVOCATIONS;

static_field<
	dalvik::system::VMDebug::J2CPP_CLASS_NAME,
	dalvik::system::VMDebug::J2CPP_FIELD_NAME(16),
	dalvik::system::VMDebug::J2CPP_FIELD_SIGNATURE(16),
	cpp_int
> dalvik::system::VMDebug::KIND_THREAD_EXT_ALLOCATED_OBJECTS;

static_field<
	dalvik::system::VMDebug::J2CPP_CLASS_NAME,
	dalvik::system::VMDebug::J2CPP_FIELD_NAME(17),
	dalvik::system::VMDebug::J2CPP_FIELD_SIGNATURE(17),
	cpp_int
> dalvik::system::VMDebug::KIND_THREAD_EXT_ALLOCATED_BYTES;

static_field<
	dalvik::system::VMDebug::J2CPP_CLASS_NAME,
	dalvik::system::VMDebug::J2CPP_FIELD_NAME(18),
	dalvik::system::VMDebug::J2CPP_FIELD_SIGNATURE(18),
	cpp_int
> dalvik::system::VMDebug::KIND_THREAD_EXT_FREED_OBJECTS;

static_field<
	dalvik::system::VMDebug::J2CPP_CLASS_NAME,
	dalvik::system::VMDebug::J2CPP_FIELD_NAME(19),
	dalvik::system::VMDebug::J2CPP_FIELD_SIGNATURE(19),
	cpp_int
> dalvik::system::VMDebug::KIND_THREAD_EXT_FREED_BYTES;

static_field<
	dalvik::system::VMDebug::J2CPP_CLASS_NAME,
	dalvik::system::VMDebug::J2CPP_FIELD_NAME(20),
	dalvik::system::VMDebug::J2CPP_FIELD_SIGNATURE(20),
	cpp_int
> dalvik::system::VMDebug::KIND_ALL_COUNTS;


J2CPP_DEFINE_CLASS(dalvik::system::VMDebug,"dalvik/system/VMDebug")
J2CPP_DEFINE_METHOD(dalvik::system::VMDebug,0,"<init>","()V")
J2CPP_DEFINE_METHOD(dalvik::system::VMDebug,1,"lastDebuggerActivity","()J")
J2CPP_DEFINE_METHOD(dalvik::system::VMDebug,2,"isDebuggingEnabled","()Z")
J2CPP_DEFINE_METHOD(dalvik::system::VMDebug,3,"isDebuggerConnected","()Z")
J2CPP_DEFINE_METHOD(dalvik::system::VMDebug,4,"startMethodTracing","()V")
J2CPP_DEFINE_METHOD(dalvik::system::VMDebug,5,"startMethodTracing","(Ljava/lang/String;II)V")
J2CPP_DEFINE_METHOD(dalvik::system::VMDebug,6,"stopMethodTracing","()V")
J2CPP_DEFINE_METHOD(dalvik::system::VMDebug,7,"startEmulatorTracing","()V")
J2CPP_DEFINE_METHOD(dalvik::system::VMDebug,8,"stopEmulatorTracing","()V")
J2CPP_DEFINE_METHOD(dalvik::system::VMDebug,9,"threadCpuTimeNanos","()J")
J2CPP_DEFINE_METHOD(dalvik::system::VMDebug,10,"startAllocCounting","()V")
J2CPP_DEFINE_METHOD(dalvik::system::VMDebug,11,"stopAllocCounting","()V")
J2CPP_DEFINE_METHOD(dalvik::system::VMDebug,12,"getAllocCount","(I)I")
J2CPP_DEFINE_METHOD(dalvik::system::VMDebug,13,"resetAllocCount","(I)V")
J2CPP_DEFINE_METHOD(dalvik::system::VMDebug,14,"setAllocationLimit","(I)I")
J2CPP_DEFINE_METHOD(dalvik::system::VMDebug,15,"setGlobalAllocationLimit","(I)I")
J2CPP_DEFINE_METHOD(dalvik::system::VMDebug,16,"startInstructionCounting","()V")
J2CPP_DEFINE_METHOD(dalvik::system::VMDebug,17,"stopInstructionCounting","()V")
J2CPP_DEFINE_METHOD(dalvik::system::VMDebug,18,"getInstructionCount","([I)V")
J2CPP_DEFINE_METHOD(dalvik::system::VMDebug,19,"resetInstructionCount","()V")
J2CPP_DEFINE_METHOD(dalvik::system::VMDebug,20,"printLoadedClasses","(I)V")
J2CPP_DEFINE_METHOD(dalvik::system::VMDebug,21,"getLoadedClassCount","()I")
J2CPP_DEFINE_METHOD(dalvik::system::VMDebug,22,"dumpHprofData","(Ljava/lang/String;)V")
J2CPP_DEFINE_FIELD(dalvik::system::VMDebug,0,"DEFAULT_METHOD_TRACE_FILE_NAME","Ljava/lang/String;")
J2CPP_DEFINE_FIELD(dalvik::system::VMDebug,1,"TRACE_COUNT_ALLOCS","I")
J2CPP_DEFINE_FIELD(dalvik::system::VMDebug,2,"KIND_GLOBAL_ALLOCATED_OBJECTS","I")
J2CPP_DEFINE_FIELD(dalvik::system::VMDebug,3,"KIND_GLOBAL_ALLOCATED_BYTES","I")
J2CPP_DEFINE_FIELD(dalvik::system::VMDebug,4,"KIND_GLOBAL_FREED_OBJECTS","I")
J2CPP_DEFINE_FIELD(dalvik::system::VMDebug,5,"KIND_GLOBAL_FREED_BYTES","I")
J2CPP_DEFINE_FIELD(dalvik::system::VMDebug,6,"KIND_GLOBAL_GC_INVOCATIONS","I")
J2CPP_DEFINE_FIELD(dalvik::system::VMDebug,7,"KIND_GLOBAL_EXT_ALLOCATED_OBJECTS","I")
J2CPP_DEFINE_FIELD(dalvik::system::VMDebug,8,"KIND_GLOBAL_EXT_ALLOCATED_BYTES","I")
J2CPP_DEFINE_FIELD(dalvik::system::VMDebug,9,"KIND_GLOBAL_EXT_FREED_OBJECTS","I")
J2CPP_DEFINE_FIELD(dalvik::system::VMDebug,10,"KIND_GLOBAL_EXT_FREED_BYTES","I")
J2CPP_DEFINE_FIELD(dalvik::system::VMDebug,11,"KIND_THREAD_ALLOCATED_OBJECTS","I")
J2CPP_DEFINE_FIELD(dalvik::system::VMDebug,12,"KIND_THREAD_ALLOCATED_BYTES","I")
J2CPP_DEFINE_FIELD(dalvik::system::VMDebug,13,"KIND_THREAD_FREED_OBJECTS","I")
J2CPP_DEFINE_FIELD(dalvik::system::VMDebug,14,"KIND_THREAD_FREED_BYTES","I")
J2CPP_DEFINE_FIELD(dalvik::system::VMDebug,15,"KIND_THREAD_GC_INVOCATIONS","I")
J2CPP_DEFINE_FIELD(dalvik::system::VMDebug,16,"KIND_THREAD_EXT_ALLOCATED_OBJECTS","I")
J2CPP_DEFINE_FIELD(dalvik::system::VMDebug,17,"KIND_THREAD_EXT_ALLOCATED_BYTES","I")
J2CPP_DEFINE_FIELD(dalvik::system::VMDebug,18,"KIND_THREAD_EXT_FREED_OBJECTS","I")
J2CPP_DEFINE_FIELD(dalvik::system::VMDebug,19,"KIND_THREAD_EXT_FREED_BYTES","I")
J2CPP_DEFINE_FIELD(dalvik::system::VMDebug,20,"KIND_ALL_COUNTS","I")

} //namespace j2cpp

#endif //J2CPP_DALVIK_SYSTEM_VMDEBUG_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
