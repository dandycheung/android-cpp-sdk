/*================================================================================
  code generated by: java2cpp
  class: java.security.cert.X509CRL
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_SECURITY_CERT_X509CRL_HPP_DECL
#define J2CPP_JAVA_SECURITY_CERT_X509CRL_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace math { class BigInteger; } } }
namespace j2cpp { namespace java { namespace security { class Principal; } } }
namespace j2cpp { namespace java { namespace security { class PublicKey; } } }
namespace j2cpp { namespace java { namespace security { namespace cert { class X509Certificate; } } } }
namespace j2cpp { namespace java { namespace security { namespace cert { class X509CRLEntry; } } } }
namespace j2cpp { namespace java { namespace util { class Set; } } }
namespace j2cpp { namespace java { namespace util { class Date; } } }
namespace j2cpp { namespace javax { namespace security { namespace auth { namespace x500 { class X500Principal; } } } } }


#include <java/lang/Object.hpp>
#include <java/lang/String.hpp>
#include <java/math/BigInteger.hpp>
#include <java/security/Principal.hpp>
#include <java/security/PublicKey.hpp>
#include <java/security/cert/X509CRLEntry.hpp>
#include <java/security/cert/X509Certificate.hpp>
#include <java/util/Date.hpp>
#include <java/util/Set.hpp>
#include <javax/security/auth/x500/X500Principal.hpp>


namespace j2cpp {

namespace java { namespace security { namespace cert {

	class X509CRL;
	class X509CRL
		: public cpp_object<X509CRL>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_METHOD(12)
		J2CPP_DECLARE_METHOD(13)
		J2CPP_DECLARE_METHOD(14)
		J2CPP_DECLARE_METHOD(15)
		J2CPP_DECLARE_METHOD(16)
		J2CPP_DECLARE_METHOD(17)
		J2CPP_DECLARE_METHOD(18)

		X509CRL(jobject jobj)
		: cpp_object<X509CRL>(jobj)
		{
		}

		cpp_boolean equals(local_ref< java::lang::Object > const&);
		cpp_int hashCode();
		local_ref< cpp_byte_array<1> > getEncoded();
		void verify(local_ref< java::security::PublicKey > const&);
		void verify(local_ref< java::security::PublicKey > const&, local_ref< java::lang::String > const&);
		cpp_int getVersion();
		local_ref< java::security::Principal > getIssuerDN();
		local_ref< javax::security::auth::x500::X500Principal > getIssuerX500Principal();
		local_ref< java::util::Date > getThisUpdate();
		local_ref< java::util::Date > getNextUpdate();
		local_ref< java::security::cert::X509CRLEntry > getRevokedCertificate(local_ref< java::math::BigInteger > const&);
		local_ref< java::security::cert::X509CRLEntry > getRevokedCertificate(local_ref< java::security::cert::X509Certificate > const&);
		local_ref< java::util::Set > getRevokedCertificates();
		local_ref< cpp_byte_array<1> > getTBSCertList();
		local_ref< cpp_byte_array<1> > getSignature();
		local_ref< java::lang::String > getSigAlgName();
		local_ref< java::lang::String > getSigAlgOID();
		local_ref< cpp_byte_array<1> > getSigAlgParams();
	}; //class X509CRL

} //namespace cert
} //namespace security
} //namespace java


} //namespace j2cpp

#endif //J2CPP_JAVA_SECURITY_CERT_X509CRL_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_SECURITY_CERT_X509CRL_HPP_IMPL
#define J2CPP_JAVA_SECURITY_CERT_X509CRL_HPP_IMPL

namespace j2cpp {


template <>
local_ref< java::security::cert::X509CRL > create< java::security::cert::X509CRL>()
{
	return local_ref< java::security::cert::X509CRL >(
		environment::get().get_jenv()->NewObject(
			get_class<java::security::cert::X509CRL::J2CPP_CLASS_NAME>(),
			get_method_id<java::security::cert::X509CRL::J2CPP_CLASS_NAME, java::security::cert::X509CRL::J2CPP_METHOD_NAME(0), java::security::cert::X509CRL::J2CPP_METHOD_SIGNATURE(0), false>()
		)
	);
}

cpp_boolean java::security::cert::X509CRL::equals(local_ref< java::lang::Object > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int java::security::cert::X509CRL::hashCode()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>()
		)
	);
}

local_ref< cpp_byte_array<1> > java::security::cert::X509CRL::getEncoded()
{
	return local_ref< cpp_byte_array<1> >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>()
		)
	);
}

void java::security::cert::X509CRL::verify(local_ref< java::security::PublicKey > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>(),
			a0.get_jtype()
		)
	);
}

void java::security::cert::X509CRL::verify(local_ref< java::security::PublicKey > const &a0, local_ref< java::lang::String > const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_int java::security::cert::X509CRL::getVersion()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>()
		)
	);
}

local_ref< java::security::Principal > java::security::cert::X509CRL::getIssuerDN()
{
	return local_ref< java::security::Principal >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(7), J2CPP_METHOD_SIGNATURE(7), false>()
		)
	);
}

local_ref< javax::security::auth::x500::X500Principal > java::security::cert::X509CRL::getIssuerX500Principal()
{
	return local_ref< javax::security::auth::x500::X500Principal >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(8), J2CPP_METHOD_SIGNATURE(8), false>()
		)
	);
}

local_ref< java::util::Date > java::security::cert::X509CRL::getThisUpdate()
{
	return local_ref< java::util::Date >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(9), J2CPP_METHOD_SIGNATURE(9), false>()
		)
	);
}

local_ref< java::util::Date > java::security::cert::X509CRL::getNextUpdate()
{
	return local_ref< java::util::Date >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(10), J2CPP_METHOD_SIGNATURE(10), false>()
		)
	);
}

local_ref< java::security::cert::X509CRLEntry > java::security::cert::X509CRL::getRevokedCertificate(local_ref< java::math::BigInteger > const &a0)
{
	return local_ref< java::security::cert::X509CRLEntry >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(11), J2CPP_METHOD_SIGNATURE(11), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::security::cert::X509CRLEntry > java::security::cert::X509CRL::getRevokedCertificate(local_ref< java::security::cert::X509Certificate > const &a0)
{
	return local_ref< java::security::cert::X509CRLEntry >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(12), J2CPP_METHOD_SIGNATURE(12), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::util::Set > java::security::cert::X509CRL::getRevokedCertificates()
{
	return local_ref< java::util::Set >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(13), J2CPP_METHOD_SIGNATURE(13), false>()
		)
	);
}

local_ref< cpp_byte_array<1> > java::security::cert::X509CRL::getTBSCertList()
{
	return local_ref< cpp_byte_array<1> >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(14), J2CPP_METHOD_SIGNATURE(14), false>()
		)
	);
}

local_ref< cpp_byte_array<1> > java::security::cert::X509CRL::getSignature()
{
	return local_ref< cpp_byte_array<1> >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(15), J2CPP_METHOD_SIGNATURE(15), false>()
		)
	);
}

local_ref< java::lang::String > java::security::cert::X509CRL::getSigAlgName()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(16), J2CPP_METHOD_SIGNATURE(16), false>()
		)
	);
}

local_ref< java::lang::String > java::security::cert::X509CRL::getSigAlgOID()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(17), J2CPP_METHOD_SIGNATURE(17), false>()
		)
	);
}

local_ref< cpp_byte_array<1> > java::security::cert::X509CRL::getSigAlgParams()
{
	return local_ref< cpp_byte_array<1> >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(18), J2CPP_METHOD_SIGNATURE(18), false>()
		)
	);
}


J2CPP_DEFINE_CLASS(java::security::cert::X509CRL,"java/security/cert/X509CRL")
J2CPP_DEFINE_METHOD(java::security::cert::X509CRL,0,"<init>","()V")
J2CPP_DEFINE_METHOD(java::security::cert::X509CRL,1,"equals","(Ljava/lang/Object;)Z")
J2CPP_DEFINE_METHOD(java::security::cert::X509CRL,2,"hashCode","()I")
J2CPP_DEFINE_METHOD(java::security::cert::X509CRL,3,"getEncoded","()[B")
J2CPP_DEFINE_METHOD(java::security::cert::X509CRL,4,"verify","(Ljava/security/PublicKey;)V")
J2CPP_DEFINE_METHOD(java::security::cert::X509CRL,5,"verify","(Ljava/security/PublicKey;Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(java::security::cert::X509CRL,6,"getVersion","()I")
J2CPP_DEFINE_METHOD(java::security::cert::X509CRL,7,"getIssuerDN","()Ljava/security/Principal;")
J2CPP_DEFINE_METHOD(java::security::cert::X509CRL,8,"getIssuerX500Principal","()Ljavax/security/auth/x500/X500Principal;")
J2CPP_DEFINE_METHOD(java::security::cert::X509CRL,9,"getThisUpdate","()Ljava/util/Date;")
J2CPP_DEFINE_METHOD(java::security::cert::X509CRL,10,"getNextUpdate","()Ljava/util/Date;")
J2CPP_DEFINE_METHOD(java::security::cert::X509CRL,11,"getRevokedCertificate","(Ljava/math/BigInteger;)Ljava/security/cert/X509CRLEntry;")
J2CPP_DEFINE_METHOD(java::security::cert::X509CRL,12,"getRevokedCertificate","(Ljava/security/cert/X509Certificate;)Ljava/security/cert/X509CRLEntry;")
J2CPP_DEFINE_METHOD(java::security::cert::X509CRL,13,"getRevokedCertificates","()Ljava/util/Set;")
J2CPP_DEFINE_METHOD(java::security::cert::X509CRL,14,"getTBSCertList","()[B")
J2CPP_DEFINE_METHOD(java::security::cert::X509CRL,15,"getSignature","()[B")
J2CPP_DEFINE_METHOD(java::security::cert::X509CRL,16,"getSigAlgName","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::security::cert::X509CRL,17,"getSigAlgOID","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::security::cert::X509CRL,18,"getSigAlgParams","()[B")

} //namespace j2cpp

#endif //J2CPP_JAVA_SECURITY_CERT_X509CRL_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
