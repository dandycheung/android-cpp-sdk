/*================================================================================
  code generated by: java2cpp
  class: java.security.Permission
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_SECURITY_PERMISSION_HPP_DECL
#define J2CPP_JAVA_SECURITY_PERMISSION_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace security { class PermissionCollection; } } }


#include <java/lang/Object.hpp>
#include <java/lang/String.hpp>
#include <java/security/PermissionCollection.hpp>


namespace j2cpp {

namespace java { namespace security {

	class Permission;
	class Permission
		: public cpp_object<Permission>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)

		Permission(jobject jobj)
		: cpp_object<Permission>(jobj)
		{
		}

		cpp_boolean equals(local_ref< java::lang::Object > const&);
		cpp_int hashCode();
		local_ref< java::lang::String > getActions();
		cpp_boolean implies(local_ref< java::security::Permission > const&);
		local_ref< java::lang::String > getName();
		void checkGuard(local_ref< java::lang::Object > const&);
		local_ref< java::security::PermissionCollection > newPermissionCollection();
		local_ref< java::lang::String > toString();
	}; //class Permission

} //namespace security
} //namespace java


} //namespace j2cpp

#endif //J2CPP_JAVA_SECURITY_PERMISSION_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_SECURITY_PERMISSION_HPP_IMPL
#define J2CPP_JAVA_SECURITY_PERMISSION_HPP_IMPL

namespace j2cpp {


template <>
local_ref< java::security::Permission > create< java::security::Permission>(local_ref< java::lang::String > const &a0)
{
	return local_ref< java::security::Permission >(
		environment::get().get_jenv()->NewObject(
			get_class<java::security::Permission::J2CPP_CLASS_NAME>(),
			get_method_id<java::security::Permission::J2CPP_CLASS_NAME, java::security::Permission::J2CPP_METHOD_NAME(0), java::security::Permission::J2CPP_METHOD_SIGNATURE(0), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean java::security::Permission::equals(local_ref< java::lang::Object > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int java::security::Permission::hashCode()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>()
		)
	);
}

local_ref< java::lang::String > java::security::Permission::getActions()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>()
		)
	);
}

cpp_boolean java::security::Permission::implies(local_ref< java::security::Permission > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::String > java::security::Permission::getName()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>()
		)
	);
}

void java::security::Permission::checkGuard(local_ref< java::lang::Object > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::security::PermissionCollection > java::security::Permission::newPermissionCollection()
{
	return local_ref< java::security::PermissionCollection >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(7), J2CPP_METHOD_SIGNATURE(7), false>()
		)
	);
}

local_ref< java::lang::String > java::security::Permission::toString()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(8), J2CPP_METHOD_SIGNATURE(8), false>()
		)
	);
}


J2CPP_DEFINE_CLASS(java::security::Permission,"java/security/Permission")
J2CPP_DEFINE_METHOD(java::security::Permission,0,"<init>","(Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(java::security::Permission,1,"equals","(Ljava/lang/Object;)Z")
J2CPP_DEFINE_METHOD(java::security::Permission,2,"hashCode","()I")
J2CPP_DEFINE_METHOD(java::security::Permission,3,"getActions","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::security::Permission,4,"implies","(Ljava/security/Permission;)Z")
J2CPP_DEFINE_METHOD(java::security::Permission,5,"getName","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::security::Permission,6,"checkGuard","(Ljava/lang/Object;)V")
J2CPP_DEFINE_METHOD(java::security::Permission,7,"newPermissionCollection","()Ljava/security/PermissionCollection;")
J2CPP_DEFINE_METHOD(java::security::Permission,8,"toString","()Ljava/lang/String;")

} //namespace j2cpp

#endif //J2CPP_JAVA_SECURITY_PERMISSION_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
