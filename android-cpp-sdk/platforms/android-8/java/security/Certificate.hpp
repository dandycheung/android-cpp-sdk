/*================================================================================
  code generated by: java2cpp
  class: java.security.Certificate
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_SECURITY_CERTIFICATE_HPP_DECL
#define J2CPP_JAVA_SECURITY_CERTIFICATE_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace security { class Principal; } } }
namespace j2cpp { namespace java { namespace security { class PublicKey; } } }
namespace j2cpp { namespace java { namespace io { class InputStream; } } }
namespace j2cpp { namespace java { namespace io { class OutputStream; } } }


#include <java/io/InputStream.hpp>
#include <java/io/OutputStream.hpp>
#include <java/lang/String.hpp>
#include <java/security/Principal.hpp>
#include <java/security/PublicKey.hpp>


namespace j2cpp {

namespace java { namespace security {

	class Certificate;
	class Certificate
		: public cpp_object<Certificate>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)

		Certificate(jobject jobj)
		: cpp_object<Certificate>(jobj)
		{
		}

		void decode(local_ref< java::io::InputStream > const&);
		void encode(local_ref< java::io::OutputStream > const&);
		local_ref< java::lang::String > getFormat();
		local_ref< java::security::Principal > getGuarantor();
		local_ref< java::security::Principal > getPrincipal();
		local_ref< java::security::PublicKey > getPublicKey();
		local_ref< java::lang::String > toString(cpp_boolean const&);
	}; //class Certificate

} //namespace security
} //namespace java


} //namespace j2cpp

#endif //J2CPP_JAVA_SECURITY_CERTIFICATE_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_SECURITY_CERTIFICATE_HPP_IMPL
#define J2CPP_JAVA_SECURITY_CERTIFICATE_HPP_IMPL

namespace j2cpp {


void java::security::Certificate::decode(local_ref< java::io::InputStream > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(0), J2CPP_METHOD_SIGNATURE(0), false>(),
			a0.get_jtype()
		)
	);
}

void java::security::Certificate::encode(local_ref< java::io::OutputStream > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::String > java::security::Certificate::getFormat()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>()
		)
	);
}

local_ref< java::security::Principal > java::security::Certificate::getGuarantor()
{
	return local_ref< java::security::Principal >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>()
		)
	);
}

local_ref< java::security::Principal > java::security::Certificate::getPrincipal()
{
	return local_ref< java::security::Principal >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>()
		)
	);
}

local_ref< java::security::PublicKey > java::security::Certificate::getPublicKey()
{
	return local_ref< java::security::PublicKey >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>()
		)
	);
}

local_ref< java::lang::String > java::security::Certificate::toString(cpp_boolean const &a0)
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>(),
			a0.get_jtype()
		)
	);
}


J2CPP_DEFINE_CLASS(java::security::Certificate,"java/security/Certificate")
J2CPP_DEFINE_METHOD(java::security::Certificate,0,"decode","(Ljava/io/InputStream;)V")
J2CPP_DEFINE_METHOD(java::security::Certificate,1,"encode","(Ljava/io/OutputStream;)V")
J2CPP_DEFINE_METHOD(java::security::Certificate,2,"getFormat","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::security::Certificate,3,"getGuarantor","()Ljava/security/Principal;")
J2CPP_DEFINE_METHOD(java::security::Certificate,4,"getPrincipal","()Ljava/security/Principal;")
J2CPP_DEFINE_METHOD(java::security::Certificate,5,"getPublicKey","()Ljava/security/PublicKey;")
J2CPP_DEFINE_METHOD(java::security::Certificate,6,"toString","(Z)Ljava/lang/String;")

} //namespace j2cpp

#endif //J2CPP_JAVA_SECURITY_CERTIFICATE_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
