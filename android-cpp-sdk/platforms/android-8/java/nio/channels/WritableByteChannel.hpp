/*================================================================================
  code generated by: java2cpp
  class: java.nio.channels.WritableByteChannel
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_NIO_CHANNELS_WRITABLEBYTECHANNEL_HPP_DECL
#define J2CPP_JAVA_NIO_CHANNELS_WRITABLEBYTECHANNEL_HPP_DECL


namespace j2cpp { namespace java { namespace nio { class ByteBuffer; } } }


#include <java/nio/ByteBuffer.hpp>


namespace j2cpp {

namespace java { namespace nio { namespace channels {

	class WritableByteChannel;
	class WritableByteChannel
		: public cpp_object<WritableByteChannel>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)

		WritableByteChannel(jobject jobj)
		: cpp_object<WritableByteChannel>(jobj)
		{
		}

		cpp_int write(local_ref< java::nio::ByteBuffer > const&);
	}; //class WritableByteChannel

} //namespace channels
} //namespace nio
} //namespace java


} //namespace j2cpp

#endif //J2CPP_JAVA_NIO_CHANNELS_WRITABLEBYTECHANNEL_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_NIO_CHANNELS_WRITABLEBYTECHANNEL_HPP_IMPL
#define J2CPP_JAVA_NIO_CHANNELS_WRITABLEBYTECHANNEL_HPP_IMPL

namespace j2cpp {


cpp_int java::nio::channels::WritableByteChannel::write(local_ref< java::nio::ByteBuffer > const &a0)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(0), J2CPP_METHOD_SIGNATURE(0), false>(),
			a0.get_jtype()
		)
	);
}


J2CPP_DEFINE_CLASS(java::nio::channels::WritableByteChannel,"java/nio/channels/WritableByteChannel")
J2CPP_DEFINE_METHOD(java::nio::channels::WritableByteChannel,0,"write","(Ljava/nio/ByteBuffer;)I")

} //namespace j2cpp

#endif //J2CPP_JAVA_NIO_CHANNELS_WRITABLEBYTECHANNEL_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
