/*================================================================================
  code generated by: java2cpp
  class: java.nio.ByteBuffer
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_NIO_BYTEBUFFER_HPP_DECL
#define J2CPP_JAVA_NIO_BYTEBUFFER_HPP_DECL


namespace j2cpp { namespace java { namespace nio { class CharBuffer; } } }
namespace j2cpp { namespace java { namespace nio { class DoubleBuffer; } } }
namespace j2cpp { namespace java { namespace nio { class IntBuffer; } } }
namespace j2cpp { namespace java { namespace nio { class ShortBuffer; } } }
namespace j2cpp { namespace java { namespace nio { class ByteOrder; } } }
namespace j2cpp { namespace java { namespace nio { class LongBuffer; } } }
namespace j2cpp { namespace java { namespace nio { class FloatBuffer; } } }
namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace lang { class Object; } } }


#include <java/lang/Object.hpp>
#include <java/lang/String.hpp>
#include <java/nio/ByteOrder.hpp>
#include <java/nio/CharBuffer.hpp>
#include <java/nio/DoubleBuffer.hpp>
#include <java/nio/FloatBuffer.hpp>
#include <java/nio/IntBuffer.hpp>
#include <java/nio/LongBuffer.hpp>
#include <java/nio/ShortBuffer.hpp>


namespace j2cpp {

namespace java { namespace nio {

	class ByteBuffer;
	class ByteBuffer
		: public cpp_object<ByteBuffer>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_METHOD(12)
		J2CPP_DECLARE_METHOD(13)
		J2CPP_DECLARE_METHOD(14)
		J2CPP_DECLARE_METHOD(15)
		J2CPP_DECLARE_METHOD(16)
		J2CPP_DECLARE_METHOD(17)
		J2CPP_DECLARE_METHOD(18)
		J2CPP_DECLARE_METHOD(19)
		J2CPP_DECLARE_METHOD(20)
		J2CPP_DECLARE_METHOD(21)
		J2CPP_DECLARE_METHOD(22)
		J2CPP_DECLARE_METHOD(23)
		J2CPP_DECLARE_METHOD(24)
		J2CPP_DECLARE_METHOD(25)
		J2CPP_DECLARE_METHOD(26)
		J2CPP_DECLARE_METHOD(27)
		J2CPP_DECLARE_METHOD(28)
		J2CPP_DECLARE_METHOD(29)
		J2CPP_DECLARE_METHOD(30)
		J2CPP_DECLARE_METHOD(31)
		J2CPP_DECLARE_METHOD(32)
		J2CPP_DECLARE_METHOD(33)
		J2CPP_DECLARE_METHOD(34)
		J2CPP_DECLARE_METHOD(35)
		J2CPP_DECLARE_METHOD(36)
		J2CPP_DECLARE_METHOD(37)
		J2CPP_DECLARE_METHOD(38)
		J2CPP_DECLARE_METHOD(39)
		J2CPP_DECLARE_METHOD(40)
		J2CPP_DECLARE_METHOD(41)
		J2CPP_DECLARE_METHOD(42)
		J2CPP_DECLARE_METHOD(43)
		J2CPP_DECLARE_METHOD(44)
		J2CPP_DECLARE_METHOD(45)
		J2CPP_DECLARE_METHOD(46)
		J2CPP_DECLARE_METHOD(47)
		J2CPP_DECLARE_METHOD(48)
		J2CPP_DECLARE_METHOD(49)
		J2CPP_DECLARE_METHOD(50)
		J2CPP_DECLARE_METHOD(51)
		J2CPP_DECLARE_METHOD(52)
		J2CPP_DECLARE_METHOD(53)
		J2CPP_DECLARE_METHOD(54)
		J2CPP_DECLARE_METHOD(55)
		J2CPP_DECLARE_METHOD(56)
		J2CPP_DECLARE_METHOD(57)
		J2CPP_DECLARE_METHOD(58)

		ByteBuffer(jobject jobj)
		: cpp_object<ByteBuffer>(jobj)
		{
		}

		static local_ref< java::nio::ByteBuffer > allocate(cpp_int const&);
		static local_ref< java::nio::ByteBuffer > allocateDirect(cpp_int const&);
		static local_ref< java::nio::ByteBuffer > wrap(local_ref< cpp_byte_array<1> > const&);
		static local_ref< java::nio::ByteBuffer > wrap(local_ref< cpp_byte_array<1> > const&, cpp_int const&, cpp_int const&);
		local_ref< cpp_byte_array<1> > array();
		cpp_int arrayOffset();
		local_ref< java::nio::CharBuffer > asCharBuffer();
		local_ref< java::nio::DoubleBuffer > asDoubleBuffer();
		local_ref< java::nio::FloatBuffer > asFloatBuffer();
		local_ref< java::nio::IntBuffer > asIntBuffer();
		local_ref< java::nio::LongBuffer > asLongBuffer();
		local_ref< java::nio::ByteBuffer > asReadOnlyBuffer();
		local_ref< java::nio::ShortBuffer > asShortBuffer();
		local_ref< java::nio::ByteBuffer > compact();
		cpp_int compareTo(local_ref< java::nio::ByteBuffer > const&);
		local_ref< java::nio::ByteBuffer > duplicate();
		cpp_boolean equals(local_ref< java::lang::Object > const&);
		cpp_byte get();
		local_ref< java::nio::ByteBuffer > get(local_ref< cpp_byte_array<1> > const&);
		local_ref< java::nio::ByteBuffer > get(local_ref< cpp_byte_array<1> > const&, cpp_int const&, cpp_int const&);
		cpp_byte get(cpp_int const&);
		cpp_char getChar();
		cpp_char getChar(cpp_int const&);
		cpp_double getDouble();
		cpp_double getDouble(cpp_int const&);
		cpp_float getFloat();
		cpp_float getFloat(cpp_int const&);
		cpp_int getInt();
		cpp_int getInt(cpp_int const&);
		cpp_long getLong();
		cpp_long getLong(cpp_int const&);
		cpp_short getShort();
		cpp_short getShort(cpp_int const&);
		cpp_boolean hasArray();
		cpp_int hashCode();
		cpp_boolean isDirect();
		local_ref< java::nio::ByteOrder > order();
		local_ref< java::nio::ByteBuffer > order(local_ref< java::nio::ByteOrder > const&);
		local_ref< java::nio::ByteBuffer > put(cpp_byte const&);
		local_ref< java::nio::ByteBuffer > put(local_ref< cpp_byte_array<1> > const&);
		local_ref< java::nio::ByteBuffer > put(local_ref< cpp_byte_array<1> > const&, cpp_int const&, cpp_int const&);
		local_ref< java::nio::ByteBuffer > put(local_ref< java::nio::ByteBuffer > const&);
		local_ref< java::nio::ByteBuffer > put(cpp_int const&, cpp_byte const&);
		local_ref< java::nio::ByteBuffer > putChar(cpp_char const&);
		local_ref< java::nio::ByteBuffer > putChar(cpp_int const&, cpp_char const&);
		local_ref< java::nio::ByteBuffer > putDouble(cpp_double const&);
		local_ref< java::nio::ByteBuffer > putDouble(cpp_int const&, cpp_double const&);
		local_ref< java::nio::ByteBuffer > putFloat(cpp_float const&);
		local_ref< java::nio::ByteBuffer > putFloat(cpp_int const&, cpp_float const&);
		local_ref< java::nio::ByteBuffer > putInt(cpp_int const&);
		local_ref< java::nio::ByteBuffer > putInt(cpp_int const&, cpp_int const&);
		local_ref< java::nio::ByteBuffer > putLong(cpp_long const&);
		local_ref< java::nio::ByteBuffer > putLong(cpp_int const&, cpp_long const&);
		local_ref< java::nio::ByteBuffer > putShort(cpp_short const&);
		local_ref< java::nio::ByteBuffer > putShort(cpp_int const&, cpp_short const&);
		local_ref< java::nio::ByteBuffer > slice();
		local_ref< java::lang::String > toString();
		cpp_int compareTo(local_ref< java::lang::Object > const&);
	}; //class ByteBuffer

} //namespace nio
} //namespace java


} //namespace j2cpp

#endif //J2CPP_JAVA_NIO_BYTEBUFFER_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_NIO_BYTEBUFFER_HPP_IMPL
#define J2CPP_JAVA_NIO_BYTEBUFFER_HPP_IMPL

namespace j2cpp {


template <>
local_ref< java::nio::ByteBuffer > create< java::nio::ByteBuffer>()
{
	return local_ref< java::nio::ByteBuffer >(
		environment::get().get_jenv()->NewObject(
			get_class<java::nio::ByteBuffer::J2CPP_CLASS_NAME>(),
			get_method_id<java::nio::ByteBuffer::J2CPP_CLASS_NAME, java::nio::ByteBuffer::J2CPP_METHOD_NAME(0), java::nio::ByteBuffer::J2CPP_METHOD_SIGNATURE(0), false>()
		)
	);
}

local_ref< java::nio::ByteBuffer > java::nio::ByteBuffer::allocate(cpp_int const &a0)
{
	return local_ref< java::nio::ByteBuffer >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), true>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::nio::ByteBuffer > java::nio::ByteBuffer::allocateDirect(cpp_int const &a0)
{
	return local_ref< java::nio::ByteBuffer >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), true>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::nio::ByteBuffer > java::nio::ByteBuffer::wrap(local_ref< cpp_byte_array<1> > const &a0)
{
	return local_ref< java::nio::ByteBuffer >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), true>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::nio::ByteBuffer > java::nio::ByteBuffer::wrap(local_ref< cpp_byte_array<1> > const &a0, cpp_int const &a1, cpp_int const &a2)
{
	return local_ref< java::nio::ByteBuffer >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), true>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

local_ref< cpp_byte_array<1> > java::nio::ByteBuffer::array()
{
	return local_ref< cpp_byte_array<1> >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>()
		)
	);
}

cpp_int java::nio::ByteBuffer::arrayOffset()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>()
		)
	);
}

local_ref< java::nio::CharBuffer > java::nio::ByteBuffer::asCharBuffer()
{
	return local_ref< java::nio::CharBuffer >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(7), J2CPP_METHOD_SIGNATURE(7), false>()
		)
	);
}

local_ref< java::nio::DoubleBuffer > java::nio::ByteBuffer::asDoubleBuffer()
{
	return local_ref< java::nio::DoubleBuffer >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(8), J2CPP_METHOD_SIGNATURE(8), false>()
		)
	);
}

local_ref< java::nio::FloatBuffer > java::nio::ByteBuffer::asFloatBuffer()
{
	return local_ref< java::nio::FloatBuffer >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(9), J2CPP_METHOD_SIGNATURE(9), false>()
		)
	);
}

local_ref< java::nio::IntBuffer > java::nio::ByteBuffer::asIntBuffer()
{
	return local_ref< java::nio::IntBuffer >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(10), J2CPP_METHOD_SIGNATURE(10), false>()
		)
	);
}

local_ref< java::nio::LongBuffer > java::nio::ByteBuffer::asLongBuffer()
{
	return local_ref< java::nio::LongBuffer >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(11), J2CPP_METHOD_SIGNATURE(11), false>()
		)
	);
}

local_ref< java::nio::ByteBuffer > java::nio::ByteBuffer::asReadOnlyBuffer()
{
	return local_ref< java::nio::ByteBuffer >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(12), J2CPP_METHOD_SIGNATURE(12), false>()
		)
	);
}

local_ref< java::nio::ShortBuffer > java::nio::ByteBuffer::asShortBuffer()
{
	return local_ref< java::nio::ShortBuffer >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(13), J2CPP_METHOD_SIGNATURE(13), false>()
		)
	);
}

local_ref< java::nio::ByteBuffer > java::nio::ByteBuffer::compact()
{
	return local_ref< java::nio::ByteBuffer >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(14), J2CPP_METHOD_SIGNATURE(14), false>()
		)
	);
}

cpp_int java::nio::ByteBuffer::compareTo(local_ref< java::nio::ByteBuffer > const &a0)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(15), J2CPP_METHOD_SIGNATURE(15), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::nio::ByteBuffer > java::nio::ByteBuffer::duplicate()
{
	return local_ref< java::nio::ByteBuffer >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(16), J2CPP_METHOD_SIGNATURE(16), false>()
		)
	);
}

cpp_boolean java::nio::ByteBuffer::equals(local_ref< java::lang::Object > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(17), J2CPP_METHOD_SIGNATURE(17), false>(),
			a0.get_jtype()
		)
	);
}

cpp_byte java::nio::ByteBuffer::get()
{
	return cpp_byte(
		environment::get().get_jenv()->CallByteMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(18), J2CPP_METHOD_SIGNATURE(18), false>()
		)
	);
}

local_ref< java::nio::ByteBuffer > java::nio::ByteBuffer::get(local_ref< cpp_byte_array<1> > const &a0)
{
	return local_ref< java::nio::ByteBuffer >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(19), J2CPP_METHOD_SIGNATURE(19), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::nio::ByteBuffer > java::nio::ByteBuffer::get(local_ref< cpp_byte_array<1> > const &a0, cpp_int const &a1, cpp_int const &a2)
{
	return local_ref< java::nio::ByteBuffer >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(20), J2CPP_METHOD_SIGNATURE(20), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

cpp_byte java::nio::ByteBuffer::get(cpp_int const &a0)
{
	return cpp_byte(
		environment::get().get_jenv()->CallByteMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(21), J2CPP_METHOD_SIGNATURE(21), false>(),
			a0.get_jtype()
		)
	);
}

cpp_char java::nio::ByteBuffer::getChar()
{
	return cpp_char(
		environment::get().get_jenv()->CallCharMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(22), J2CPP_METHOD_SIGNATURE(22), false>()
		)
	);
}

cpp_char java::nio::ByteBuffer::getChar(cpp_int const &a0)
{
	return cpp_char(
		environment::get().get_jenv()->CallCharMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(23), J2CPP_METHOD_SIGNATURE(23), false>(),
			a0.get_jtype()
		)
	);
}

cpp_double java::nio::ByteBuffer::getDouble()
{
	return cpp_double(
		environment::get().get_jenv()->CallDoubleMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(24), J2CPP_METHOD_SIGNATURE(24), false>()
		)
	);
}

cpp_double java::nio::ByteBuffer::getDouble(cpp_int const &a0)
{
	return cpp_double(
		environment::get().get_jenv()->CallDoubleMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(25), J2CPP_METHOD_SIGNATURE(25), false>(),
			a0.get_jtype()
		)
	);
}

cpp_float java::nio::ByteBuffer::getFloat()
{
	return cpp_float(
		environment::get().get_jenv()->CallFloatMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(26), J2CPP_METHOD_SIGNATURE(26), false>()
		)
	);
}

cpp_float java::nio::ByteBuffer::getFloat(cpp_int const &a0)
{
	return cpp_float(
		environment::get().get_jenv()->CallFloatMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(27), J2CPP_METHOD_SIGNATURE(27), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int java::nio::ByteBuffer::getInt()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(28), J2CPP_METHOD_SIGNATURE(28), false>()
		)
	);
}

cpp_int java::nio::ByteBuffer::getInt(cpp_int const &a0)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(29), J2CPP_METHOD_SIGNATURE(29), false>(),
			a0.get_jtype()
		)
	);
}

cpp_long java::nio::ByteBuffer::getLong()
{
	return cpp_long(
		environment::get().get_jenv()->CallLongMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(30), J2CPP_METHOD_SIGNATURE(30), false>()
		)
	);
}

cpp_long java::nio::ByteBuffer::getLong(cpp_int const &a0)
{
	return cpp_long(
		environment::get().get_jenv()->CallLongMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(31), J2CPP_METHOD_SIGNATURE(31), false>(),
			a0.get_jtype()
		)
	);
}

cpp_short java::nio::ByteBuffer::getShort()
{
	return cpp_short(
		environment::get().get_jenv()->CallShortMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(32), J2CPP_METHOD_SIGNATURE(32), false>()
		)
	);
}

cpp_short java::nio::ByteBuffer::getShort(cpp_int const &a0)
{
	return cpp_short(
		environment::get().get_jenv()->CallShortMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(33), J2CPP_METHOD_SIGNATURE(33), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean java::nio::ByteBuffer::hasArray()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(34), J2CPP_METHOD_SIGNATURE(34), false>()
		)
	);
}

cpp_int java::nio::ByteBuffer::hashCode()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(35), J2CPP_METHOD_SIGNATURE(35), false>()
		)
	);
}

cpp_boolean java::nio::ByteBuffer::isDirect()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(36), J2CPP_METHOD_SIGNATURE(36), false>()
		)
	);
}

local_ref< java::nio::ByteOrder > java::nio::ByteBuffer::order()
{
	return local_ref< java::nio::ByteOrder >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(37), J2CPP_METHOD_SIGNATURE(37), false>()
		)
	);
}

local_ref< java::nio::ByteBuffer > java::nio::ByteBuffer::order(local_ref< java::nio::ByteOrder > const &a0)
{
	return local_ref< java::nio::ByteBuffer >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(38), J2CPP_METHOD_SIGNATURE(38), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::nio::ByteBuffer > java::nio::ByteBuffer::put(cpp_byte const &a0)
{
	return local_ref< java::nio::ByteBuffer >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(39), J2CPP_METHOD_SIGNATURE(39), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::nio::ByteBuffer > java::nio::ByteBuffer::put(local_ref< cpp_byte_array<1> > const &a0)
{
	return local_ref< java::nio::ByteBuffer >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(40), J2CPP_METHOD_SIGNATURE(40), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::nio::ByteBuffer > java::nio::ByteBuffer::put(local_ref< cpp_byte_array<1> > const &a0, cpp_int const &a1, cpp_int const &a2)
{
	return local_ref< java::nio::ByteBuffer >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(41), J2CPP_METHOD_SIGNATURE(41), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

local_ref< java::nio::ByteBuffer > java::nio::ByteBuffer::put(local_ref< java::nio::ByteBuffer > const &a0)
{
	return local_ref< java::nio::ByteBuffer >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(42), J2CPP_METHOD_SIGNATURE(42), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::nio::ByteBuffer > java::nio::ByteBuffer::put(cpp_int const &a0, cpp_byte const &a1)
{
	return local_ref< java::nio::ByteBuffer >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(43), J2CPP_METHOD_SIGNATURE(43), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< java::nio::ByteBuffer > java::nio::ByteBuffer::putChar(cpp_char const &a0)
{
	return local_ref< java::nio::ByteBuffer >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(44), J2CPP_METHOD_SIGNATURE(44), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::nio::ByteBuffer > java::nio::ByteBuffer::putChar(cpp_int const &a0, cpp_char const &a1)
{
	return local_ref< java::nio::ByteBuffer >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(45), J2CPP_METHOD_SIGNATURE(45), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< java::nio::ByteBuffer > java::nio::ByteBuffer::putDouble(cpp_double const &a0)
{
	return local_ref< java::nio::ByteBuffer >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(46), J2CPP_METHOD_SIGNATURE(46), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::nio::ByteBuffer > java::nio::ByteBuffer::putDouble(cpp_int const &a0, cpp_double const &a1)
{
	return local_ref< java::nio::ByteBuffer >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(47), J2CPP_METHOD_SIGNATURE(47), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< java::nio::ByteBuffer > java::nio::ByteBuffer::putFloat(cpp_float const &a0)
{
	return local_ref< java::nio::ByteBuffer >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(48), J2CPP_METHOD_SIGNATURE(48), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::nio::ByteBuffer > java::nio::ByteBuffer::putFloat(cpp_int const &a0, cpp_float const &a1)
{
	return local_ref< java::nio::ByteBuffer >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(49), J2CPP_METHOD_SIGNATURE(49), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< java::nio::ByteBuffer > java::nio::ByteBuffer::putInt(cpp_int const &a0)
{
	return local_ref< java::nio::ByteBuffer >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(50), J2CPP_METHOD_SIGNATURE(50), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::nio::ByteBuffer > java::nio::ByteBuffer::putInt(cpp_int const &a0, cpp_int const &a1)
{
	return local_ref< java::nio::ByteBuffer >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(51), J2CPP_METHOD_SIGNATURE(51), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< java::nio::ByteBuffer > java::nio::ByteBuffer::putLong(cpp_long const &a0)
{
	return local_ref< java::nio::ByteBuffer >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(52), J2CPP_METHOD_SIGNATURE(52), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::nio::ByteBuffer > java::nio::ByteBuffer::putLong(cpp_int const &a0, cpp_long const &a1)
{
	return local_ref< java::nio::ByteBuffer >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(53), J2CPP_METHOD_SIGNATURE(53), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< java::nio::ByteBuffer > java::nio::ByteBuffer::putShort(cpp_short const &a0)
{
	return local_ref< java::nio::ByteBuffer >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(54), J2CPP_METHOD_SIGNATURE(54), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::nio::ByteBuffer > java::nio::ByteBuffer::putShort(cpp_int const &a0, cpp_short const &a1)
{
	return local_ref< java::nio::ByteBuffer >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(55), J2CPP_METHOD_SIGNATURE(55), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< java::nio::ByteBuffer > java::nio::ByteBuffer::slice()
{
	return local_ref< java::nio::ByteBuffer >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(56), J2CPP_METHOD_SIGNATURE(56), false>()
		)
	);
}

local_ref< java::lang::String > java::nio::ByteBuffer::toString()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(57), J2CPP_METHOD_SIGNATURE(57), false>()
		)
	);
}

cpp_int java::nio::ByteBuffer::compareTo(local_ref< java::lang::Object > const &a0)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(58), J2CPP_METHOD_SIGNATURE(58), false>(),
			a0.get_jtype()
		)
	);
}


J2CPP_DEFINE_CLASS(java::nio::ByteBuffer,"java/nio/ByteBuffer")
J2CPP_DEFINE_METHOD(java::nio::ByteBuffer,0,"<init>","()V")
J2CPP_DEFINE_METHOD(java::nio::ByteBuffer,1,"allocate","(I)Ljava/nio/ByteBuffer;")
J2CPP_DEFINE_METHOD(java::nio::ByteBuffer,2,"allocateDirect","(I)Ljava/nio/ByteBuffer;")
J2CPP_DEFINE_METHOD(java::nio::ByteBuffer,3,"wrap","([B)Ljava/nio/ByteBuffer;")
J2CPP_DEFINE_METHOD(java::nio::ByteBuffer,4,"wrap","([BII)Ljava/nio/ByteBuffer;")
J2CPP_DEFINE_METHOD(java::nio::ByteBuffer,5,"array","()[B")
J2CPP_DEFINE_METHOD(java::nio::ByteBuffer,6,"arrayOffset","()I")
J2CPP_DEFINE_METHOD(java::nio::ByteBuffer,7,"asCharBuffer","()Ljava/nio/CharBuffer;")
J2CPP_DEFINE_METHOD(java::nio::ByteBuffer,8,"asDoubleBuffer","()Ljava/nio/DoubleBuffer;")
J2CPP_DEFINE_METHOD(java::nio::ByteBuffer,9,"asFloatBuffer","()Ljava/nio/FloatBuffer;")
J2CPP_DEFINE_METHOD(java::nio::ByteBuffer,10,"asIntBuffer","()Ljava/nio/IntBuffer;")
J2CPP_DEFINE_METHOD(java::nio::ByteBuffer,11,"asLongBuffer","()Ljava/nio/LongBuffer;")
J2CPP_DEFINE_METHOD(java::nio::ByteBuffer,12,"asReadOnlyBuffer","()Ljava/nio/ByteBuffer;")
J2CPP_DEFINE_METHOD(java::nio::ByteBuffer,13,"asShortBuffer","()Ljava/nio/ShortBuffer;")
J2CPP_DEFINE_METHOD(java::nio::ByteBuffer,14,"compact","()Ljava/nio/ByteBuffer;")
J2CPP_DEFINE_METHOD(java::nio::ByteBuffer,15,"compareTo","(Ljava/nio/ByteBuffer;)I")
J2CPP_DEFINE_METHOD(java::nio::ByteBuffer,16,"duplicate","()Ljava/nio/ByteBuffer;")
J2CPP_DEFINE_METHOD(java::nio::ByteBuffer,17,"equals","(Ljava/lang/Object;)Z")
J2CPP_DEFINE_METHOD(java::nio::ByteBuffer,18,"get","()B")
J2CPP_DEFINE_METHOD(java::nio::ByteBuffer,19,"get","([B)Ljava/nio/ByteBuffer;")
J2CPP_DEFINE_METHOD(java::nio::ByteBuffer,20,"get","([BII)Ljava/nio/ByteBuffer;")
J2CPP_DEFINE_METHOD(java::nio::ByteBuffer,21,"get","(I)B")
J2CPP_DEFINE_METHOD(java::nio::ByteBuffer,22,"getChar","()C")
J2CPP_DEFINE_METHOD(java::nio::ByteBuffer,23,"getChar","(I)C")
J2CPP_DEFINE_METHOD(java::nio::ByteBuffer,24,"getDouble","()D")
J2CPP_DEFINE_METHOD(java::nio::ByteBuffer,25,"getDouble","(I)D")
J2CPP_DEFINE_METHOD(java::nio::ByteBuffer,26,"getFloat","()F")
J2CPP_DEFINE_METHOD(java::nio::ByteBuffer,27,"getFloat","(I)F")
J2CPP_DEFINE_METHOD(java::nio::ByteBuffer,28,"getInt","()I")
J2CPP_DEFINE_METHOD(java::nio::ByteBuffer,29,"getInt","(I)I")
J2CPP_DEFINE_METHOD(java::nio::ByteBuffer,30,"getLong","()J")
J2CPP_DEFINE_METHOD(java::nio::ByteBuffer,31,"getLong","(I)J")
J2CPP_DEFINE_METHOD(java::nio::ByteBuffer,32,"getShort","()S")
J2CPP_DEFINE_METHOD(java::nio::ByteBuffer,33,"getShort","(I)S")
J2CPP_DEFINE_METHOD(java::nio::ByteBuffer,34,"hasArray","()Z")
J2CPP_DEFINE_METHOD(java::nio::ByteBuffer,35,"hashCode","()I")
J2CPP_DEFINE_METHOD(java::nio::ByteBuffer,36,"isDirect","()Z")
J2CPP_DEFINE_METHOD(java::nio::ByteBuffer,37,"order","()Ljava/nio/ByteOrder;")
J2CPP_DEFINE_METHOD(java::nio::ByteBuffer,38,"order","(Ljava/nio/ByteOrder;)Ljava/nio/ByteBuffer;")
J2CPP_DEFINE_METHOD(java::nio::ByteBuffer,39,"put","(B)Ljava/nio/ByteBuffer;")
J2CPP_DEFINE_METHOD(java::nio::ByteBuffer,40,"put","([B)Ljava/nio/ByteBuffer;")
J2CPP_DEFINE_METHOD(java::nio::ByteBuffer,41,"put","([BII)Ljava/nio/ByteBuffer;")
J2CPP_DEFINE_METHOD(java::nio::ByteBuffer,42,"put","(Ljava/nio/ByteBuffer;)Ljava/nio/ByteBuffer;")
J2CPP_DEFINE_METHOD(java::nio::ByteBuffer,43,"put","(IB)Ljava/nio/ByteBuffer;")
J2CPP_DEFINE_METHOD(java::nio::ByteBuffer,44,"putChar","(C)Ljava/nio/ByteBuffer;")
J2CPP_DEFINE_METHOD(java::nio::ByteBuffer,45,"putChar","(IC)Ljava/nio/ByteBuffer;")
J2CPP_DEFINE_METHOD(java::nio::ByteBuffer,46,"putDouble","(D)Ljava/nio/ByteBuffer;")
J2CPP_DEFINE_METHOD(java::nio::ByteBuffer,47,"putDouble","(ID)Ljava/nio/ByteBuffer;")
J2CPP_DEFINE_METHOD(java::nio::ByteBuffer,48,"putFloat","(F)Ljava/nio/ByteBuffer;")
J2CPP_DEFINE_METHOD(java::nio::ByteBuffer,49,"putFloat","(IF)Ljava/nio/ByteBuffer;")
J2CPP_DEFINE_METHOD(java::nio::ByteBuffer,50,"putInt","(I)Ljava/nio/ByteBuffer;")
J2CPP_DEFINE_METHOD(java::nio::ByteBuffer,51,"putInt","(II)Ljava/nio/ByteBuffer;")
J2CPP_DEFINE_METHOD(java::nio::ByteBuffer,52,"putLong","(J)Ljava/nio/ByteBuffer;")
J2CPP_DEFINE_METHOD(java::nio::ByteBuffer,53,"putLong","(IJ)Ljava/nio/ByteBuffer;")
J2CPP_DEFINE_METHOD(java::nio::ByteBuffer,54,"putShort","(S)Ljava/nio/ByteBuffer;")
J2CPP_DEFINE_METHOD(java::nio::ByteBuffer,55,"putShort","(IS)Ljava/nio/ByteBuffer;")
J2CPP_DEFINE_METHOD(java::nio::ByteBuffer,56,"slice","()Ljava/nio/ByteBuffer;")
J2CPP_DEFINE_METHOD(java::nio::ByteBuffer,57,"toString","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::nio::ByteBuffer,58,"compareTo","(Ljava/lang/Object;)I")

} //namespace j2cpp

#endif //J2CPP_JAVA_NIO_BYTEBUFFER_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
