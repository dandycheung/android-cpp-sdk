/*================================================================================
  code generated by: java2cpp
  class: java.lang.ref.PhantomReference
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_LANG_REF_PHANTOMREFERENCE_HPP_DECL
#define J2CPP_JAVA_LANG_REF_PHANTOMREFERENCE_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace lang { namespace ref { class ReferenceQueue; } } } }


#include <java/lang/Object.hpp>
#include <java/lang/ref/ReferenceQueue.hpp>


namespace j2cpp {

namespace java { namespace lang { namespace ref {

	class PhantomReference;
	class PhantomReference
		: public cpp_object<PhantomReference>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)

		PhantomReference(jobject jobj)
		: cpp_object<PhantomReference>(jobj)
		{
		}

		local_ref< java::lang::Object > get();
	}; //class PhantomReference

} //namespace ref
} //namespace lang
} //namespace java


} //namespace j2cpp

#endif //J2CPP_JAVA_LANG_REF_PHANTOMREFERENCE_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_LANG_REF_PHANTOMREFERENCE_HPP_IMPL
#define J2CPP_JAVA_LANG_REF_PHANTOMREFERENCE_HPP_IMPL

namespace j2cpp {


template <>
local_ref< java::lang::ref::PhantomReference > create< java::lang::ref::PhantomReference>(local_ref< java::lang::Object > const &a0, local_ref< java::lang::ref::ReferenceQueue > const &a1)
{
	return local_ref< java::lang::ref::PhantomReference >(
		environment::get().get_jenv()->NewObject(
			get_class<java::lang::ref::PhantomReference::J2CPP_CLASS_NAME>(),
			get_method_id<java::lang::ref::PhantomReference::J2CPP_CLASS_NAME, java::lang::ref::PhantomReference::J2CPP_METHOD_NAME(0), java::lang::ref::PhantomReference::J2CPP_METHOD_SIGNATURE(0), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< java::lang::Object > java::lang::ref::PhantomReference::get()
{
	return local_ref< java::lang::Object >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), false>()
		)
	);
}


J2CPP_DEFINE_CLASS(java::lang::ref::PhantomReference,"java/lang/ref/PhantomReference")
J2CPP_DEFINE_METHOD(java::lang::ref::PhantomReference,0,"<init>","(Ljava/lang/Object;Ljava/lang/ref/ReferenceQueue;)V")
J2CPP_DEFINE_METHOD(java::lang::ref::PhantomReference,1,"get","()Ljava/lang/Object;")

} //namespace j2cpp

#endif //J2CPP_JAVA_LANG_REF_PHANTOMREFERENCE_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
