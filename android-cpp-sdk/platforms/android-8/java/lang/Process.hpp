/*================================================================================
  code generated by: java2cpp
  class: java.lang.Process
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_LANG_PROCESS_HPP_DECL
#define J2CPP_JAVA_LANG_PROCESS_HPP_DECL


namespace j2cpp { namespace java { namespace io { class InputStream; } } }
namespace j2cpp { namespace java { namespace io { class OutputStream; } } }


#include <java/io/InputStream.hpp>
#include <java/io/OutputStream.hpp>


namespace j2cpp {

namespace java { namespace lang {

	class Process;
	class Process
		: public cpp_object<Process>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)

		Process(jobject jobj)
		: cpp_object<Process>(jobj)
		{
		}

		void destroy();
		cpp_int exitValue();
		local_ref< java::io::InputStream > getErrorStream();
		local_ref< java::io::InputStream > getInputStream();
		local_ref< java::io::OutputStream > getOutputStream();
		cpp_int waitFor();
	}; //class Process

} //namespace lang
} //namespace java


} //namespace j2cpp

#endif //J2CPP_JAVA_LANG_PROCESS_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_LANG_PROCESS_HPP_IMPL
#define J2CPP_JAVA_LANG_PROCESS_HPP_IMPL

namespace j2cpp {


template <>
local_ref< java::lang::Process > create< java::lang::Process>()
{
	return local_ref< java::lang::Process >(
		environment::get().get_jenv()->NewObject(
			get_class<java::lang::Process::J2CPP_CLASS_NAME>(),
			get_method_id<java::lang::Process::J2CPP_CLASS_NAME, java::lang::Process::J2CPP_METHOD_NAME(0), java::lang::Process::J2CPP_METHOD_SIGNATURE(0), false>()
		)
	);
}

void java::lang::Process::destroy()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), false>()
		)
	);
}

cpp_int java::lang::Process::exitValue()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>()
		)
	);
}

local_ref< java::io::InputStream > java::lang::Process::getErrorStream()
{
	return local_ref< java::io::InputStream >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>()
		)
	);
}

local_ref< java::io::InputStream > java::lang::Process::getInputStream()
{
	return local_ref< java::io::InputStream >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>()
		)
	);
}

local_ref< java::io::OutputStream > java::lang::Process::getOutputStream()
{
	return local_ref< java::io::OutputStream >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>()
		)
	);
}

cpp_int java::lang::Process::waitFor()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>()
		)
	);
}


J2CPP_DEFINE_CLASS(java::lang::Process,"java/lang/Process")
J2CPP_DEFINE_METHOD(java::lang::Process,0,"<init>","()V")
J2CPP_DEFINE_METHOD(java::lang::Process,1,"destroy","()V")
J2CPP_DEFINE_METHOD(java::lang::Process,2,"exitValue","()I")
J2CPP_DEFINE_METHOD(java::lang::Process,3,"getErrorStream","()Ljava/io/InputStream;")
J2CPP_DEFINE_METHOD(java::lang::Process,4,"getInputStream","()Ljava/io/InputStream;")
J2CPP_DEFINE_METHOD(java::lang::Process,5,"getOutputStream","()Ljava/io/OutputStream;")
J2CPP_DEFINE_METHOD(java::lang::Process,6,"waitFor","()I")

} //namespace j2cpp

#endif //J2CPP_JAVA_LANG_PROCESS_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
