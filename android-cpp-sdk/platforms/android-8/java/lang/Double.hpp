/*================================================================================
  code generated by: java2cpp
  class: java.lang.Double
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_LANG_DOUBLE_HPP_DECL
#define J2CPP_JAVA_LANG_DOUBLE_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace lang { class Class; } } }
namespace j2cpp { namespace java { namespace lang { class Object; } } }


#include <java/lang/Class.hpp>
#include <java/lang/Object.hpp>
#include <java/lang/String.hpp>


namespace j2cpp {

namespace java { namespace lang {

	class Double;
	class Double
		: public cpp_object<Double>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_METHOD(12)
		J2CPP_DECLARE_METHOD(13)
		J2CPP_DECLARE_METHOD(14)
		J2CPP_DECLARE_METHOD(15)
		J2CPP_DECLARE_METHOD(16)
		J2CPP_DECLARE_METHOD(17)
		J2CPP_DECLARE_METHOD(18)
		J2CPP_DECLARE_METHOD(19)
		J2CPP_DECLARE_METHOD(20)
		J2CPP_DECLARE_METHOD(21)
		J2CPP_DECLARE_METHOD(22)
		J2CPP_DECLARE_METHOD(23)
		J2CPP_DECLARE_METHOD(24)
		J2CPP_DECLARE_METHOD(25)
		J2CPP_DECLARE_METHOD(26)
		J2CPP_DECLARE_FIELD(0)
		J2CPP_DECLARE_FIELD(1)
		J2CPP_DECLARE_FIELD(2)
		J2CPP_DECLARE_FIELD(3)
		J2CPP_DECLARE_FIELD(4)
		J2CPP_DECLARE_FIELD(5)
		J2CPP_DECLARE_FIELD(6)

		Double(jobject jobj)
		: cpp_object<Double>(jobj)
		{
		}

		cpp_int compareTo(local_ref< java::lang::Double > const&);
		cpp_byte byteValue();
		static cpp_long doubleToLongBits(cpp_double const&);
		static cpp_long doubleToRawLongBits(cpp_double const&);
		cpp_double doubleValue();
		cpp_boolean equals(local_ref< java::lang::Object > const&);
		cpp_float floatValue();
		cpp_int hashCode();
		cpp_int intValue();
		cpp_boolean isInfinite();
		static cpp_boolean isInfinite(cpp_double const&);
		cpp_boolean isNaN();
		static cpp_boolean isNaN(cpp_double const&);
		static cpp_double longBitsToDouble(cpp_long const&);
		cpp_long longValue();
		static cpp_double parseDouble(local_ref< java::lang::String > const&);
		cpp_short shortValue();
		local_ref< java::lang::String > toString();
		static local_ref< java::lang::String > toString(cpp_double const&);
		static local_ref< java::lang::Double > valueOf(local_ref< java::lang::String > const&);
		static cpp_int compare(cpp_double const&, cpp_double const&);
		static local_ref< java::lang::Double > valueOf(cpp_double const&);
		static local_ref< java::lang::String > toHexString(cpp_double const&);
		cpp_int compareTo(local_ref< java::lang::Object > const&);

		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(0), J2CPP_FIELD_SIGNATURE(0), cpp_double > MAX_VALUE;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(1), J2CPP_FIELD_SIGNATURE(1), cpp_double > MIN_VALUE;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(2), J2CPP_FIELD_SIGNATURE(2), cpp_double > NaN;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(3), J2CPP_FIELD_SIGNATURE(3), cpp_double > POSITIVE_INFINITY;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(4), J2CPP_FIELD_SIGNATURE(4), cpp_double > NEGATIVE_INFINITY;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(5), J2CPP_FIELD_SIGNATURE(5), local_ref< java::lang::Class > > TYPE;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(6), J2CPP_FIELD_SIGNATURE(6), cpp_int > SIZE;
	}; //class Double

} //namespace lang
} //namespace java


} //namespace j2cpp

#endif //J2CPP_JAVA_LANG_DOUBLE_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_LANG_DOUBLE_HPP_IMPL
#define J2CPP_JAVA_LANG_DOUBLE_HPP_IMPL

namespace j2cpp {


template <>
local_ref< java::lang::Double > create< java::lang::Double>(cpp_double const &a0)
{
	return local_ref< java::lang::Double >(
		environment::get().get_jenv()->NewObject(
			get_class<java::lang::Double::J2CPP_CLASS_NAME>(),
			get_method_id<java::lang::Double::J2CPP_CLASS_NAME, java::lang::Double::J2CPP_METHOD_NAME(0), java::lang::Double::J2CPP_METHOD_SIGNATURE(0), false>(),
			a0.get_jtype()
		)
	);
}

template <>
local_ref< java::lang::Double > create< java::lang::Double>(local_ref< java::lang::String > const &a0)
{
	return local_ref< java::lang::Double >(
		environment::get().get_jenv()->NewObject(
			get_class<java::lang::Double::J2CPP_CLASS_NAME>(),
			get_method_id<java::lang::Double::J2CPP_CLASS_NAME, java::lang::Double::J2CPP_METHOD_NAME(1), java::lang::Double::J2CPP_METHOD_SIGNATURE(1), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int java::lang::Double::compareTo(local_ref< java::lang::Double > const &a0)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>(),
			a0.get_jtype()
		)
	);
}

cpp_byte java::lang::Double::byteValue()
{
	return cpp_byte(
		environment::get().get_jenv()->CallByteMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>()
		)
	);
}

cpp_long java::lang::Double::doubleToLongBits(cpp_double const &a0)
{
	return cpp_long(
		environment::get().get_jenv()->CallStaticLongMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), true>(),
			a0.get_jtype()
		)
	);
}

cpp_long java::lang::Double::doubleToRawLongBits(cpp_double const &a0)
{
	return cpp_long(
		environment::get().get_jenv()->CallStaticLongMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), true>(),
			a0.get_jtype()
		)
	);
}

cpp_double java::lang::Double::doubleValue()
{
	return cpp_double(
		environment::get().get_jenv()->CallDoubleMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>()
		)
	);
}

cpp_boolean java::lang::Double::equals(local_ref< java::lang::Object > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(7), J2CPP_METHOD_SIGNATURE(7), false>(),
			a0.get_jtype()
		)
	);
}

cpp_float java::lang::Double::floatValue()
{
	return cpp_float(
		environment::get().get_jenv()->CallFloatMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(8), J2CPP_METHOD_SIGNATURE(8), false>()
		)
	);
}

cpp_int java::lang::Double::hashCode()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(9), J2CPP_METHOD_SIGNATURE(9), false>()
		)
	);
}

cpp_int java::lang::Double::intValue()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(10), J2CPP_METHOD_SIGNATURE(10), false>()
		)
	);
}

cpp_boolean java::lang::Double::isInfinite()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(11), J2CPP_METHOD_SIGNATURE(11), false>()
		)
	);
}

cpp_boolean java::lang::Double::isInfinite(cpp_double const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallStaticBooleanMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(12), J2CPP_METHOD_SIGNATURE(12), true>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean java::lang::Double::isNaN()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(13), J2CPP_METHOD_SIGNATURE(13), false>()
		)
	);
}

cpp_boolean java::lang::Double::isNaN(cpp_double const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallStaticBooleanMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(14), J2CPP_METHOD_SIGNATURE(14), true>(),
			a0.get_jtype()
		)
	);
}

cpp_double java::lang::Double::longBitsToDouble(cpp_long const &a0)
{
	return cpp_double(
		environment::get().get_jenv()->CallStaticDoubleMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(15), J2CPP_METHOD_SIGNATURE(15), true>(),
			a0.get_jtype()
		)
	);
}

cpp_long java::lang::Double::longValue()
{
	return cpp_long(
		environment::get().get_jenv()->CallLongMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(16), J2CPP_METHOD_SIGNATURE(16), false>()
		)
	);
}

cpp_double java::lang::Double::parseDouble(local_ref< java::lang::String > const &a0)
{
	return cpp_double(
		environment::get().get_jenv()->CallStaticDoubleMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(17), J2CPP_METHOD_SIGNATURE(17), true>(),
			a0.get_jtype()
		)
	);
}

cpp_short java::lang::Double::shortValue()
{
	return cpp_short(
		environment::get().get_jenv()->CallShortMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(18), J2CPP_METHOD_SIGNATURE(18), false>()
		)
	);
}

local_ref< java::lang::String > java::lang::Double::toString()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(19), J2CPP_METHOD_SIGNATURE(19), false>()
		)
	);
}

local_ref< java::lang::String > java::lang::Double::toString(cpp_double const &a0)
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(20), J2CPP_METHOD_SIGNATURE(20), true>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::Double > java::lang::Double::valueOf(local_ref< java::lang::String > const &a0)
{
	return local_ref< java::lang::Double >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(21), J2CPP_METHOD_SIGNATURE(21), true>(),
			a0.get_jtype()
		)
	);
}

cpp_int java::lang::Double::compare(cpp_double const &a0, cpp_double const &a1)
{
	return cpp_int(
		environment::get().get_jenv()->CallStaticIntMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(22), J2CPP_METHOD_SIGNATURE(22), true>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< java::lang::Double > java::lang::Double::valueOf(cpp_double const &a0)
{
	return local_ref< java::lang::Double >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(23), J2CPP_METHOD_SIGNATURE(23), true>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::String > java::lang::Double::toHexString(cpp_double const &a0)
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(24), J2CPP_METHOD_SIGNATURE(24), true>(),
			a0.get_jtype()
		)
	);
}

cpp_int java::lang::Double::compareTo(local_ref< java::lang::Object > const &a0)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(25), J2CPP_METHOD_SIGNATURE(25), false>(),
			a0.get_jtype()
		)
	);
}


static_field<
	java::lang::Double::J2CPP_CLASS_NAME,
	java::lang::Double::J2CPP_FIELD_NAME(0),
	java::lang::Double::J2CPP_FIELD_SIGNATURE(0),
	cpp_double
> java::lang::Double::MAX_VALUE;

static_field<
	java::lang::Double::J2CPP_CLASS_NAME,
	java::lang::Double::J2CPP_FIELD_NAME(1),
	java::lang::Double::J2CPP_FIELD_SIGNATURE(1),
	cpp_double
> java::lang::Double::MIN_VALUE;

static_field<
	java::lang::Double::J2CPP_CLASS_NAME,
	java::lang::Double::J2CPP_FIELD_NAME(2),
	java::lang::Double::J2CPP_FIELD_SIGNATURE(2),
	cpp_double
> java::lang::Double::NaN;

static_field<
	java::lang::Double::J2CPP_CLASS_NAME,
	java::lang::Double::J2CPP_FIELD_NAME(3),
	java::lang::Double::J2CPP_FIELD_SIGNATURE(3),
	cpp_double
> java::lang::Double::POSITIVE_INFINITY;

static_field<
	java::lang::Double::J2CPP_CLASS_NAME,
	java::lang::Double::J2CPP_FIELD_NAME(4),
	java::lang::Double::J2CPP_FIELD_SIGNATURE(4),
	cpp_double
> java::lang::Double::NEGATIVE_INFINITY;

static_field<
	java::lang::Double::J2CPP_CLASS_NAME,
	java::lang::Double::J2CPP_FIELD_NAME(5),
	java::lang::Double::J2CPP_FIELD_SIGNATURE(5),
	local_ref< java::lang::Class >
> java::lang::Double::TYPE;

static_field<
	java::lang::Double::J2CPP_CLASS_NAME,
	java::lang::Double::J2CPP_FIELD_NAME(6),
	java::lang::Double::J2CPP_FIELD_SIGNATURE(6),
	cpp_int
> java::lang::Double::SIZE;


J2CPP_DEFINE_CLASS(java::lang::Double,"java/lang/Double")
J2CPP_DEFINE_METHOD(java::lang::Double,0,"<init>","(D)V")
J2CPP_DEFINE_METHOD(java::lang::Double,1,"<init>","(Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(java::lang::Double,2,"compareTo","(Ljava/lang/Double;)I")
J2CPP_DEFINE_METHOD(java::lang::Double,3,"byteValue","()B")
J2CPP_DEFINE_METHOD(java::lang::Double,4,"doubleToLongBits","(D)J")
J2CPP_DEFINE_METHOD(java::lang::Double,5,"doubleToRawLongBits","(D)J")
J2CPP_DEFINE_METHOD(java::lang::Double,6,"doubleValue","()D")
J2CPP_DEFINE_METHOD(java::lang::Double,7,"equals","(Ljava/lang/Object;)Z")
J2CPP_DEFINE_METHOD(java::lang::Double,8,"floatValue","()F")
J2CPP_DEFINE_METHOD(java::lang::Double,9,"hashCode","()I")
J2CPP_DEFINE_METHOD(java::lang::Double,10,"intValue","()I")
J2CPP_DEFINE_METHOD(java::lang::Double,11,"isInfinite","()Z")
J2CPP_DEFINE_METHOD(java::lang::Double,12,"isInfinite","(D)Z")
J2CPP_DEFINE_METHOD(java::lang::Double,13,"isNaN","()Z")
J2CPP_DEFINE_METHOD(java::lang::Double,14,"isNaN","(D)Z")
J2CPP_DEFINE_METHOD(java::lang::Double,15,"longBitsToDouble","(J)D")
J2CPP_DEFINE_METHOD(java::lang::Double,16,"longValue","()J")
J2CPP_DEFINE_METHOD(java::lang::Double,17,"parseDouble","(Ljava/lang/String;)D")
J2CPP_DEFINE_METHOD(java::lang::Double,18,"shortValue","()S")
J2CPP_DEFINE_METHOD(java::lang::Double,19,"toString","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::lang::Double,20,"toString","(D)Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::lang::Double,21,"valueOf","(Ljava/lang/String;)Ljava/lang/Double;")
J2CPP_DEFINE_METHOD(java::lang::Double,22,"compare","(DD)I")
J2CPP_DEFINE_METHOD(java::lang::Double,23,"valueOf","(D)Ljava/lang/Double;")
J2CPP_DEFINE_METHOD(java::lang::Double,24,"toHexString","(D)Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::lang::Double,25,"compareTo","(Ljava/lang/Object;)I")
J2CPP_DEFINE_METHOD(java::lang::Double,26,"<clinit>","()V")
J2CPP_DEFINE_FIELD(java::lang::Double,0,"MAX_VALUE","D")
J2CPP_DEFINE_FIELD(java::lang::Double,1,"MIN_VALUE","D")
J2CPP_DEFINE_FIELD(java::lang::Double,2,"NaN","D")
J2CPP_DEFINE_FIELD(java::lang::Double,3,"POSITIVE_INFINITY","D")
J2CPP_DEFINE_FIELD(java::lang::Double,4,"NEGATIVE_INFINITY","D")
J2CPP_DEFINE_FIELD(java::lang::Double,5,"TYPE","Ljava/lang/Class;")
J2CPP_DEFINE_FIELD(java::lang::Double,6,"SIZE","I")

} //namespace j2cpp

#endif //J2CPP_JAVA_LANG_DOUBLE_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
