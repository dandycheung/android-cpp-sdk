/*================================================================================
  code generated by: java2cpp
  class: java.lang.reflect.AnnotatedElement
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_LANG_REFLECT_ANNOTATEDELEMENT_HPP_DECL
#define J2CPP_JAVA_LANG_REFLECT_ANNOTATEDELEMENT_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class Class; } } }
namespace j2cpp { namespace java { namespace lang { namespace annotation { class Annotation; } } } }


#include <java/lang/Class.hpp>
#include <java/lang/annotation/Annotation.hpp>


namespace j2cpp {

namespace java { namespace lang { namespace reflect {

	class AnnotatedElement;
	class AnnotatedElement
		: public cpp_object<AnnotatedElement>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)

		AnnotatedElement(jobject jobj)
		: cpp_object<AnnotatedElement>(jobj)
		{
		}

		local_ref< java::lang::annotation::Annotation > getAnnotation(local_ref< java::lang::Class > const&);
		local_ref< cpp_object_array<java::lang::annotation::Annotation, 1> > getAnnotations();
		local_ref< cpp_object_array<java::lang::annotation::Annotation, 1> > getDeclaredAnnotations();
		cpp_boolean isAnnotationPresent(local_ref< java::lang::Class > const&);
	}; //class AnnotatedElement

} //namespace reflect
} //namespace lang
} //namespace java


} //namespace j2cpp

#endif //J2CPP_JAVA_LANG_REFLECT_ANNOTATEDELEMENT_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_LANG_REFLECT_ANNOTATEDELEMENT_HPP_IMPL
#define J2CPP_JAVA_LANG_REFLECT_ANNOTATEDELEMENT_HPP_IMPL

namespace j2cpp {


local_ref< java::lang::annotation::Annotation > java::lang::reflect::AnnotatedElement::getAnnotation(local_ref< java::lang::Class > const &a0)
{
	return local_ref< java::lang::annotation::Annotation >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(0), J2CPP_METHOD_SIGNATURE(0), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< cpp_object_array<java::lang::annotation::Annotation, 1> > java::lang::reflect::AnnotatedElement::getAnnotations()
{
	return local_ref< cpp_object_array<java::lang::annotation::Annotation, 1> >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), false>()
		)
	);
}

local_ref< cpp_object_array<java::lang::annotation::Annotation, 1> > java::lang::reflect::AnnotatedElement::getDeclaredAnnotations()
{
	return local_ref< cpp_object_array<java::lang::annotation::Annotation, 1> >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>()
		)
	);
}

cpp_boolean java::lang::reflect::AnnotatedElement::isAnnotationPresent(local_ref< java::lang::Class > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>(),
			a0.get_jtype()
		)
	);
}


J2CPP_DEFINE_CLASS(java::lang::reflect::AnnotatedElement,"java/lang/reflect/AnnotatedElement")
J2CPP_DEFINE_METHOD(java::lang::reflect::AnnotatedElement,0,"getAnnotation","(Ljava/lang/Class;)Ljava/lang/annotation/Annotation;")
J2CPP_DEFINE_METHOD(java::lang::reflect::AnnotatedElement,1,"getAnnotations","()[java.lang.annotation.Annotation")
J2CPP_DEFINE_METHOD(java::lang::reflect::AnnotatedElement,2,"getDeclaredAnnotations","()[java.lang.annotation.Annotation")
J2CPP_DEFINE_METHOD(java::lang::reflect::AnnotatedElement,3,"isAnnotationPresent","(Ljava/lang/Class;)Z")

} //namespace j2cpp

#endif //J2CPP_JAVA_LANG_REFLECT_ANNOTATEDELEMENT_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
