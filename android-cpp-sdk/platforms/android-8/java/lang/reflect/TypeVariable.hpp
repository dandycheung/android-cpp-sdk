/*================================================================================
  code generated by: java2cpp
  class: java.lang.reflect.TypeVariable
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_LANG_REFLECT_TYPEVARIABLE_HPP_DECL
#define J2CPP_JAVA_LANG_REFLECT_TYPEVARIABLE_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace lang { namespace reflect { class Type; } } } }
namespace j2cpp { namespace java { namespace lang { namespace reflect { class GenericDeclaration; } } } }


#include <java/lang/String.hpp>
#include <java/lang/reflect/GenericDeclaration.hpp>
#include <java/lang/reflect/Type.hpp>


namespace j2cpp {

namespace java { namespace lang { namespace reflect {

	class TypeVariable;
	class TypeVariable
		: public cpp_object<TypeVariable>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)

		TypeVariable(jobject jobj)
		: cpp_object<TypeVariable>(jobj)
		{
		}

		local_ref< cpp_object_array<java::lang::reflect::Type, 1> > getBounds();
		local_ref< java::lang::reflect::GenericDeclaration > getGenericDeclaration();
		local_ref< java::lang::String > getName();
	}; //class TypeVariable

} //namespace reflect
} //namespace lang
} //namespace java


} //namespace j2cpp

#endif //J2CPP_JAVA_LANG_REFLECT_TYPEVARIABLE_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_LANG_REFLECT_TYPEVARIABLE_HPP_IMPL
#define J2CPP_JAVA_LANG_REFLECT_TYPEVARIABLE_HPP_IMPL

namespace j2cpp {


local_ref< cpp_object_array<java::lang::reflect::Type, 1> > java::lang::reflect::TypeVariable::getBounds()
{
	return local_ref< cpp_object_array<java::lang::reflect::Type, 1> >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(0), J2CPP_METHOD_SIGNATURE(0), false>()
		)
	);
}

local_ref< java::lang::reflect::GenericDeclaration > java::lang::reflect::TypeVariable::getGenericDeclaration()
{
	return local_ref< java::lang::reflect::GenericDeclaration >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), false>()
		)
	);
}

local_ref< java::lang::String > java::lang::reflect::TypeVariable::getName()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>()
		)
	);
}


J2CPP_DEFINE_CLASS(java::lang::reflect::TypeVariable,"java/lang/reflect/TypeVariable")
J2CPP_DEFINE_METHOD(java::lang::reflect::TypeVariable,0,"getBounds","()[java.lang.reflect.Type")
J2CPP_DEFINE_METHOD(java::lang::reflect::TypeVariable,1,"getGenericDeclaration","()Ljava/lang/reflect/GenericDeclaration;")
J2CPP_DEFINE_METHOD(java::lang::reflect::TypeVariable,2,"getName","()Ljava/lang/String;")

} //namespace j2cpp

#endif //J2CPP_JAVA_LANG_REFLECT_TYPEVARIABLE_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
