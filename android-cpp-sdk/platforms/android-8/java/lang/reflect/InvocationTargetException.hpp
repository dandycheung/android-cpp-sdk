/*================================================================================
  code generated by: java2cpp
  class: java.lang.reflect.InvocationTargetException
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_LANG_REFLECT_INVOCATIONTARGETEXCEPTION_HPP_DECL
#define J2CPP_JAVA_LANG_REFLECT_INVOCATIONTARGETEXCEPTION_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace lang { class Throwable; } } }


#include <java/lang/String.hpp>
#include <java/lang/Throwable.hpp>


namespace j2cpp {

namespace java { namespace lang { namespace reflect {

	class InvocationTargetException;
	class InvocationTargetException
		: public cpp_object<InvocationTargetException>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)

		InvocationTargetException(jobject jobj)
		: cpp_object<InvocationTargetException>(jobj)
		{
		}

		local_ref< java::lang::Throwable > getTargetException();
		local_ref< java::lang::Throwable > getCause();
	}; //class InvocationTargetException

} //namespace reflect
} //namespace lang
} //namespace java


} //namespace j2cpp

#endif //J2CPP_JAVA_LANG_REFLECT_INVOCATIONTARGETEXCEPTION_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_LANG_REFLECT_INVOCATIONTARGETEXCEPTION_HPP_IMPL
#define J2CPP_JAVA_LANG_REFLECT_INVOCATIONTARGETEXCEPTION_HPP_IMPL

namespace j2cpp {


template <>
local_ref< java::lang::reflect::InvocationTargetException > create< java::lang::reflect::InvocationTargetException>()
{
	return local_ref< java::lang::reflect::InvocationTargetException >(
		environment::get().get_jenv()->NewObject(
			get_class<java::lang::reflect::InvocationTargetException::J2CPP_CLASS_NAME>(),
			get_method_id<java::lang::reflect::InvocationTargetException::J2CPP_CLASS_NAME, java::lang::reflect::InvocationTargetException::J2CPP_METHOD_NAME(0), java::lang::reflect::InvocationTargetException::J2CPP_METHOD_SIGNATURE(0), false>()
		)
	);
}

template <>
local_ref< java::lang::reflect::InvocationTargetException > create< java::lang::reflect::InvocationTargetException>(local_ref< java::lang::Throwable > const &a0)
{
	return local_ref< java::lang::reflect::InvocationTargetException >(
		environment::get().get_jenv()->NewObject(
			get_class<java::lang::reflect::InvocationTargetException::J2CPP_CLASS_NAME>(),
			get_method_id<java::lang::reflect::InvocationTargetException::J2CPP_CLASS_NAME, java::lang::reflect::InvocationTargetException::J2CPP_METHOD_NAME(1), java::lang::reflect::InvocationTargetException::J2CPP_METHOD_SIGNATURE(1), false>(),
			a0.get_jtype()
		)
	);
}

template <>
local_ref< java::lang::reflect::InvocationTargetException > create< java::lang::reflect::InvocationTargetException>(local_ref< java::lang::Throwable > const &a0, local_ref< java::lang::String > const &a1)
{
	return local_ref< java::lang::reflect::InvocationTargetException >(
		environment::get().get_jenv()->NewObject(
			get_class<java::lang::reflect::InvocationTargetException::J2CPP_CLASS_NAME>(),
			get_method_id<java::lang::reflect::InvocationTargetException::J2CPP_CLASS_NAME, java::lang::reflect::InvocationTargetException::J2CPP_METHOD_NAME(2), java::lang::reflect::InvocationTargetException::J2CPP_METHOD_SIGNATURE(2), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< java::lang::Throwable > java::lang::reflect::InvocationTargetException::getTargetException()
{
	return local_ref< java::lang::Throwable >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>()
		)
	);
}

local_ref< java::lang::Throwable > java::lang::reflect::InvocationTargetException::getCause()
{
	return local_ref< java::lang::Throwable >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>()
		)
	);
}


J2CPP_DEFINE_CLASS(java::lang::reflect::InvocationTargetException,"java/lang/reflect/InvocationTargetException")
J2CPP_DEFINE_METHOD(java::lang::reflect::InvocationTargetException,0,"<init>","()V")
J2CPP_DEFINE_METHOD(java::lang::reflect::InvocationTargetException,1,"<init>","(Ljava/lang/Throwable;)V")
J2CPP_DEFINE_METHOD(java::lang::reflect::InvocationTargetException,2,"<init>","(Ljava/lang/Throwable;Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(java::lang::reflect::InvocationTargetException,3,"getTargetException","()Ljava/lang/Throwable;")
J2CPP_DEFINE_METHOD(java::lang::reflect::InvocationTargetException,4,"getCause","()Ljava/lang/Throwable;")

} //namespace j2cpp

#endif //J2CPP_JAVA_LANG_REFLECT_INVOCATIONTARGETEXCEPTION_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
