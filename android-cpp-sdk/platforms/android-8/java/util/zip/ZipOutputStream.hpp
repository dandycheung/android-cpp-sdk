/*================================================================================
  code generated by: java2cpp
  class: java.util.zip.ZipOutputStream
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_ZIP_ZIPOUTPUTSTREAM_HPP_DECL
#define J2CPP_JAVA_UTIL_ZIP_ZIPOUTPUTSTREAM_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace util { namespace zip { class ZipEntry; } } } }
namespace j2cpp { namespace java { namespace io { class OutputStream; } } }


#include <java/io/OutputStream.hpp>
#include <java/lang/String.hpp>
#include <java/util/zip/ZipEntry.hpp>


namespace j2cpp {

namespace java { namespace util { namespace zip {

	class ZipOutputStream;
	class ZipOutputStream
		: public cpp_object<ZipOutputStream>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_FIELD(0)
		J2CPP_DECLARE_FIELD(1)

		ZipOutputStream(jobject jobj)
		: cpp_object<ZipOutputStream>(jobj)
		{
		}

		void close();
		void closeEntry();
		void finish();
		void putNextEntry(local_ref< java::util::zip::ZipEntry > const&);
		void setComment(local_ref< java::lang::String > const&);
		void setLevel(cpp_int const&);
		void setMethod(cpp_int const&);
		void write(local_ref< cpp_byte_array<1> > const&, cpp_int const&, cpp_int const&);

		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(0), J2CPP_FIELD_SIGNATURE(0), cpp_int > DEFLATED;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(1), J2CPP_FIELD_SIGNATURE(1), cpp_int > STORED;
	}; //class ZipOutputStream

} //namespace zip
} //namespace util
} //namespace java


} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_ZIP_ZIPOUTPUTSTREAM_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_ZIP_ZIPOUTPUTSTREAM_HPP_IMPL
#define J2CPP_JAVA_UTIL_ZIP_ZIPOUTPUTSTREAM_HPP_IMPL

namespace j2cpp {


template <>
local_ref< java::util::zip::ZipOutputStream > create< java::util::zip::ZipOutputStream>(local_ref< java::io::OutputStream > const &a0)
{
	return local_ref< java::util::zip::ZipOutputStream >(
		environment::get().get_jenv()->NewObject(
			get_class<java::util::zip::ZipOutputStream::J2CPP_CLASS_NAME>(),
			get_method_id<java::util::zip::ZipOutputStream::J2CPP_CLASS_NAME, java::util::zip::ZipOutputStream::J2CPP_METHOD_NAME(0), java::util::zip::ZipOutputStream::J2CPP_METHOD_SIGNATURE(0), false>(),
			a0.get_jtype()
		)
	);
}

void java::util::zip::ZipOutputStream::close()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), false>()
		)
	);
}

void java::util::zip::ZipOutputStream::closeEntry()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>()
		)
	);
}

void java::util::zip::ZipOutputStream::finish()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>()
		)
	);
}

void java::util::zip::ZipOutputStream::putNextEntry(local_ref< java::util::zip::ZipEntry > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>(),
			a0.get_jtype()
		)
	);
}

void java::util::zip::ZipOutputStream::setComment(local_ref< java::lang::String > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>(),
			a0.get_jtype()
		)
	);
}

void java::util::zip::ZipOutputStream::setLevel(cpp_int const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>(),
			a0.get_jtype()
		)
	);
}

void java::util::zip::ZipOutputStream::setMethod(cpp_int const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(7), J2CPP_METHOD_SIGNATURE(7), false>(),
			a0.get_jtype()
		)
	);
}

void java::util::zip::ZipOutputStream::write(local_ref< cpp_byte_array<1> > const &a0, cpp_int const &a1, cpp_int const &a2)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(8), J2CPP_METHOD_SIGNATURE(8), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}


static_field<
	java::util::zip::ZipOutputStream::J2CPP_CLASS_NAME,
	java::util::zip::ZipOutputStream::J2CPP_FIELD_NAME(0),
	java::util::zip::ZipOutputStream::J2CPP_FIELD_SIGNATURE(0),
	cpp_int
> java::util::zip::ZipOutputStream::DEFLATED;

static_field<
	java::util::zip::ZipOutputStream::J2CPP_CLASS_NAME,
	java::util::zip::ZipOutputStream::J2CPP_FIELD_NAME(1),
	java::util::zip::ZipOutputStream::J2CPP_FIELD_SIGNATURE(1),
	cpp_int
> java::util::zip::ZipOutputStream::STORED;


J2CPP_DEFINE_CLASS(java::util::zip::ZipOutputStream,"java/util/zip/ZipOutputStream")
J2CPP_DEFINE_METHOD(java::util::zip::ZipOutputStream,0,"<init>","(Ljava/io/OutputStream;)V")
J2CPP_DEFINE_METHOD(java::util::zip::ZipOutputStream,1,"close","()V")
J2CPP_DEFINE_METHOD(java::util::zip::ZipOutputStream,2,"closeEntry","()V")
J2CPP_DEFINE_METHOD(java::util::zip::ZipOutputStream,3,"finish","()V")
J2CPP_DEFINE_METHOD(java::util::zip::ZipOutputStream,4,"putNextEntry","(Ljava/util/zip/ZipEntry;)V")
J2CPP_DEFINE_METHOD(java::util::zip::ZipOutputStream,5,"setComment","(Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(java::util::zip::ZipOutputStream,6,"setLevel","(I)V")
J2CPP_DEFINE_METHOD(java::util::zip::ZipOutputStream,7,"setMethod","(I)V")
J2CPP_DEFINE_METHOD(java::util::zip::ZipOutputStream,8,"write","([BII)V")
J2CPP_DEFINE_FIELD(java::util::zip::ZipOutputStream,0,"DEFLATED","I")
J2CPP_DEFINE_FIELD(java::util::zip::ZipOutputStream,1,"STORED","I")

} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_ZIP_ZIPOUTPUTSTREAM_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
