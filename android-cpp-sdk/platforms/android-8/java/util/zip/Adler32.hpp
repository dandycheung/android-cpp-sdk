/*================================================================================
  code generated by: java2cpp
  class: java.util.zip.Adler32
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_ZIP_ADLER32_HPP_DECL
#define J2CPP_JAVA_UTIL_ZIP_ADLER32_HPP_DECL






namespace j2cpp {

namespace java { namespace util { namespace zip {

	class Adler32;
	class Adler32
		: public cpp_object<Adler32>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)

		Adler32(jobject jobj)
		: cpp_object<Adler32>(jobj)
		{
		}

		cpp_long getValue();
		void reset();
		void update(cpp_int const&);
		void update(local_ref< cpp_byte_array<1> > const&);
		void update(local_ref< cpp_byte_array<1> > const&, cpp_int const&, cpp_int const&);
	}; //class Adler32

} //namespace zip
} //namespace util
} //namespace java


} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_ZIP_ADLER32_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_ZIP_ADLER32_HPP_IMPL
#define J2CPP_JAVA_UTIL_ZIP_ADLER32_HPP_IMPL

namespace j2cpp {


template <>
local_ref< java::util::zip::Adler32 > create< java::util::zip::Adler32>()
{
	return local_ref< java::util::zip::Adler32 >(
		environment::get().get_jenv()->NewObject(
			get_class<java::util::zip::Adler32::J2CPP_CLASS_NAME>(),
			get_method_id<java::util::zip::Adler32::J2CPP_CLASS_NAME, java::util::zip::Adler32::J2CPP_METHOD_NAME(0), java::util::zip::Adler32::J2CPP_METHOD_SIGNATURE(0), false>()
		)
	);
}

cpp_long java::util::zip::Adler32::getValue()
{
	return cpp_long(
		environment::get().get_jenv()->CallLongMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), false>()
		)
	);
}

void java::util::zip::Adler32::reset()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>()
		)
	);
}

void java::util::zip::Adler32::update(cpp_int const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>(),
			a0.get_jtype()
		)
	);
}

void java::util::zip::Adler32::update(local_ref< cpp_byte_array<1> > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>(),
			a0.get_jtype()
		)
	);
}

void java::util::zip::Adler32::update(local_ref< cpp_byte_array<1> > const &a0, cpp_int const &a1, cpp_int const &a2)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}


J2CPP_DEFINE_CLASS(java::util::zip::Adler32,"java/util/zip/Adler32")
J2CPP_DEFINE_METHOD(java::util::zip::Adler32,0,"<init>","()V")
J2CPP_DEFINE_METHOD(java::util::zip::Adler32,1,"getValue","()J")
J2CPP_DEFINE_METHOD(java::util::zip::Adler32,2,"reset","()V")
J2CPP_DEFINE_METHOD(java::util::zip::Adler32,3,"update","(I)V")
J2CPP_DEFINE_METHOD(java::util::zip::Adler32,4,"update","([B)V")
J2CPP_DEFINE_METHOD(java::util::zip::Adler32,5,"update","([BII)V")

} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_ZIP_ADLER32_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
