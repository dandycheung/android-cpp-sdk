/*================================================================================
  code generated by: java2cpp
  class: java.util.BitSet
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_BITSET_HPP_DECL
#define J2CPP_JAVA_UTIL_BITSET_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace lang { class Object; } } }


#include <java/lang/Object.hpp>
#include <java/lang/String.hpp>


namespace j2cpp {

namespace java { namespace util {

	class BitSet;
	class BitSet
		: public cpp_object<BitSet>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_METHOD(12)
		J2CPP_DECLARE_METHOD(13)
		J2CPP_DECLARE_METHOD(14)
		J2CPP_DECLARE_METHOD(15)
		J2CPP_DECLARE_METHOD(16)
		J2CPP_DECLARE_METHOD(17)
		J2CPP_DECLARE_METHOD(18)
		J2CPP_DECLARE_METHOD(19)
		J2CPP_DECLARE_METHOD(20)
		J2CPP_DECLARE_METHOD(21)
		J2CPP_DECLARE_METHOD(22)
		J2CPP_DECLARE_METHOD(23)
		J2CPP_DECLARE_METHOD(24)
		J2CPP_DECLARE_METHOD(25)
		J2CPP_DECLARE_METHOD(26)
		J2CPP_DECLARE_METHOD(27)

		BitSet(jobject jobj)
		: cpp_object<BitSet>(jobj)
		{
		}

		local_ref< java::lang::Object > clone();
		cpp_boolean equals(local_ref< java::lang::Object > const&);
		cpp_int hashCode();
		cpp_boolean get(cpp_int const&);
		local_ref< java::util::BitSet > get(cpp_int const&, cpp_int const&);
		void set(cpp_int const&);
		void set(cpp_int const&, cpp_boolean const&);
		void set(cpp_int const&, cpp_int const&);
		void set(cpp_int const&, cpp_int const&, cpp_boolean const&);
		void clear();
		void clear(cpp_int const&);
		void clear(cpp_int const&, cpp_int const&);
		void flip(cpp_int const&);
		void flip(cpp_int const&, cpp_int const&);
		cpp_boolean intersects(local_ref< java::util::BitSet > const&);
		void And(local_ref< java::util::BitSet > const&);
		void andNot(local_ref< java::util::BitSet > const&);
		void Or(local_ref< java::util::BitSet > const&);
		void Xor(local_ref< java::util::BitSet > const&);
		cpp_int size();
		cpp_int length();
		local_ref< java::lang::String > toString();
		cpp_int nextSetBit(cpp_int const&);
		cpp_int nextClearBit(cpp_int const&);
		cpp_boolean isEmpty();
		cpp_int cardinality();
	}; //class BitSet

} //namespace util
} //namespace java


} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_BITSET_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_BITSET_HPP_IMPL
#define J2CPP_JAVA_UTIL_BITSET_HPP_IMPL

namespace j2cpp {


template <>
local_ref< java::util::BitSet > create< java::util::BitSet>()
{
	return local_ref< java::util::BitSet >(
		environment::get().get_jenv()->NewObject(
			get_class<java::util::BitSet::J2CPP_CLASS_NAME>(),
			get_method_id<java::util::BitSet::J2CPP_CLASS_NAME, java::util::BitSet::J2CPP_METHOD_NAME(0), java::util::BitSet::J2CPP_METHOD_SIGNATURE(0), false>()
		)
	);
}

template <>
local_ref< java::util::BitSet > create< java::util::BitSet>(cpp_int const &a0)
{
	return local_ref< java::util::BitSet >(
		environment::get().get_jenv()->NewObject(
			get_class<java::util::BitSet::J2CPP_CLASS_NAME>(),
			get_method_id<java::util::BitSet::J2CPP_CLASS_NAME, java::util::BitSet::J2CPP_METHOD_NAME(1), java::util::BitSet::J2CPP_METHOD_SIGNATURE(1), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::Object > java::util::BitSet::clone()
{
	return local_ref< java::lang::Object >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>()
		)
	);
}

cpp_boolean java::util::BitSet::equals(local_ref< java::lang::Object > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int java::util::BitSet::hashCode()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>()
		)
	);
}

cpp_boolean java::util::BitSet::get(cpp_int const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::util::BitSet > java::util::BitSet::get(cpp_int const &a0, cpp_int const &a1)
{
	return local_ref< java::util::BitSet >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void java::util::BitSet::set(cpp_int const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(7), J2CPP_METHOD_SIGNATURE(7), false>(),
			a0.get_jtype()
		)
	);
}

void java::util::BitSet::set(cpp_int const &a0, cpp_boolean const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(8), J2CPP_METHOD_SIGNATURE(8), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void java::util::BitSet::set(cpp_int const &a0, cpp_int const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(9), J2CPP_METHOD_SIGNATURE(9), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void java::util::BitSet::set(cpp_int const &a0, cpp_int const &a1, cpp_boolean const &a2)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(10), J2CPP_METHOD_SIGNATURE(10), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

void java::util::BitSet::clear()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(11), J2CPP_METHOD_SIGNATURE(11), false>()
		)
	);
}

void java::util::BitSet::clear(cpp_int const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(12), J2CPP_METHOD_SIGNATURE(12), false>(),
			a0.get_jtype()
		)
	);
}

void java::util::BitSet::clear(cpp_int const &a0, cpp_int const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(13), J2CPP_METHOD_SIGNATURE(13), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void java::util::BitSet::flip(cpp_int const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(14), J2CPP_METHOD_SIGNATURE(14), false>(),
			a0.get_jtype()
		)
	);
}

void java::util::BitSet::flip(cpp_int const &a0, cpp_int const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(15), J2CPP_METHOD_SIGNATURE(15), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_boolean java::util::BitSet::intersects(local_ref< java::util::BitSet > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(16), J2CPP_METHOD_SIGNATURE(16), false>(),
			a0.get_jtype()
		)
	);
}

void java::util::BitSet::And(local_ref< java::util::BitSet > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(17), J2CPP_METHOD_SIGNATURE(17), false>(),
			a0.get_jtype()
		)
	);
}

void java::util::BitSet::andNot(local_ref< java::util::BitSet > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(18), J2CPP_METHOD_SIGNATURE(18), false>(),
			a0.get_jtype()
		)
	);
}

void java::util::BitSet::Or(local_ref< java::util::BitSet > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(19), J2CPP_METHOD_SIGNATURE(19), false>(),
			a0.get_jtype()
		)
	);
}

void java::util::BitSet::Xor(local_ref< java::util::BitSet > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(20), J2CPP_METHOD_SIGNATURE(20), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int java::util::BitSet::size()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(21), J2CPP_METHOD_SIGNATURE(21), false>()
		)
	);
}

cpp_int java::util::BitSet::length()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(22), J2CPP_METHOD_SIGNATURE(22), false>()
		)
	);
}

local_ref< java::lang::String > java::util::BitSet::toString()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(23), J2CPP_METHOD_SIGNATURE(23), false>()
		)
	);
}

cpp_int java::util::BitSet::nextSetBit(cpp_int const &a0)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(24), J2CPP_METHOD_SIGNATURE(24), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int java::util::BitSet::nextClearBit(cpp_int const &a0)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(25), J2CPP_METHOD_SIGNATURE(25), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean java::util::BitSet::isEmpty()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(26), J2CPP_METHOD_SIGNATURE(26), false>()
		)
	);
}

cpp_int java::util::BitSet::cardinality()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(27), J2CPP_METHOD_SIGNATURE(27), false>()
		)
	);
}


J2CPP_DEFINE_CLASS(java::util::BitSet,"java/util/BitSet")
J2CPP_DEFINE_METHOD(java::util::BitSet,0,"<init>","()V")
J2CPP_DEFINE_METHOD(java::util::BitSet,1,"<init>","(I)V")
J2CPP_DEFINE_METHOD(java::util::BitSet,2,"clone","()Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(java::util::BitSet,3,"equals","(Ljava/lang/Object;)Z")
J2CPP_DEFINE_METHOD(java::util::BitSet,4,"hashCode","()I")
J2CPP_DEFINE_METHOD(java::util::BitSet,5,"get","(I)Z")
J2CPP_DEFINE_METHOD(java::util::BitSet,6,"get","(II)Ljava/util/BitSet;")
J2CPP_DEFINE_METHOD(java::util::BitSet,7,"set","(I)V")
J2CPP_DEFINE_METHOD(java::util::BitSet,8,"set","(IZ)V")
J2CPP_DEFINE_METHOD(java::util::BitSet,9,"set","(II)V")
J2CPP_DEFINE_METHOD(java::util::BitSet,10,"set","(IIZ)V")
J2CPP_DEFINE_METHOD(java::util::BitSet,11,"clear","()V")
J2CPP_DEFINE_METHOD(java::util::BitSet,12,"clear","(I)V")
J2CPP_DEFINE_METHOD(java::util::BitSet,13,"clear","(II)V")
J2CPP_DEFINE_METHOD(java::util::BitSet,14,"flip","(I)V")
J2CPP_DEFINE_METHOD(java::util::BitSet,15,"flip","(II)V")
J2CPP_DEFINE_METHOD(java::util::BitSet,16,"intersects","(Ljava/util/BitSet;)Z")
J2CPP_DEFINE_METHOD(java::util::BitSet,17,"and","(Ljava/util/BitSet;)V")
J2CPP_DEFINE_METHOD(java::util::BitSet,18,"andNot","(Ljava/util/BitSet;)V")
J2CPP_DEFINE_METHOD(java::util::BitSet,19,"or","(Ljava/util/BitSet;)V")
J2CPP_DEFINE_METHOD(java::util::BitSet,20,"xor","(Ljava/util/BitSet;)V")
J2CPP_DEFINE_METHOD(java::util::BitSet,21,"size","()I")
J2CPP_DEFINE_METHOD(java::util::BitSet,22,"length","()I")
J2CPP_DEFINE_METHOD(java::util::BitSet,23,"toString","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::util::BitSet,24,"nextSetBit","(I)I")
J2CPP_DEFINE_METHOD(java::util::BitSet,25,"nextClearBit","(I)I")
J2CPP_DEFINE_METHOD(java::util::BitSet,26,"isEmpty","()Z")
J2CPP_DEFINE_METHOD(java::util::BitSet,27,"cardinality","()I")

} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_BITSET_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
