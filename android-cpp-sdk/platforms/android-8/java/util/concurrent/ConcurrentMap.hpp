/*================================================================================
  code generated by: java2cpp
  class: java.util.concurrent.ConcurrentMap
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_CONCURRENT_CONCURRENTMAP_HPP_DECL
#define J2CPP_JAVA_UTIL_CONCURRENT_CONCURRENTMAP_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class Object; } } }


#include <java/lang/Object.hpp>


namespace j2cpp {

namespace java { namespace util { namespace concurrent {

	class ConcurrentMap;
	class ConcurrentMap
		: public cpp_object<ConcurrentMap>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)

		ConcurrentMap(jobject jobj)
		: cpp_object<ConcurrentMap>(jobj)
		{
		}

		local_ref< java::lang::Object > putIfAbsent(local_ref< java::lang::Object > const&, local_ref< java::lang::Object > const&);
		cpp_boolean remove(local_ref< java::lang::Object > const&, local_ref< java::lang::Object > const&);
		cpp_boolean replace(local_ref< java::lang::Object > const&, local_ref< java::lang::Object > const&, local_ref< java::lang::Object > const&);
		local_ref< java::lang::Object > replace(local_ref< java::lang::Object > const&, local_ref< java::lang::Object > const&);
	}; //class ConcurrentMap

} //namespace concurrent
} //namespace util
} //namespace java


} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_CONCURRENT_CONCURRENTMAP_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_CONCURRENT_CONCURRENTMAP_HPP_IMPL
#define J2CPP_JAVA_UTIL_CONCURRENT_CONCURRENTMAP_HPP_IMPL

namespace j2cpp {


local_ref< java::lang::Object > java::util::concurrent::ConcurrentMap::putIfAbsent(local_ref< java::lang::Object > const &a0, local_ref< java::lang::Object > const &a1)
{
	return local_ref< java::lang::Object >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(0), J2CPP_METHOD_SIGNATURE(0), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_boolean java::util::concurrent::ConcurrentMap::remove(local_ref< java::lang::Object > const &a0, local_ref< java::lang::Object > const &a1)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_boolean java::util::concurrent::ConcurrentMap::replace(local_ref< java::lang::Object > const &a0, local_ref< java::lang::Object > const &a1, local_ref< java::lang::Object > const &a2)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

local_ref< java::lang::Object > java::util::concurrent::ConcurrentMap::replace(local_ref< java::lang::Object > const &a0, local_ref< java::lang::Object > const &a1)
{
	return local_ref< java::lang::Object >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}


J2CPP_DEFINE_CLASS(java::util::concurrent::ConcurrentMap,"java/util/concurrent/ConcurrentMap")
J2CPP_DEFINE_METHOD(java::util::concurrent::ConcurrentMap,0,"putIfAbsent","(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(java::util::concurrent::ConcurrentMap,1,"remove","(Ljava/lang/Object;Ljava/lang/Object;)Z")
J2CPP_DEFINE_METHOD(java::util::concurrent::ConcurrentMap,2,"replace","(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z")
J2CPP_DEFINE_METHOD(java::util::concurrent::ConcurrentMap,3,"replace","(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;")

} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_CONCURRENT_CONCURRENTMAP_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
