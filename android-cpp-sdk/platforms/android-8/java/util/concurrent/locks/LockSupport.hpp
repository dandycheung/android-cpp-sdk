/*================================================================================
  code generated by: java2cpp
  class: java.util.concurrent.locks.LockSupport
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_CONCURRENT_LOCKS_LOCKSUPPORT_HPP_DECL
#define J2CPP_JAVA_UTIL_CONCURRENT_LOCKS_LOCKSUPPORT_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class Thread; } } }


#include <java/lang/Thread.hpp>


namespace j2cpp {

namespace java { namespace util { namespace concurrent { namespace locks {

	class LockSupport;
	class LockSupport
		: public cpp_object<LockSupport>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)

		LockSupport(jobject jobj)
		: cpp_object<LockSupport>(jobj)
		{
		}

		static void unpark(local_ref< java::lang::Thread > const&);
		static void park();
		static void parkNanos(cpp_long const&);
		static void parkUntil(cpp_long const&);
	}; //class LockSupport

} //namespace locks
} //namespace concurrent
} //namespace util
} //namespace java


} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_CONCURRENT_LOCKS_LOCKSUPPORT_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_CONCURRENT_LOCKS_LOCKSUPPORT_HPP_IMPL
#define J2CPP_JAVA_UTIL_CONCURRENT_LOCKS_LOCKSUPPORT_HPP_IMPL

namespace j2cpp {


template <>
local_ref< java::util::concurrent::locks::LockSupport > create< java::util::concurrent::locks::LockSupport>()
{
	return local_ref< java::util::concurrent::locks::LockSupport >(
		environment::get().get_jenv()->NewObject(
			get_class<java::util::concurrent::locks::LockSupport::J2CPP_CLASS_NAME>(),
			get_method_id<java::util::concurrent::locks::LockSupport::J2CPP_CLASS_NAME, java::util::concurrent::locks::LockSupport::J2CPP_METHOD_NAME(0), java::util::concurrent::locks::LockSupport::J2CPP_METHOD_SIGNATURE(0), false>()
		)
	);
}

void java::util::concurrent::locks::LockSupport::unpark(local_ref< java::lang::Thread > const &a0)
{
	return void(
		environment::get().get_jenv()->CallStaticVoidMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), true>(),
			a0.get_jtype()
		)
	);
}

void java::util::concurrent::locks::LockSupport::park()
{
	return void(
		environment::get().get_jenv()->CallStaticVoidMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), true>()
		)
	);
}

void java::util::concurrent::locks::LockSupport::parkNanos(cpp_long const &a0)
{
	return void(
		environment::get().get_jenv()->CallStaticVoidMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), true>(),
			a0.get_jtype()
		)
	);
}

void java::util::concurrent::locks::LockSupport::parkUntil(cpp_long const &a0)
{
	return void(
		environment::get().get_jenv()->CallStaticVoidMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), true>(),
			a0.get_jtype()
		)
	);
}


J2CPP_DEFINE_CLASS(java::util::concurrent::locks::LockSupport,"java/util/concurrent/locks/LockSupport")
J2CPP_DEFINE_METHOD(java::util::concurrent::locks::LockSupport,0,"<init>","()V")
J2CPP_DEFINE_METHOD(java::util::concurrent::locks::LockSupport,1,"unpark","(Ljava/lang/Thread;)V")
J2CPP_DEFINE_METHOD(java::util::concurrent::locks::LockSupport,2,"park","()V")
J2CPP_DEFINE_METHOD(java::util::concurrent::locks::LockSupport,3,"parkNanos","(J)V")
J2CPP_DEFINE_METHOD(java::util::concurrent::locks::LockSupport,4,"parkUntil","(J)V")

} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_CONCURRENT_LOCKS_LOCKSUPPORT_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
