/*================================================================================
  code generated by: java2cpp
  class: java.util.concurrent.locks.Condition
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_CONCURRENT_LOCKS_CONDITION_HPP_DECL
#define J2CPP_JAVA_UTIL_CONCURRENT_LOCKS_CONDITION_HPP_DECL


namespace j2cpp { namespace java { namespace util { namespace concurrent { class TimeUnit; } } } }
namespace j2cpp { namespace java { namespace util { class Date; } } }


#include <java/util/Date.hpp>
#include <java/util/concurrent/TimeUnit.hpp>


namespace j2cpp {

namespace java { namespace util { namespace concurrent { namespace locks {

	class Condition;
	class Condition
		: public cpp_object<Condition>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)

		Condition(jobject jobj)
		: cpp_object<Condition>(jobj)
		{
		}

		void await();
		void awaitUninterruptibly();
		cpp_long awaitNanos(cpp_long const&);
		cpp_boolean await(cpp_long const&, local_ref< java::util::concurrent::TimeUnit > const&);
		cpp_boolean awaitUntil(local_ref< java::util::Date > const&);
		void signal();
		void signalAll();
	}; //class Condition

} //namespace locks
} //namespace concurrent
} //namespace util
} //namespace java


} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_CONCURRENT_LOCKS_CONDITION_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_CONCURRENT_LOCKS_CONDITION_HPP_IMPL
#define J2CPP_JAVA_UTIL_CONCURRENT_LOCKS_CONDITION_HPP_IMPL

namespace j2cpp {


void java::util::concurrent::locks::Condition::await()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(0), J2CPP_METHOD_SIGNATURE(0), false>()
		)
	);
}

void java::util::concurrent::locks::Condition::awaitUninterruptibly()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), false>()
		)
	);
}

cpp_long java::util::concurrent::locks::Condition::awaitNanos(cpp_long const &a0)
{
	return cpp_long(
		environment::get().get_jenv()->CallLongMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean java::util::concurrent::locks::Condition::await(cpp_long const &a0, local_ref< java::util::concurrent::TimeUnit > const &a1)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_boolean java::util::concurrent::locks::Condition::awaitUntil(local_ref< java::util::Date > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>(),
			a0.get_jtype()
		)
	);
}

void java::util::concurrent::locks::Condition::signal()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>()
		)
	);
}

void java::util::concurrent::locks::Condition::signalAll()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>()
		)
	);
}


J2CPP_DEFINE_CLASS(java::util::concurrent::locks::Condition,"java/util/concurrent/locks/Condition")
J2CPP_DEFINE_METHOD(java::util::concurrent::locks::Condition,0,"await","()V")
J2CPP_DEFINE_METHOD(java::util::concurrent::locks::Condition,1,"awaitUninterruptibly","()V")
J2CPP_DEFINE_METHOD(java::util::concurrent::locks::Condition,2,"awaitNanos","(J)J")
J2CPP_DEFINE_METHOD(java::util::concurrent::locks::Condition,3,"await","(JLjava/util/concurrent/TimeUnit;)Z")
J2CPP_DEFINE_METHOD(java::util::concurrent::locks::Condition,4,"awaitUntil","(Ljava/util/Date;)Z")
J2CPP_DEFINE_METHOD(java::util::concurrent::locks::Condition,5,"signal","()V")
J2CPP_DEFINE_METHOD(java::util::concurrent::locks::Condition,6,"signalAll","()V")

} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_CONCURRENT_LOCKS_CONDITION_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
