/*================================================================================
  code generated by: java2cpp
  class: java.util.TreeSet
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_TREESET_HPP_DECL
#define J2CPP_JAVA_UTIL_TREESET_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace util { class Comparator; } } }
namespace j2cpp { namespace java { namespace util { class Collection; } } }
namespace j2cpp { namespace java { namespace util { class Iterator; } } }
namespace j2cpp { namespace java { namespace util { class SortedSet; } } }


#include <java/lang/Object.hpp>
#include <java/util/Collection.hpp>
#include <java/util/Comparator.hpp>
#include <java/util/Iterator.hpp>
#include <java/util/SortedSet.hpp>


namespace j2cpp {

namespace java { namespace util {

	class TreeSet;
	class TreeSet
		: public cpp_object<TreeSet>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_METHOD(12)
		J2CPP_DECLARE_METHOD(13)
		J2CPP_DECLARE_METHOD(14)
		J2CPP_DECLARE_METHOD(15)
		J2CPP_DECLARE_METHOD(16)
		J2CPP_DECLARE_METHOD(17)
		J2CPP_DECLARE_METHOD(18)

		TreeSet(jobject jobj)
		: cpp_object<TreeSet>(jobj)
		{
		}

		cpp_boolean add(local_ref< java::lang::Object > const&);
		cpp_boolean addAll(local_ref< java::util::Collection > const&);
		void clear();
		local_ref< java::lang::Object > clone();
		local_ref< java::util::Comparator > comparator();
		cpp_boolean contains(local_ref< java::lang::Object > const&);
		local_ref< java::lang::Object > first();
		local_ref< java::util::SortedSet > headSet(local_ref< java::lang::Object > const&);
		cpp_boolean isEmpty();
		local_ref< java::util::Iterator > iterator();
		local_ref< java::lang::Object > last();
		cpp_boolean remove(local_ref< java::lang::Object > const&);
		cpp_int size();
		local_ref< java::util::SortedSet > subSet(local_ref< java::lang::Object > const&, local_ref< java::lang::Object > const&);
		local_ref< java::util::SortedSet > tailSet(local_ref< java::lang::Object > const&);
	}; //class TreeSet

} //namespace util
} //namespace java


} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_TREESET_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_TREESET_HPP_IMPL
#define J2CPP_JAVA_UTIL_TREESET_HPP_IMPL

namespace j2cpp {


template <>
local_ref< java::util::TreeSet > create< java::util::TreeSet>()
{
	return local_ref< java::util::TreeSet >(
		environment::get().get_jenv()->NewObject(
			get_class<java::util::TreeSet::J2CPP_CLASS_NAME>(),
			get_method_id<java::util::TreeSet::J2CPP_CLASS_NAME, java::util::TreeSet::J2CPP_METHOD_NAME(0), java::util::TreeSet::J2CPP_METHOD_SIGNATURE(0), false>()
		)
	);
}

template <>
local_ref< java::util::TreeSet > create< java::util::TreeSet>(local_ref< java::util::Collection > const &a0)
{
	return local_ref< java::util::TreeSet >(
		environment::get().get_jenv()->NewObject(
			get_class<java::util::TreeSet::J2CPP_CLASS_NAME>(),
			get_method_id<java::util::TreeSet::J2CPP_CLASS_NAME, java::util::TreeSet::J2CPP_METHOD_NAME(1), java::util::TreeSet::J2CPP_METHOD_SIGNATURE(1), false>(),
			a0.get_jtype()
		)
	);
}

template <>
local_ref< java::util::TreeSet > create< java::util::TreeSet>(local_ref< java::util::Comparator > const &a0)
{
	return local_ref< java::util::TreeSet >(
		environment::get().get_jenv()->NewObject(
			get_class<java::util::TreeSet::J2CPP_CLASS_NAME>(),
			get_method_id<java::util::TreeSet::J2CPP_CLASS_NAME, java::util::TreeSet::J2CPP_METHOD_NAME(2), java::util::TreeSet::J2CPP_METHOD_SIGNATURE(2), false>(),
			a0.get_jtype()
		)
	);
}

template <>
local_ref< java::util::TreeSet > create< java::util::TreeSet>(local_ref< java::util::SortedSet > const &a0)
{
	return local_ref< java::util::TreeSet >(
		environment::get().get_jenv()->NewObject(
			get_class<java::util::TreeSet::J2CPP_CLASS_NAME>(),
			get_method_id<java::util::TreeSet::J2CPP_CLASS_NAME, java::util::TreeSet::J2CPP_METHOD_NAME(3), java::util::TreeSet::J2CPP_METHOD_SIGNATURE(3), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean java::util::TreeSet::add(local_ref< java::lang::Object > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean java::util::TreeSet::addAll(local_ref< java::util::Collection > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>(),
			a0.get_jtype()
		)
	);
}

void java::util::TreeSet::clear()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>()
		)
	);
}

local_ref< java::lang::Object > java::util::TreeSet::clone()
{
	return local_ref< java::lang::Object >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(7), J2CPP_METHOD_SIGNATURE(7), false>()
		)
	);
}

local_ref< java::util::Comparator > java::util::TreeSet::comparator()
{
	return local_ref< java::util::Comparator >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(8), J2CPP_METHOD_SIGNATURE(8), false>()
		)
	);
}

cpp_boolean java::util::TreeSet::contains(local_ref< java::lang::Object > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(9), J2CPP_METHOD_SIGNATURE(9), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::Object > java::util::TreeSet::first()
{
	return local_ref< java::lang::Object >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(10), J2CPP_METHOD_SIGNATURE(10), false>()
		)
	);
}

local_ref< java::util::SortedSet > java::util::TreeSet::headSet(local_ref< java::lang::Object > const &a0)
{
	return local_ref< java::util::SortedSet >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(11), J2CPP_METHOD_SIGNATURE(11), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean java::util::TreeSet::isEmpty()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(12), J2CPP_METHOD_SIGNATURE(12), false>()
		)
	);
}

local_ref< java::util::Iterator > java::util::TreeSet::iterator()
{
	return local_ref< java::util::Iterator >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(13), J2CPP_METHOD_SIGNATURE(13), false>()
		)
	);
}

local_ref< java::lang::Object > java::util::TreeSet::last()
{
	return local_ref< java::lang::Object >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(14), J2CPP_METHOD_SIGNATURE(14), false>()
		)
	);
}

cpp_boolean java::util::TreeSet::remove(local_ref< java::lang::Object > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(15), J2CPP_METHOD_SIGNATURE(15), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int java::util::TreeSet::size()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(16), J2CPP_METHOD_SIGNATURE(16), false>()
		)
	);
}

local_ref< java::util::SortedSet > java::util::TreeSet::subSet(local_ref< java::lang::Object > const &a0, local_ref< java::lang::Object > const &a1)
{
	return local_ref< java::util::SortedSet >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(17), J2CPP_METHOD_SIGNATURE(17), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< java::util::SortedSet > java::util::TreeSet::tailSet(local_ref< java::lang::Object > const &a0)
{
	return local_ref< java::util::SortedSet >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(18), J2CPP_METHOD_SIGNATURE(18), false>(),
			a0.get_jtype()
		)
	);
}


J2CPP_DEFINE_CLASS(java::util::TreeSet,"java/util/TreeSet")
J2CPP_DEFINE_METHOD(java::util::TreeSet,0,"<init>","()V")
J2CPP_DEFINE_METHOD(java::util::TreeSet,1,"<init>","(Ljava/util/Collection;)V")
J2CPP_DEFINE_METHOD(java::util::TreeSet,2,"<init>","(Ljava/util/Comparator;)V")
J2CPP_DEFINE_METHOD(java::util::TreeSet,3,"<init>","(Ljava/util/SortedSet;)V")
J2CPP_DEFINE_METHOD(java::util::TreeSet,4,"add","(Ljava/lang/Object;)Z")
J2CPP_DEFINE_METHOD(java::util::TreeSet,5,"addAll","(Ljava/util/Collection;)Z")
J2CPP_DEFINE_METHOD(java::util::TreeSet,6,"clear","()V")
J2CPP_DEFINE_METHOD(java::util::TreeSet,7,"clone","()Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(java::util::TreeSet,8,"comparator","()Ljava/util/Comparator;")
J2CPP_DEFINE_METHOD(java::util::TreeSet,9,"contains","(Ljava/lang/Object;)Z")
J2CPP_DEFINE_METHOD(java::util::TreeSet,10,"first","()Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(java::util::TreeSet,11,"headSet","(Ljava/lang/Object;)Ljava/util/SortedSet;")
J2CPP_DEFINE_METHOD(java::util::TreeSet,12,"isEmpty","()Z")
J2CPP_DEFINE_METHOD(java::util::TreeSet,13,"iterator","()Ljava/util/Iterator;")
J2CPP_DEFINE_METHOD(java::util::TreeSet,14,"last","()Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(java::util::TreeSet,15,"remove","(Ljava/lang/Object;)Z")
J2CPP_DEFINE_METHOD(java::util::TreeSet,16,"size","()I")
J2CPP_DEFINE_METHOD(java::util::TreeSet,17,"subSet","(Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/SortedSet;")
J2CPP_DEFINE_METHOD(java::util::TreeSet,18,"tailSet","(Ljava/lang/Object;)Ljava/util/SortedSet;")

} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_TREESET_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
