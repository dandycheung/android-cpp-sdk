/*================================================================================
  code generated by: java2cpp
  class: java.util.Random
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_RANDOM_HPP_DECL
#define J2CPP_JAVA_UTIL_RANDOM_HPP_DECL






namespace j2cpp {

namespace java { namespace util {

	class Random;
	class Random
		: public cpp_object<Random>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)

		Random(jobject jobj)
		: cpp_object<Random>(jobj)
		{
		}

		cpp_boolean nextBoolean();
		void nextBytes(local_ref< cpp_byte_array<1> > const&);
		cpp_double nextDouble();
		cpp_float nextFloat();
		cpp_double nextGaussian();
		cpp_int nextInt();
		cpp_int nextInt(cpp_int const&);
		cpp_long nextLong();
		void setSeed(cpp_long const&);
	}; //class Random

} //namespace util
} //namespace java


} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_RANDOM_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_RANDOM_HPP_IMPL
#define J2CPP_JAVA_UTIL_RANDOM_HPP_IMPL

namespace j2cpp {


template <>
local_ref< java::util::Random > create< java::util::Random>()
{
	return local_ref< java::util::Random >(
		environment::get().get_jenv()->NewObject(
			get_class<java::util::Random::J2CPP_CLASS_NAME>(),
			get_method_id<java::util::Random::J2CPP_CLASS_NAME, java::util::Random::J2CPP_METHOD_NAME(0), java::util::Random::J2CPP_METHOD_SIGNATURE(0), false>()
		)
	);
}

template <>
local_ref< java::util::Random > create< java::util::Random>(cpp_long const &a0)
{
	return local_ref< java::util::Random >(
		environment::get().get_jenv()->NewObject(
			get_class<java::util::Random::J2CPP_CLASS_NAME>(),
			get_method_id<java::util::Random::J2CPP_CLASS_NAME, java::util::Random::J2CPP_METHOD_NAME(1), java::util::Random::J2CPP_METHOD_SIGNATURE(1), false>(),
			a0.get_jtype()
		)
	);
}


cpp_boolean java::util::Random::nextBoolean()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>()
		)
	);
}

void java::util::Random::nextBytes(local_ref< cpp_byte_array<1> > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>(),
			a0.get_jtype()
		)
	);
}

cpp_double java::util::Random::nextDouble()
{
	return cpp_double(
		environment::get().get_jenv()->CallDoubleMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>()
		)
	);
}

cpp_float java::util::Random::nextFloat()
{
	return cpp_float(
		environment::get().get_jenv()->CallFloatMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>()
		)
	);
}

cpp_double java::util::Random::nextGaussian()
{
	return cpp_double(
		environment::get().get_jenv()->CallDoubleMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(7), J2CPP_METHOD_SIGNATURE(7), false>()
		)
	);
}

cpp_int java::util::Random::nextInt()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(8), J2CPP_METHOD_SIGNATURE(8), false>()
		)
	);
}

cpp_int java::util::Random::nextInt(cpp_int const &a0)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(9), J2CPP_METHOD_SIGNATURE(9), false>(),
			a0.get_jtype()
		)
	);
}

cpp_long java::util::Random::nextLong()
{
	return cpp_long(
		environment::get().get_jenv()->CallLongMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(10), J2CPP_METHOD_SIGNATURE(10), false>()
		)
	);
}

void java::util::Random::setSeed(cpp_long const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(11), J2CPP_METHOD_SIGNATURE(11), false>(),
			a0.get_jtype()
		)
	);
}


J2CPP_DEFINE_CLASS(java::util::Random,"java/util/Random")
J2CPP_DEFINE_METHOD(java::util::Random,0,"<init>","()V")
J2CPP_DEFINE_METHOD(java::util::Random,1,"<init>","(J)V")
J2CPP_DEFINE_METHOD(java::util::Random,2,"next","(I)I")
J2CPP_DEFINE_METHOD(java::util::Random,3,"nextBoolean","()Z")
J2CPP_DEFINE_METHOD(java::util::Random,4,"nextBytes","([B)V")
J2CPP_DEFINE_METHOD(java::util::Random,5,"nextDouble","()D")
J2CPP_DEFINE_METHOD(java::util::Random,6,"nextFloat","()F")
J2CPP_DEFINE_METHOD(java::util::Random,7,"nextGaussian","()D")
J2CPP_DEFINE_METHOD(java::util::Random,8,"nextInt","()I")
J2CPP_DEFINE_METHOD(java::util::Random,9,"nextInt","(I)I")
J2CPP_DEFINE_METHOD(java::util::Random,10,"nextLong","()J")
J2CPP_DEFINE_METHOD(java::util::Random,11,"setSeed","(J)V")

} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_RANDOM_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
