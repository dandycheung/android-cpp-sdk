/*================================================================================
  code generated by: java2cpp
  class: java.util.prefs.AbstractPreferences
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_PREFS_ABSTRACTPREFERENCES_HPP_DECL
#define J2CPP_JAVA_UTIL_PREFS_ABSTRACTPREFERENCES_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace util { namespace prefs { class Preferences; } } } }
namespace j2cpp { namespace java { namespace util { namespace prefs { class PreferenceChangeListener; } } } }
namespace j2cpp { namespace java { namespace util { namespace prefs { class NodeChangeListener; } } } }
namespace j2cpp { namespace java { namespace io { class OutputStream; } } }


#include <java/io/OutputStream.hpp>
#include <java/lang/String.hpp>
#include <java/util/prefs/NodeChangeListener.hpp>
#include <java/util/prefs/PreferenceChangeListener.hpp>
#include <java/util/prefs/Preferences.hpp>


namespace j2cpp {

namespace java { namespace util { namespace prefs {

	class AbstractPreferences;
	class AbstractPreferences
		: public cpp_object<AbstractPreferences>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_METHOD(12)
		J2CPP_DECLARE_METHOD(13)
		J2CPP_DECLARE_METHOD(14)
		J2CPP_DECLARE_METHOD(15)
		J2CPP_DECLARE_METHOD(16)
		J2CPP_DECLARE_METHOD(17)
		J2CPP_DECLARE_METHOD(18)
		J2CPP_DECLARE_METHOD(19)
		J2CPP_DECLARE_METHOD(20)
		J2CPP_DECLARE_METHOD(21)
		J2CPP_DECLARE_METHOD(22)
		J2CPP_DECLARE_METHOD(23)
		J2CPP_DECLARE_METHOD(24)
		J2CPP_DECLARE_METHOD(25)
		J2CPP_DECLARE_METHOD(26)
		J2CPP_DECLARE_METHOD(27)
		J2CPP_DECLARE_METHOD(28)
		J2CPP_DECLARE_METHOD(29)
		J2CPP_DECLARE_METHOD(30)
		J2CPP_DECLARE_METHOD(31)
		J2CPP_DECLARE_METHOD(32)
		J2CPP_DECLARE_METHOD(33)
		J2CPP_DECLARE_METHOD(34)
		J2CPP_DECLARE_METHOD(35)
		J2CPP_DECLARE_METHOD(36)
		J2CPP_DECLARE_METHOD(37)
		J2CPP_DECLARE_METHOD(38)
		J2CPP_DECLARE_METHOD(39)
		J2CPP_DECLARE_METHOD(40)
		J2CPP_DECLARE_METHOD(41)
		J2CPP_DECLARE_METHOD(42)
		J2CPP_DECLARE_METHOD(43)
		J2CPP_DECLARE_METHOD(44)
		J2CPP_DECLARE_METHOD(45)
		J2CPP_DECLARE_METHOD(46)
		J2CPP_DECLARE_FIELD(0)
		J2CPP_DECLARE_FIELD(1)

		AbstractPreferences(jobject jobj)
		: cpp_object<AbstractPreferences>(jobj)
		{
		}

		local_ref< java::lang::String > absolutePath();
		local_ref< cpp_object_array<java::lang::String, 1> > childrenNames();
		void clear();
		void exportNode(local_ref< java::io::OutputStream > const&);
		void exportSubtree(local_ref< java::io::OutputStream > const&);
		void flush();
		local_ref< java::lang::String > get(local_ref< java::lang::String > const&, local_ref< java::lang::String > const&);
		cpp_boolean getBoolean(local_ref< java::lang::String > const&, cpp_boolean const&);
		local_ref< cpp_byte_array<1> > getByteArray(local_ref< java::lang::String > const&, local_ref< cpp_byte_array<1> > const&);
		cpp_double getDouble(local_ref< java::lang::String > const&, cpp_double const&);
		cpp_float getFloat(local_ref< java::lang::String > const&, cpp_float const&);
		cpp_int getInt(local_ref< java::lang::String > const&, cpp_int const&);
		cpp_long getLong(local_ref< java::lang::String > const&, cpp_long const&);
		cpp_boolean isUserNode();
		local_ref< cpp_object_array<java::lang::String, 1> > keys();
		local_ref< java::lang::String > name();
		local_ref< java::util::prefs::Preferences > node(local_ref< java::lang::String > const&);
		cpp_boolean nodeExists(local_ref< java::lang::String > const&);
		local_ref< java::util::prefs::Preferences > parent();
		void put(local_ref< java::lang::String > const&, local_ref< java::lang::String > const&);
		void putBoolean(local_ref< java::lang::String > const&, cpp_boolean const&);
		void putByteArray(local_ref< java::lang::String > const&, local_ref< cpp_byte_array<1> > const&);
		void putDouble(local_ref< java::lang::String > const&, cpp_double const&);
		void putFloat(local_ref< java::lang::String > const&, cpp_float const&);
		void putInt(local_ref< java::lang::String > const&, cpp_int const&);
		void putLong(local_ref< java::lang::String > const&, cpp_long const&);
		void remove(local_ref< java::lang::String > const&);
		void removeNode();
		void addNodeChangeListener(local_ref< java::util::prefs::NodeChangeListener > const&);
		void addPreferenceChangeListener(local_ref< java::util::prefs::PreferenceChangeListener > const&);
		void removeNodeChangeListener(local_ref< java::util::prefs::NodeChangeListener > const&);
		void removePreferenceChangeListener(local_ref< java::util::prefs::PreferenceChangeListener > const&);
		void sync();
		local_ref< java::lang::String > toString();

	}; //class AbstractPreferences

} //namespace prefs
} //namespace util
} //namespace java


} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_PREFS_ABSTRACTPREFERENCES_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_PREFS_ABSTRACTPREFERENCES_HPP_IMPL
#define J2CPP_JAVA_UTIL_PREFS_ABSTRACTPREFERENCES_HPP_IMPL

namespace j2cpp {


template <>
local_ref< java::util::prefs::AbstractPreferences > create< java::util::prefs::AbstractPreferences>(local_ref< java::util::prefs::AbstractPreferences > const &a0, local_ref< java::lang::String > const &a1)
{
	return local_ref< java::util::prefs::AbstractPreferences >(
		environment::get().get_jenv()->NewObject(
			get_class<java::util::prefs::AbstractPreferences::J2CPP_CLASS_NAME>(),
			get_method_id<java::util::prefs::AbstractPreferences::J2CPP_CLASS_NAME, java::util::prefs::AbstractPreferences::J2CPP_METHOD_NAME(0), java::util::prefs::AbstractPreferences::J2CPP_METHOD_SIGNATURE(0), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}













local_ref< java::lang::String > java::util::prefs::AbstractPreferences::absolutePath()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(13), J2CPP_METHOD_SIGNATURE(13), false>()
		)
	);
}

local_ref< cpp_object_array<java::lang::String, 1> > java::util::prefs::AbstractPreferences::childrenNames()
{
	return local_ref< cpp_object_array<java::lang::String, 1> >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(14), J2CPP_METHOD_SIGNATURE(14), false>()
		)
	);
}

void java::util::prefs::AbstractPreferences::clear()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(15), J2CPP_METHOD_SIGNATURE(15), false>()
		)
	);
}

void java::util::prefs::AbstractPreferences::exportNode(local_ref< java::io::OutputStream > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(16), J2CPP_METHOD_SIGNATURE(16), false>(),
			a0.get_jtype()
		)
	);
}

void java::util::prefs::AbstractPreferences::exportSubtree(local_ref< java::io::OutputStream > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(17), J2CPP_METHOD_SIGNATURE(17), false>(),
			a0.get_jtype()
		)
	);
}

void java::util::prefs::AbstractPreferences::flush()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(18), J2CPP_METHOD_SIGNATURE(18), false>()
		)
	);
}

local_ref< java::lang::String > java::util::prefs::AbstractPreferences::get(local_ref< java::lang::String > const &a0, local_ref< java::lang::String > const &a1)
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(19), J2CPP_METHOD_SIGNATURE(19), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_boolean java::util::prefs::AbstractPreferences::getBoolean(local_ref< java::lang::String > const &a0, cpp_boolean const &a1)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(20), J2CPP_METHOD_SIGNATURE(20), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< cpp_byte_array<1> > java::util::prefs::AbstractPreferences::getByteArray(local_ref< java::lang::String > const &a0, local_ref< cpp_byte_array<1> > const &a1)
{
	return local_ref< cpp_byte_array<1> >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(21), J2CPP_METHOD_SIGNATURE(21), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_double java::util::prefs::AbstractPreferences::getDouble(local_ref< java::lang::String > const &a0, cpp_double const &a1)
{
	return cpp_double(
		environment::get().get_jenv()->CallDoubleMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(22), J2CPP_METHOD_SIGNATURE(22), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_float java::util::prefs::AbstractPreferences::getFloat(local_ref< java::lang::String > const &a0, cpp_float const &a1)
{
	return cpp_float(
		environment::get().get_jenv()->CallFloatMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(23), J2CPP_METHOD_SIGNATURE(23), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_int java::util::prefs::AbstractPreferences::getInt(local_ref< java::lang::String > const &a0, cpp_int const &a1)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(24), J2CPP_METHOD_SIGNATURE(24), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_long java::util::prefs::AbstractPreferences::getLong(local_ref< java::lang::String > const &a0, cpp_long const &a1)
{
	return cpp_long(
		environment::get().get_jenv()->CallLongMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(25), J2CPP_METHOD_SIGNATURE(25), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_boolean java::util::prefs::AbstractPreferences::isUserNode()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(26), J2CPP_METHOD_SIGNATURE(26), false>()
		)
	);
}

local_ref< cpp_object_array<java::lang::String, 1> > java::util::prefs::AbstractPreferences::keys()
{
	return local_ref< cpp_object_array<java::lang::String, 1> >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(27), J2CPP_METHOD_SIGNATURE(27), false>()
		)
	);
}

local_ref< java::lang::String > java::util::prefs::AbstractPreferences::name()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(28), J2CPP_METHOD_SIGNATURE(28), false>()
		)
	);
}

local_ref< java::util::prefs::Preferences > java::util::prefs::AbstractPreferences::node(local_ref< java::lang::String > const &a0)
{
	return local_ref< java::util::prefs::Preferences >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(29), J2CPP_METHOD_SIGNATURE(29), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean java::util::prefs::AbstractPreferences::nodeExists(local_ref< java::lang::String > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(30), J2CPP_METHOD_SIGNATURE(30), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::util::prefs::Preferences > java::util::prefs::AbstractPreferences::parent()
{
	return local_ref< java::util::prefs::Preferences >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(31), J2CPP_METHOD_SIGNATURE(31), false>()
		)
	);
}

void java::util::prefs::AbstractPreferences::put(local_ref< java::lang::String > const &a0, local_ref< java::lang::String > const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(32), J2CPP_METHOD_SIGNATURE(32), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void java::util::prefs::AbstractPreferences::putBoolean(local_ref< java::lang::String > const &a0, cpp_boolean const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(33), J2CPP_METHOD_SIGNATURE(33), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void java::util::prefs::AbstractPreferences::putByteArray(local_ref< java::lang::String > const &a0, local_ref< cpp_byte_array<1> > const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(34), J2CPP_METHOD_SIGNATURE(34), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void java::util::prefs::AbstractPreferences::putDouble(local_ref< java::lang::String > const &a0, cpp_double const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(35), J2CPP_METHOD_SIGNATURE(35), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void java::util::prefs::AbstractPreferences::putFloat(local_ref< java::lang::String > const &a0, cpp_float const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(36), J2CPP_METHOD_SIGNATURE(36), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void java::util::prefs::AbstractPreferences::putInt(local_ref< java::lang::String > const &a0, cpp_int const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(37), J2CPP_METHOD_SIGNATURE(37), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void java::util::prefs::AbstractPreferences::putLong(local_ref< java::lang::String > const &a0, cpp_long const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(38), J2CPP_METHOD_SIGNATURE(38), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void java::util::prefs::AbstractPreferences::remove(local_ref< java::lang::String > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(39), J2CPP_METHOD_SIGNATURE(39), false>(),
			a0.get_jtype()
		)
	);
}

void java::util::prefs::AbstractPreferences::removeNode()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(40), J2CPP_METHOD_SIGNATURE(40), false>()
		)
	);
}

void java::util::prefs::AbstractPreferences::addNodeChangeListener(local_ref< java::util::prefs::NodeChangeListener > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(41), J2CPP_METHOD_SIGNATURE(41), false>(),
			a0.get_jtype()
		)
	);
}

void java::util::prefs::AbstractPreferences::addPreferenceChangeListener(local_ref< java::util::prefs::PreferenceChangeListener > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(42), J2CPP_METHOD_SIGNATURE(42), false>(),
			a0.get_jtype()
		)
	);
}

void java::util::prefs::AbstractPreferences::removeNodeChangeListener(local_ref< java::util::prefs::NodeChangeListener > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(43), J2CPP_METHOD_SIGNATURE(43), false>(),
			a0.get_jtype()
		)
	);
}

void java::util::prefs::AbstractPreferences::removePreferenceChangeListener(local_ref< java::util::prefs::PreferenceChangeListener > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(44), J2CPP_METHOD_SIGNATURE(44), false>(),
			a0.get_jtype()
		)
	);
}

void java::util::prefs::AbstractPreferences::sync()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(45), J2CPP_METHOD_SIGNATURE(45), false>()
		)
	);
}

local_ref< java::lang::String > java::util::prefs::AbstractPreferences::toString()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(46), J2CPP_METHOD_SIGNATURE(46), false>()
		)
	);
}



J2CPP_DEFINE_CLASS(java::util::prefs::AbstractPreferences,"java/util/prefs/AbstractPreferences")
J2CPP_DEFINE_METHOD(java::util::prefs::AbstractPreferences,0,"<init>","(Ljava/util/prefs/AbstractPreferences;Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(java::util::prefs::AbstractPreferences,1,"cachedChildren","()[java.util.prefs.AbstractPreferences")
J2CPP_DEFINE_METHOD(java::util::prefs::AbstractPreferences,2,"getChild","(Ljava/lang/String;)Ljava/util/prefs/AbstractPreferences;")
J2CPP_DEFINE_METHOD(java::util::prefs::AbstractPreferences,3,"isRemoved","()Z")
J2CPP_DEFINE_METHOD(java::util::prefs::AbstractPreferences,4,"flushSpi","()V")
J2CPP_DEFINE_METHOD(java::util::prefs::AbstractPreferences,5,"childrenNamesSpi","()[java.lang.String")
J2CPP_DEFINE_METHOD(java::util::prefs::AbstractPreferences,6,"childSpi","(Ljava/lang/String;)Ljava/util/prefs/AbstractPreferences;")
J2CPP_DEFINE_METHOD(java::util::prefs::AbstractPreferences,7,"putSpi","(Ljava/lang/String;Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(java::util::prefs::AbstractPreferences,8,"getSpi","(Ljava/lang/String;)Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::util::prefs::AbstractPreferences,9,"keysSpi","()[java.lang.String")
J2CPP_DEFINE_METHOD(java::util::prefs::AbstractPreferences,10,"removeNodeSpi","()V")
J2CPP_DEFINE_METHOD(java::util::prefs::AbstractPreferences,11,"removeSpi","(Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(java::util::prefs::AbstractPreferences,12,"syncSpi","()V")
J2CPP_DEFINE_METHOD(java::util::prefs::AbstractPreferences,13,"absolutePath","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::util::prefs::AbstractPreferences,14,"childrenNames","()[java.lang.String")
J2CPP_DEFINE_METHOD(java::util::prefs::AbstractPreferences,15,"clear","()V")
J2CPP_DEFINE_METHOD(java::util::prefs::AbstractPreferences,16,"exportNode","(Ljava/io/OutputStream;)V")
J2CPP_DEFINE_METHOD(java::util::prefs::AbstractPreferences,17,"exportSubtree","(Ljava/io/OutputStream;)V")
J2CPP_DEFINE_METHOD(java::util::prefs::AbstractPreferences,18,"flush","()V")
J2CPP_DEFINE_METHOD(java::util::prefs::AbstractPreferences,19,"get","(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::util::prefs::AbstractPreferences,20,"getBoolean","(Ljava/lang/String;Z)Z")
J2CPP_DEFINE_METHOD(java::util::prefs::AbstractPreferences,21,"getByteArray","(Ljava/lang/String;[B)[B")
J2CPP_DEFINE_METHOD(java::util::prefs::AbstractPreferences,22,"getDouble","(Ljava/lang/String;D)D")
J2CPP_DEFINE_METHOD(java::util::prefs::AbstractPreferences,23,"getFloat","(Ljava/lang/String;F)F")
J2CPP_DEFINE_METHOD(java::util::prefs::AbstractPreferences,24,"getInt","(Ljava/lang/String;I)I")
J2CPP_DEFINE_METHOD(java::util::prefs::AbstractPreferences,25,"getLong","(Ljava/lang/String;J)J")
J2CPP_DEFINE_METHOD(java::util::prefs::AbstractPreferences,26,"isUserNode","()Z")
J2CPP_DEFINE_METHOD(java::util::prefs::AbstractPreferences,27,"keys","()[java.lang.String")
J2CPP_DEFINE_METHOD(java::util::prefs::AbstractPreferences,28,"name","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::util::prefs::AbstractPreferences,29,"node","(Ljava/lang/String;)Ljava/util/prefs/Preferences;")
J2CPP_DEFINE_METHOD(java::util::prefs::AbstractPreferences,30,"nodeExists","(Ljava/lang/String;)Z")
J2CPP_DEFINE_METHOD(java::util::prefs::AbstractPreferences,31,"parent","()Ljava/util/prefs/Preferences;")
J2CPP_DEFINE_METHOD(java::util::prefs::AbstractPreferences,32,"put","(Ljava/lang/String;Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(java::util::prefs::AbstractPreferences,33,"putBoolean","(Ljava/lang/String;Z)V")
J2CPP_DEFINE_METHOD(java::util::prefs::AbstractPreferences,34,"putByteArray","(Ljava/lang/String;[B)V")
J2CPP_DEFINE_METHOD(java::util::prefs::AbstractPreferences,35,"putDouble","(Ljava/lang/String;D)V")
J2CPP_DEFINE_METHOD(java::util::prefs::AbstractPreferences,36,"putFloat","(Ljava/lang/String;F)V")
J2CPP_DEFINE_METHOD(java::util::prefs::AbstractPreferences,37,"putInt","(Ljava/lang/String;I)V")
J2CPP_DEFINE_METHOD(java::util::prefs::AbstractPreferences,38,"putLong","(Ljava/lang/String;J)V")
J2CPP_DEFINE_METHOD(java::util::prefs::AbstractPreferences,39,"remove","(Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(java::util::prefs::AbstractPreferences,40,"removeNode","()V")
J2CPP_DEFINE_METHOD(java::util::prefs::AbstractPreferences,41,"addNodeChangeListener","(Ljava/util/prefs/NodeChangeListener;)V")
J2CPP_DEFINE_METHOD(java::util::prefs::AbstractPreferences,42,"addPreferenceChangeListener","(Ljava/util/prefs/PreferenceChangeListener;)V")
J2CPP_DEFINE_METHOD(java::util::prefs::AbstractPreferences,43,"removeNodeChangeListener","(Ljava/util/prefs/NodeChangeListener;)V")
J2CPP_DEFINE_METHOD(java::util::prefs::AbstractPreferences,44,"removePreferenceChangeListener","(Ljava/util/prefs/PreferenceChangeListener;)V")
J2CPP_DEFINE_METHOD(java::util::prefs::AbstractPreferences,45,"sync","()V")
J2CPP_DEFINE_METHOD(java::util::prefs::AbstractPreferences,46,"toString","()Ljava/lang/String;")
J2CPP_DEFINE_FIELD(java::util::prefs::AbstractPreferences,0,"lock","Ljava/lang/Object;")
J2CPP_DEFINE_FIELD(java::util::prefs::AbstractPreferences,1,"newNode","Z")

} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_PREFS_ABSTRACTPREFERENCES_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
