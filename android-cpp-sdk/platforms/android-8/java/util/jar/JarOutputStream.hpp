/*================================================================================
  code generated by: java2cpp
  class: java.util.jar.JarOutputStream
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_JAR_JAROUTPUTSTREAM_HPP_DECL
#define J2CPP_JAVA_UTIL_JAR_JAROUTPUTSTREAM_HPP_DECL


namespace j2cpp { namespace java { namespace util { namespace zip { class ZipEntry; } } } }
namespace j2cpp { namespace java { namespace util { namespace jar { class Manifest; } } } }
namespace j2cpp { namespace java { namespace io { class OutputStream; } } }


#include <java/io/OutputStream.hpp>
#include <java/util/jar/Manifest.hpp>
#include <java/util/zip/ZipEntry.hpp>


namespace j2cpp {

namespace java { namespace util { namespace jar {

	class JarOutputStream;
	class JarOutputStream
		: public cpp_object<JarOutputStream>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)

		JarOutputStream(jobject jobj)
		: cpp_object<JarOutputStream>(jobj)
		{
		}

		void putNextEntry(local_ref< java::util::zip::ZipEntry > const&);
	}; //class JarOutputStream

} //namespace jar
} //namespace util
} //namespace java


} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_JAR_JAROUTPUTSTREAM_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_JAR_JAROUTPUTSTREAM_HPP_IMPL
#define J2CPP_JAVA_UTIL_JAR_JAROUTPUTSTREAM_HPP_IMPL

namespace j2cpp {


template <>
local_ref< java::util::jar::JarOutputStream > create< java::util::jar::JarOutputStream>(local_ref< java::io::OutputStream > const &a0, local_ref< java::util::jar::Manifest > const &a1)
{
	return local_ref< java::util::jar::JarOutputStream >(
		environment::get().get_jenv()->NewObject(
			get_class<java::util::jar::JarOutputStream::J2CPP_CLASS_NAME>(),
			get_method_id<java::util::jar::JarOutputStream::J2CPP_CLASS_NAME, java::util::jar::JarOutputStream::J2CPP_METHOD_NAME(0), java::util::jar::JarOutputStream::J2CPP_METHOD_SIGNATURE(0), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

template <>
local_ref< java::util::jar::JarOutputStream > create< java::util::jar::JarOutputStream>(local_ref< java::io::OutputStream > const &a0)
{
	return local_ref< java::util::jar::JarOutputStream >(
		environment::get().get_jenv()->NewObject(
			get_class<java::util::jar::JarOutputStream::J2CPP_CLASS_NAME>(),
			get_method_id<java::util::jar::JarOutputStream::J2CPP_CLASS_NAME, java::util::jar::JarOutputStream::J2CPP_METHOD_NAME(1), java::util::jar::JarOutputStream::J2CPP_METHOD_SIGNATURE(1), false>(),
			a0.get_jtype()
		)
	);
}

void java::util::jar::JarOutputStream::putNextEntry(local_ref< java::util::zip::ZipEntry > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>(),
			a0.get_jtype()
		)
	);
}


J2CPP_DEFINE_CLASS(java::util::jar::JarOutputStream,"java/util/jar/JarOutputStream")
J2CPP_DEFINE_METHOD(java::util::jar::JarOutputStream,0,"<init>","(Ljava/io/OutputStream;Ljava/util/jar/Manifest;)V")
J2CPP_DEFINE_METHOD(java::util::jar::JarOutputStream,1,"<init>","(Ljava/io/OutputStream;)V")
J2CPP_DEFINE_METHOD(java::util::jar::JarOutputStream,2,"putNextEntry","(Ljava/util/zip/ZipEntry;)V")

} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_JAR_JAROUTPUTSTREAM_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
