/*================================================================================
  code generated by: java2cpp
  class: java.util.LinkedHashMap
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_LINKEDHASHMAP_HPP_DECL
#define J2CPP_JAVA_UTIL_LINKEDHASHMAP_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace util { class Map; } } }


#include <java/lang/Object.hpp>
#include <java/util/Map.hpp>


namespace j2cpp {

namespace java { namespace util {

	class LinkedHashMap;
	class LinkedHashMap
		: public cpp_object<LinkedHashMap>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)

		LinkedHashMap(jobject jobj)
		: cpp_object<LinkedHashMap>(jobj)
		{
		}

		local_ref< java::lang::Object > get(local_ref< java::lang::Object > const&);
		cpp_boolean containsValue(local_ref< java::lang::Object > const&);
		void clear();
	}; //class LinkedHashMap

} //namespace util
} //namespace java


} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_LINKEDHASHMAP_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_LINKEDHASHMAP_HPP_IMPL
#define J2CPP_JAVA_UTIL_LINKEDHASHMAP_HPP_IMPL

namespace j2cpp {


template <>
local_ref< java::util::LinkedHashMap > create< java::util::LinkedHashMap>()
{
	return local_ref< java::util::LinkedHashMap >(
		environment::get().get_jenv()->NewObject(
			get_class<java::util::LinkedHashMap::J2CPP_CLASS_NAME>(),
			get_method_id<java::util::LinkedHashMap::J2CPP_CLASS_NAME, java::util::LinkedHashMap::J2CPP_METHOD_NAME(0), java::util::LinkedHashMap::J2CPP_METHOD_SIGNATURE(0), false>()
		)
	);
}

template <>
local_ref< java::util::LinkedHashMap > create< java::util::LinkedHashMap>(cpp_int const &a0)
{
	return local_ref< java::util::LinkedHashMap >(
		environment::get().get_jenv()->NewObject(
			get_class<java::util::LinkedHashMap::J2CPP_CLASS_NAME>(),
			get_method_id<java::util::LinkedHashMap::J2CPP_CLASS_NAME, java::util::LinkedHashMap::J2CPP_METHOD_NAME(1), java::util::LinkedHashMap::J2CPP_METHOD_SIGNATURE(1), false>(),
			a0.get_jtype()
		)
	);
}

template <>
local_ref< java::util::LinkedHashMap > create< java::util::LinkedHashMap>(cpp_int const &a0, cpp_float const &a1)
{
	return local_ref< java::util::LinkedHashMap >(
		environment::get().get_jenv()->NewObject(
			get_class<java::util::LinkedHashMap::J2CPP_CLASS_NAME>(),
			get_method_id<java::util::LinkedHashMap::J2CPP_CLASS_NAME, java::util::LinkedHashMap::J2CPP_METHOD_NAME(2), java::util::LinkedHashMap::J2CPP_METHOD_SIGNATURE(2), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

template <>
local_ref< java::util::LinkedHashMap > create< java::util::LinkedHashMap>(cpp_int const &a0, cpp_float const &a1, cpp_boolean const &a2)
{
	return local_ref< java::util::LinkedHashMap >(
		environment::get().get_jenv()->NewObject(
			get_class<java::util::LinkedHashMap::J2CPP_CLASS_NAME>(),
			get_method_id<java::util::LinkedHashMap::J2CPP_CLASS_NAME, java::util::LinkedHashMap::J2CPP_METHOD_NAME(3), java::util::LinkedHashMap::J2CPP_METHOD_SIGNATURE(3), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

template <>
local_ref< java::util::LinkedHashMap > create< java::util::LinkedHashMap>(local_ref< java::util::Map > const &a0)
{
	return local_ref< java::util::LinkedHashMap >(
		environment::get().get_jenv()->NewObject(
			get_class<java::util::LinkedHashMap::J2CPP_CLASS_NAME>(),
			get_method_id<java::util::LinkedHashMap::J2CPP_CLASS_NAME, java::util::LinkedHashMap::J2CPP_METHOD_NAME(4), java::util::LinkedHashMap::J2CPP_METHOD_SIGNATURE(4), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::Object > java::util::LinkedHashMap::get(local_ref< java::lang::Object > const &a0)
{
	return local_ref< java::lang::Object >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean java::util::LinkedHashMap::containsValue(local_ref< java::lang::Object > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>(),
			a0.get_jtype()
		)
	);
}

void java::util::LinkedHashMap::clear()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(7), J2CPP_METHOD_SIGNATURE(7), false>()
		)
	);
}



J2CPP_DEFINE_CLASS(java::util::LinkedHashMap,"java/util/LinkedHashMap")
J2CPP_DEFINE_METHOD(java::util::LinkedHashMap,0,"<init>","()V")
J2CPP_DEFINE_METHOD(java::util::LinkedHashMap,1,"<init>","(I)V")
J2CPP_DEFINE_METHOD(java::util::LinkedHashMap,2,"<init>","(IF)V")
J2CPP_DEFINE_METHOD(java::util::LinkedHashMap,3,"<init>","(IFZ)V")
J2CPP_DEFINE_METHOD(java::util::LinkedHashMap,4,"<init>","(Ljava/util/Map;)V")
J2CPP_DEFINE_METHOD(java::util::LinkedHashMap,5,"get","(Ljava/lang/Object;)Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(java::util::LinkedHashMap,6,"containsValue","(Ljava/lang/Object;)Z")
J2CPP_DEFINE_METHOD(java::util::LinkedHashMap,7,"clear","()V")
J2CPP_DEFINE_METHOD(java::util::LinkedHashMap,8,"removeEldestEntry","(Ljava/util/Map$Entry;)Z")

} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_LINKEDHASHMAP_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
