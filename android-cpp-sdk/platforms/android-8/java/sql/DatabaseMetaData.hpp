/*================================================================================
  code generated by: java2cpp
  class: java.sql.DatabaseMetaData
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_SQL_DATABASEMETADATA_HPP_DECL
#define J2CPP_JAVA_SQL_DATABASEMETADATA_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace sql { class Connection; } } }
namespace j2cpp { namespace java { namespace sql { class ResultSet; } } }


#include <java/lang/String.hpp>
#include <java/sql/Connection.hpp>
#include <java/sql/ResultSet.hpp>


namespace j2cpp {

namespace java { namespace sql {

	class DatabaseMetaData;
	class DatabaseMetaData
		: public cpp_object<DatabaseMetaData>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_METHOD(12)
		J2CPP_DECLARE_METHOD(13)
		J2CPP_DECLARE_METHOD(14)
		J2CPP_DECLARE_METHOD(15)
		J2CPP_DECLARE_METHOD(16)
		J2CPP_DECLARE_METHOD(17)
		J2CPP_DECLARE_METHOD(18)
		J2CPP_DECLARE_METHOD(19)
		J2CPP_DECLARE_METHOD(20)
		J2CPP_DECLARE_METHOD(21)
		J2CPP_DECLARE_METHOD(22)
		J2CPP_DECLARE_METHOD(23)
		J2CPP_DECLARE_METHOD(24)
		J2CPP_DECLARE_METHOD(25)
		J2CPP_DECLARE_METHOD(26)
		J2CPP_DECLARE_METHOD(27)
		J2CPP_DECLARE_METHOD(28)
		J2CPP_DECLARE_METHOD(29)
		J2CPP_DECLARE_METHOD(30)
		J2CPP_DECLARE_METHOD(31)
		J2CPP_DECLARE_METHOD(32)
		J2CPP_DECLARE_METHOD(33)
		J2CPP_DECLARE_METHOD(34)
		J2CPP_DECLARE_METHOD(35)
		J2CPP_DECLARE_METHOD(36)
		J2CPP_DECLARE_METHOD(37)
		J2CPP_DECLARE_METHOD(38)
		J2CPP_DECLARE_METHOD(39)
		J2CPP_DECLARE_METHOD(40)
		J2CPP_DECLARE_METHOD(41)
		J2CPP_DECLARE_METHOD(42)
		J2CPP_DECLARE_METHOD(43)
		J2CPP_DECLARE_METHOD(44)
		J2CPP_DECLARE_METHOD(45)
		J2CPP_DECLARE_METHOD(46)
		J2CPP_DECLARE_METHOD(47)
		J2CPP_DECLARE_METHOD(48)
		J2CPP_DECLARE_METHOD(49)
		J2CPP_DECLARE_METHOD(50)
		J2CPP_DECLARE_METHOD(51)
		J2CPP_DECLARE_METHOD(52)
		J2CPP_DECLARE_METHOD(53)
		J2CPP_DECLARE_METHOD(54)
		J2CPP_DECLARE_METHOD(55)
		J2CPP_DECLARE_METHOD(56)
		J2CPP_DECLARE_METHOD(57)
		J2CPP_DECLARE_METHOD(58)
		J2CPP_DECLARE_METHOD(59)
		J2CPP_DECLARE_METHOD(60)
		J2CPP_DECLARE_METHOD(61)
		J2CPP_DECLARE_METHOD(62)
		J2CPP_DECLARE_METHOD(63)
		J2CPP_DECLARE_METHOD(64)
		J2CPP_DECLARE_METHOD(65)
		J2CPP_DECLARE_METHOD(66)
		J2CPP_DECLARE_METHOD(67)
		J2CPP_DECLARE_METHOD(68)
		J2CPP_DECLARE_METHOD(69)
		J2CPP_DECLARE_METHOD(70)
		J2CPP_DECLARE_METHOD(71)
		J2CPP_DECLARE_METHOD(72)
		J2CPP_DECLARE_METHOD(73)
		J2CPP_DECLARE_METHOD(74)
		J2CPP_DECLARE_METHOD(75)
		J2CPP_DECLARE_METHOD(76)
		J2CPP_DECLARE_METHOD(77)
		J2CPP_DECLARE_METHOD(78)
		J2CPP_DECLARE_METHOD(79)
		J2CPP_DECLARE_METHOD(80)
		J2CPP_DECLARE_METHOD(81)
		J2CPP_DECLARE_METHOD(82)
		J2CPP_DECLARE_METHOD(83)
		J2CPP_DECLARE_METHOD(84)
		J2CPP_DECLARE_METHOD(85)
		J2CPP_DECLARE_METHOD(86)
		J2CPP_DECLARE_METHOD(87)
		J2CPP_DECLARE_METHOD(88)
		J2CPP_DECLARE_METHOD(89)
		J2CPP_DECLARE_METHOD(90)
		J2CPP_DECLARE_METHOD(91)
		J2CPP_DECLARE_METHOD(92)
		J2CPP_DECLARE_METHOD(93)
		J2CPP_DECLARE_METHOD(94)
		J2CPP_DECLARE_METHOD(95)
		J2CPP_DECLARE_METHOD(96)
		J2CPP_DECLARE_METHOD(97)
		J2CPP_DECLARE_METHOD(98)
		J2CPP_DECLARE_METHOD(99)
		J2CPP_DECLARE_METHOD(100)
		J2CPP_DECLARE_METHOD(101)
		J2CPP_DECLARE_METHOD(102)
		J2CPP_DECLARE_METHOD(103)
		J2CPP_DECLARE_METHOD(104)
		J2CPP_DECLARE_METHOD(105)
		J2CPP_DECLARE_METHOD(106)
		J2CPP_DECLARE_METHOD(107)
		J2CPP_DECLARE_METHOD(108)
		J2CPP_DECLARE_METHOD(109)
		J2CPP_DECLARE_METHOD(110)
		J2CPP_DECLARE_METHOD(111)
		J2CPP_DECLARE_METHOD(112)
		J2CPP_DECLARE_METHOD(113)
		J2CPP_DECLARE_METHOD(114)
		J2CPP_DECLARE_METHOD(115)
		J2CPP_DECLARE_METHOD(116)
		J2CPP_DECLARE_METHOD(117)
		J2CPP_DECLARE_METHOD(118)
		J2CPP_DECLARE_METHOD(119)
		J2CPP_DECLARE_METHOD(120)
		J2CPP_DECLARE_METHOD(121)
		J2CPP_DECLARE_METHOD(122)
		J2CPP_DECLARE_METHOD(123)
		J2CPP_DECLARE_METHOD(124)
		J2CPP_DECLARE_METHOD(125)
		J2CPP_DECLARE_METHOD(126)
		J2CPP_DECLARE_METHOD(127)
		J2CPP_DECLARE_METHOD(128)
		J2CPP_DECLARE_METHOD(129)
		J2CPP_DECLARE_METHOD(130)
		J2CPP_DECLARE_METHOD(131)
		J2CPP_DECLARE_METHOD(132)
		J2CPP_DECLARE_METHOD(133)
		J2CPP_DECLARE_METHOD(134)
		J2CPP_DECLARE_METHOD(135)
		J2CPP_DECLARE_METHOD(136)
		J2CPP_DECLARE_METHOD(137)
		J2CPP_DECLARE_METHOD(138)
		J2CPP_DECLARE_METHOD(139)
		J2CPP_DECLARE_METHOD(140)
		J2CPP_DECLARE_METHOD(141)
		J2CPP_DECLARE_METHOD(142)
		J2CPP_DECLARE_METHOD(143)
		J2CPP_DECLARE_METHOD(144)
		J2CPP_DECLARE_METHOD(145)
		J2CPP_DECLARE_METHOD(146)
		J2CPP_DECLARE_METHOD(147)
		J2CPP_DECLARE_METHOD(148)
		J2CPP_DECLARE_METHOD(149)
		J2CPP_DECLARE_METHOD(150)
		J2CPP_DECLARE_METHOD(151)
		J2CPP_DECLARE_METHOD(152)
		J2CPP_DECLARE_METHOD(153)
		J2CPP_DECLARE_METHOD(154)
		J2CPP_DECLARE_METHOD(155)
		J2CPP_DECLARE_METHOD(156)
		J2CPP_DECLARE_METHOD(157)
		J2CPP_DECLARE_METHOD(158)
		J2CPP_DECLARE_METHOD(159)
		J2CPP_DECLARE_METHOD(160)
		J2CPP_DECLARE_METHOD(161)
		J2CPP_DECLARE_METHOD(162)
		J2CPP_DECLARE_METHOD(163)
		J2CPP_DECLARE_METHOD(164)
		J2CPP_DECLARE_FIELD(0)
		J2CPP_DECLARE_FIELD(1)
		J2CPP_DECLARE_FIELD(2)
		J2CPP_DECLARE_FIELD(3)
		J2CPP_DECLARE_FIELD(4)
		J2CPP_DECLARE_FIELD(5)
		J2CPP_DECLARE_FIELD(6)
		J2CPP_DECLARE_FIELD(7)
		J2CPP_DECLARE_FIELD(8)
		J2CPP_DECLARE_FIELD(9)
		J2CPP_DECLARE_FIELD(10)
		J2CPP_DECLARE_FIELD(11)
		J2CPP_DECLARE_FIELD(12)
		J2CPP_DECLARE_FIELD(13)
		J2CPP_DECLARE_FIELD(14)
		J2CPP_DECLARE_FIELD(15)
		J2CPP_DECLARE_FIELD(16)
		J2CPP_DECLARE_FIELD(17)
		J2CPP_DECLARE_FIELD(18)
		J2CPP_DECLARE_FIELD(19)
		J2CPP_DECLARE_FIELD(20)
		J2CPP_DECLARE_FIELD(21)
		J2CPP_DECLARE_FIELD(22)
		J2CPP_DECLARE_FIELD(23)
		J2CPP_DECLARE_FIELD(24)
		J2CPP_DECLARE_FIELD(25)
		J2CPP_DECLARE_FIELD(26)
		J2CPP_DECLARE_FIELD(27)
		J2CPP_DECLARE_FIELD(28)
		J2CPP_DECLARE_FIELD(29)
		J2CPP_DECLARE_FIELD(30)
		J2CPP_DECLARE_FIELD(31)
		J2CPP_DECLARE_FIELD(32)
		J2CPP_DECLARE_FIELD(33)
		J2CPP_DECLARE_FIELD(34)
		J2CPP_DECLARE_FIELD(35)
		J2CPP_DECLARE_FIELD(36)
		J2CPP_DECLARE_FIELD(37)
		J2CPP_DECLARE_FIELD(38)
		J2CPP_DECLARE_FIELD(39)
		J2CPP_DECLARE_FIELD(40)
		J2CPP_DECLARE_FIELD(41)
		J2CPP_DECLARE_FIELD(42)
		J2CPP_DECLARE_FIELD(43)
		J2CPP_DECLARE_FIELD(44)
		J2CPP_DECLARE_FIELD(45)
		J2CPP_DECLARE_FIELD(46)
		J2CPP_DECLARE_FIELD(47)

		DatabaseMetaData(jobject jobj)
		: cpp_object<DatabaseMetaData>(jobj)
		{
		}

		cpp_boolean allProceduresAreCallable();
		cpp_boolean allTablesAreSelectable();
		cpp_boolean dataDefinitionCausesTransactionCommit();
		cpp_boolean dataDefinitionIgnoredInTransactions();
		cpp_boolean deletesAreDetected(cpp_int const&);
		cpp_boolean doesMaxRowSizeIncludeBlobs();
		local_ref< java::sql::ResultSet > getAttributes(local_ref< java::lang::String > const&, local_ref< java::lang::String > const&, local_ref< java::lang::String > const&, local_ref< java::lang::String > const&);
		local_ref< java::sql::ResultSet > getBestRowIdentifier(local_ref< java::lang::String > const&, local_ref< java::lang::String > const&, local_ref< java::lang::String > const&, cpp_int const&, cpp_boolean const&);
		local_ref< java::sql::ResultSet > getCatalogs();
		local_ref< java::lang::String > getCatalogSeparator();
		local_ref< java::lang::String > getCatalogTerm();
		local_ref< java::sql::ResultSet > getColumnPrivileges(local_ref< java::lang::String > const&, local_ref< java::lang::String > const&, local_ref< java::lang::String > const&, local_ref< java::lang::String > const&);
		local_ref< java::sql::ResultSet > getColumns(local_ref< java::lang::String > const&, local_ref< java::lang::String > const&, local_ref< java::lang::String > const&, local_ref< java::lang::String > const&);
		local_ref< java::sql::Connection > getConnection();
		local_ref< java::sql::ResultSet > getCrossReference(local_ref< java::lang::String > const&, local_ref< java::lang::String > const&, local_ref< java::lang::String > const&, local_ref< java::lang::String > const&, local_ref< java::lang::String > const&, local_ref< java::lang::String > const&);
		cpp_int getDatabaseMajorVersion();
		cpp_int getDatabaseMinorVersion();
		local_ref< java::lang::String > getDatabaseProductName();
		local_ref< java::lang::String > getDatabaseProductVersion();
		cpp_int getDefaultTransactionIsolation();
		cpp_int getDriverMajorVersion();
		cpp_int getDriverMinorVersion();
		local_ref< java::lang::String > getDriverName();
		local_ref< java::lang::String > getDriverVersion();
		local_ref< java::sql::ResultSet > getExportedKeys(local_ref< java::lang::String > const&, local_ref< java::lang::String > const&, local_ref< java::lang::String > const&);
		local_ref< java::lang::String > getExtraNameCharacters();
		local_ref< java::lang::String > getIdentifierQuoteString();
		local_ref< java::sql::ResultSet > getImportedKeys(local_ref< java::lang::String > const&, local_ref< java::lang::String > const&, local_ref< java::lang::String > const&);
		local_ref< java::sql::ResultSet > getIndexInfo(local_ref< java::lang::String > const&, local_ref< java::lang::String > const&, local_ref< java::lang::String > const&, cpp_boolean const&, cpp_boolean const&);
		cpp_int getJDBCMajorVersion();
		cpp_int getJDBCMinorVersion();
		cpp_int getMaxBinaryLiteralLength();
		cpp_int getMaxCatalogNameLength();
		cpp_int getMaxCharLiteralLength();
		cpp_int getMaxColumnNameLength();
		cpp_int getMaxColumnsInGroupBy();
		cpp_int getMaxColumnsInIndex();
		cpp_int getMaxColumnsInOrderBy();
		cpp_int getMaxColumnsInSelect();
		cpp_int getMaxColumnsInTable();
		cpp_int getMaxConnections();
		cpp_int getMaxCursorNameLength();
		cpp_int getMaxIndexLength();
		cpp_int getMaxProcedureNameLength();
		cpp_int getMaxRowSize();
		cpp_int getMaxSchemaNameLength();
		cpp_int getMaxStatementLength();
		cpp_int getMaxStatements();
		cpp_int getMaxTableNameLength();
		cpp_int getMaxTablesInSelect();
		cpp_int getMaxUserNameLength();
		local_ref< java::lang::String > getNumericFunctions();
		local_ref< java::sql::ResultSet > getPrimaryKeys(local_ref< java::lang::String > const&, local_ref< java::lang::String > const&, local_ref< java::lang::String > const&);
		local_ref< java::sql::ResultSet > getProcedureColumns(local_ref< java::lang::String > const&, local_ref< java::lang::String > const&, local_ref< java::lang::String > const&, local_ref< java::lang::String > const&);
		local_ref< java::sql::ResultSet > getProcedures(local_ref< java::lang::String > const&, local_ref< java::lang::String > const&, local_ref< java::lang::String > const&);
		local_ref< java::lang::String > getProcedureTerm();
		cpp_int getResultSetHoldability();
		local_ref< java::sql::ResultSet > getSchemas();
		local_ref< java::lang::String > getSchemaTerm();
		local_ref< java::lang::String > getSearchStringEscape();
		local_ref< java::lang::String > getSQLKeywords();
		cpp_int getSQLStateType();
		local_ref< java::lang::String > getStringFunctions();
		local_ref< java::sql::ResultSet > getSuperTables(local_ref< java::lang::String > const&, local_ref< java::lang::String > const&, local_ref< java::lang::String > const&);
		local_ref< java::sql::ResultSet > getSuperTypes(local_ref< java::lang::String > const&, local_ref< java::lang::String > const&, local_ref< java::lang::String > const&);
		local_ref< java::lang::String > getSystemFunctions();
		local_ref< java::sql::ResultSet > getTablePrivileges(local_ref< java::lang::String > const&, local_ref< java::lang::String > const&, local_ref< java::lang::String > const&);
		local_ref< java::sql::ResultSet > getTables(local_ref< java::lang::String > const&, local_ref< java::lang::String > const&, local_ref< java::lang::String > const&, local_ref< cpp_object_array<java::lang::String, 1> > const&);
		local_ref< java::sql::ResultSet > getTableTypes();
		local_ref< java::lang::String > getTimeDateFunctions();
		local_ref< java::sql::ResultSet > getTypeInfo();
		local_ref< java::sql::ResultSet > getUDTs(local_ref< java::lang::String > const&, local_ref< java::lang::String > const&, local_ref< java::lang::String > const&, local_ref< cpp_int_array<1> > const&);
		local_ref< java::lang::String > getURL();
		local_ref< java::lang::String > getUserName();
		local_ref< java::sql::ResultSet > getVersionColumns(local_ref< java::lang::String > const&, local_ref< java::lang::String > const&, local_ref< java::lang::String > const&);
		cpp_boolean insertsAreDetected(cpp_int const&);
		cpp_boolean isCatalogAtStart();
		cpp_boolean isReadOnly();
		cpp_boolean locatorsUpdateCopy();
		cpp_boolean nullPlusNonNullIsNull();
		cpp_boolean nullsAreSortedAtEnd();
		cpp_boolean nullsAreSortedAtStart();
		cpp_boolean nullsAreSortedHigh();
		cpp_boolean nullsAreSortedLow();
		cpp_boolean othersDeletesAreVisible(cpp_int const&);
		cpp_boolean othersInsertsAreVisible(cpp_int const&);
		cpp_boolean othersUpdatesAreVisible(cpp_int const&);
		cpp_boolean ownDeletesAreVisible(cpp_int const&);
		cpp_boolean ownInsertsAreVisible(cpp_int const&);
		cpp_boolean ownUpdatesAreVisible(cpp_int const&);
		cpp_boolean storesLowerCaseIdentifiers();
		cpp_boolean storesLowerCaseQuotedIdentifiers();
		cpp_boolean storesMixedCaseIdentifiers();
		cpp_boolean storesMixedCaseQuotedIdentifiers();
		cpp_boolean storesUpperCaseIdentifiers();
		cpp_boolean storesUpperCaseQuotedIdentifiers();
		cpp_boolean supportsAlterTableWithAddColumn();
		cpp_boolean supportsAlterTableWithDropColumn();
		cpp_boolean supportsANSI92EntryLevelSQL();
		cpp_boolean supportsANSI92FullSQL();
		cpp_boolean supportsANSI92IntermediateSQL();
		cpp_boolean supportsBatchUpdates();
		cpp_boolean supportsCatalogsInDataManipulation();
		cpp_boolean supportsCatalogsInIndexDefinitions();
		cpp_boolean supportsCatalogsInPrivilegeDefinitions();
		cpp_boolean supportsCatalogsInProcedureCalls();
		cpp_boolean supportsCatalogsInTableDefinitions();
		cpp_boolean supportsColumnAliasing();
		cpp_boolean supportsConvert();
		cpp_boolean supportsConvert(cpp_int const&, cpp_int const&);
		cpp_boolean supportsCoreSQLGrammar();
		cpp_boolean supportsCorrelatedSubqueries();
		cpp_boolean supportsDataDefinitionAndDataManipulationTransactions();
		cpp_boolean supportsDataManipulationTransactionsOnly();
		cpp_boolean supportsDifferentTableCorrelationNames();
		cpp_boolean supportsExpressionsInOrderBy();
		cpp_boolean supportsExtendedSQLGrammar();
		cpp_boolean supportsFullOuterJoins();
		cpp_boolean supportsGetGeneratedKeys();
		cpp_boolean supportsGroupBy();
		cpp_boolean supportsGroupByBeyondSelect();
		cpp_boolean supportsGroupByUnrelated();
		cpp_boolean supportsIntegrityEnhancementFacility();
		cpp_boolean supportsLikeEscapeClause();
		cpp_boolean supportsLimitedOuterJoins();
		cpp_boolean supportsMinimumSQLGrammar();
		cpp_boolean supportsMixedCaseIdentifiers();
		cpp_boolean supportsMixedCaseQuotedIdentifiers();
		cpp_boolean supportsMultipleOpenResults();
		cpp_boolean supportsMultipleResultSets();
		cpp_boolean supportsMultipleTransactions();
		cpp_boolean supportsNamedParameters();
		cpp_boolean supportsNonNullableColumns();
		cpp_boolean supportsOpenCursorsAcrossCommit();
		cpp_boolean supportsOpenCursorsAcrossRollback();
		cpp_boolean supportsOpenStatementsAcrossCommit();
		cpp_boolean supportsOpenStatementsAcrossRollback();
		cpp_boolean supportsOrderByUnrelated();
		cpp_boolean supportsOuterJoins();
		cpp_boolean supportsPositionedDelete();
		cpp_boolean supportsPositionedUpdate();
		cpp_boolean supportsResultSetConcurrency(cpp_int const&, cpp_int const&);
		cpp_boolean supportsResultSetHoldability(cpp_int const&);
		cpp_boolean supportsResultSetType(cpp_int const&);
		cpp_boolean supportsSavepoints();
		cpp_boolean supportsSchemasInDataManipulation();
		cpp_boolean supportsSchemasInIndexDefinitions();
		cpp_boolean supportsSchemasInPrivilegeDefinitions();
		cpp_boolean supportsSchemasInProcedureCalls();
		cpp_boolean supportsSchemasInTableDefinitions();
		cpp_boolean supportsSelectForUpdate();
		cpp_boolean supportsStatementPooling();
		cpp_boolean supportsStoredProcedures();
		cpp_boolean supportsSubqueriesInComparisons();
		cpp_boolean supportsSubqueriesInExists();
		cpp_boolean supportsSubqueriesInIns();
		cpp_boolean supportsSubqueriesInQuantifieds();
		cpp_boolean supportsTableCorrelationNames();
		cpp_boolean supportsTransactionIsolationLevel(cpp_int const&);
		cpp_boolean supportsTransactions();
		cpp_boolean supportsUnion();
		cpp_boolean supportsUnionAll();
		cpp_boolean updatesAreDetected(cpp_int const&);
		cpp_boolean usesLocalFilePerTable();
		cpp_boolean usesLocalFiles();

		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(0), J2CPP_FIELD_SIGNATURE(0), cpp_short > attributeNoNulls;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(1), J2CPP_FIELD_SIGNATURE(1), cpp_short > attributeNullable;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(2), J2CPP_FIELD_SIGNATURE(2), cpp_short > attributeNullableUnknown;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(3), J2CPP_FIELD_SIGNATURE(3), cpp_int > bestRowNotPseudo;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(4), J2CPP_FIELD_SIGNATURE(4), cpp_int > bestRowPseudo;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(5), J2CPP_FIELD_SIGNATURE(5), cpp_int > bestRowSession;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(6), J2CPP_FIELD_SIGNATURE(6), cpp_int > bestRowTemporary;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(7), J2CPP_FIELD_SIGNATURE(7), cpp_int > bestRowTransaction;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(8), J2CPP_FIELD_SIGNATURE(8), cpp_int > bestRowUnknown;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(9), J2CPP_FIELD_SIGNATURE(9), cpp_int > columnNoNulls;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(10), J2CPP_FIELD_SIGNATURE(10), cpp_int > columnNullable;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(11), J2CPP_FIELD_SIGNATURE(11), cpp_int > columnNullableUnknown;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(12), J2CPP_FIELD_SIGNATURE(12), cpp_int > importedKeyCascade;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(13), J2CPP_FIELD_SIGNATURE(13), cpp_int > importedKeyInitiallyDeferred;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(14), J2CPP_FIELD_SIGNATURE(14), cpp_int > importedKeyInitiallyImmediate;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(15), J2CPP_FIELD_SIGNATURE(15), cpp_int > importedKeyNoAction;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(16), J2CPP_FIELD_SIGNATURE(16), cpp_int > importedKeyNotDeferrable;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(17), J2CPP_FIELD_SIGNATURE(17), cpp_int > importedKeyRestrict;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(18), J2CPP_FIELD_SIGNATURE(18), cpp_int > importedKeySetDefault;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(19), J2CPP_FIELD_SIGNATURE(19), cpp_int > importedKeySetNull;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(20), J2CPP_FIELD_SIGNATURE(20), cpp_int > procedureColumnIn;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(21), J2CPP_FIELD_SIGNATURE(21), cpp_int > procedureColumnInOut;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(22), J2CPP_FIELD_SIGNATURE(22), cpp_int > procedureColumnOut;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(23), J2CPP_FIELD_SIGNATURE(23), cpp_int > procedureColumnResult;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(24), J2CPP_FIELD_SIGNATURE(24), cpp_int > procedureColumnReturn;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(25), J2CPP_FIELD_SIGNATURE(25), cpp_int > procedureColumnUnknown;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(26), J2CPP_FIELD_SIGNATURE(26), cpp_int > procedureNoNulls;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(27), J2CPP_FIELD_SIGNATURE(27), cpp_int > procedureNoResult;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(28), J2CPP_FIELD_SIGNATURE(28), cpp_int > procedureNullable;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(29), J2CPP_FIELD_SIGNATURE(29), cpp_int > procedureNullableUnknown;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(30), J2CPP_FIELD_SIGNATURE(30), cpp_int > procedureResultUnknown;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(31), J2CPP_FIELD_SIGNATURE(31), cpp_int > procedureReturnsResult;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(32), J2CPP_FIELD_SIGNATURE(32), cpp_int > sqlStateSQL99;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(33), J2CPP_FIELD_SIGNATURE(33), cpp_int > sqlStateXOpen;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(34), J2CPP_FIELD_SIGNATURE(34), cpp_short > tableIndexClustered;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(35), J2CPP_FIELD_SIGNATURE(35), cpp_short > tableIndexHashed;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(36), J2CPP_FIELD_SIGNATURE(36), cpp_short > tableIndexOther;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(37), J2CPP_FIELD_SIGNATURE(37), cpp_short > tableIndexStatistic;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(38), J2CPP_FIELD_SIGNATURE(38), cpp_int > typeNoNulls;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(39), J2CPP_FIELD_SIGNATURE(39), cpp_int > typeNullable;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(40), J2CPP_FIELD_SIGNATURE(40), cpp_int > typeNullableUnknown;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(41), J2CPP_FIELD_SIGNATURE(41), cpp_int > typePredBasic;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(42), J2CPP_FIELD_SIGNATURE(42), cpp_int > typePredChar;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(43), J2CPP_FIELD_SIGNATURE(43), cpp_int > typePredNone;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(44), J2CPP_FIELD_SIGNATURE(44), cpp_int > typeSearchable;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(45), J2CPP_FIELD_SIGNATURE(45), cpp_int > versionColumnNotPseudo;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(46), J2CPP_FIELD_SIGNATURE(46), cpp_int > versionColumnPseudo;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(47), J2CPP_FIELD_SIGNATURE(47), cpp_int > versionColumnUnknown;
	}; //class DatabaseMetaData

} //namespace sql
} //namespace java


} //namespace j2cpp

#endif //J2CPP_JAVA_SQL_DATABASEMETADATA_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_SQL_DATABASEMETADATA_HPP_IMPL
#define J2CPP_JAVA_SQL_DATABASEMETADATA_HPP_IMPL

namespace j2cpp {


cpp_boolean java::sql::DatabaseMetaData::allProceduresAreCallable()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(0), J2CPP_METHOD_SIGNATURE(0), false>()
		)
	);
}

cpp_boolean java::sql::DatabaseMetaData::allTablesAreSelectable()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), false>()
		)
	);
}

cpp_boolean java::sql::DatabaseMetaData::dataDefinitionCausesTransactionCommit()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>()
		)
	);
}

cpp_boolean java::sql::DatabaseMetaData::dataDefinitionIgnoredInTransactions()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>()
		)
	);
}

cpp_boolean java::sql::DatabaseMetaData::deletesAreDetected(cpp_int const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean java::sql::DatabaseMetaData::doesMaxRowSizeIncludeBlobs()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>()
		)
	);
}

local_ref< java::sql::ResultSet > java::sql::DatabaseMetaData::getAttributes(local_ref< java::lang::String > const &a0, local_ref< java::lang::String > const &a1, local_ref< java::lang::String > const &a2, local_ref< java::lang::String > const &a3)
{
	return local_ref< java::sql::ResultSet >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype(), a3.get_jtype()
		)
	);
}

local_ref< java::sql::ResultSet > java::sql::DatabaseMetaData::getBestRowIdentifier(local_ref< java::lang::String > const &a0, local_ref< java::lang::String > const &a1, local_ref< java::lang::String > const &a2, cpp_int const &a3, cpp_boolean const &a4)
{
	return local_ref< java::sql::ResultSet >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(7), J2CPP_METHOD_SIGNATURE(7), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype(), a3.get_jtype(), a4.get_jtype()
		)
	);
}

local_ref< java::sql::ResultSet > java::sql::DatabaseMetaData::getCatalogs()
{
	return local_ref< java::sql::ResultSet >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(8), J2CPP_METHOD_SIGNATURE(8), false>()
		)
	);
}

local_ref< java::lang::String > java::sql::DatabaseMetaData::getCatalogSeparator()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(9), J2CPP_METHOD_SIGNATURE(9), false>()
		)
	);
}

local_ref< java::lang::String > java::sql::DatabaseMetaData::getCatalogTerm()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(10), J2CPP_METHOD_SIGNATURE(10), false>()
		)
	);
}

local_ref< java::sql::ResultSet > java::sql::DatabaseMetaData::getColumnPrivileges(local_ref< java::lang::String > const &a0, local_ref< java::lang::String > const &a1, local_ref< java::lang::String > const &a2, local_ref< java::lang::String > const &a3)
{
	return local_ref< java::sql::ResultSet >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(11), J2CPP_METHOD_SIGNATURE(11), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype(), a3.get_jtype()
		)
	);
}

local_ref< java::sql::ResultSet > java::sql::DatabaseMetaData::getColumns(local_ref< java::lang::String > const &a0, local_ref< java::lang::String > const &a1, local_ref< java::lang::String > const &a2, local_ref< java::lang::String > const &a3)
{
	return local_ref< java::sql::ResultSet >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(12), J2CPP_METHOD_SIGNATURE(12), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype(), a3.get_jtype()
		)
	);
}

local_ref< java::sql::Connection > java::sql::DatabaseMetaData::getConnection()
{
	return local_ref< java::sql::Connection >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(13), J2CPP_METHOD_SIGNATURE(13), false>()
		)
	);
}

local_ref< java::sql::ResultSet > java::sql::DatabaseMetaData::getCrossReference(local_ref< java::lang::String > const &a0, local_ref< java::lang::String > const &a1, local_ref< java::lang::String > const &a2, local_ref< java::lang::String > const &a3, local_ref< java::lang::String > const &a4, local_ref< java::lang::String > const &a5)
{
	return local_ref< java::sql::ResultSet >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(14), J2CPP_METHOD_SIGNATURE(14), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype(), a3.get_jtype(), a4.get_jtype(), a5.get_jtype()
		)
	);
}

cpp_int java::sql::DatabaseMetaData::getDatabaseMajorVersion()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(15), J2CPP_METHOD_SIGNATURE(15), false>()
		)
	);
}

cpp_int java::sql::DatabaseMetaData::getDatabaseMinorVersion()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(16), J2CPP_METHOD_SIGNATURE(16), false>()
		)
	);
}

local_ref< java::lang::String > java::sql::DatabaseMetaData::getDatabaseProductName()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(17), J2CPP_METHOD_SIGNATURE(17), false>()
		)
	);
}

local_ref< java::lang::String > java::sql::DatabaseMetaData::getDatabaseProductVersion()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(18), J2CPP_METHOD_SIGNATURE(18), false>()
		)
	);
}

cpp_int java::sql::DatabaseMetaData::getDefaultTransactionIsolation()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(19), J2CPP_METHOD_SIGNATURE(19), false>()
		)
	);
}

cpp_int java::sql::DatabaseMetaData::getDriverMajorVersion()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(20), J2CPP_METHOD_SIGNATURE(20), false>()
		)
	);
}

cpp_int java::sql::DatabaseMetaData::getDriverMinorVersion()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(21), J2CPP_METHOD_SIGNATURE(21), false>()
		)
	);
}

local_ref< java::lang::String > java::sql::DatabaseMetaData::getDriverName()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(22), J2CPP_METHOD_SIGNATURE(22), false>()
		)
	);
}

local_ref< java::lang::String > java::sql::DatabaseMetaData::getDriverVersion()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(23), J2CPP_METHOD_SIGNATURE(23), false>()
		)
	);
}

local_ref< java::sql::ResultSet > java::sql::DatabaseMetaData::getExportedKeys(local_ref< java::lang::String > const &a0, local_ref< java::lang::String > const &a1, local_ref< java::lang::String > const &a2)
{
	return local_ref< java::sql::ResultSet >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(24), J2CPP_METHOD_SIGNATURE(24), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

local_ref< java::lang::String > java::sql::DatabaseMetaData::getExtraNameCharacters()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(25), J2CPP_METHOD_SIGNATURE(25), false>()
		)
	);
}

local_ref< java::lang::String > java::sql::DatabaseMetaData::getIdentifierQuoteString()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(26), J2CPP_METHOD_SIGNATURE(26), false>()
		)
	);
}

local_ref< java::sql::ResultSet > java::sql::DatabaseMetaData::getImportedKeys(local_ref< java::lang::String > const &a0, local_ref< java::lang::String > const &a1, local_ref< java::lang::String > const &a2)
{
	return local_ref< java::sql::ResultSet >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(27), J2CPP_METHOD_SIGNATURE(27), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

local_ref< java::sql::ResultSet > java::sql::DatabaseMetaData::getIndexInfo(local_ref< java::lang::String > const &a0, local_ref< java::lang::String > const &a1, local_ref< java::lang::String > const &a2, cpp_boolean const &a3, cpp_boolean const &a4)
{
	return local_ref< java::sql::ResultSet >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(28), J2CPP_METHOD_SIGNATURE(28), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype(), a3.get_jtype(), a4.get_jtype()
		)
	);
}

cpp_int java::sql::DatabaseMetaData::getJDBCMajorVersion()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(29), J2CPP_METHOD_SIGNATURE(29), false>()
		)
	);
}

cpp_int java::sql::DatabaseMetaData::getJDBCMinorVersion()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(30), J2CPP_METHOD_SIGNATURE(30), false>()
		)
	);
}

cpp_int java::sql::DatabaseMetaData::getMaxBinaryLiteralLength()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(31), J2CPP_METHOD_SIGNATURE(31), false>()
		)
	);
}

cpp_int java::sql::DatabaseMetaData::getMaxCatalogNameLength()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(32), J2CPP_METHOD_SIGNATURE(32), false>()
		)
	);
}

cpp_int java::sql::DatabaseMetaData::getMaxCharLiteralLength()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(33), J2CPP_METHOD_SIGNATURE(33), false>()
		)
	);
}

cpp_int java::sql::DatabaseMetaData::getMaxColumnNameLength()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(34), J2CPP_METHOD_SIGNATURE(34), false>()
		)
	);
}

cpp_int java::sql::DatabaseMetaData::getMaxColumnsInGroupBy()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(35), J2CPP_METHOD_SIGNATURE(35), false>()
		)
	);
}

cpp_int java::sql::DatabaseMetaData::getMaxColumnsInIndex()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(36), J2CPP_METHOD_SIGNATURE(36), false>()
		)
	);
}

cpp_int java::sql::DatabaseMetaData::getMaxColumnsInOrderBy()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(37), J2CPP_METHOD_SIGNATURE(37), false>()
		)
	);
}

cpp_int java::sql::DatabaseMetaData::getMaxColumnsInSelect()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(38), J2CPP_METHOD_SIGNATURE(38), false>()
		)
	);
}

cpp_int java::sql::DatabaseMetaData::getMaxColumnsInTable()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(39), J2CPP_METHOD_SIGNATURE(39), false>()
		)
	);
}

cpp_int java::sql::DatabaseMetaData::getMaxConnections()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(40), J2CPP_METHOD_SIGNATURE(40), false>()
		)
	);
}

cpp_int java::sql::DatabaseMetaData::getMaxCursorNameLength()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(41), J2CPP_METHOD_SIGNATURE(41), false>()
		)
	);
}

cpp_int java::sql::DatabaseMetaData::getMaxIndexLength()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(42), J2CPP_METHOD_SIGNATURE(42), false>()
		)
	);
}

cpp_int java::sql::DatabaseMetaData::getMaxProcedureNameLength()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(43), J2CPP_METHOD_SIGNATURE(43), false>()
		)
	);
}

cpp_int java::sql::DatabaseMetaData::getMaxRowSize()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(44), J2CPP_METHOD_SIGNATURE(44), false>()
		)
	);
}

cpp_int java::sql::DatabaseMetaData::getMaxSchemaNameLength()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(45), J2CPP_METHOD_SIGNATURE(45), false>()
		)
	);
}

cpp_int java::sql::DatabaseMetaData::getMaxStatementLength()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(46), J2CPP_METHOD_SIGNATURE(46), false>()
		)
	);
}

cpp_int java::sql::DatabaseMetaData::getMaxStatements()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(47), J2CPP_METHOD_SIGNATURE(47), false>()
		)
	);
}

cpp_int java::sql::DatabaseMetaData::getMaxTableNameLength()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(48), J2CPP_METHOD_SIGNATURE(48), false>()
		)
	);
}

cpp_int java::sql::DatabaseMetaData::getMaxTablesInSelect()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(49), J2CPP_METHOD_SIGNATURE(49), false>()
		)
	);
}

cpp_int java::sql::DatabaseMetaData::getMaxUserNameLength()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(50), J2CPP_METHOD_SIGNATURE(50), false>()
		)
	);
}

local_ref< java::lang::String > java::sql::DatabaseMetaData::getNumericFunctions()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(51), J2CPP_METHOD_SIGNATURE(51), false>()
		)
	);
}

local_ref< java::sql::ResultSet > java::sql::DatabaseMetaData::getPrimaryKeys(local_ref< java::lang::String > const &a0, local_ref< java::lang::String > const &a1, local_ref< java::lang::String > const &a2)
{
	return local_ref< java::sql::ResultSet >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(52), J2CPP_METHOD_SIGNATURE(52), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

local_ref< java::sql::ResultSet > java::sql::DatabaseMetaData::getProcedureColumns(local_ref< java::lang::String > const &a0, local_ref< java::lang::String > const &a1, local_ref< java::lang::String > const &a2, local_ref< java::lang::String > const &a3)
{
	return local_ref< java::sql::ResultSet >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(53), J2CPP_METHOD_SIGNATURE(53), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype(), a3.get_jtype()
		)
	);
}

local_ref< java::sql::ResultSet > java::sql::DatabaseMetaData::getProcedures(local_ref< java::lang::String > const &a0, local_ref< java::lang::String > const &a1, local_ref< java::lang::String > const &a2)
{
	return local_ref< java::sql::ResultSet >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(54), J2CPP_METHOD_SIGNATURE(54), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

local_ref< java::lang::String > java::sql::DatabaseMetaData::getProcedureTerm()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(55), J2CPP_METHOD_SIGNATURE(55), false>()
		)
	);
}

cpp_int java::sql::DatabaseMetaData::getResultSetHoldability()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(56), J2CPP_METHOD_SIGNATURE(56), false>()
		)
	);
}

local_ref< java::sql::ResultSet > java::sql::DatabaseMetaData::getSchemas()
{
	return local_ref< java::sql::ResultSet >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(57), J2CPP_METHOD_SIGNATURE(57), false>()
		)
	);
}

local_ref< java::lang::String > java::sql::DatabaseMetaData::getSchemaTerm()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(58), J2CPP_METHOD_SIGNATURE(58), false>()
		)
	);
}

local_ref< java::lang::String > java::sql::DatabaseMetaData::getSearchStringEscape()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(59), J2CPP_METHOD_SIGNATURE(59), false>()
		)
	);
}

local_ref< java::lang::String > java::sql::DatabaseMetaData::getSQLKeywords()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(60), J2CPP_METHOD_SIGNATURE(60), false>()
		)
	);
}

cpp_int java::sql::DatabaseMetaData::getSQLStateType()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(61), J2CPP_METHOD_SIGNATURE(61), false>()
		)
	);
}

local_ref< java::lang::String > java::sql::DatabaseMetaData::getStringFunctions()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(62), J2CPP_METHOD_SIGNATURE(62), false>()
		)
	);
}

local_ref< java::sql::ResultSet > java::sql::DatabaseMetaData::getSuperTables(local_ref< java::lang::String > const &a0, local_ref< java::lang::String > const &a1, local_ref< java::lang::String > const &a2)
{
	return local_ref< java::sql::ResultSet >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(63), J2CPP_METHOD_SIGNATURE(63), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

local_ref< java::sql::ResultSet > java::sql::DatabaseMetaData::getSuperTypes(local_ref< java::lang::String > const &a0, local_ref< java::lang::String > const &a1, local_ref< java::lang::String > const &a2)
{
	return local_ref< java::sql::ResultSet >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(64), J2CPP_METHOD_SIGNATURE(64), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

local_ref< java::lang::String > java::sql::DatabaseMetaData::getSystemFunctions()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(65), J2CPP_METHOD_SIGNATURE(65), false>()
		)
	);
}

local_ref< java::sql::ResultSet > java::sql::DatabaseMetaData::getTablePrivileges(local_ref< java::lang::String > const &a0, local_ref< java::lang::String > const &a1, local_ref< java::lang::String > const &a2)
{
	return local_ref< java::sql::ResultSet >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(66), J2CPP_METHOD_SIGNATURE(66), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

local_ref< java::sql::ResultSet > java::sql::DatabaseMetaData::getTables(local_ref< java::lang::String > const &a0, local_ref< java::lang::String > const &a1, local_ref< java::lang::String > const &a2, local_ref< cpp_object_array<java::lang::String, 1> > const &a3)
{
	return local_ref< java::sql::ResultSet >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(67), J2CPP_METHOD_SIGNATURE(67), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype(), a3.get_jtype()
		)
	);
}

local_ref< java::sql::ResultSet > java::sql::DatabaseMetaData::getTableTypes()
{
	return local_ref< java::sql::ResultSet >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(68), J2CPP_METHOD_SIGNATURE(68), false>()
		)
	);
}

local_ref< java::lang::String > java::sql::DatabaseMetaData::getTimeDateFunctions()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(69), J2CPP_METHOD_SIGNATURE(69), false>()
		)
	);
}

local_ref< java::sql::ResultSet > java::sql::DatabaseMetaData::getTypeInfo()
{
	return local_ref< java::sql::ResultSet >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(70), J2CPP_METHOD_SIGNATURE(70), false>()
		)
	);
}

local_ref< java::sql::ResultSet > java::sql::DatabaseMetaData::getUDTs(local_ref< java::lang::String > const &a0, local_ref< java::lang::String > const &a1, local_ref< java::lang::String > const &a2, local_ref< cpp_int_array<1> > const &a3)
{
	return local_ref< java::sql::ResultSet >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(71), J2CPP_METHOD_SIGNATURE(71), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype(), a3.get_jtype()
		)
	);
}

local_ref< java::lang::String > java::sql::DatabaseMetaData::getURL()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(72), J2CPP_METHOD_SIGNATURE(72), false>()
		)
	);
}

local_ref< java::lang::String > java::sql::DatabaseMetaData::getUserName()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(73), J2CPP_METHOD_SIGNATURE(73), false>()
		)
	);
}

local_ref< java::sql::ResultSet > java::sql::DatabaseMetaData::getVersionColumns(local_ref< java::lang::String > const &a0, local_ref< java::lang::String > const &a1, local_ref< java::lang::String > const &a2)
{
	return local_ref< java::sql::ResultSet >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(74), J2CPP_METHOD_SIGNATURE(74), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

cpp_boolean java::sql::DatabaseMetaData::insertsAreDetected(cpp_int const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(75), J2CPP_METHOD_SIGNATURE(75), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean java::sql::DatabaseMetaData::isCatalogAtStart()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(76), J2CPP_METHOD_SIGNATURE(76), false>()
		)
	);
}

cpp_boolean java::sql::DatabaseMetaData::isReadOnly()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(77), J2CPP_METHOD_SIGNATURE(77), false>()
		)
	);
}

cpp_boolean java::sql::DatabaseMetaData::locatorsUpdateCopy()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(78), J2CPP_METHOD_SIGNATURE(78), false>()
		)
	);
}

cpp_boolean java::sql::DatabaseMetaData::nullPlusNonNullIsNull()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(79), J2CPP_METHOD_SIGNATURE(79), false>()
		)
	);
}

cpp_boolean java::sql::DatabaseMetaData::nullsAreSortedAtEnd()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(80), J2CPP_METHOD_SIGNATURE(80), false>()
		)
	);
}

cpp_boolean java::sql::DatabaseMetaData::nullsAreSortedAtStart()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(81), J2CPP_METHOD_SIGNATURE(81), false>()
		)
	);
}

cpp_boolean java::sql::DatabaseMetaData::nullsAreSortedHigh()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(82), J2CPP_METHOD_SIGNATURE(82), false>()
		)
	);
}

cpp_boolean java::sql::DatabaseMetaData::nullsAreSortedLow()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(83), J2CPP_METHOD_SIGNATURE(83), false>()
		)
	);
}

cpp_boolean java::sql::DatabaseMetaData::othersDeletesAreVisible(cpp_int const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(84), J2CPP_METHOD_SIGNATURE(84), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean java::sql::DatabaseMetaData::othersInsertsAreVisible(cpp_int const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(85), J2CPP_METHOD_SIGNATURE(85), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean java::sql::DatabaseMetaData::othersUpdatesAreVisible(cpp_int const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(86), J2CPP_METHOD_SIGNATURE(86), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean java::sql::DatabaseMetaData::ownDeletesAreVisible(cpp_int const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(87), J2CPP_METHOD_SIGNATURE(87), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean java::sql::DatabaseMetaData::ownInsertsAreVisible(cpp_int const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(88), J2CPP_METHOD_SIGNATURE(88), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean java::sql::DatabaseMetaData::ownUpdatesAreVisible(cpp_int const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(89), J2CPP_METHOD_SIGNATURE(89), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean java::sql::DatabaseMetaData::storesLowerCaseIdentifiers()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(90), J2CPP_METHOD_SIGNATURE(90), false>()
		)
	);
}

cpp_boolean java::sql::DatabaseMetaData::storesLowerCaseQuotedIdentifiers()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(91), J2CPP_METHOD_SIGNATURE(91), false>()
		)
	);
}

cpp_boolean java::sql::DatabaseMetaData::storesMixedCaseIdentifiers()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(92), J2CPP_METHOD_SIGNATURE(92), false>()
		)
	);
}

cpp_boolean java::sql::DatabaseMetaData::storesMixedCaseQuotedIdentifiers()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(93), J2CPP_METHOD_SIGNATURE(93), false>()
		)
	);
}

cpp_boolean java::sql::DatabaseMetaData::storesUpperCaseIdentifiers()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(94), J2CPP_METHOD_SIGNATURE(94), false>()
		)
	);
}

cpp_boolean java::sql::DatabaseMetaData::storesUpperCaseQuotedIdentifiers()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(95), J2CPP_METHOD_SIGNATURE(95), false>()
		)
	);
}

cpp_boolean java::sql::DatabaseMetaData::supportsAlterTableWithAddColumn()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(96), J2CPP_METHOD_SIGNATURE(96), false>()
		)
	);
}

cpp_boolean java::sql::DatabaseMetaData::supportsAlterTableWithDropColumn()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(97), J2CPP_METHOD_SIGNATURE(97), false>()
		)
	);
}

cpp_boolean java::sql::DatabaseMetaData::supportsANSI92EntryLevelSQL()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(98), J2CPP_METHOD_SIGNATURE(98), false>()
		)
	);
}

cpp_boolean java::sql::DatabaseMetaData::supportsANSI92FullSQL()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(99), J2CPP_METHOD_SIGNATURE(99), false>()
		)
	);
}

cpp_boolean java::sql::DatabaseMetaData::supportsANSI92IntermediateSQL()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(100), J2CPP_METHOD_SIGNATURE(100), false>()
		)
	);
}

cpp_boolean java::sql::DatabaseMetaData::supportsBatchUpdates()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(101), J2CPP_METHOD_SIGNATURE(101), false>()
		)
	);
}

cpp_boolean java::sql::DatabaseMetaData::supportsCatalogsInDataManipulation()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(102), J2CPP_METHOD_SIGNATURE(102), false>()
		)
	);
}

cpp_boolean java::sql::DatabaseMetaData::supportsCatalogsInIndexDefinitions()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(103), J2CPP_METHOD_SIGNATURE(103), false>()
		)
	);
}

cpp_boolean java::sql::DatabaseMetaData::supportsCatalogsInPrivilegeDefinitions()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(104), J2CPP_METHOD_SIGNATURE(104), false>()
		)
	);
}

cpp_boolean java::sql::DatabaseMetaData::supportsCatalogsInProcedureCalls()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(105), J2CPP_METHOD_SIGNATURE(105), false>()
		)
	);
}

cpp_boolean java::sql::DatabaseMetaData::supportsCatalogsInTableDefinitions()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(106), J2CPP_METHOD_SIGNATURE(106), false>()
		)
	);
}

cpp_boolean java::sql::DatabaseMetaData::supportsColumnAliasing()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(107), J2CPP_METHOD_SIGNATURE(107), false>()
		)
	);
}

cpp_boolean java::sql::DatabaseMetaData::supportsConvert()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(108), J2CPP_METHOD_SIGNATURE(108), false>()
		)
	);
}

cpp_boolean java::sql::DatabaseMetaData::supportsConvert(cpp_int const &a0, cpp_int const &a1)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(109), J2CPP_METHOD_SIGNATURE(109), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_boolean java::sql::DatabaseMetaData::supportsCoreSQLGrammar()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(110), J2CPP_METHOD_SIGNATURE(110), false>()
		)
	);
}

cpp_boolean java::sql::DatabaseMetaData::supportsCorrelatedSubqueries()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(111), J2CPP_METHOD_SIGNATURE(111), false>()
		)
	);
}

cpp_boolean java::sql::DatabaseMetaData::supportsDataDefinitionAndDataManipulationTransactions()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(112), J2CPP_METHOD_SIGNATURE(112), false>()
		)
	);
}

cpp_boolean java::sql::DatabaseMetaData::supportsDataManipulationTransactionsOnly()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(113), J2CPP_METHOD_SIGNATURE(113), false>()
		)
	);
}

cpp_boolean java::sql::DatabaseMetaData::supportsDifferentTableCorrelationNames()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(114), J2CPP_METHOD_SIGNATURE(114), false>()
		)
	);
}

cpp_boolean java::sql::DatabaseMetaData::supportsExpressionsInOrderBy()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(115), J2CPP_METHOD_SIGNATURE(115), false>()
		)
	);
}

cpp_boolean java::sql::DatabaseMetaData::supportsExtendedSQLGrammar()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(116), J2CPP_METHOD_SIGNATURE(116), false>()
		)
	);
}

cpp_boolean java::sql::DatabaseMetaData::supportsFullOuterJoins()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(117), J2CPP_METHOD_SIGNATURE(117), false>()
		)
	);
}

cpp_boolean java::sql::DatabaseMetaData::supportsGetGeneratedKeys()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(118), J2CPP_METHOD_SIGNATURE(118), false>()
		)
	);
}

cpp_boolean java::sql::DatabaseMetaData::supportsGroupBy()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(119), J2CPP_METHOD_SIGNATURE(119), false>()
		)
	);
}

cpp_boolean java::sql::DatabaseMetaData::supportsGroupByBeyondSelect()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(120), J2CPP_METHOD_SIGNATURE(120), false>()
		)
	);
}

cpp_boolean java::sql::DatabaseMetaData::supportsGroupByUnrelated()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(121), J2CPP_METHOD_SIGNATURE(121), false>()
		)
	);
}

cpp_boolean java::sql::DatabaseMetaData::supportsIntegrityEnhancementFacility()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(122), J2CPP_METHOD_SIGNATURE(122), false>()
		)
	);
}

cpp_boolean java::sql::DatabaseMetaData::supportsLikeEscapeClause()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(123), J2CPP_METHOD_SIGNATURE(123), false>()
		)
	);
}

cpp_boolean java::sql::DatabaseMetaData::supportsLimitedOuterJoins()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(124), J2CPP_METHOD_SIGNATURE(124), false>()
		)
	);
}

cpp_boolean java::sql::DatabaseMetaData::supportsMinimumSQLGrammar()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(125), J2CPP_METHOD_SIGNATURE(125), false>()
		)
	);
}

cpp_boolean java::sql::DatabaseMetaData::supportsMixedCaseIdentifiers()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(126), J2CPP_METHOD_SIGNATURE(126), false>()
		)
	);
}

cpp_boolean java::sql::DatabaseMetaData::supportsMixedCaseQuotedIdentifiers()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(127), J2CPP_METHOD_SIGNATURE(127), false>()
		)
	);
}

cpp_boolean java::sql::DatabaseMetaData::supportsMultipleOpenResults()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(128), J2CPP_METHOD_SIGNATURE(128), false>()
		)
	);
}

cpp_boolean java::sql::DatabaseMetaData::supportsMultipleResultSets()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(129), J2CPP_METHOD_SIGNATURE(129), false>()
		)
	);
}

cpp_boolean java::sql::DatabaseMetaData::supportsMultipleTransactions()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(130), J2CPP_METHOD_SIGNATURE(130), false>()
		)
	);
}

cpp_boolean java::sql::DatabaseMetaData::supportsNamedParameters()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(131), J2CPP_METHOD_SIGNATURE(131), false>()
		)
	);
}

cpp_boolean java::sql::DatabaseMetaData::supportsNonNullableColumns()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(132), J2CPP_METHOD_SIGNATURE(132), false>()
		)
	);
}

cpp_boolean java::sql::DatabaseMetaData::supportsOpenCursorsAcrossCommit()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(133), J2CPP_METHOD_SIGNATURE(133), false>()
		)
	);
}

cpp_boolean java::sql::DatabaseMetaData::supportsOpenCursorsAcrossRollback()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(134), J2CPP_METHOD_SIGNATURE(134), false>()
		)
	);
}

cpp_boolean java::sql::DatabaseMetaData::supportsOpenStatementsAcrossCommit()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(135), J2CPP_METHOD_SIGNATURE(135), false>()
		)
	);
}

cpp_boolean java::sql::DatabaseMetaData::supportsOpenStatementsAcrossRollback()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(136), J2CPP_METHOD_SIGNATURE(136), false>()
		)
	);
}

cpp_boolean java::sql::DatabaseMetaData::supportsOrderByUnrelated()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(137), J2CPP_METHOD_SIGNATURE(137), false>()
		)
	);
}

cpp_boolean java::sql::DatabaseMetaData::supportsOuterJoins()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(138), J2CPP_METHOD_SIGNATURE(138), false>()
		)
	);
}

cpp_boolean java::sql::DatabaseMetaData::supportsPositionedDelete()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(139), J2CPP_METHOD_SIGNATURE(139), false>()
		)
	);
}

cpp_boolean java::sql::DatabaseMetaData::supportsPositionedUpdate()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(140), J2CPP_METHOD_SIGNATURE(140), false>()
		)
	);
}

cpp_boolean java::sql::DatabaseMetaData::supportsResultSetConcurrency(cpp_int const &a0, cpp_int const &a1)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(141), J2CPP_METHOD_SIGNATURE(141), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_boolean java::sql::DatabaseMetaData::supportsResultSetHoldability(cpp_int const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(142), J2CPP_METHOD_SIGNATURE(142), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean java::sql::DatabaseMetaData::supportsResultSetType(cpp_int const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(143), J2CPP_METHOD_SIGNATURE(143), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean java::sql::DatabaseMetaData::supportsSavepoints()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(144), J2CPP_METHOD_SIGNATURE(144), false>()
		)
	);
}

cpp_boolean java::sql::DatabaseMetaData::supportsSchemasInDataManipulation()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(145), J2CPP_METHOD_SIGNATURE(145), false>()
		)
	);
}

cpp_boolean java::sql::DatabaseMetaData::supportsSchemasInIndexDefinitions()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(146), J2CPP_METHOD_SIGNATURE(146), false>()
		)
	);
}

cpp_boolean java::sql::DatabaseMetaData::supportsSchemasInPrivilegeDefinitions()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(147), J2CPP_METHOD_SIGNATURE(147), false>()
		)
	);
}

cpp_boolean java::sql::DatabaseMetaData::supportsSchemasInProcedureCalls()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(148), J2CPP_METHOD_SIGNATURE(148), false>()
		)
	);
}

cpp_boolean java::sql::DatabaseMetaData::supportsSchemasInTableDefinitions()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(149), J2CPP_METHOD_SIGNATURE(149), false>()
		)
	);
}

cpp_boolean java::sql::DatabaseMetaData::supportsSelectForUpdate()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(150), J2CPP_METHOD_SIGNATURE(150), false>()
		)
	);
}

cpp_boolean java::sql::DatabaseMetaData::supportsStatementPooling()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(151), J2CPP_METHOD_SIGNATURE(151), false>()
		)
	);
}

cpp_boolean java::sql::DatabaseMetaData::supportsStoredProcedures()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(152), J2CPP_METHOD_SIGNATURE(152), false>()
		)
	);
}

cpp_boolean java::sql::DatabaseMetaData::supportsSubqueriesInComparisons()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(153), J2CPP_METHOD_SIGNATURE(153), false>()
		)
	);
}

cpp_boolean java::sql::DatabaseMetaData::supportsSubqueriesInExists()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(154), J2CPP_METHOD_SIGNATURE(154), false>()
		)
	);
}

cpp_boolean java::sql::DatabaseMetaData::supportsSubqueriesInIns()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(155), J2CPP_METHOD_SIGNATURE(155), false>()
		)
	);
}

cpp_boolean java::sql::DatabaseMetaData::supportsSubqueriesInQuantifieds()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(156), J2CPP_METHOD_SIGNATURE(156), false>()
		)
	);
}

cpp_boolean java::sql::DatabaseMetaData::supportsTableCorrelationNames()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(157), J2CPP_METHOD_SIGNATURE(157), false>()
		)
	);
}

cpp_boolean java::sql::DatabaseMetaData::supportsTransactionIsolationLevel(cpp_int const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(158), J2CPP_METHOD_SIGNATURE(158), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean java::sql::DatabaseMetaData::supportsTransactions()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(159), J2CPP_METHOD_SIGNATURE(159), false>()
		)
	);
}

cpp_boolean java::sql::DatabaseMetaData::supportsUnion()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(160), J2CPP_METHOD_SIGNATURE(160), false>()
		)
	);
}

cpp_boolean java::sql::DatabaseMetaData::supportsUnionAll()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(161), J2CPP_METHOD_SIGNATURE(161), false>()
		)
	);
}

cpp_boolean java::sql::DatabaseMetaData::updatesAreDetected(cpp_int const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(162), J2CPP_METHOD_SIGNATURE(162), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean java::sql::DatabaseMetaData::usesLocalFilePerTable()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(163), J2CPP_METHOD_SIGNATURE(163), false>()
		)
	);
}

cpp_boolean java::sql::DatabaseMetaData::usesLocalFiles()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(164), J2CPP_METHOD_SIGNATURE(164), false>()
		)
	);
}


static_field<
	java::sql::DatabaseMetaData::J2CPP_CLASS_NAME,
	java::sql::DatabaseMetaData::J2CPP_FIELD_NAME(0),
	java::sql::DatabaseMetaData::J2CPP_FIELD_SIGNATURE(0),
	cpp_short
> java::sql::DatabaseMetaData::attributeNoNulls;

static_field<
	java::sql::DatabaseMetaData::J2CPP_CLASS_NAME,
	java::sql::DatabaseMetaData::J2CPP_FIELD_NAME(1),
	java::sql::DatabaseMetaData::J2CPP_FIELD_SIGNATURE(1),
	cpp_short
> java::sql::DatabaseMetaData::attributeNullable;

static_field<
	java::sql::DatabaseMetaData::J2CPP_CLASS_NAME,
	java::sql::DatabaseMetaData::J2CPP_FIELD_NAME(2),
	java::sql::DatabaseMetaData::J2CPP_FIELD_SIGNATURE(2),
	cpp_short
> java::sql::DatabaseMetaData::attributeNullableUnknown;

static_field<
	java::sql::DatabaseMetaData::J2CPP_CLASS_NAME,
	java::sql::DatabaseMetaData::J2CPP_FIELD_NAME(3),
	java::sql::DatabaseMetaData::J2CPP_FIELD_SIGNATURE(3),
	cpp_int
> java::sql::DatabaseMetaData::bestRowNotPseudo;

static_field<
	java::sql::DatabaseMetaData::J2CPP_CLASS_NAME,
	java::sql::DatabaseMetaData::J2CPP_FIELD_NAME(4),
	java::sql::DatabaseMetaData::J2CPP_FIELD_SIGNATURE(4),
	cpp_int
> java::sql::DatabaseMetaData::bestRowPseudo;

static_field<
	java::sql::DatabaseMetaData::J2CPP_CLASS_NAME,
	java::sql::DatabaseMetaData::J2CPP_FIELD_NAME(5),
	java::sql::DatabaseMetaData::J2CPP_FIELD_SIGNATURE(5),
	cpp_int
> java::sql::DatabaseMetaData::bestRowSession;

static_field<
	java::sql::DatabaseMetaData::J2CPP_CLASS_NAME,
	java::sql::DatabaseMetaData::J2CPP_FIELD_NAME(6),
	java::sql::DatabaseMetaData::J2CPP_FIELD_SIGNATURE(6),
	cpp_int
> java::sql::DatabaseMetaData::bestRowTemporary;

static_field<
	java::sql::DatabaseMetaData::J2CPP_CLASS_NAME,
	java::sql::DatabaseMetaData::J2CPP_FIELD_NAME(7),
	java::sql::DatabaseMetaData::J2CPP_FIELD_SIGNATURE(7),
	cpp_int
> java::sql::DatabaseMetaData::bestRowTransaction;

static_field<
	java::sql::DatabaseMetaData::J2CPP_CLASS_NAME,
	java::sql::DatabaseMetaData::J2CPP_FIELD_NAME(8),
	java::sql::DatabaseMetaData::J2CPP_FIELD_SIGNATURE(8),
	cpp_int
> java::sql::DatabaseMetaData::bestRowUnknown;

static_field<
	java::sql::DatabaseMetaData::J2CPP_CLASS_NAME,
	java::sql::DatabaseMetaData::J2CPP_FIELD_NAME(9),
	java::sql::DatabaseMetaData::J2CPP_FIELD_SIGNATURE(9),
	cpp_int
> java::sql::DatabaseMetaData::columnNoNulls;

static_field<
	java::sql::DatabaseMetaData::J2CPP_CLASS_NAME,
	java::sql::DatabaseMetaData::J2CPP_FIELD_NAME(10),
	java::sql::DatabaseMetaData::J2CPP_FIELD_SIGNATURE(10),
	cpp_int
> java::sql::DatabaseMetaData::columnNullable;

static_field<
	java::sql::DatabaseMetaData::J2CPP_CLASS_NAME,
	java::sql::DatabaseMetaData::J2CPP_FIELD_NAME(11),
	java::sql::DatabaseMetaData::J2CPP_FIELD_SIGNATURE(11),
	cpp_int
> java::sql::DatabaseMetaData::columnNullableUnknown;

static_field<
	java::sql::DatabaseMetaData::J2CPP_CLASS_NAME,
	java::sql::DatabaseMetaData::J2CPP_FIELD_NAME(12),
	java::sql::DatabaseMetaData::J2CPP_FIELD_SIGNATURE(12),
	cpp_int
> java::sql::DatabaseMetaData::importedKeyCascade;

static_field<
	java::sql::DatabaseMetaData::J2CPP_CLASS_NAME,
	java::sql::DatabaseMetaData::J2CPP_FIELD_NAME(13),
	java::sql::DatabaseMetaData::J2CPP_FIELD_SIGNATURE(13),
	cpp_int
> java::sql::DatabaseMetaData::importedKeyInitiallyDeferred;

static_field<
	java::sql::DatabaseMetaData::J2CPP_CLASS_NAME,
	java::sql::DatabaseMetaData::J2CPP_FIELD_NAME(14),
	java::sql::DatabaseMetaData::J2CPP_FIELD_SIGNATURE(14),
	cpp_int
> java::sql::DatabaseMetaData::importedKeyInitiallyImmediate;

static_field<
	java::sql::DatabaseMetaData::J2CPP_CLASS_NAME,
	java::sql::DatabaseMetaData::J2CPP_FIELD_NAME(15),
	java::sql::DatabaseMetaData::J2CPP_FIELD_SIGNATURE(15),
	cpp_int
> java::sql::DatabaseMetaData::importedKeyNoAction;

static_field<
	java::sql::DatabaseMetaData::J2CPP_CLASS_NAME,
	java::sql::DatabaseMetaData::J2CPP_FIELD_NAME(16),
	java::sql::DatabaseMetaData::J2CPP_FIELD_SIGNATURE(16),
	cpp_int
> java::sql::DatabaseMetaData::importedKeyNotDeferrable;

static_field<
	java::sql::DatabaseMetaData::J2CPP_CLASS_NAME,
	java::sql::DatabaseMetaData::J2CPP_FIELD_NAME(17),
	java::sql::DatabaseMetaData::J2CPP_FIELD_SIGNATURE(17),
	cpp_int
> java::sql::DatabaseMetaData::importedKeyRestrict;

static_field<
	java::sql::DatabaseMetaData::J2CPP_CLASS_NAME,
	java::sql::DatabaseMetaData::J2CPP_FIELD_NAME(18),
	java::sql::DatabaseMetaData::J2CPP_FIELD_SIGNATURE(18),
	cpp_int
> java::sql::DatabaseMetaData::importedKeySetDefault;

static_field<
	java::sql::DatabaseMetaData::J2CPP_CLASS_NAME,
	java::sql::DatabaseMetaData::J2CPP_FIELD_NAME(19),
	java::sql::DatabaseMetaData::J2CPP_FIELD_SIGNATURE(19),
	cpp_int
> java::sql::DatabaseMetaData::importedKeySetNull;

static_field<
	java::sql::DatabaseMetaData::J2CPP_CLASS_NAME,
	java::sql::DatabaseMetaData::J2CPP_FIELD_NAME(20),
	java::sql::DatabaseMetaData::J2CPP_FIELD_SIGNATURE(20),
	cpp_int
> java::sql::DatabaseMetaData::procedureColumnIn;

static_field<
	java::sql::DatabaseMetaData::J2CPP_CLASS_NAME,
	java::sql::DatabaseMetaData::J2CPP_FIELD_NAME(21),
	java::sql::DatabaseMetaData::J2CPP_FIELD_SIGNATURE(21),
	cpp_int
> java::sql::DatabaseMetaData::procedureColumnInOut;

static_field<
	java::sql::DatabaseMetaData::J2CPP_CLASS_NAME,
	java::sql::DatabaseMetaData::J2CPP_FIELD_NAME(22),
	java::sql::DatabaseMetaData::J2CPP_FIELD_SIGNATURE(22),
	cpp_int
> java::sql::DatabaseMetaData::procedureColumnOut;

static_field<
	java::sql::DatabaseMetaData::J2CPP_CLASS_NAME,
	java::sql::DatabaseMetaData::J2CPP_FIELD_NAME(23),
	java::sql::DatabaseMetaData::J2CPP_FIELD_SIGNATURE(23),
	cpp_int
> java::sql::DatabaseMetaData::procedureColumnResult;

static_field<
	java::sql::DatabaseMetaData::J2CPP_CLASS_NAME,
	java::sql::DatabaseMetaData::J2CPP_FIELD_NAME(24),
	java::sql::DatabaseMetaData::J2CPP_FIELD_SIGNATURE(24),
	cpp_int
> java::sql::DatabaseMetaData::procedureColumnReturn;

static_field<
	java::sql::DatabaseMetaData::J2CPP_CLASS_NAME,
	java::sql::DatabaseMetaData::J2CPP_FIELD_NAME(25),
	java::sql::DatabaseMetaData::J2CPP_FIELD_SIGNATURE(25),
	cpp_int
> java::sql::DatabaseMetaData::procedureColumnUnknown;

static_field<
	java::sql::DatabaseMetaData::J2CPP_CLASS_NAME,
	java::sql::DatabaseMetaData::J2CPP_FIELD_NAME(26),
	java::sql::DatabaseMetaData::J2CPP_FIELD_SIGNATURE(26),
	cpp_int
> java::sql::DatabaseMetaData::procedureNoNulls;

static_field<
	java::sql::DatabaseMetaData::J2CPP_CLASS_NAME,
	java::sql::DatabaseMetaData::J2CPP_FIELD_NAME(27),
	java::sql::DatabaseMetaData::J2CPP_FIELD_SIGNATURE(27),
	cpp_int
> java::sql::DatabaseMetaData::procedureNoResult;

static_field<
	java::sql::DatabaseMetaData::J2CPP_CLASS_NAME,
	java::sql::DatabaseMetaData::J2CPP_FIELD_NAME(28),
	java::sql::DatabaseMetaData::J2CPP_FIELD_SIGNATURE(28),
	cpp_int
> java::sql::DatabaseMetaData::procedureNullable;

static_field<
	java::sql::DatabaseMetaData::J2CPP_CLASS_NAME,
	java::sql::DatabaseMetaData::J2CPP_FIELD_NAME(29),
	java::sql::DatabaseMetaData::J2CPP_FIELD_SIGNATURE(29),
	cpp_int
> java::sql::DatabaseMetaData::procedureNullableUnknown;

static_field<
	java::sql::DatabaseMetaData::J2CPP_CLASS_NAME,
	java::sql::DatabaseMetaData::J2CPP_FIELD_NAME(30),
	java::sql::DatabaseMetaData::J2CPP_FIELD_SIGNATURE(30),
	cpp_int
> java::sql::DatabaseMetaData::procedureResultUnknown;

static_field<
	java::sql::DatabaseMetaData::J2CPP_CLASS_NAME,
	java::sql::DatabaseMetaData::J2CPP_FIELD_NAME(31),
	java::sql::DatabaseMetaData::J2CPP_FIELD_SIGNATURE(31),
	cpp_int
> java::sql::DatabaseMetaData::procedureReturnsResult;

static_field<
	java::sql::DatabaseMetaData::J2CPP_CLASS_NAME,
	java::sql::DatabaseMetaData::J2CPP_FIELD_NAME(32),
	java::sql::DatabaseMetaData::J2CPP_FIELD_SIGNATURE(32),
	cpp_int
> java::sql::DatabaseMetaData::sqlStateSQL99;

static_field<
	java::sql::DatabaseMetaData::J2CPP_CLASS_NAME,
	java::sql::DatabaseMetaData::J2CPP_FIELD_NAME(33),
	java::sql::DatabaseMetaData::J2CPP_FIELD_SIGNATURE(33),
	cpp_int
> java::sql::DatabaseMetaData::sqlStateXOpen;

static_field<
	java::sql::DatabaseMetaData::J2CPP_CLASS_NAME,
	java::sql::DatabaseMetaData::J2CPP_FIELD_NAME(34),
	java::sql::DatabaseMetaData::J2CPP_FIELD_SIGNATURE(34),
	cpp_short
> java::sql::DatabaseMetaData::tableIndexClustered;

static_field<
	java::sql::DatabaseMetaData::J2CPP_CLASS_NAME,
	java::sql::DatabaseMetaData::J2CPP_FIELD_NAME(35),
	java::sql::DatabaseMetaData::J2CPP_FIELD_SIGNATURE(35),
	cpp_short
> java::sql::DatabaseMetaData::tableIndexHashed;

static_field<
	java::sql::DatabaseMetaData::J2CPP_CLASS_NAME,
	java::sql::DatabaseMetaData::J2CPP_FIELD_NAME(36),
	java::sql::DatabaseMetaData::J2CPP_FIELD_SIGNATURE(36),
	cpp_short
> java::sql::DatabaseMetaData::tableIndexOther;

static_field<
	java::sql::DatabaseMetaData::J2CPP_CLASS_NAME,
	java::sql::DatabaseMetaData::J2CPP_FIELD_NAME(37),
	java::sql::DatabaseMetaData::J2CPP_FIELD_SIGNATURE(37),
	cpp_short
> java::sql::DatabaseMetaData::tableIndexStatistic;

static_field<
	java::sql::DatabaseMetaData::J2CPP_CLASS_NAME,
	java::sql::DatabaseMetaData::J2CPP_FIELD_NAME(38),
	java::sql::DatabaseMetaData::J2CPP_FIELD_SIGNATURE(38),
	cpp_int
> java::sql::DatabaseMetaData::typeNoNulls;

static_field<
	java::sql::DatabaseMetaData::J2CPP_CLASS_NAME,
	java::sql::DatabaseMetaData::J2CPP_FIELD_NAME(39),
	java::sql::DatabaseMetaData::J2CPP_FIELD_SIGNATURE(39),
	cpp_int
> java::sql::DatabaseMetaData::typeNullable;

static_field<
	java::sql::DatabaseMetaData::J2CPP_CLASS_NAME,
	java::sql::DatabaseMetaData::J2CPP_FIELD_NAME(40),
	java::sql::DatabaseMetaData::J2CPP_FIELD_SIGNATURE(40),
	cpp_int
> java::sql::DatabaseMetaData::typeNullableUnknown;

static_field<
	java::sql::DatabaseMetaData::J2CPP_CLASS_NAME,
	java::sql::DatabaseMetaData::J2CPP_FIELD_NAME(41),
	java::sql::DatabaseMetaData::J2CPP_FIELD_SIGNATURE(41),
	cpp_int
> java::sql::DatabaseMetaData::typePredBasic;

static_field<
	java::sql::DatabaseMetaData::J2CPP_CLASS_NAME,
	java::sql::DatabaseMetaData::J2CPP_FIELD_NAME(42),
	java::sql::DatabaseMetaData::J2CPP_FIELD_SIGNATURE(42),
	cpp_int
> java::sql::DatabaseMetaData::typePredChar;

static_field<
	java::sql::DatabaseMetaData::J2CPP_CLASS_NAME,
	java::sql::DatabaseMetaData::J2CPP_FIELD_NAME(43),
	java::sql::DatabaseMetaData::J2CPP_FIELD_SIGNATURE(43),
	cpp_int
> java::sql::DatabaseMetaData::typePredNone;

static_field<
	java::sql::DatabaseMetaData::J2CPP_CLASS_NAME,
	java::sql::DatabaseMetaData::J2CPP_FIELD_NAME(44),
	java::sql::DatabaseMetaData::J2CPP_FIELD_SIGNATURE(44),
	cpp_int
> java::sql::DatabaseMetaData::typeSearchable;

static_field<
	java::sql::DatabaseMetaData::J2CPP_CLASS_NAME,
	java::sql::DatabaseMetaData::J2CPP_FIELD_NAME(45),
	java::sql::DatabaseMetaData::J2CPP_FIELD_SIGNATURE(45),
	cpp_int
> java::sql::DatabaseMetaData::versionColumnNotPseudo;

static_field<
	java::sql::DatabaseMetaData::J2CPP_CLASS_NAME,
	java::sql::DatabaseMetaData::J2CPP_FIELD_NAME(46),
	java::sql::DatabaseMetaData::J2CPP_FIELD_SIGNATURE(46),
	cpp_int
> java::sql::DatabaseMetaData::versionColumnPseudo;

static_field<
	java::sql::DatabaseMetaData::J2CPP_CLASS_NAME,
	java::sql::DatabaseMetaData::J2CPP_FIELD_NAME(47),
	java::sql::DatabaseMetaData::J2CPP_FIELD_SIGNATURE(47),
	cpp_int
> java::sql::DatabaseMetaData::versionColumnUnknown;


J2CPP_DEFINE_CLASS(java::sql::DatabaseMetaData,"java/sql/DatabaseMetaData")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,0,"allProceduresAreCallable","()Z")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,1,"allTablesAreSelectable","()Z")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,2,"dataDefinitionCausesTransactionCommit","()Z")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,3,"dataDefinitionIgnoredInTransactions","()Z")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,4,"deletesAreDetected","(I)Z")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,5,"doesMaxRowSizeIncludeBlobs","()Z")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,6,"getAttributes","(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/sql/ResultSet;")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,7,"getBestRowIdentifier","(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IZ)Ljava/sql/ResultSet;")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,8,"getCatalogs","()Ljava/sql/ResultSet;")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,9,"getCatalogSeparator","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,10,"getCatalogTerm","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,11,"getColumnPrivileges","(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/sql/ResultSet;")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,12,"getColumns","(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/sql/ResultSet;")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,13,"getConnection","()Ljava/sql/Connection;")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,14,"getCrossReference","(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/sql/ResultSet;")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,15,"getDatabaseMajorVersion","()I")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,16,"getDatabaseMinorVersion","()I")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,17,"getDatabaseProductName","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,18,"getDatabaseProductVersion","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,19,"getDefaultTransactionIsolation","()I")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,20,"getDriverMajorVersion","()I")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,21,"getDriverMinorVersion","()I")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,22,"getDriverName","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,23,"getDriverVersion","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,24,"getExportedKeys","(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/sql/ResultSet;")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,25,"getExtraNameCharacters","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,26,"getIdentifierQuoteString","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,27,"getImportedKeys","(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/sql/ResultSet;")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,28,"getIndexInfo","(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ZZ)Ljava/sql/ResultSet;")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,29,"getJDBCMajorVersion","()I")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,30,"getJDBCMinorVersion","()I")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,31,"getMaxBinaryLiteralLength","()I")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,32,"getMaxCatalogNameLength","()I")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,33,"getMaxCharLiteralLength","()I")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,34,"getMaxColumnNameLength","()I")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,35,"getMaxColumnsInGroupBy","()I")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,36,"getMaxColumnsInIndex","()I")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,37,"getMaxColumnsInOrderBy","()I")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,38,"getMaxColumnsInSelect","()I")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,39,"getMaxColumnsInTable","()I")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,40,"getMaxConnections","()I")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,41,"getMaxCursorNameLength","()I")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,42,"getMaxIndexLength","()I")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,43,"getMaxProcedureNameLength","()I")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,44,"getMaxRowSize","()I")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,45,"getMaxSchemaNameLength","()I")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,46,"getMaxStatementLength","()I")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,47,"getMaxStatements","()I")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,48,"getMaxTableNameLength","()I")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,49,"getMaxTablesInSelect","()I")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,50,"getMaxUserNameLength","()I")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,51,"getNumericFunctions","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,52,"getPrimaryKeys","(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/sql/ResultSet;")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,53,"getProcedureColumns","(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/sql/ResultSet;")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,54,"getProcedures","(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/sql/ResultSet;")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,55,"getProcedureTerm","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,56,"getResultSetHoldability","()I")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,57,"getSchemas","()Ljava/sql/ResultSet;")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,58,"getSchemaTerm","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,59,"getSearchStringEscape","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,60,"getSQLKeywords","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,61,"getSQLStateType","()I")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,62,"getStringFunctions","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,63,"getSuperTables","(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/sql/ResultSet;")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,64,"getSuperTypes","(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/sql/ResultSet;")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,65,"getSystemFunctions","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,66,"getTablePrivileges","(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/sql/ResultSet;")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,67,"getTables","(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;[java.lang.String)Ljava/sql/ResultSet;")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,68,"getTableTypes","()Ljava/sql/ResultSet;")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,69,"getTimeDateFunctions","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,70,"getTypeInfo","()Ljava/sql/ResultSet;")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,71,"getUDTs","(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;[I)Ljava/sql/ResultSet;")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,72,"getURL","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,73,"getUserName","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,74,"getVersionColumns","(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/sql/ResultSet;")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,75,"insertsAreDetected","(I)Z")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,76,"isCatalogAtStart","()Z")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,77,"isReadOnly","()Z")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,78,"locatorsUpdateCopy","()Z")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,79,"nullPlusNonNullIsNull","()Z")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,80,"nullsAreSortedAtEnd","()Z")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,81,"nullsAreSortedAtStart","()Z")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,82,"nullsAreSortedHigh","()Z")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,83,"nullsAreSortedLow","()Z")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,84,"othersDeletesAreVisible","(I)Z")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,85,"othersInsertsAreVisible","(I)Z")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,86,"othersUpdatesAreVisible","(I)Z")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,87,"ownDeletesAreVisible","(I)Z")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,88,"ownInsertsAreVisible","(I)Z")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,89,"ownUpdatesAreVisible","(I)Z")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,90,"storesLowerCaseIdentifiers","()Z")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,91,"storesLowerCaseQuotedIdentifiers","()Z")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,92,"storesMixedCaseIdentifiers","()Z")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,93,"storesMixedCaseQuotedIdentifiers","()Z")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,94,"storesUpperCaseIdentifiers","()Z")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,95,"storesUpperCaseQuotedIdentifiers","()Z")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,96,"supportsAlterTableWithAddColumn","()Z")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,97,"supportsAlterTableWithDropColumn","()Z")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,98,"supportsANSI92EntryLevelSQL","()Z")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,99,"supportsANSI92FullSQL","()Z")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,100,"supportsANSI92IntermediateSQL","()Z")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,101,"supportsBatchUpdates","()Z")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,102,"supportsCatalogsInDataManipulation","()Z")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,103,"supportsCatalogsInIndexDefinitions","()Z")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,104,"supportsCatalogsInPrivilegeDefinitions","()Z")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,105,"supportsCatalogsInProcedureCalls","()Z")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,106,"supportsCatalogsInTableDefinitions","()Z")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,107,"supportsColumnAliasing","()Z")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,108,"supportsConvert","()Z")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,109,"supportsConvert","(II)Z")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,110,"supportsCoreSQLGrammar","()Z")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,111,"supportsCorrelatedSubqueries","()Z")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,112,"supportsDataDefinitionAndDataManipulationTransactions","()Z")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,113,"supportsDataManipulationTransactionsOnly","()Z")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,114,"supportsDifferentTableCorrelationNames","()Z")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,115,"supportsExpressionsInOrderBy","()Z")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,116,"supportsExtendedSQLGrammar","()Z")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,117,"supportsFullOuterJoins","()Z")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,118,"supportsGetGeneratedKeys","()Z")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,119,"supportsGroupBy","()Z")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,120,"supportsGroupByBeyondSelect","()Z")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,121,"supportsGroupByUnrelated","()Z")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,122,"supportsIntegrityEnhancementFacility","()Z")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,123,"supportsLikeEscapeClause","()Z")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,124,"supportsLimitedOuterJoins","()Z")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,125,"supportsMinimumSQLGrammar","()Z")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,126,"supportsMixedCaseIdentifiers","()Z")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,127,"supportsMixedCaseQuotedIdentifiers","()Z")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,128,"supportsMultipleOpenResults","()Z")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,129,"supportsMultipleResultSets","()Z")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,130,"supportsMultipleTransactions","()Z")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,131,"supportsNamedParameters","()Z")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,132,"supportsNonNullableColumns","()Z")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,133,"supportsOpenCursorsAcrossCommit","()Z")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,134,"supportsOpenCursorsAcrossRollback","()Z")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,135,"supportsOpenStatementsAcrossCommit","()Z")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,136,"supportsOpenStatementsAcrossRollback","()Z")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,137,"supportsOrderByUnrelated","()Z")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,138,"supportsOuterJoins","()Z")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,139,"supportsPositionedDelete","()Z")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,140,"supportsPositionedUpdate","()Z")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,141,"supportsResultSetConcurrency","(II)Z")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,142,"supportsResultSetHoldability","(I)Z")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,143,"supportsResultSetType","(I)Z")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,144,"supportsSavepoints","()Z")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,145,"supportsSchemasInDataManipulation","()Z")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,146,"supportsSchemasInIndexDefinitions","()Z")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,147,"supportsSchemasInPrivilegeDefinitions","()Z")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,148,"supportsSchemasInProcedureCalls","()Z")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,149,"supportsSchemasInTableDefinitions","()Z")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,150,"supportsSelectForUpdate","()Z")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,151,"supportsStatementPooling","()Z")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,152,"supportsStoredProcedures","()Z")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,153,"supportsSubqueriesInComparisons","()Z")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,154,"supportsSubqueriesInExists","()Z")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,155,"supportsSubqueriesInIns","()Z")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,156,"supportsSubqueriesInQuantifieds","()Z")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,157,"supportsTableCorrelationNames","()Z")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,158,"supportsTransactionIsolationLevel","(I)Z")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,159,"supportsTransactions","()Z")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,160,"supportsUnion","()Z")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,161,"supportsUnionAll","()Z")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,162,"updatesAreDetected","(I)Z")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,163,"usesLocalFilePerTable","()Z")
J2CPP_DEFINE_METHOD(java::sql::DatabaseMetaData,164,"usesLocalFiles","()Z")
J2CPP_DEFINE_FIELD(java::sql::DatabaseMetaData,0,"attributeNoNulls","S")
J2CPP_DEFINE_FIELD(java::sql::DatabaseMetaData,1,"attributeNullable","S")
J2CPP_DEFINE_FIELD(java::sql::DatabaseMetaData,2,"attributeNullableUnknown","S")
J2CPP_DEFINE_FIELD(java::sql::DatabaseMetaData,3,"bestRowNotPseudo","I")
J2CPP_DEFINE_FIELD(java::sql::DatabaseMetaData,4,"bestRowPseudo","I")
J2CPP_DEFINE_FIELD(java::sql::DatabaseMetaData,5,"bestRowSession","I")
J2CPP_DEFINE_FIELD(java::sql::DatabaseMetaData,6,"bestRowTemporary","I")
J2CPP_DEFINE_FIELD(java::sql::DatabaseMetaData,7,"bestRowTransaction","I")
J2CPP_DEFINE_FIELD(java::sql::DatabaseMetaData,8,"bestRowUnknown","I")
J2CPP_DEFINE_FIELD(java::sql::DatabaseMetaData,9,"columnNoNulls","I")
J2CPP_DEFINE_FIELD(java::sql::DatabaseMetaData,10,"columnNullable","I")
J2CPP_DEFINE_FIELD(java::sql::DatabaseMetaData,11,"columnNullableUnknown","I")
J2CPP_DEFINE_FIELD(java::sql::DatabaseMetaData,12,"importedKeyCascade","I")
J2CPP_DEFINE_FIELD(java::sql::DatabaseMetaData,13,"importedKeyInitiallyDeferred","I")
J2CPP_DEFINE_FIELD(java::sql::DatabaseMetaData,14,"importedKeyInitiallyImmediate","I")
J2CPP_DEFINE_FIELD(java::sql::DatabaseMetaData,15,"importedKeyNoAction","I")
J2CPP_DEFINE_FIELD(java::sql::DatabaseMetaData,16,"importedKeyNotDeferrable","I")
J2CPP_DEFINE_FIELD(java::sql::DatabaseMetaData,17,"importedKeyRestrict","I")
J2CPP_DEFINE_FIELD(java::sql::DatabaseMetaData,18,"importedKeySetDefault","I")
J2CPP_DEFINE_FIELD(java::sql::DatabaseMetaData,19,"importedKeySetNull","I")
J2CPP_DEFINE_FIELD(java::sql::DatabaseMetaData,20,"procedureColumnIn","I")
J2CPP_DEFINE_FIELD(java::sql::DatabaseMetaData,21,"procedureColumnInOut","I")
J2CPP_DEFINE_FIELD(java::sql::DatabaseMetaData,22,"procedureColumnOut","I")
J2CPP_DEFINE_FIELD(java::sql::DatabaseMetaData,23,"procedureColumnResult","I")
J2CPP_DEFINE_FIELD(java::sql::DatabaseMetaData,24,"procedureColumnReturn","I")
J2CPP_DEFINE_FIELD(java::sql::DatabaseMetaData,25,"procedureColumnUnknown","I")
J2CPP_DEFINE_FIELD(java::sql::DatabaseMetaData,26,"procedureNoNulls","I")
J2CPP_DEFINE_FIELD(java::sql::DatabaseMetaData,27,"procedureNoResult","I")
J2CPP_DEFINE_FIELD(java::sql::DatabaseMetaData,28,"procedureNullable","I")
J2CPP_DEFINE_FIELD(java::sql::DatabaseMetaData,29,"procedureNullableUnknown","I")
J2CPP_DEFINE_FIELD(java::sql::DatabaseMetaData,30,"procedureResultUnknown","I")
J2CPP_DEFINE_FIELD(java::sql::DatabaseMetaData,31,"procedureReturnsResult","I")
J2CPP_DEFINE_FIELD(java::sql::DatabaseMetaData,32,"sqlStateSQL99","I")
J2CPP_DEFINE_FIELD(java::sql::DatabaseMetaData,33,"sqlStateXOpen","I")
J2CPP_DEFINE_FIELD(java::sql::DatabaseMetaData,34,"tableIndexClustered","S")
J2CPP_DEFINE_FIELD(java::sql::DatabaseMetaData,35,"tableIndexHashed","S")
J2CPP_DEFINE_FIELD(java::sql::DatabaseMetaData,36,"tableIndexOther","S")
J2CPP_DEFINE_FIELD(java::sql::DatabaseMetaData,37,"tableIndexStatistic","S")
J2CPP_DEFINE_FIELD(java::sql::DatabaseMetaData,38,"typeNoNulls","I")
J2CPP_DEFINE_FIELD(java::sql::DatabaseMetaData,39,"typeNullable","I")
J2CPP_DEFINE_FIELD(java::sql::DatabaseMetaData,40,"typeNullableUnknown","I")
J2CPP_DEFINE_FIELD(java::sql::DatabaseMetaData,41,"typePredBasic","I")
J2CPP_DEFINE_FIELD(java::sql::DatabaseMetaData,42,"typePredChar","I")
J2CPP_DEFINE_FIELD(java::sql::DatabaseMetaData,43,"typePredNone","I")
J2CPP_DEFINE_FIELD(java::sql::DatabaseMetaData,44,"typeSearchable","I")
J2CPP_DEFINE_FIELD(java::sql::DatabaseMetaData,45,"versionColumnNotPseudo","I")
J2CPP_DEFINE_FIELD(java::sql::DatabaseMetaData,46,"versionColumnPseudo","I")
J2CPP_DEFINE_FIELD(java::sql::DatabaseMetaData,47,"versionColumnUnknown","I")

} //namespace j2cpp

#endif //J2CPP_JAVA_SQL_DATABASEMETADATA_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
