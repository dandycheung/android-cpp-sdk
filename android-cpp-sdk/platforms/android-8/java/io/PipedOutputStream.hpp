/*================================================================================
  code generated by: java2cpp
  class: java.io.PipedOutputStream
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_IO_PIPEDOUTPUTSTREAM_HPP_DECL
#define J2CPP_JAVA_IO_PIPEDOUTPUTSTREAM_HPP_DECL


namespace j2cpp { namespace java { namespace io { class PipedInputStream; } } }


#include <java/io/PipedInputStream.hpp>


namespace j2cpp {

namespace java { namespace io {

	class PipedOutputStream;
	class PipedOutputStream
		: public cpp_object<PipedOutputStream>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)

		PipedOutputStream(jobject jobj)
		: cpp_object<PipedOutputStream>(jobj)
		{
		}

		void close();
		void connect(local_ref< java::io::PipedInputStream > const&);
		void flush();
		void write(local_ref< cpp_byte_array<1> > const&, cpp_int const&, cpp_int const&);
		void write(cpp_int const&);
	}; //class PipedOutputStream

} //namespace io
} //namespace java


} //namespace j2cpp

#endif //J2CPP_JAVA_IO_PIPEDOUTPUTSTREAM_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_IO_PIPEDOUTPUTSTREAM_HPP_IMPL
#define J2CPP_JAVA_IO_PIPEDOUTPUTSTREAM_HPP_IMPL

namespace j2cpp {


template <>
local_ref< java::io::PipedOutputStream > create< java::io::PipedOutputStream>()
{
	return local_ref< java::io::PipedOutputStream >(
		environment::get().get_jenv()->NewObject(
			get_class<java::io::PipedOutputStream::J2CPP_CLASS_NAME>(),
			get_method_id<java::io::PipedOutputStream::J2CPP_CLASS_NAME, java::io::PipedOutputStream::J2CPP_METHOD_NAME(0), java::io::PipedOutputStream::J2CPP_METHOD_SIGNATURE(0), false>()
		)
	);
}

template <>
local_ref< java::io::PipedOutputStream > create< java::io::PipedOutputStream>(local_ref< java::io::PipedInputStream > const &a0)
{
	return local_ref< java::io::PipedOutputStream >(
		environment::get().get_jenv()->NewObject(
			get_class<java::io::PipedOutputStream::J2CPP_CLASS_NAME>(),
			get_method_id<java::io::PipedOutputStream::J2CPP_CLASS_NAME, java::io::PipedOutputStream::J2CPP_METHOD_NAME(1), java::io::PipedOutputStream::J2CPP_METHOD_SIGNATURE(1), false>(),
			a0.get_jtype()
		)
	);
}

void java::io::PipedOutputStream::close()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>()
		)
	);
}

void java::io::PipedOutputStream::connect(local_ref< java::io::PipedInputStream > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>(),
			a0.get_jtype()
		)
	);
}

void java::io::PipedOutputStream::flush()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>()
		)
	);
}

void java::io::PipedOutputStream::write(local_ref< cpp_byte_array<1> > const &a0, cpp_int const &a1, cpp_int const &a2)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

void java::io::PipedOutputStream::write(cpp_int const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>(),
			a0.get_jtype()
		)
	);
}


J2CPP_DEFINE_CLASS(java::io::PipedOutputStream,"java/io/PipedOutputStream")
J2CPP_DEFINE_METHOD(java::io::PipedOutputStream,0,"<init>","()V")
J2CPP_DEFINE_METHOD(java::io::PipedOutputStream,1,"<init>","(Ljava/io/PipedInputStream;)V")
J2CPP_DEFINE_METHOD(java::io::PipedOutputStream,2,"close","()V")
J2CPP_DEFINE_METHOD(java::io::PipedOutputStream,3,"connect","(Ljava/io/PipedInputStream;)V")
J2CPP_DEFINE_METHOD(java::io::PipedOutputStream,4,"flush","()V")
J2CPP_DEFINE_METHOD(java::io::PipedOutputStream,5,"write","([BII)V")
J2CPP_DEFINE_METHOD(java::io::PipedOutputStream,6,"write","(I)V")

} //namespace j2cpp

#endif //J2CPP_JAVA_IO_PIPEDOUTPUTSTREAM_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
