/*================================================================================
  code generated by: java2cpp
  class: java.io.StringWriter
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_IO_STRINGWRITER_HPP_DECL
#define J2CPP_JAVA_IO_STRINGWRITER_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace lang { class StringBuffer; } } }
namespace j2cpp { namespace java { namespace lang { class CharSequence; } } }
namespace j2cpp { namespace java { namespace lang { class Appendable; } } }
namespace j2cpp { namespace java { namespace io { class Writer; } } }


#include <java/io/Writer.hpp>
#include <java/lang/Appendable.hpp>
#include <java/lang/CharSequence.hpp>
#include <java/lang/String.hpp>
#include <java/lang/StringBuffer.hpp>


namespace j2cpp {

namespace java { namespace io {

	class StringWriter;
	class StringWriter
		: public cpp_object<StringWriter>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_METHOD(12)
		J2CPP_DECLARE_METHOD(13)
		J2CPP_DECLARE_METHOD(14)
		J2CPP_DECLARE_METHOD(15)
		J2CPP_DECLARE_METHOD(16)
		J2CPP_DECLARE_METHOD(17)
		J2CPP_DECLARE_METHOD(18)

		StringWriter(jobject jobj)
		: cpp_object<StringWriter>(jobj)
		{
		}

		void close();
		void flush();
		local_ref< java::lang::StringBuffer > getBuffer();
		local_ref< java::lang::String > toString();
		void write(local_ref< cpp_char_array<1> > const&, cpp_int const&, cpp_int const&);
		void write(cpp_int const&);
		void write(local_ref< java::lang::String > const&);
		void write(local_ref< java::lang::String > const&, cpp_int const&, cpp_int const&);
		local_ref< java::io::StringWriter > append(cpp_char const&);
		local_ref< java::io::StringWriter > append(local_ref< java::lang::CharSequence > const&);
		local_ref< java::io::StringWriter > append(local_ref< java::lang::CharSequence > const&, cpp_int const&, cpp_int const&);
		local_ref< java::io::Writer > append_1(local_ref< java::lang::CharSequence > const&, cpp_int const&, cpp_int const&);
		local_ref< java::io::Writer > append_1(local_ref< java::lang::CharSequence > const&);
		local_ref< java::io::Writer > append_1(cpp_char const&);
		local_ref< java::lang::Appendable > append_2(local_ref< java::lang::CharSequence > const&, cpp_int const&, cpp_int const&);
		local_ref< java::lang::Appendable > append_2(local_ref< java::lang::CharSequence > const&);
		local_ref< java::lang::Appendable > append_2(cpp_char const&);
	}; //class StringWriter

} //namespace io
} //namespace java


} //namespace j2cpp

#endif //J2CPP_JAVA_IO_STRINGWRITER_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_IO_STRINGWRITER_HPP_IMPL
#define J2CPP_JAVA_IO_STRINGWRITER_HPP_IMPL

namespace j2cpp {


template <>
local_ref< java::io::StringWriter > create< java::io::StringWriter>()
{
	return local_ref< java::io::StringWriter >(
		environment::get().get_jenv()->NewObject(
			get_class<java::io::StringWriter::J2CPP_CLASS_NAME>(),
			get_method_id<java::io::StringWriter::J2CPP_CLASS_NAME, java::io::StringWriter::J2CPP_METHOD_NAME(0), java::io::StringWriter::J2CPP_METHOD_SIGNATURE(0), false>()
		)
	);
}

template <>
local_ref< java::io::StringWriter > create< java::io::StringWriter>(cpp_int const &a0)
{
	return local_ref< java::io::StringWriter >(
		environment::get().get_jenv()->NewObject(
			get_class<java::io::StringWriter::J2CPP_CLASS_NAME>(),
			get_method_id<java::io::StringWriter::J2CPP_CLASS_NAME, java::io::StringWriter::J2CPP_METHOD_NAME(1), java::io::StringWriter::J2CPP_METHOD_SIGNATURE(1), false>(),
			a0.get_jtype()
		)
	);
}

void java::io::StringWriter::close()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>()
		)
	);
}

void java::io::StringWriter::flush()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>()
		)
	);
}

local_ref< java::lang::StringBuffer > java::io::StringWriter::getBuffer()
{
	return local_ref< java::lang::StringBuffer >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>()
		)
	);
}

local_ref< java::lang::String > java::io::StringWriter::toString()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>()
		)
	);
}

void java::io::StringWriter::write(local_ref< cpp_char_array<1> > const &a0, cpp_int const &a1, cpp_int const &a2)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

void java::io::StringWriter::write(cpp_int const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(7), J2CPP_METHOD_SIGNATURE(7), false>(),
			a0.get_jtype()
		)
	);
}

void java::io::StringWriter::write(local_ref< java::lang::String > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(8), J2CPP_METHOD_SIGNATURE(8), false>(),
			a0.get_jtype()
		)
	);
}

void java::io::StringWriter::write(local_ref< java::lang::String > const &a0, cpp_int const &a1, cpp_int const &a2)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(9), J2CPP_METHOD_SIGNATURE(9), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

local_ref< java::io::StringWriter > java::io::StringWriter::append(cpp_char const &a0)
{
	return local_ref< java::io::StringWriter >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(10), J2CPP_METHOD_SIGNATURE(10), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::io::StringWriter > java::io::StringWriter::append(local_ref< java::lang::CharSequence > const &a0)
{
	return local_ref< java::io::StringWriter >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(11), J2CPP_METHOD_SIGNATURE(11), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::io::StringWriter > java::io::StringWriter::append(local_ref< java::lang::CharSequence > const &a0, cpp_int const &a1, cpp_int const &a2)
{
	return local_ref< java::io::StringWriter >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(12), J2CPP_METHOD_SIGNATURE(12), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

local_ref< java::io::Writer > java::io::StringWriter::append_1(local_ref< java::lang::CharSequence > const &a0, cpp_int const &a1, cpp_int const &a2)
{
	return local_ref< java::io::Writer >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(13), J2CPP_METHOD_SIGNATURE(13), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

local_ref< java::io::Writer > java::io::StringWriter::append_1(local_ref< java::lang::CharSequence > const &a0)
{
	return local_ref< java::io::Writer >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(14), J2CPP_METHOD_SIGNATURE(14), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::io::Writer > java::io::StringWriter::append_1(cpp_char const &a0)
{
	return local_ref< java::io::Writer >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(15), J2CPP_METHOD_SIGNATURE(15), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::Appendable > java::io::StringWriter::append_2(local_ref< java::lang::CharSequence > const &a0, cpp_int const &a1, cpp_int const &a2)
{
	return local_ref< java::lang::Appendable >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(16), J2CPP_METHOD_SIGNATURE(16), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

local_ref< java::lang::Appendable > java::io::StringWriter::append_2(local_ref< java::lang::CharSequence > const &a0)
{
	return local_ref< java::lang::Appendable >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(17), J2CPP_METHOD_SIGNATURE(17), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::Appendable > java::io::StringWriter::append_2(cpp_char const &a0)
{
	return local_ref< java::lang::Appendable >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(18), J2CPP_METHOD_SIGNATURE(18), false>(),
			a0.get_jtype()
		)
	);
}


J2CPP_DEFINE_CLASS(java::io::StringWriter,"java/io/StringWriter")
J2CPP_DEFINE_METHOD(java::io::StringWriter,0,"<init>","()V")
J2CPP_DEFINE_METHOD(java::io::StringWriter,1,"<init>","(I)V")
J2CPP_DEFINE_METHOD(java::io::StringWriter,2,"close","()V")
J2CPP_DEFINE_METHOD(java::io::StringWriter,3,"flush","()V")
J2CPP_DEFINE_METHOD(java::io::StringWriter,4,"getBuffer","()Ljava/lang/StringBuffer;")
J2CPP_DEFINE_METHOD(java::io::StringWriter,5,"toString","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::io::StringWriter,6,"write","([CII)V")
J2CPP_DEFINE_METHOD(java::io::StringWriter,7,"write","(I)V")
J2CPP_DEFINE_METHOD(java::io::StringWriter,8,"write","(Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(java::io::StringWriter,9,"write","(Ljava/lang/String;II)V")
J2CPP_DEFINE_METHOD(java::io::StringWriter,10,"append","(C)Ljava/io/StringWriter;")
J2CPP_DEFINE_METHOD(java::io::StringWriter,11,"append","(Ljava/lang/CharSequence;)Ljava/io/StringWriter;")
J2CPP_DEFINE_METHOD(java::io::StringWriter,12,"append","(Ljava/lang/CharSequence;II)Ljava/io/StringWriter;")
J2CPP_DEFINE_METHOD(java::io::StringWriter,13,"append","(Ljava/lang/CharSequence;II)Ljava/io/Writer;")
J2CPP_DEFINE_METHOD(java::io::StringWriter,14,"append","(Ljava/lang/CharSequence;)Ljava/io/Writer;")
J2CPP_DEFINE_METHOD(java::io::StringWriter,15,"append","(C)Ljava/io/Writer;")
J2CPP_DEFINE_METHOD(java::io::StringWriter,16,"append","(Ljava/lang/CharSequence;II)Ljava/lang/Appendable;")
J2CPP_DEFINE_METHOD(java::io::StringWriter,17,"append","(Ljava/lang/CharSequence;)Ljava/lang/Appendable;")
J2CPP_DEFINE_METHOD(java::io::StringWriter,18,"append","(C)Ljava/lang/Appendable;")

} //namespace j2cpp

#endif //J2CPP_JAVA_IO_STRINGWRITER_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
