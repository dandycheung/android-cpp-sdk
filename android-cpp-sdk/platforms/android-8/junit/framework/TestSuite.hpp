/*================================================================================
  code generated by: java2cpp
  class: junit.framework.TestSuite
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JUNIT_FRAMEWORK_TESTSUITE_HPP_DECL
#define J2CPP_JUNIT_FRAMEWORK_TESTSUITE_HPP_DECL


namespace j2cpp { namespace junit { namespace framework { class Test; } } }
namespace j2cpp { namespace junit { namespace framework { class TestResult; } } }
namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace lang { class Class; } } }
namespace j2cpp { namespace java { namespace lang { namespace reflect { class Constructor; } } } }
namespace j2cpp { namespace java { namespace util { class Enumeration; } } }


#include <java/lang/Class.hpp>
#include <java/lang/String.hpp>
#include <java/lang/reflect/Constructor.hpp>
#include <java/util/Enumeration.hpp>
#include <junit/framework/Test.hpp>
#include <junit/framework/TestResult.hpp>


namespace j2cpp {

namespace junit { namespace framework {

	class TestSuite;
	class TestSuite
		: public cpp_object<TestSuite>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_METHOD(12)
		J2CPP_DECLARE_METHOD(13)
		J2CPP_DECLARE_METHOD(14)
		J2CPP_DECLARE_METHOD(15)
		J2CPP_DECLARE_METHOD(16)

		TestSuite(jobject jobj)
		: cpp_object<TestSuite>(jobj)
		{
		}

		void addTest(local_ref< junit::framework::Test > const&);
		void addTestSuite(local_ref< java::lang::Class > const&);
		static local_ref< junit::framework::Test > createTest(local_ref< java::lang::Class > const&, local_ref< java::lang::String > const&);
		cpp_int countTestCases();
		static local_ref< java::lang::reflect::Constructor > getTestConstructor(local_ref< java::lang::Class > const&);
		void run(local_ref< junit::framework::TestResult > const&);
		void runTest(local_ref< junit::framework::Test > const&, local_ref< junit::framework::TestResult > const&);
		local_ref< junit::framework::Test > testAt(cpp_int const&);
		cpp_int testCount();
		local_ref< java::util::Enumeration > tests();
		local_ref< java::lang::String > toString();
		void setName(local_ref< java::lang::String > const&);
		local_ref< java::lang::String > getName();
	}; //class TestSuite

} //namespace framework
} //namespace junit


} //namespace j2cpp

#endif //J2CPP_JUNIT_FRAMEWORK_TESTSUITE_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JUNIT_FRAMEWORK_TESTSUITE_HPP_IMPL
#define J2CPP_JUNIT_FRAMEWORK_TESTSUITE_HPP_IMPL

namespace j2cpp {


template <>
local_ref< junit::framework::TestSuite > create< junit::framework::TestSuite>()
{
	return local_ref< junit::framework::TestSuite >(
		environment::get().get_jenv()->NewObject(
			get_class<junit::framework::TestSuite::J2CPP_CLASS_NAME>(),
			get_method_id<junit::framework::TestSuite::J2CPP_CLASS_NAME, junit::framework::TestSuite::J2CPP_METHOD_NAME(0), junit::framework::TestSuite::J2CPP_METHOD_SIGNATURE(0), false>()
		)
	);
}

template <>
local_ref< junit::framework::TestSuite > create< junit::framework::TestSuite>(local_ref< java::lang::Class > const &a0, local_ref< java::lang::String > const &a1)
{
	return local_ref< junit::framework::TestSuite >(
		environment::get().get_jenv()->NewObject(
			get_class<junit::framework::TestSuite::J2CPP_CLASS_NAME>(),
			get_method_id<junit::framework::TestSuite::J2CPP_CLASS_NAME, junit::framework::TestSuite::J2CPP_METHOD_NAME(1), junit::framework::TestSuite::J2CPP_METHOD_SIGNATURE(1), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

template <>
local_ref< junit::framework::TestSuite > create< junit::framework::TestSuite>(local_ref< java::lang::Class > const &a0)
{
	return local_ref< junit::framework::TestSuite >(
		environment::get().get_jenv()->NewObject(
			get_class<junit::framework::TestSuite::J2CPP_CLASS_NAME>(),
			get_method_id<junit::framework::TestSuite::J2CPP_CLASS_NAME, junit::framework::TestSuite::J2CPP_METHOD_NAME(2), junit::framework::TestSuite::J2CPP_METHOD_SIGNATURE(2), false>(),
			a0.get_jtype()
		)
	);
}

template <>
local_ref< junit::framework::TestSuite > create< junit::framework::TestSuite>(local_ref< java::lang::String > const &a0)
{
	return local_ref< junit::framework::TestSuite >(
		environment::get().get_jenv()->NewObject(
			get_class<junit::framework::TestSuite::J2CPP_CLASS_NAME>(),
			get_method_id<junit::framework::TestSuite::J2CPP_CLASS_NAME, junit::framework::TestSuite::J2CPP_METHOD_NAME(3), junit::framework::TestSuite::J2CPP_METHOD_SIGNATURE(3), false>(),
			a0.get_jtype()
		)
	);
}

void junit::framework::TestSuite::addTest(local_ref< junit::framework::Test > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>(),
			a0.get_jtype()
		)
	);
}

void junit::framework::TestSuite::addTestSuite(local_ref< java::lang::Class > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< junit::framework::Test > junit::framework::TestSuite::createTest(local_ref< java::lang::Class > const &a0, local_ref< java::lang::String > const &a1)
{
	return local_ref< junit::framework::Test >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), true>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_int junit::framework::TestSuite::countTestCases()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(7), J2CPP_METHOD_SIGNATURE(7), false>()
		)
	);
}

local_ref< java::lang::reflect::Constructor > junit::framework::TestSuite::getTestConstructor(local_ref< java::lang::Class > const &a0)
{
	return local_ref< java::lang::reflect::Constructor >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(8), J2CPP_METHOD_SIGNATURE(8), true>(),
			a0.get_jtype()
		)
	);
}

void junit::framework::TestSuite::run(local_ref< junit::framework::TestResult > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(9), J2CPP_METHOD_SIGNATURE(9), false>(),
			a0.get_jtype()
		)
	);
}

void junit::framework::TestSuite::runTest(local_ref< junit::framework::Test > const &a0, local_ref< junit::framework::TestResult > const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(10), J2CPP_METHOD_SIGNATURE(10), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< junit::framework::Test > junit::framework::TestSuite::testAt(cpp_int const &a0)
{
	return local_ref< junit::framework::Test >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(11), J2CPP_METHOD_SIGNATURE(11), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int junit::framework::TestSuite::testCount()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(12), J2CPP_METHOD_SIGNATURE(12), false>()
		)
	);
}

local_ref< java::util::Enumeration > junit::framework::TestSuite::tests()
{
	return local_ref< java::util::Enumeration >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(13), J2CPP_METHOD_SIGNATURE(13), false>()
		)
	);
}

local_ref< java::lang::String > junit::framework::TestSuite::toString()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(14), J2CPP_METHOD_SIGNATURE(14), false>()
		)
	);
}

void junit::framework::TestSuite::setName(local_ref< java::lang::String > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(15), J2CPP_METHOD_SIGNATURE(15), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::String > junit::framework::TestSuite::getName()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(16), J2CPP_METHOD_SIGNATURE(16), false>()
		)
	);
}


J2CPP_DEFINE_CLASS(junit::framework::TestSuite,"junit/framework/TestSuite")
J2CPP_DEFINE_METHOD(junit::framework::TestSuite,0,"<init>","()V")
J2CPP_DEFINE_METHOD(junit::framework::TestSuite,1,"<init>","(Ljava/lang/Class;Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(junit::framework::TestSuite,2,"<init>","(Ljava/lang/Class;)V")
J2CPP_DEFINE_METHOD(junit::framework::TestSuite,3,"<init>","(Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(junit::framework::TestSuite,4,"addTest","(Ljunit/framework/Test;)V")
J2CPP_DEFINE_METHOD(junit::framework::TestSuite,5,"addTestSuite","(Ljava/lang/Class;)V")
J2CPP_DEFINE_METHOD(junit::framework::TestSuite,6,"createTest","(Ljava/lang/Class;Ljava/lang/String;)Ljunit/framework/Test;")
J2CPP_DEFINE_METHOD(junit::framework::TestSuite,7,"countTestCases","()I")
J2CPP_DEFINE_METHOD(junit::framework::TestSuite,8,"getTestConstructor","(Ljava/lang/Class;)Ljava/lang/reflect/Constructor;")
J2CPP_DEFINE_METHOD(junit::framework::TestSuite,9,"run","(Ljunit/framework/TestResult;)V")
J2CPP_DEFINE_METHOD(junit::framework::TestSuite,10,"runTest","(Ljunit/framework/Test;Ljunit/framework/TestResult;)V")
J2CPP_DEFINE_METHOD(junit::framework::TestSuite,11,"testAt","(I)Ljunit/framework/Test;")
J2CPP_DEFINE_METHOD(junit::framework::TestSuite,12,"testCount","()I")
J2CPP_DEFINE_METHOD(junit::framework::TestSuite,13,"tests","()Ljava/util/Enumeration;")
J2CPP_DEFINE_METHOD(junit::framework::TestSuite,14,"toString","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(junit::framework::TestSuite,15,"setName","(Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(junit::framework::TestSuite,16,"getName","()Ljava/lang/String;")

} //namespace j2cpp

#endif //J2CPP_JUNIT_FRAMEWORK_TESTSUITE_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
