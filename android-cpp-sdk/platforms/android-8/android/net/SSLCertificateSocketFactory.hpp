/*================================================================================
  code generated by: java2cpp
  class: android.net.SSLCertificateSocketFactory
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_NET_SSLCERTIFICATESOCKETFACTORY_HPP_DECL
#define J2CPP_ANDROID_NET_SSLCERTIFICATESOCKETFACTORY_HPP_DECL


namespace j2cpp { namespace org { namespace apache { namespace http { namespace conn { namespace ssl { class SSLSocketFactory; } } } } } }
namespace j2cpp { namespace android { namespace net { class SSLSessionCache; } } }
namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace net { class InetAddress; } } }
namespace j2cpp { namespace java { namespace net { class Socket; } } }
namespace j2cpp { namespace javax { namespace net { class SocketFactory; } } }
namespace j2cpp { namespace javax { namespace net { namespace ssl { class SSLSocketFactory; } } } }


#include <android/net/SSLSessionCache.hpp>
#include <java/lang/String.hpp>
#include <java/net/InetAddress.hpp>
#include <java/net/Socket.hpp>
#include <javax/net/SocketFactory.hpp>
#include <javax/net/ssl/SSLSocketFactory.hpp>
#include <org/apache/http/conn/ssl/SSLSocketFactory.hpp>


namespace j2cpp {

namespace android { namespace net {

	class SSLCertificateSocketFactory;
	class SSLCertificateSocketFactory
		: public cpp_object<SSLCertificateSocketFactory>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_METHOD(12)

		SSLCertificateSocketFactory(jobject jobj)
		: cpp_object<SSLCertificateSocketFactory>(jobj)
		{
		}

		static local_ref< javax::net::SocketFactory > getDefault(cpp_int const&);
		static local_ref< javax::net::ssl::SSLSocketFactory > getDefault(cpp_int const&, local_ref< android::net::SSLSessionCache > const&);
		static local_ref< javax::net::ssl::SSLSocketFactory > getInsecure(cpp_int const&, local_ref< android::net::SSLSessionCache > const&);
		static local_ref< org::apache::http::conn::ssl::SSLSocketFactory > getHttpSocketFactory(cpp_int const&, local_ref< android::net::SSLSessionCache > const&);
		local_ref< java::net::Socket > createSocket(local_ref< java::net::Socket > const&, local_ref< java::lang::String > const&, cpp_int const&, cpp_boolean const&);
		local_ref< java::net::Socket > createSocket();
		local_ref< java::net::Socket > createSocket(local_ref< java::net::InetAddress > const&, cpp_int const&, local_ref< java::net::InetAddress > const&, cpp_int const&);
		local_ref< java::net::Socket > createSocket(local_ref< java::net::InetAddress > const&, cpp_int const&);
		local_ref< java::net::Socket > createSocket(local_ref< java::lang::String > const&, cpp_int const&, local_ref< java::net::InetAddress > const&, cpp_int const&);
		local_ref< java::net::Socket > createSocket(local_ref< java::lang::String > const&, cpp_int const&);
		local_ref< cpp_object_array<java::lang::String, 1> > getDefaultCipherSuites();
		local_ref< cpp_object_array<java::lang::String, 1> > getSupportedCipherSuites();
	}; //class SSLCertificateSocketFactory

} //namespace net
} //namespace android


} //namespace j2cpp

#endif //J2CPP_ANDROID_NET_SSLCERTIFICATESOCKETFACTORY_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_NET_SSLCERTIFICATESOCKETFACTORY_HPP_IMPL
#define J2CPP_ANDROID_NET_SSLCERTIFICATESOCKETFACTORY_HPP_IMPL

namespace j2cpp {


template <>
local_ref< android::net::SSLCertificateSocketFactory > create< android::net::SSLCertificateSocketFactory>(cpp_int const &a0)
{
	return local_ref< android::net::SSLCertificateSocketFactory >(
		environment::get().get_jenv()->NewObject(
			get_class<android::net::SSLCertificateSocketFactory::J2CPP_CLASS_NAME>(),
			get_method_id<android::net::SSLCertificateSocketFactory::J2CPP_CLASS_NAME, android::net::SSLCertificateSocketFactory::J2CPP_METHOD_NAME(0), android::net::SSLCertificateSocketFactory::J2CPP_METHOD_SIGNATURE(0), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< javax::net::SocketFactory > android::net::SSLCertificateSocketFactory::getDefault(cpp_int const &a0)
{
	return local_ref< javax::net::SocketFactory >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), true>(),
			a0.get_jtype()
		)
	);
}

local_ref< javax::net::ssl::SSLSocketFactory > android::net::SSLCertificateSocketFactory::getDefault(cpp_int const &a0, local_ref< android::net::SSLSessionCache > const &a1)
{
	return local_ref< javax::net::ssl::SSLSocketFactory >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), true>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< javax::net::ssl::SSLSocketFactory > android::net::SSLCertificateSocketFactory::getInsecure(cpp_int const &a0, local_ref< android::net::SSLSessionCache > const &a1)
{
	return local_ref< javax::net::ssl::SSLSocketFactory >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), true>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< org::apache::http::conn::ssl::SSLSocketFactory > android::net::SSLCertificateSocketFactory::getHttpSocketFactory(cpp_int const &a0, local_ref< android::net::SSLSessionCache > const &a1)
{
	return local_ref< org::apache::http::conn::ssl::SSLSocketFactory >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), true>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< java::net::Socket > android::net::SSLCertificateSocketFactory::createSocket(local_ref< java::net::Socket > const &a0, local_ref< java::lang::String > const &a1, cpp_int const &a2, cpp_boolean const &a3)
{
	return local_ref< java::net::Socket >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype(), a3.get_jtype()
		)
	);
}

local_ref< java::net::Socket > android::net::SSLCertificateSocketFactory::createSocket()
{
	return local_ref< java::net::Socket >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>()
		)
	);
}

local_ref< java::net::Socket > android::net::SSLCertificateSocketFactory::createSocket(local_ref< java::net::InetAddress > const &a0, cpp_int const &a1, local_ref< java::net::InetAddress > const &a2, cpp_int const &a3)
{
	return local_ref< java::net::Socket >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(7), J2CPP_METHOD_SIGNATURE(7), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype(), a3.get_jtype()
		)
	);
}

local_ref< java::net::Socket > android::net::SSLCertificateSocketFactory::createSocket(local_ref< java::net::InetAddress > const &a0, cpp_int const &a1)
{
	return local_ref< java::net::Socket >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(8), J2CPP_METHOD_SIGNATURE(8), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< java::net::Socket > android::net::SSLCertificateSocketFactory::createSocket(local_ref< java::lang::String > const &a0, cpp_int const &a1, local_ref< java::net::InetAddress > const &a2, cpp_int const &a3)
{
	return local_ref< java::net::Socket >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(9), J2CPP_METHOD_SIGNATURE(9), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype(), a3.get_jtype()
		)
	);
}

local_ref< java::net::Socket > android::net::SSLCertificateSocketFactory::createSocket(local_ref< java::lang::String > const &a0, cpp_int const &a1)
{
	return local_ref< java::net::Socket >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(10), J2CPP_METHOD_SIGNATURE(10), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< cpp_object_array<java::lang::String, 1> > android::net::SSLCertificateSocketFactory::getDefaultCipherSuites()
{
	return local_ref< cpp_object_array<java::lang::String, 1> >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(11), J2CPP_METHOD_SIGNATURE(11), false>()
		)
	);
}

local_ref< cpp_object_array<java::lang::String, 1> > android::net::SSLCertificateSocketFactory::getSupportedCipherSuites()
{
	return local_ref< cpp_object_array<java::lang::String, 1> >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(12), J2CPP_METHOD_SIGNATURE(12), false>()
		)
	);
}


J2CPP_DEFINE_CLASS(android::net::SSLCertificateSocketFactory,"android/net/SSLCertificateSocketFactory")
J2CPP_DEFINE_METHOD(android::net::SSLCertificateSocketFactory,0,"<init>","(I)V")
J2CPP_DEFINE_METHOD(android::net::SSLCertificateSocketFactory,1,"getDefault","(I)Ljavax/net/SocketFactory;")
J2CPP_DEFINE_METHOD(android::net::SSLCertificateSocketFactory,2,"getDefault","(ILandroid/net/SSLSessionCache;)Ljavax/net/ssl/SSLSocketFactory;")
J2CPP_DEFINE_METHOD(android::net::SSLCertificateSocketFactory,3,"getInsecure","(ILandroid/net/SSLSessionCache;)Ljavax/net/ssl/SSLSocketFactory;")
J2CPP_DEFINE_METHOD(android::net::SSLCertificateSocketFactory,4,"getHttpSocketFactory","(ILandroid/net/SSLSessionCache;)Lorg/apache/http/conn/ssl/SSLSocketFactory;")
J2CPP_DEFINE_METHOD(android::net::SSLCertificateSocketFactory,5,"createSocket","(Ljava/net/Socket;Ljava/lang/String;IZ)Ljava/net/Socket;")
J2CPP_DEFINE_METHOD(android::net::SSLCertificateSocketFactory,6,"createSocket","()Ljava/net/Socket;")
J2CPP_DEFINE_METHOD(android::net::SSLCertificateSocketFactory,7,"createSocket","(Ljava/net/InetAddress;ILjava/net/InetAddress;I)Ljava/net/Socket;")
J2CPP_DEFINE_METHOD(android::net::SSLCertificateSocketFactory,8,"createSocket","(Ljava/net/InetAddress;I)Ljava/net/Socket;")
J2CPP_DEFINE_METHOD(android::net::SSLCertificateSocketFactory,9,"createSocket","(Ljava/lang/String;ILjava/net/InetAddress;I)Ljava/net/Socket;")
J2CPP_DEFINE_METHOD(android::net::SSLCertificateSocketFactory,10,"createSocket","(Ljava/lang/String;I)Ljava/net/Socket;")
J2CPP_DEFINE_METHOD(android::net::SSLCertificateSocketFactory,11,"getDefaultCipherSuites","()[java.lang.String")
J2CPP_DEFINE_METHOD(android::net::SSLCertificateSocketFactory,12,"getSupportedCipherSuites","()[java.lang.String")

} //namespace j2cpp

#endif //J2CPP_ANDROID_NET_SSLCERTIFICATESOCKETFACTORY_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
