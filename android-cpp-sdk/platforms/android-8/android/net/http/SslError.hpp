/*================================================================================
  code generated by: java2cpp
  class: android.net.http.SslError
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_NET_HTTP_SSLERROR_HPP_DECL
#define J2CPP_ANDROID_NET_HTTP_SSLERROR_HPP_DECL


namespace j2cpp { namespace android { namespace net { namespace http { class SslCertificate; } } } }
namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace security { namespace cert { class X509Certificate; } } } }


#include <android/net/http/SslCertificate.hpp>
#include <java/lang/String.hpp>
#include <java/security/cert/X509Certificate.hpp>


namespace j2cpp {

namespace android { namespace net { namespace http {

	class SslError;
	class SslError
		: public cpp_object<SslError>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_FIELD(0)
		J2CPP_DECLARE_FIELD(1)
		J2CPP_DECLARE_FIELD(2)
		J2CPP_DECLARE_FIELD(3)
		J2CPP_DECLARE_FIELD(4)

		SslError(jobject jobj)
		: cpp_object<SslError>(jobj)
		{
		}

		local_ref< android::net::http::SslCertificate > getCertificate();
		cpp_boolean addError(cpp_int const&);
		cpp_boolean hasError(cpp_int const&);
		cpp_int getPrimaryError();
		local_ref< java::lang::String > toString();

		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(0), J2CPP_FIELD_SIGNATURE(0), cpp_int > SSL_NOTYETVALID;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(1), J2CPP_FIELD_SIGNATURE(1), cpp_int > SSL_EXPIRED;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(2), J2CPP_FIELD_SIGNATURE(2), cpp_int > SSL_IDMISMATCH;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(3), J2CPP_FIELD_SIGNATURE(3), cpp_int > SSL_UNTRUSTED;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(4), J2CPP_FIELD_SIGNATURE(4), cpp_int > SSL_MAX_ERROR;
	}; //class SslError

} //namespace http
} //namespace net
} //namespace android


} //namespace j2cpp

#endif //J2CPP_ANDROID_NET_HTTP_SSLERROR_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_NET_HTTP_SSLERROR_HPP_IMPL
#define J2CPP_ANDROID_NET_HTTP_SSLERROR_HPP_IMPL

namespace j2cpp {


template <>
local_ref< android::net::http::SslError > create< android::net::http::SslError>(cpp_int const &a0, local_ref< android::net::http::SslCertificate > const &a1)
{
	return local_ref< android::net::http::SslError >(
		environment::get().get_jenv()->NewObject(
			get_class<android::net::http::SslError::J2CPP_CLASS_NAME>(),
			get_method_id<android::net::http::SslError::J2CPP_CLASS_NAME, android::net::http::SslError::J2CPP_METHOD_NAME(0), android::net::http::SslError::J2CPP_METHOD_SIGNATURE(0), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

template <>
local_ref< android::net::http::SslError > create< android::net::http::SslError>(cpp_int const &a0, local_ref< java::security::cert::X509Certificate > const &a1)
{
	return local_ref< android::net::http::SslError >(
		environment::get().get_jenv()->NewObject(
			get_class<android::net::http::SslError::J2CPP_CLASS_NAME>(),
			get_method_id<android::net::http::SslError::J2CPP_CLASS_NAME, android::net::http::SslError::J2CPP_METHOD_NAME(1), android::net::http::SslError::J2CPP_METHOD_SIGNATURE(1), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< android::net::http::SslCertificate > android::net::http::SslError::getCertificate()
{
	return local_ref< android::net::http::SslCertificate >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>()
		)
	);
}

cpp_boolean android::net::http::SslError::addError(cpp_int const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean android::net::http::SslError::hasError(cpp_int const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int android::net::http::SslError::getPrimaryError()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>()
		)
	);
}

local_ref< java::lang::String > android::net::http::SslError::toString()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>()
		)
	);
}


static_field<
	android::net::http::SslError::J2CPP_CLASS_NAME,
	android::net::http::SslError::J2CPP_FIELD_NAME(0),
	android::net::http::SslError::J2CPP_FIELD_SIGNATURE(0),
	cpp_int
> android::net::http::SslError::SSL_NOTYETVALID;

static_field<
	android::net::http::SslError::J2CPP_CLASS_NAME,
	android::net::http::SslError::J2CPP_FIELD_NAME(1),
	android::net::http::SslError::J2CPP_FIELD_SIGNATURE(1),
	cpp_int
> android::net::http::SslError::SSL_EXPIRED;

static_field<
	android::net::http::SslError::J2CPP_CLASS_NAME,
	android::net::http::SslError::J2CPP_FIELD_NAME(2),
	android::net::http::SslError::J2CPP_FIELD_SIGNATURE(2),
	cpp_int
> android::net::http::SslError::SSL_IDMISMATCH;

static_field<
	android::net::http::SslError::J2CPP_CLASS_NAME,
	android::net::http::SslError::J2CPP_FIELD_NAME(3),
	android::net::http::SslError::J2CPP_FIELD_SIGNATURE(3),
	cpp_int
> android::net::http::SslError::SSL_UNTRUSTED;

static_field<
	android::net::http::SslError::J2CPP_CLASS_NAME,
	android::net::http::SslError::J2CPP_FIELD_NAME(4),
	android::net::http::SslError::J2CPP_FIELD_SIGNATURE(4),
	cpp_int
> android::net::http::SslError::SSL_MAX_ERROR;


J2CPP_DEFINE_CLASS(android::net::http::SslError,"android/net/http/SslError")
J2CPP_DEFINE_METHOD(android::net::http::SslError,0,"<init>","(ILandroid/net/http/SslCertificate;)V")
J2CPP_DEFINE_METHOD(android::net::http::SslError,1,"<init>","(ILjava/security/cert/X509Certificate;)V")
J2CPP_DEFINE_METHOD(android::net::http::SslError,2,"getCertificate","()Landroid/net/http/SslCertificate;")
J2CPP_DEFINE_METHOD(android::net::http::SslError,3,"addError","(I)Z")
J2CPP_DEFINE_METHOD(android::net::http::SslError,4,"hasError","(I)Z")
J2CPP_DEFINE_METHOD(android::net::http::SslError,5,"getPrimaryError","()I")
J2CPP_DEFINE_METHOD(android::net::http::SslError,6,"toString","()Ljava/lang/String;")
J2CPP_DEFINE_FIELD(android::net::http::SslError,0,"SSL_NOTYETVALID","I")
J2CPP_DEFINE_FIELD(android::net::http::SslError,1,"SSL_EXPIRED","I")
J2CPP_DEFINE_FIELD(android::net::http::SslError,2,"SSL_IDMISMATCH","I")
J2CPP_DEFINE_FIELD(android::net::http::SslError,3,"SSL_UNTRUSTED","I")
J2CPP_DEFINE_FIELD(android::net::http::SslError,4,"SSL_MAX_ERROR","I")

} //namespace j2cpp

#endif //J2CPP_ANDROID_NET_HTTP_SSLERROR_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
