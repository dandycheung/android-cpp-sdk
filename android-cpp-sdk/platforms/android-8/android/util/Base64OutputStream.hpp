/*================================================================================
  code generated by: java2cpp
  class: android.util.Base64OutputStream
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_UTIL_BASE64OUTPUTSTREAM_HPP_DECL
#define J2CPP_ANDROID_UTIL_BASE64OUTPUTSTREAM_HPP_DECL


namespace j2cpp { namespace java { namespace io { class OutputStream; } } }


#include <java/io/OutputStream.hpp>


namespace j2cpp {

namespace android { namespace util {

	class Base64OutputStream;
	class Base64OutputStream
		: public cpp_object<Base64OutputStream>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)

		Base64OutputStream(jobject jobj)
		: cpp_object<Base64OutputStream>(jobj)
		{
		}

		void write(cpp_int const&);
		void write(local_ref< cpp_byte_array<1> > const&, cpp_int const&, cpp_int const&);
		void close();
	}; //class Base64OutputStream

} //namespace util
} //namespace android


} //namespace j2cpp

#endif //J2CPP_ANDROID_UTIL_BASE64OUTPUTSTREAM_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_UTIL_BASE64OUTPUTSTREAM_HPP_IMPL
#define J2CPP_ANDROID_UTIL_BASE64OUTPUTSTREAM_HPP_IMPL

namespace j2cpp {


template <>
local_ref< android::util::Base64OutputStream > create< android::util::Base64OutputStream>(local_ref< java::io::OutputStream > const &a0, cpp_int const &a1)
{
	return local_ref< android::util::Base64OutputStream >(
		environment::get().get_jenv()->NewObject(
			get_class<android::util::Base64OutputStream::J2CPP_CLASS_NAME>(),
			get_method_id<android::util::Base64OutputStream::J2CPP_CLASS_NAME, android::util::Base64OutputStream::J2CPP_METHOD_NAME(0), android::util::Base64OutputStream::J2CPP_METHOD_SIGNATURE(0), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void android::util::Base64OutputStream::write(cpp_int const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), false>(),
			a0.get_jtype()
		)
	);
}

void android::util::Base64OutputStream::write(local_ref< cpp_byte_array<1> > const &a0, cpp_int const &a1, cpp_int const &a2)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

void android::util::Base64OutputStream::close()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>()
		)
	);
}


J2CPP_DEFINE_CLASS(android::util::Base64OutputStream,"android/util/Base64OutputStream")
J2CPP_DEFINE_METHOD(android::util::Base64OutputStream,0,"<init>","(Ljava/io/OutputStream;I)V")
J2CPP_DEFINE_METHOD(android::util::Base64OutputStream,1,"write","(I)V")
J2CPP_DEFINE_METHOD(android::util::Base64OutputStream,2,"write","([BII)V")
J2CPP_DEFINE_METHOD(android::util::Base64OutputStream,3,"close","()V")

} //namespace j2cpp

#endif //J2CPP_ANDROID_UTIL_BASE64OUTPUTSTREAM_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
