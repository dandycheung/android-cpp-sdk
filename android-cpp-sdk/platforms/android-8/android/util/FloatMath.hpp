/*================================================================================
  code generated by: java2cpp
  class: android.util.FloatMath
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_UTIL_FLOATMATH_HPP_DECL
#define J2CPP_ANDROID_UTIL_FLOATMATH_HPP_DECL






namespace j2cpp {

namespace android { namespace util {

	class FloatMath;
	class FloatMath
		: public cpp_object<FloatMath>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)

		FloatMath(jobject jobj)
		: cpp_object<FloatMath>(jobj)
		{
		}

		static cpp_float floor(cpp_float const&);
		static cpp_float ceil(cpp_float const&);
		static cpp_float sin(cpp_float const&);
		static cpp_float cos(cpp_float const&);
		static cpp_float sqrt(cpp_float const&);
	}; //class FloatMath

} //namespace util
} //namespace android


} //namespace j2cpp

#endif //J2CPP_ANDROID_UTIL_FLOATMATH_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_UTIL_FLOATMATH_HPP_IMPL
#define J2CPP_ANDROID_UTIL_FLOATMATH_HPP_IMPL

namespace j2cpp {


template <>
local_ref< android::util::FloatMath > create< android::util::FloatMath>()
{
	return local_ref< android::util::FloatMath >(
		environment::get().get_jenv()->NewObject(
			get_class<android::util::FloatMath::J2CPP_CLASS_NAME>(),
			get_method_id<android::util::FloatMath::J2CPP_CLASS_NAME, android::util::FloatMath::J2CPP_METHOD_NAME(0), android::util::FloatMath::J2CPP_METHOD_SIGNATURE(0), false>()
		)
	);
}

cpp_float android::util::FloatMath::floor(cpp_float const &a0)
{
	return cpp_float(
		environment::get().get_jenv()->CallStaticFloatMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), true>(),
			a0.get_jtype()
		)
	);
}

cpp_float android::util::FloatMath::ceil(cpp_float const &a0)
{
	return cpp_float(
		environment::get().get_jenv()->CallStaticFloatMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), true>(),
			a0.get_jtype()
		)
	);
}

cpp_float android::util::FloatMath::sin(cpp_float const &a0)
{
	return cpp_float(
		environment::get().get_jenv()->CallStaticFloatMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), true>(),
			a0.get_jtype()
		)
	);
}

cpp_float android::util::FloatMath::cos(cpp_float const &a0)
{
	return cpp_float(
		environment::get().get_jenv()->CallStaticFloatMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), true>(),
			a0.get_jtype()
		)
	);
}

cpp_float android::util::FloatMath::sqrt(cpp_float const &a0)
{
	return cpp_float(
		environment::get().get_jenv()->CallStaticFloatMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), true>(),
			a0.get_jtype()
		)
	);
}


J2CPP_DEFINE_CLASS(android::util::FloatMath,"android/util/FloatMath")
J2CPP_DEFINE_METHOD(android::util::FloatMath,0,"<init>","()V")
J2CPP_DEFINE_METHOD(android::util::FloatMath,1,"floor","(F)F")
J2CPP_DEFINE_METHOD(android::util::FloatMath,2,"ceil","(F)F")
J2CPP_DEFINE_METHOD(android::util::FloatMath,3,"sin","(F)F")
J2CPP_DEFINE_METHOD(android::util::FloatMath,4,"cos","(F)F")
J2CPP_DEFINE_METHOD(android::util::FloatMath,5,"sqrt","(F)F")

} //namespace j2cpp

#endif //J2CPP_ANDROID_UTIL_FLOATMATH_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
