/*================================================================================
  code generated by: java2cpp
  class: android.gesture.GestureStroke
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_GESTURE_GESTURESTROKE_HPP_DECL
#define J2CPP_ANDROID_GESTURE_GESTURESTROKE_HPP_DECL


namespace j2cpp { namespace android { namespace gesture { class OrientedBoundingBox; } } }
namespace j2cpp { namespace android { namespace graphics { class RectF; } } }
namespace j2cpp { namespace android { namespace graphics { class Path; } } }
namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace util { class ArrayList; } } }


#include <android/gesture/OrientedBoundingBox.hpp>
#include <android/graphics/Path.hpp>
#include <android/graphics/RectF.hpp>
#include <java/lang/Object.hpp>
#include <java/util/ArrayList.hpp>


namespace j2cpp {

namespace android { namespace gesture {

	class GestureStroke;
	class GestureStroke
		: public cpp_object<GestureStroke>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_FIELD(0)
		J2CPP_DECLARE_FIELD(1)
		J2CPP_DECLARE_FIELD(2)

		GestureStroke(jobject jobj)
		: cpp_object<GestureStroke>(jobj)
		, boundingBox(jobj)
		, length(jobj)
		, points(jobj)
		{
		}

		local_ref< java::lang::Object > clone();
		local_ref< android::graphics::Path > getPath();
		local_ref< android::graphics::Path > toPath(cpp_float const&, cpp_float const&, cpp_int const&);
		void clearPath();
		local_ref< android::gesture::OrientedBoundingBox > computeOrientedBoundingBox();

		field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(0), J2CPP_FIELD_SIGNATURE(0), local_ref< android::graphics::RectF > > boundingBox;
		field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(1), J2CPP_FIELD_SIGNATURE(1), cpp_float > length;
		field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(2), J2CPP_FIELD_SIGNATURE(2), local_ref< cpp_float_array<1> > > points;
	}; //class GestureStroke

} //namespace gesture
} //namespace android


} //namespace j2cpp

#endif //J2CPP_ANDROID_GESTURE_GESTURESTROKE_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_GESTURE_GESTURESTROKE_HPP_IMPL
#define J2CPP_ANDROID_GESTURE_GESTURESTROKE_HPP_IMPL

namespace j2cpp {


template <>
local_ref< android::gesture::GestureStroke > create< android::gesture::GestureStroke>(local_ref< java::util::ArrayList > const &a0)
{
	return local_ref< android::gesture::GestureStroke >(
		environment::get().get_jenv()->NewObject(
			get_class<android::gesture::GestureStroke::J2CPP_CLASS_NAME>(),
			get_method_id<android::gesture::GestureStroke::J2CPP_CLASS_NAME, android::gesture::GestureStroke::J2CPP_METHOD_NAME(0), android::gesture::GestureStroke::J2CPP_METHOD_SIGNATURE(0), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::Object > android::gesture::GestureStroke::clone()
{
	return local_ref< java::lang::Object >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), false>()
		)
	);
}

local_ref< android::graphics::Path > android::gesture::GestureStroke::getPath()
{
	return local_ref< android::graphics::Path >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>()
		)
	);
}

local_ref< android::graphics::Path > android::gesture::GestureStroke::toPath(cpp_float const &a0, cpp_float const &a1, cpp_int const &a2)
{
	return local_ref< android::graphics::Path >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

void android::gesture::GestureStroke::clearPath()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>()
		)
	);
}

local_ref< android::gesture::OrientedBoundingBox > android::gesture::GestureStroke::computeOrientedBoundingBox()
{
	return local_ref< android::gesture::OrientedBoundingBox >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>()
		)
	);
}



J2CPP_DEFINE_CLASS(android::gesture::GestureStroke,"android/gesture/GestureStroke")
J2CPP_DEFINE_METHOD(android::gesture::GestureStroke,0,"<init>","(Ljava/util/ArrayList;)V")
J2CPP_DEFINE_METHOD(android::gesture::GestureStroke,1,"clone","()Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(android::gesture::GestureStroke,2,"getPath","()Landroid/graphics/Path;")
J2CPP_DEFINE_METHOD(android::gesture::GestureStroke,3,"toPath","(FFI)Landroid/graphics/Path;")
J2CPP_DEFINE_METHOD(android::gesture::GestureStroke,4,"clearPath","()V")
J2CPP_DEFINE_METHOD(android::gesture::GestureStroke,5,"computeOrientedBoundingBox","()Landroid/gesture/OrientedBoundingBox;")
J2CPP_DEFINE_FIELD(android::gesture::GestureStroke,0,"boundingBox","Landroid/graphics/RectF;")
J2CPP_DEFINE_FIELD(android::gesture::GestureStroke,1,"length","F")
J2CPP_DEFINE_FIELD(android::gesture::GestureStroke,2,"points","[F")

} //namespace j2cpp

#endif //J2CPP_ANDROID_GESTURE_GESTURESTROKE_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
