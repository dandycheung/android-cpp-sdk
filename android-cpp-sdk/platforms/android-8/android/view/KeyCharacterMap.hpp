/*================================================================================
  code generated by: java2cpp
  class: android.view.KeyCharacterMap
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_VIEW_KEYCHARACTERMAP_HPP_DECL
#define J2CPP_ANDROID_VIEW_KEYCHARACTERMAP_HPP_DECL


namespace j2cpp { namespace android { namespace view { class KeyEvent; } } }
namespace j2cpp { namespace android { namespace view { namespace KeyCharacterMap_ { class KeyData; } } } }


#include <android/view/KeyCharacterMap.hpp>
#include <android/view/KeyEvent.hpp>


namespace j2cpp {

namespace android { namespace view {

	class KeyCharacterMap;
	namespace KeyCharacterMap_ {

		class KeyData;
		class KeyData
			: public cpp_object<KeyData>
		{
		public:

			J2CPP_DECLARE_CLASS

			J2CPP_DECLARE_METHOD(0)
			J2CPP_DECLARE_FIELD(0)
			J2CPP_DECLARE_FIELD(1)
			J2CPP_DECLARE_FIELD(2)
			J2CPP_DECLARE_FIELD(3)

			KeyData(jobject jobj)
			: cpp_object<KeyData>(jobj)
			, displayLabel(jobj)
			, number(jobj)
			, meta(jobj)
			{
			}


			static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(0), J2CPP_FIELD_SIGNATURE(0), cpp_int > META_LENGTH;
			field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(1), J2CPP_FIELD_SIGNATURE(1), cpp_char > displayLabel;
			field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(2), J2CPP_FIELD_SIGNATURE(2), cpp_char > number;
			field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(3), J2CPP_FIELD_SIGNATURE(3), local_ref< cpp_char_array<1> > > meta;
		}; //class KeyData

	} //namespace KeyCharacterMap_

	class KeyCharacterMap
		: public cpp_object<KeyCharacterMap>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_METHOD(12)
		J2CPP_DECLARE_METHOD(13)
		J2CPP_DECLARE_METHOD(14)
		J2CPP_DECLARE_FIELD(0)
		J2CPP_DECLARE_FIELD(1)
		J2CPP_DECLARE_FIELD(2)
		J2CPP_DECLARE_FIELD(3)
		J2CPP_DECLARE_FIELD(4)
		J2CPP_DECLARE_FIELD(5)
		J2CPP_DECLARE_FIELD(6)
		J2CPP_DECLARE_FIELD(7)

		typedef KeyCharacterMap_::KeyData KeyData;

		KeyCharacterMap(jobject jobj)
		: cpp_object<KeyCharacterMap>(jobj)
		{
		}

		static local_ref< android::view::KeyCharacterMap > load(cpp_int const&);
		cpp_int get(cpp_int const&, cpp_int const&);
		cpp_char getNumber(cpp_int const&);
		cpp_char getMatch(cpp_int const&, local_ref< cpp_char_array<1> > const&);
		cpp_char getMatch(cpp_int const&, local_ref< cpp_char_array<1> > const&, cpp_int const&);
		cpp_char getDisplayLabel(cpp_int const&);
		static cpp_int getDeadChar(cpp_int const&, cpp_int const&);
		cpp_boolean getKeyData(cpp_int const&, local_ref< android::view::KeyCharacterMap_::KeyData > const&);
		local_ref< cpp_object_array<android::view::KeyEvent, 1> > getEvents(local_ref< cpp_char_array<1> > const&);
		cpp_boolean isPrintingKey(cpp_int const&);
		cpp_int getKeyboardType();
		static cpp_boolean deviceHasKey(cpp_int const&);
		static local_ref< cpp_boolean_array<1> > deviceHasKeys(local_ref< cpp_int_array<1> > const&);

		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(0), J2CPP_FIELD_SIGNATURE(0), cpp_int > BUILT_IN_KEYBOARD;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(1), J2CPP_FIELD_SIGNATURE(1), cpp_int > NUMERIC;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(2), J2CPP_FIELD_SIGNATURE(2), cpp_int > PREDICTIVE;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(3), J2CPP_FIELD_SIGNATURE(3), cpp_int > ALPHA;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(4), J2CPP_FIELD_SIGNATURE(4), cpp_char > HEX_INPUT;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(5), J2CPP_FIELD_SIGNATURE(5), cpp_char > PICKER_DIALOG_INPUT;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(6), J2CPP_FIELD_SIGNATURE(6), cpp_int > COMBINING_ACCENT;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(7), J2CPP_FIELD_SIGNATURE(7), cpp_int > COMBINING_ACCENT_MASK;
	}; //class KeyCharacterMap

} //namespace view
} //namespace android


} //namespace j2cpp

#endif //J2CPP_ANDROID_VIEW_KEYCHARACTERMAP_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_VIEW_KEYCHARACTERMAP_HPP_IMPL
#define J2CPP_ANDROID_VIEW_KEYCHARACTERMAP_HPP_IMPL

namespace j2cpp {



template <>
local_ref< android::view::KeyCharacterMap_::KeyData > create< android::view::KeyCharacterMap_::KeyData>()
{
	return local_ref< android::view::KeyCharacterMap_::KeyData >(
		environment::get().get_jenv()->NewObject(
			get_class<android::view::KeyCharacterMap_::KeyData::J2CPP_CLASS_NAME>(),
			get_method_id<android::view::KeyCharacterMap_::KeyData::J2CPP_CLASS_NAME, android::view::KeyCharacterMap_::KeyData::J2CPP_METHOD_NAME(0), android::view::KeyCharacterMap_::KeyData::J2CPP_METHOD_SIGNATURE(0), false>()
		)
	);
}


static_field<
	android::view::KeyCharacterMap_::KeyData::J2CPP_CLASS_NAME,
	android::view::KeyCharacterMap_::KeyData::J2CPP_FIELD_NAME(0),
	android::view::KeyCharacterMap_::KeyData::J2CPP_FIELD_SIGNATURE(0),
	cpp_int
> android::view::KeyCharacterMap_::KeyData::META_LENGTH;


J2CPP_DEFINE_CLASS(android::view::KeyCharacterMap_::KeyData,"android/view/KeyCharacterMap$KeyData")
J2CPP_DEFINE_METHOD(android::view::KeyCharacterMap_::KeyData,0,"<init>","()V")
J2CPP_DEFINE_FIELD(android::view::KeyCharacterMap_::KeyData,0,"META_LENGTH","I")
J2CPP_DEFINE_FIELD(android::view::KeyCharacterMap_::KeyData,1,"displayLabel","C")
J2CPP_DEFINE_FIELD(android::view::KeyCharacterMap_::KeyData,2,"number","C")
J2CPP_DEFINE_FIELD(android::view::KeyCharacterMap_::KeyData,3,"meta","[C")


template <>
local_ref< android::view::KeyCharacterMap > create< android::view::KeyCharacterMap>()
{
	return local_ref< android::view::KeyCharacterMap >(
		environment::get().get_jenv()->NewObject(
			get_class<android::view::KeyCharacterMap::J2CPP_CLASS_NAME>(),
			get_method_id<android::view::KeyCharacterMap::J2CPP_CLASS_NAME, android::view::KeyCharacterMap::J2CPP_METHOD_NAME(0), android::view::KeyCharacterMap::J2CPP_METHOD_SIGNATURE(0), false>()
		)
	);
}

local_ref< android::view::KeyCharacterMap > android::view::KeyCharacterMap::load(cpp_int const &a0)
{
	return local_ref< android::view::KeyCharacterMap >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), true>(),
			a0.get_jtype()
		)
	);
}

cpp_int android::view::KeyCharacterMap::get(cpp_int const &a0, cpp_int const &a1)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_char android::view::KeyCharacterMap::getNumber(cpp_int const &a0)
{
	return cpp_char(
		environment::get().get_jenv()->CallCharMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>(),
			a0.get_jtype()
		)
	);
}

cpp_char android::view::KeyCharacterMap::getMatch(cpp_int const &a0, local_ref< cpp_char_array<1> > const &a1)
{
	return cpp_char(
		environment::get().get_jenv()->CallCharMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_char android::view::KeyCharacterMap::getMatch(cpp_int const &a0, local_ref< cpp_char_array<1> > const &a1, cpp_int const &a2)
{
	return cpp_char(
		environment::get().get_jenv()->CallCharMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

cpp_char android::view::KeyCharacterMap::getDisplayLabel(cpp_int const &a0)
{
	return cpp_char(
		environment::get().get_jenv()->CallCharMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int android::view::KeyCharacterMap::getDeadChar(cpp_int const &a0, cpp_int const &a1)
{
	return cpp_int(
		environment::get().get_jenv()->CallStaticIntMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(7), J2CPP_METHOD_SIGNATURE(7), true>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_boolean android::view::KeyCharacterMap::getKeyData(cpp_int const &a0, local_ref< android::view::KeyCharacterMap_::KeyData > const &a1)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(8), J2CPP_METHOD_SIGNATURE(8), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< cpp_object_array<android::view::KeyEvent, 1> > android::view::KeyCharacterMap::getEvents(local_ref< cpp_char_array<1> > const &a0)
{
	return local_ref< cpp_object_array<android::view::KeyEvent, 1> >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(9), J2CPP_METHOD_SIGNATURE(9), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean android::view::KeyCharacterMap::isPrintingKey(cpp_int const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(10), J2CPP_METHOD_SIGNATURE(10), false>(),
			a0.get_jtype()
		)
	);
}


cpp_int android::view::KeyCharacterMap::getKeyboardType()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(12), J2CPP_METHOD_SIGNATURE(12), false>()
		)
	);
}

cpp_boolean android::view::KeyCharacterMap::deviceHasKey(cpp_int const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallStaticBooleanMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(13), J2CPP_METHOD_SIGNATURE(13), true>(),
			a0.get_jtype()
		)
	);
}

local_ref< cpp_boolean_array<1> > android::view::KeyCharacterMap::deviceHasKeys(local_ref< cpp_int_array<1> > const &a0)
{
	return local_ref< cpp_boolean_array<1> >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(14), J2CPP_METHOD_SIGNATURE(14), true>(),
			a0.get_jtype()
		)
	);
}


static_field<
	android::view::KeyCharacterMap::J2CPP_CLASS_NAME,
	android::view::KeyCharacterMap::J2CPP_FIELD_NAME(0),
	android::view::KeyCharacterMap::J2CPP_FIELD_SIGNATURE(0),
	cpp_int
> android::view::KeyCharacterMap::BUILT_IN_KEYBOARD;

static_field<
	android::view::KeyCharacterMap::J2CPP_CLASS_NAME,
	android::view::KeyCharacterMap::J2CPP_FIELD_NAME(1),
	android::view::KeyCharacterMap::J2CPP_FIELD_SIGNATURE(1),
	cpp_int
> android::view::KeyCharacterMap::NUMERIC;

static_field<
	android::view::KeyCharacterMap::J2CPP_CLASS_NAME,
	android::view::KeyCharacterMap::J2CPP_FIELD_NAME(2),
	android::view::KeyCharacterMap::J2CPP_FIELD_SIGNATURE(2),
	cpp_int
> android::view::KeyCharacterMap::PREDICTIVE;

static_field<
	android::view::KeyCharacterMap::J2CPP_CLASS_NAME,
	android::view::KeyCharacterMap::J2CPP_FIELD_NAME(3),
	android::view::KeyCharacterMap::J2CPP_FIELD_SIGNATURE(3),
	cpp_int
> android::view::KeyCharacterMap::ALPHA;

static_field<
	android::view::KeyCharacterMap::J2CPP_CLASS_NAME,
	android::view::KeyCharacterMap::J2CPP_FIELD_NAME(4),
	android::view::KeyCharacterMap::J2CPP_FIELD_SIGNATURE(4),
	cpp_char
> android::view::KeyCharacterMap::HEX_INPUT;

static_field<
	android::view::KeyCharacterMap::J2CPP_CLASS_NAME,
	android::view::KeyCharacterMap::J2CPP_FIELD_NAME(5),
	android::view::KeyCharacterMap::J2CPP_FIELD_SIGNATURE(5),
	cpp_char
> android::view::KeyCharacterMap::PICKER_DIALOG_INPUT;

static_field<
	android::view::KeyCharacterMap::J2CPP_CLASS_NAME,
	android::view::KeyCharacterMap::J2CPP_FIELD_NAME(6),
	android::view::KeyCharacterMap::J2CPP_FIELD_SIGNATURE(6),
	cpp_int
> android::view::KeyCharacterMap::COMBINING_ACCENT;

static_field<
	android::view::KeyCharacterMap::J2CPP_CLASS_NAME,
	android::view::KeyCharacterMap::J2CPP_FIELD_NAME(7),
	android::view::KeyCharacterMap::J2CPP_FIELD_SIGNATURE(7),
	cpp_int
> android::view::KeyCharacterMap::COMBINING_ACCENT_MASK;


J2CPP_DEFINE_CLASS(android::view::KeyCharacterMap,"android/view/KeyCharacterMap")
J2CPP_DEFINE_METHOD(android::view::KeyCharacterMap,0,"<init>","()V")
J2CPP_DEFINE_METHOD(android::view::KeyCharacterMap,1,"load","(I)Landroid/view/KeyCharacterMap;")
J2CPP_DEFINE_METHOD(android::view::KeyCharacterMap,2,"get","(II)I")
J2CPP_DEFINE_METHOD(android::view::KeyCharacterMap,3,"getNumber","(I)C")
J2CPP_DEFINE_METHOD(android::view::KeyCharacterMap,4,"getMatch","(I[C)C")
J2CPP_DEFINE_METHOD(android::view::KeyCharacterMap,5,"getMatch","(I[CI)C")
J2CPP_DEFINE_METHOD(android::view::KeyCharacterMap,6,"getDisplayLabel","(I)C")
J2CPP_DEFINE_METHOD(android::view::KeyCharacterMap,7,"getDeadChar","(II)I")
J2CPP_DEFINE_METHOD(android::view::KeyCharacterMap,8,"getKeyData","(ILandroid/view/KeyCharacterMap$KeyData;)Z")
J2CPP_DEFINE_METHOD(android::view::KeyCharacterMap,9,"getEvents","([C)[android.view.KeyEvent")
J2CPP_DEFINE_METHOD(android::view::KeyCharacterMap,10,"isPrintingKey","(I)Z")
J2CPP_DEFINE_METHOD(android::view::KeyCharacterMap,11,"finalize","()V")
J2CPP_DEFINE_METHOD(android::view::KeyCharacterMap,12,"getKeyboardType","()I")
J2CPP_DEFINE_METHOD(android::view::KeyCharacterMap,13,"deviceHasKey","(I)Z")
J2CPP_DEFINE_METHOD(android::view::KeyCharacterMap,14,"deviceHasKeys","([I)[Z")
J2CPP_DEFINE_FIELD(android::view::KeyCharacterMap,0,"BUILT_IN_KEYBOARD","I")
J2CPP_DEFINE_FIELD(android::view::KeyCharacterMap,1,"NUMERIC","I")
J2CPP_DEFINE_FIELD(android::view::KeyCharacterMap,2,"PREDICTIVE","I")
J2CPP_DEFINE_FIELD(android::view::KeyCharacterMap,3,"ALPHA","I")
J2CPP_DEFINE_FIELD(android::view::KeyCharacterMap,4,"HEX_INPUT","C")
J2CPP_DEFINE_FIELD(android::view::KeyCharacterMap,5,"PICKER_DIALOG_INPUT","C")
J2CPP_DEFINE_FIELD(android::view::KeyCharacterMap,6,"COMBINING_ACCENT","I")
J2CPP_DEFINE_FIELD(android::view::KeyCharacterMap,7,"COMBINING_ACCENT_MASK","I")

} //namespace j2cpp

#endif //J2CPP_ANDROID_VIEW_KEYCHARACTERMAP_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
