/*================================================================================
  code generated by: java2cpp
  class: android.widget.HorizontalScrollView
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_WIDGET_HORIZONTALSCROLLVIEW_HPP_DECL
#define J2CPP_ANDROID_WIDGET_HORIZONTALSCROLLVIEW_HPP_DECL


namespace j2cpp { namespace android { namespace content { class Context; } } }
namespace j2cpp { namespace android { namespace util { class AttributeSet; } } }
namespace j2cpp { namespace android { namespace view { class View; } } }
namespace j2cpp { namespace android { namespace view { class KeyEvent; } } }
namespace j2cpp { namespace android { namespace view { namespace ViewGroup_ { class LayoutParams; } } } }
namespace j2cpp { namespace android { namespace view { class MotionEvent; } } }
namespace j2cpp { namespace android { namespace graphics { class Rect; } } }


#include <android/content/Context.hpp>
#include <android/graphics/Rect.hpp>
#include <android/util/AttributeSet.hpp>
#include <android/view/KeyEvent.hpp>
#include <android/view/MotionEvent.hpp>
#include <android/view/View.hpp>
#include <android/view/ViewGroup.hpp>


namespace j2cpp {

namespace android { namespace widget {

	class HorizontalScrollView;
	class HorizontalScrollView
		: public cpp_object<HorizontalScrollView>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_METHOD(12)
		J2CPP_DECLARE_METHOD(13)
		J2CPP_DECLARE_METHOD(14)
		J2CPP_DECLARE_METHOD(15)
		J2CPP_DECLARE_METHOD(16)
		J2CPP_DECLARE_METHOD(17)
		J2CPP_DECLARE_METHOD(18)
		J2CPP_DECLARE_METHOD(19)
		J2CPP_DECLARE_METHOD(20)
		J2CPP_DECLARE_METHOD(21)
		J2CPP_DECLARE_METHOD(22)
		J2CPP_DECLARE_METHOD(23)
		J2CPP_DECLARE_METHOD(24)
		J2CPP_DECLARE_METHOD(25)
		J2CPP_DECLARE_METHOD(26)
		J2CPP_DECLARE_METHOD(27)
		J2CPP_DECLARE_METHOD(28)
		J2CPP_DECLARE_METHOD(29)
		J2CPP_DECLARE_METHOD(30)
		J2CPP_DECLARE_METHOD(31)
		J2CPP_DECLARE_METHOD(32)
		J2CPP_DECLARE_METHOD(33)
		J2CPP_DECLARE_METHOD(34)
		J2CPP_DECLARE_METHOD(35)
		J2CPP_DECLARE_METHOD(36)
		J2CPP_DECLARE_METHOD(37)

		HorizontalScrollView(jobject jobj)
		: cpp_object<HorizontalScrollView>(jobj)
		{
		}

		cpp_int getMaxScrollAmount();
		void addView(local_ref< android::view::View > const&);
		void addView(local_ref< android::view::View > const&, cpp_int const&);
		void addView(local_ref< android::view::View > const&, local_ref< android::view::ViewGroup_::LayoutParams > const&);
		void addView(local_ref< android::view::View > const&, cpp_int const&, local_ref< android::view::ViewGroup_::LayoutParams > const&);
		cpp_boolean isFillViewport();
		void setFillViewport(cpp_boolean const&);
		cpp_boolean isSmoothScrollingEnabled();
		void setSmoothScrollingEnabled(cpp_boolean const&);
		cpp_boolean dispatchKeyEvent(local_ref< android::view::KeyEvent > const&);
		cpp_boolean executeKeyEvent(local_ref< android::view::KeyEvent > const&);
		cpp_boolean onInterceptTouchEvent(local_ref< android::view::MotionEvent > const&);
		cpp_boolean onTouchEvent(local_ref< android::view::MotionEvent > const&);
		cpp_boolean pageScroll(cpp_int const&);
		cpp_boolean fullScroll(cpp_int const&);
		cpp_boolean arrowScroll(cpp_int const&);
		void smoothScrollBy(cpp_int const&, cpp_int const&);
		void smoothScrollTo(cpp_int const&, cpp_int const&);
		void computeScroll();
		void requestChildFocus(local_ref< android::view::View > const&, local_ref< android::view::View > const&);
		cpp_boolean requestChildRectangleOnScreen(local_ref< android::view::View > const&, local_ref< android::graphics::Rect > const&, cpp_boolean const&);
		void requestLayout();
		void fling(cpp_int const&);
		void scrollTo(cpp_int const&, cpp_int const&);
	}; //class HorizontalScrollView

} //namespace widget
} //namespace android


} //namespace j2cpp

#endif //J2CPP_ANDROID_WIDGET_HORIZONTALSCROLLVIEW_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_WIDGET_HORIZONTALSCROLLVIEW_HPP_IMPL
#define J2CPP_ANDROID_WIDGET_HORIZONTALSCROLLVIEW_HPP_IMPL

namespace j2cpp {


template <>
local_ref< android::widget::HorizontalScrollView > create< android::widget::HorizontalScrollView>(local_ref< android::content::Context > const &a0)
{
	return local_ref< android::widget::HorizontalScrollView >(
		environment::get().get_jenv()->NewObject(
			get_class<android::widget::HorizontalScrollView::J2CPP_CLASS_NAME>(),
			get_method_id<android::widget::HorizontalScrollView::J2CPP_CLASS_NAME, android::widget::HorizontalScrollView::J2CPP_METHOD_NAME(0), android::widget::HorizontalScrollView::J2CPP_METHOD_SIGNATURE(0), false>(),
			a0.get_jtype()
		)
	);
}

template <>
local_ref< android::widget::HorizontalScrollView > create< android::widget::HorizontalScrollView>(local_ref< android::content::Context > const &a0, local_ref< android::util::AttributeSet > const &a1)
{
	return local_ref< android::widget::HorizontalScrollView >(
		environment::get().get_jenv()->NewObject(
			get_class<android::widget::HorizontalScrollView::J2CPP_CLASS_NAME>(),
			get_method_id<android::widget::HorizontalScrollView::J2CPP_CLASS_NAME, android::widget::HorizontalScrollView::J2CPP_METHOD_NAME(1), android::widget::HorizontalScrollView::J2CPP_METHOD_SIGNATURE(1), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

template <>
local_ref< android::widget::HorizontalScrollView > create< android::widget::HorizontalScrollView>(local_ref< android::content::Context > const &a0, local_ref< android::util::AttributeSet > const &a1, cpp_int const &a2)
{
	return local_ref< android::widget::HorizontalScrollView >(
		environment::get().get_jenv()->NewObject(
			get_class<android::widget::HorizontalScrollView::J2CPP_CLASS_NAME>(),
			get_method_id<android::widget::HorizontalScrollView::J2CPP_CLASS_NAME, android::widget::HorizontalScrollView::J2CPP_METHOD_NAME(2), android::widget::HorizontalScrollView::J2CPP_METHOD_SIGNATURE(2), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}



cpp_int android::widget::HorizontalScrollView::getMaxScrollAmount()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>()
		)
	);
}

void android::widget::HorizontalScrollView::addView(local_ref< android::view::View > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>(),
			a0.get_jtype()
		)
	);
}

void android::widget::HorizontalScrollView::addView(local_ref< android::view::View > const &a0, cpp_int const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(7), J2CPP_METHOD_SIGNATURE(7), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void android::widget::HorizontalScrollView::addView(local_ref< android::view::View > const &a0, local_ref< android::view::ViewGroup_::LayoutParams > const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(8), J2CPP_METHOD_SIGNATURE(8), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void android::widget::HorizontalScrollView::addView(local_ref< android::view::View > const &a0, cpp_int const &a1, local_ref< android::view::ViewGroup_::LayoutParams > const &a2)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(9), J2CPP_METHOD_SIGNATURE(9), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

cpp_boolean android::widget::HorizontalScrollView::isFillViewport()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(10), J2CPP_METHOD_SIGNATURE(10), false>()
		)
	);
}

void android::widget::HorizontalScrollView::setFillViewport(cpp_boolean const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(11), J2CPP_METHOD_SIGNATURE(11), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean android::widget::HorizontalScrollView::isSmoothScrollingEnabled()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(12), J2CPP_METHOD_SIGNATURE(12), false>()
		)
	);
}

void android::widget::HorizontalScrollView::setSmoothScrollingEnabled(cpp_boolean const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(13), J2CPP_METHOD_SIGNATURE(13), false>(),
			a0.get_jtype()
		)
	);
}


cpp_boolean android::widget::HorizontalScrollView::dispatchKeyEvent(local_ref< android::view::KeyEvent > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(15), J2CPP_METHOD_SIGNATURE(15), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean android::widget::HorizontalScrollView::executeKeyEvent(local_ref< android::view::KeyEvent > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(16), J2CPP_METHOD_SIGNATURE(16), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean android::widget::HorizontalScrollView::onInterceptTouchEvent(local_ref< android::view::MotionEvent > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(17), J2CPP_METHOD_SIGNATURE(17), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean android::widget::HorizontalScrollView::onTouchEvent(local_ref< android::view::MotionEvent > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(18), J2CPP_METHOD_SIGNATURE(18), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean android::widget::HorizontalScrollView::pageScroll(cpp_int const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(19), J2CPP_METHOD_SIGNATURE(19), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean android::widget::HorizontalScrollView::fullScroll(cpp_int const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(20), J2CPP_METHOD_SIGNATURE(20), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean android::widget::HorizontalScrollView::arrowScroll(cpp_int const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(21), J2CPP_METHOD_SIGNATURE(21), false>(),
			a0.get_jtype()
		)
	);
}

void android::widget::HorizontalScrollView::smoothScrollBy(cpp_int const &a0, cpp_int const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(22), J2CPP_METHOD_SIGNATURE(22), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void android::widget::HorizontalScrollView::smoothScrollTo(cpp_int const &a0, cpp_int const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(23), J2CPP_METHOD_SIGNATURE(23), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}





void android::widget::HorizontalScrollView::computeScroll()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(28), J2CPP_METHOD_SIGNATURE(28), false>()
		)
	);
}


void android::widget::HorizontalScrollView::requestChildFocus(local_ref< android::view::View > const &a0, local_ref< android::view::View > const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(30), J2CPP_METHOD_SIGNATURE(30), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}


cpp_boolean android::widget::HorizontalScrollView::requestChildRectangleOnScreen(local_ref< android::view::View > const &a0, local_ref< android::graphics::Rect > const &a1, cpp_boolean const &a2)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(32), J2CPP_METHOD_SIGNATURE(32), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

void android::widget::HorizontalScrollView::requestLayout()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(33), J2CPP_METHOD_SIGNATURE(33), false>()
		)
	);
}



void android::widget::HorizontalScrollView::fling(cpp_int const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(36), J2CPP_METHOD_SIGNATURE(36), false>(),
			a0.get_jtype()
		)
	);
}

void android::widget::HorizontalScrollView::scrollTo(cpp_int const &a0, cpp_int const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(37), J2CPP_METHOD_SIGNATURE(37), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}


J2CPP_DEFINE_CLASS(android::widget::HorizontalScrollView,"android/widget/HorizontalScrollView")
J2CPP_DEFINE_METHOD(android::widget::HorizontalScrollView,0,"<init>","(Landroid/content/Context;)V")
J2CPP_DEFINE_METHOD(android::widget::HorizontalScrollView,1,"<init>","(Landroid/content/Context;Landroid/util/AttributeSet;)V")
J2CPP_DEFINE_METHOD(android::widget::HorizontalScrollView,2,"<init>","(Landroid/content/Context;Landroid/util/AttributeSet;I)V")
J2CPP_DEFINE_METHOD(android::widget::HorizontalScrollView,3,"getLeftFadingEdgeStrength","()F")
J2CPP_DEFINE_METHOD(android::widget::HorizontalScrollView,4,"getRightFadingEdgeStrength","()F")
J2CPP_DEFINE_METHOD(android::widget::HorizontalScrollView,5,"getMaxScrollAmount","()I")
J2CPP_DEFINE_METHOD(android::widget::HorizontalScrollView,6,"addView","(Landroid/view/View;)V")
J2CPP_DEFINE_METHOD(android::widget::HorizontalScrollView,7,"addView","(Landroid/view/View;I)V")
J2CPP_DEFINE_METHOD(android::widget::HorizontalScrollView,8,"addView","(Landroid/view/View;Landroid/view/ViewGroup$LayoutParams;)V")
J2CPP_DEFINE_METHOD(android::widget::HorizontalScrollView,9,"addView","(Landroid/view/View;ILandroid/view/ViewGroup$LayoutParams;)V")
J2CPP_DEFINE_METHOD(android::widget::HorizontalScrollView,10,"isFillViewport","()Z")
J2CPP_DEFINE_METHOD(android::widget::HorizontalScrollView,11,"setFillViewport","(Z)V")
J2CPP_DEFINE_METHOD(android::widget::HorizontalScrollView,12,"isSmoothScrollingEnabled","()Z")
J2CPP_DEFINE_METHOD(android::widget::HorizontalScrollView,13,"setSmoothScrollingEnabled","(Z)V")
J2CPP_DEFINE_METHOD(android::widget::HorizontalScrollView,14,"onMeasure","(II)V")
J2CPP_DEFINE_METHOD(android::widget::HorizontalScrollView,15,"dispatchKeyEvent","(Landroid/view/KeyEvent;)Z")
J2CPP_DEFINE_METHOD(android::widget::HorizontalScrollView,16,"executeKeyEvent","(Landroid/view/KeyEvent;)Z")
J2CPP_DEFINE_METHOD(android::widget::HorizontalScrollView,17,"onInterceptTouchEvent","(Landroid/view/MotionEvent;)Z")
J2CPP_DEFINE_METHOD(android::widget::HorizontalScrollView,18,"onTouchEvent","(Landroid/view/MotionEvent;)Z")
J2CPP_DEFINE_METHOD(android::widget::HorizontalScrollView,19,"pageScroll","(I)Z")
J2CPP_DEFINE_METHOD(android::widget::HorizontalScrollView,20,"fullScroll","(I)Z")
J2CPP_DEFINE_METHOD(android::widget::HorizontalScrollView,21,"arrowScroll","(I)Z")
J2CPP_DEFINE_METHOD(android::widget::HorizontalScrollView,22,"smoothScrollBy","(II)V")
J2CPP_DEFINE_METHOD(android::widget::HorizontalScrollView,23,"smoothScrollTo","(II)V")
J2CPP_DEFINE_METHOD(android::widget::HorizontalScrollView,24,"computeHorizontalScrollRange","()I")
J2CPP_DEFINE_METHOD(android::widget::HorizontalScrollView,25,"computeHorizontalScrollOffset","()I")
J2CPP_DEFINE_METHOD(android::widget::HorizontalScrollView,26,"measureChild","(Landroid/view/View;II)V")
J2CPP_DEFINE_METHOD(android::widget::HorizontalScrollView,27,"measureChildWithMargins","(Landroid/view/View;IIII)V")
J2CPP_DEFINE_METHOD(android::widget::HorizontalScrollView,28,"computeScroll","()V")
J2CPP_DEFINE_METHOD(android::widget::HorizontalScrollView,29,"computeScrollDeltaToGetChildRectOnScreen","(Landroid/graphics/Rect;)I")
J2CPP_DEFINE_METHOD(android::widget::HorizontalScrollView,30,"requestChildFocus","(Landroid/view/View;Landroid/view/View;)V")
J2CPP_DEFINE_METHOD(android::widget::HorizontalScrollView,31,"onRequestFocusInDescendants","(ILandroid/graphics/Rect;)Z")
J2CPP_DEFINE_METHOD(android::widget::HorizontalScrollView,32,"requestChildRectangleOnScreen","(Landroid/view/View;Landroid/graphics/Rect;Z)Z")
J2CPP_DEFINE_METHOD(android::widget::HorizontalScrollView,33,"requestLayout","()V")
J2CPP_DEFINE_METHOD(android::widget::HorizontalScrollView,34,"onLayout","(ZIIII)V")
J2CPP_DEFINE_METHOD(android::widget::HorizontalScrollView,35,"onSizeChanged","(IIII)V")
J2CPP_DEFINE_METHOD(android::widget::HorizontalScrollView,36,"fling","(I)V")
J2CPP_DEFINE_METHOD(android::widget::HorizontalScrollView,37,"scrollTo","(II)V")

} //namespace j2cpp

#endif //J2CPP_ANDROID_WIDGET_HORIZONTALSCROLLVIEW_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
