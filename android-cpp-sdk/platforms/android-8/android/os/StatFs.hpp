/*================================================================================
  code generated by: java2cpp
  class: android.os.StatFs
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_OS_STATFS_HPP_DECL
#define J2CPP_ANDROID_OS_STATFS_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class String; } } }


#include <java/lang/String.hpp>


namespace j2cpp {

namespace android { namespace os {

	class StatFs;
	class StatFs
		: public cpp_object<StatFs>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)

		StatFs(jobject jobj)
		: cpp_object<StatFs>(jobj)
		{
		}

		void restat(local_ref< java::lang::String > const&);
		cpp_int getBlockSize();
		cpp_int getBlockCount();
		cpp_int getFreeBlocks();
		cpp_int getAvailableBlocks();
	}; //class StatFs

} //namespace os
} //namespace android


} //namespace j2cpp

#endif //J2CPP_ANDROID_OS_STATFS_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_OS_STATFS_HPP_IMPL
#define J2CPP_ANDROID_OS_STATFS_HPP_IMPL

namespace j2cpp {


template <>
local_ref< android::os::StatFs > create< android::os::StatFs>(local_ref< java::lang::String > const &a0)
{
	return local_ref< android::os::StatFs >(
		environment::get().get_jenv()->NewObject(
			get_class<android::os::StatFs::J2CPP_CLASS_NAME>(),
			get_method_id<android::os::StatFs::J2CPP_CLASS_NAME, android::os::StatFs::J2CPP_METHOD_NAME(0), android::os::StatFs::J2CPP_METHOD_SIGNATURE(0), false>(),
			a0.get_jtype()
		)
	);
}

void android::os::StatFs::restat(local_ref< java::lang::String > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), false>(),
			a0.get_jtype()
		)
	);
}


cpp_int android::os::StatFs::getBlockSize()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>()
		)
	);
}

cpp_int android::os::StatFs::getBlockCount()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>()
		)
	);
}

cpp_int android::os::StatFs::getFreeBlocks()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>()
		)
	);
}

cpp_int android::os::StatFs::getAvailableBlocks()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>()
		)
	);
}


J2CPP_DEFINE_CLASS(android::os::StatFs,"android/os/StatFs")
J2CPP_DEFINE_METHOD(android::os::StatFs,0,"<init>","(Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(android::os::StatFs,1,"restat","(Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(android::os::StatFs,2,"finalize","()V")
J2CPP_DEFINE_METHOD(android::os::StatFs,3,"getBlockSize","()I")
J2CPP_DEFINE_METHOD(android::os::StatFs,4,"getBlockCount","()I")
J2CPP_DEFINE_METHOD(android::os::StatFs,5,"getFreeBlocks","()I")
J2CPP_DEFINE_METHOD(android::os::StatFs,6,"getAvailableBlocks","()I")

} //namespace j2cpp

#endif //J2CPP_ANDROID_OS_STATFS_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
