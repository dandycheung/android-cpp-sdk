/*================================================================================
  code generated by: java2cpp
  class: android.os.MemoryFile
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_OS_MEMORYFILE_HPP_DECL
#define J2CPP_ANDROID_OS_MEMORYFILE_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace io { class InputStream; } } }
namespace j2cpp { namespace java { namespace io { class OutputStream; } } }


#include <java/io/InputStream.hpp>
#include <java/io/OutputStream.hpp>
#include <java/lang/String.hpp>


namespace j2cpp {

namespace android { namespace os {

	class MemoryFile;
	class MemoryFile
		: public cpp_object<MemoryFile>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)

		MemoryFile(jobject jobj)
		: cpp_object<MemoryFile>(jobj)
		{
		}

		void close();
		cpp_int length();
		cpp_boolean isPurgingAllowed();
		cpp_boolean allowPurging(cpp_boolean const&);
		local_ref< java::io::InputStream > getInputStream();
		local_ref< java::io::OutputStream > getOutputStream();
		cpp_int readBytes(local_ref< cpp_byte_array<1> > const&, cpp_int const&, cpp_int const&, cpp_int const&);
		void writeBytes(local_ref< cpp_byte_array<1> > const&, cpp_int const&, cpp_int const&, cpp_int const&);
	}; //class MemoryFile

} //namespace os
} //namespace android


} //namespace j2cpp

#endif //J2CPP_ANDROID_OS_MEMORYFILE_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_OS_MEMORYFILE_HPP_IMPL
#define J2CPP_ANDROID_OS_MEMORYFILE_HPP_IMPL

namespace j2cpp {


template <>
local_ref< android::os::MemoryFile > create< android::os::MemoryFile>(local_ref< java::lang::String > const &a0, cpp_int const &a1)
{
	return local_ref< android::os::MemoryFile >(
		environment::get().get_jenv()->NewObject(
			get_class<android::os::MemoryFile::J2CPP_CLASS_NAME>(),
			get_method_id<android::os::MemoryFile::J2CPP_CLASS_NAME, android::os::MemoryFile::J2CPP_METHOD_NAME(0), android::os::MemoryFile::J2CPP_METHOD_SIGNATURE(0), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void android::os::MemoryFile::close()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), false>()
		)
	);
}


cpp_int android::os::MemoryFile::length()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>()
		)
	);
}

cpp_boolean android::os::MemoryFile::isPurgingAllowed()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>()
		)
	);
}

cpp_boolean android::os::MemoryFile::allowPurging(cpp_boolean const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::io::InputStream > android::os::MemoryFile::getInputStream()
{
	return local_ref< java::io::InputStream >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>()
		)
	);
}

local_ref< java::io::OutputStream > android::os::MemoryFile::getOutputStream()
{
	return local_ref< java::io::OutputStream >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(7), J2CPP_METHOD_SIGNATURE(7), false>()
		)
	);
}

cpp_int android::os::MemoryFile::readBytes(local_ref< cpp_byte_array<1> > const &a0, cpp_int const &a1, cpp_int const &a2, cpp_int const &a3)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(8), J2CPP_METHOD_SIGNATURE(8), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype(), a3.get_jtype()
		)
	);
}

void android::os::MemoryFile::writeBytes(local_ref< cpp_byte_array<1> > const &a0, cpp_int const &a1, cpp_int const &a2, cpp_int const &a3)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(9), J2CPP_METHOD_SIGNATURE(9), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype(), a3.get_jtype()
		)
	);
}


J2CPP_DEFINE_CLASS(android::os::MemoryFile,"android/os/MemoryFile")
J2CPP_DEFINE_METHOD(android::os::MemoryFile,0,"<init>","(Ljava/lang/String;I)V")
J2CPP_DEFINE_METHOD(android::os::MemoryFile,1,"close","()V")
J2CPP_DEFINE_METHOD(android::os::MemoryFile,2,"finalize","()V")
J2CPP_DEFINE_METHOD(android::os::MemoryFile,3,"length","()I")
J2CPP_DEFINE_METHOD(android::os::MemoryFile,4,"isPurgingAllowed","()Z")
J2CPP_DEFINE_METHOD(android::os::MemoryFile,5,"allowPurging","(Z)Z")
J2CPP_DEFINE_METHOD(android::os::MemoryFile,6,"getInputStream","()Ljava/io/InputStream;")
J2CPP_DEFINE_METHOD(android::os::MemoryFile,7,"getOutputStream","()Ljava/io/OutputStream;")
J2CPP_DEFINE_METHOD(android::os::MemoryFile,8,"readBytes","([BIII)I")
J2CPP_DEFINE_METHOD(android::os::MemoryFile,9,"writeBytes","([BIII)V")

} //namespace j2cpp

#endif //J2CPP_ANDROID_OS_MEMORYFILE_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
