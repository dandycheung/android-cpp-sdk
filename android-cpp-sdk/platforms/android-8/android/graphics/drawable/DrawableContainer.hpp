/*================================================================================
  code generated by: java2cpp
  class: android.graphics.drawable.DrawableContainer
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_GRAPHICS_DRAWABLE_DRAWABLECONTAINER_HPP_DECL
#define J2CPP_ANDROID_GRAPHICS_DRAWABLE_DRAWABLECONTAINER_HPP_DECL


namespace j2cpp { namespace android { namespace graphics { class Canvas; } } }
namespace j2cpp { namespace android { namespace graphics { class Rect; } } }
namespace j2cpp { namespace android { namespace graphics { class ColorFilter; } } }
namespace j2cpp { namespace android { namespace graphics { namespace drawable { class Drawable; } } } }
namespace j2cpp { namespace android { namespace graphics { namespace drawable { namespace Drawable_ { class ConstantState; } } } } }
namespace j2cpp { namespace java { namespace lang { class Runnable; } } }


#include <android/graphics/Canvas.hpp>
#include <android/graphics/ColorFilter.hpp>
#include <android/graphics/Rect.hpp>
#include <android/graphics/drawable/Drawable.hpp>
#include <java/lang/Runnable.hpp>


namespace j2cpp {

namespace android { namespace graphics { namespace drawable {

	class DrawableContainer;
	namespace DrawableContainer_ {

		class DrawableContainerState;
		class DrawableContainerState
			: public cpp_object<DrawableContainerState>
		{
		public:

			J2CPP_DECLARE_CLASS

			J2CPP_DECLARE_METHOD(0)
			J2CPP_DECLARE_METHOD(1)
			J2CPP_DECLARE_METHOD(2)
			J2CPP_DECLARE_METHOD(3)
			J2CPP_DECLARE_METHOD(4)
			J2CPP_DECLARE_METHOD(5)
			J2CPP_DECLARE_METHOD(6)
			J2CPP_DECLARE_METHOD(7)
			J2CPP_DECLARE_METHOD(8)
			J2CPP_DECLARE_METHOD(9)
			J2CPP_DECLARE_METHOD(10)
			J2CPP_DECLARE_METHOD(11)
			J2CPP_DECLARE_METHOD(12)
			J2CPP_DECLARE_METHOD(13)
			J2CPP_DECLARE_METHOD(14)
			J2CPP_DECLARE_METHOD(15)
			J2CPP_DECLARE_METHOD(16)

			DrawableContainerState(jobject jobj)
			: cpp_object<DrawableContainerState>(jobj)
			{
			}

			cpp_int getChangingConfigurations();
			cpp_int addChild(local_ref< android::graphics::drawable::Drawable > const&);
			cpp_int getChildCount();
			local_ref< cpp_object_array<android::graphics::drawable::Drawable, 1> > getChildren();
			void setVariablePadding(cpp_boolean const&);
			local_ref< android::graphics::Rect > getConstantPadding();
			void setConstantSize(cpp_boolean const&);
			cpp_boolean isConstantSize();
			cpp_int getConstantWidth();
			cpp_int getConstantHeight();
			cpp_int getConstantMinimumWidth();
			cpp_int getConstantMinimumHeight();
			cpp_int getOpacity();
			cpp_boolean isStateful();
			void growArray(cpp_int const&, cpp_int const&);
			cpp_boolean canConstantState();
		}; //class DrawableContainerState

	} //namespace DrawableContainer_

	class DrawableContainer
		: public cpp_object<DrawableContainer>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_METHOD(12)
		J2CPP_DECLARE_METHOD(13)
		J2CPP_DECLARE_METHOD(14)
		J2CPP_DECLARE_METHOD(15)
		J2CPP_DECLARE_METHOD(16)
		J2CPP_DECLARE_METHOD(17)
		J2CPP_DECLARE_METHOD(18)
		J2CPP_DECLARE_METHOD(19)
		J2CPP_DECLARE_METHOD(20)
		J2CPP_DECLARE_METHOD(21)
		J2CPP_DECLARE_METHOD(22)
		J2CPP_DECLARE_METHOD(23)
		J2CPP_DECLARE_METHOD(24)

		typedef DrawableContainer_::DrawableContainerState DrawableContainerState;

		DrawableContainer(jobject jobj)
		: cpp_object<DrawableContainer>(jobj)
		{
		}

		void draw(local_ref< android::graphics::Canvas > const&);
		cpp_int getChangingConfigurations();
		cpp_boolean getPadding(local_ref< android::graphics::Rect > const&);
		void setAlpha(cpp_int const&);
		void setDither(cpp_boolean const&);
		void setColorFilter(local_ref< android::graphics::ColorFilter > const&);
		cpp_boolean isStateful();
		cpp_int getIntrinsicWidth();
		cpp_int getIntrinsicHeight();
		cpp_int getMinimumWidth();
		cpp_int getMinimumHeight();
		void invalidateDrawable(local_ref< android::graphics::drawable::Drawable > const&);
		void scheduleDrawable(local_ref< android::graphics::drawable::Drawable > const&, local_ref< java::lang::Runnable > const&, cpp_long const&);
		void unscheduleDrawable(local_ref< android::graphics::drawable::Drawable > const&, local_ref< java::lang::Runnable > const&);
		cpp_boolean setVisible(cpp_boolean const&, cpp_boolean const&);
		cpp_int getOpacity();
		cpp_boolean selectDrawable(cpp_int const&);
		local_ref< android::graphics::drawable::Drawable > getCurrent();
		local_ref< android::graphics::drawable::Drawable_::ConstantState > getConstantState();
		local_ref< android::graphics::drawable::Drawable > mutate();
	}; //class DrawableContainer

} //namespace drawable
} //namespace graphics
} //namespace android


} //namespace j2cpp

#endif //J2CPP_ANDROID_GRAPHICS_DRAWABLE_DRAWABLECONTAINER_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_GRAPHICS_DRAWABLE_DRAWABLECONTAINER_HPP_IMPL
#define J2CPP_ANDROID_GRAPHICS_DRAWABLE_DRAWABLECONTAINER_HPP_IMPL

namespace j2cpp {



template <>
local_ref< android::graphics::drawable::DrawableContainer_::DrawableContainerState > create< android::graphics::drawable::DrawableContainer_::DrawableContainerState>()
{
	return local_ref< android::graphics::drawable::DrawableContainer_::DrawableContainerState >(
		environment::get().get_jenv()->NewObject(
			get_class<android::graphics::drawable::DrawableContainer_::DrawableContainerState::J2CPP_CLASS_NAME>(),
			get_method_id<android::graphics::drawable::DrawableContainer_::DrawableContainerState::J2CPP_CLASS_NAME, android::graphics::drawable::DrawableContainer_::DrawableContainerState::J2CPP_METHOD_NAME(0), android::graphics::drawable::DrawableContainer_::DrawableContainerState::J2CPP_METHOD_SIGNATURE(0), false>()
		)
	);
}

cpp_int android::graphics::drawable::DrawableContainer_::DrawableContainerState::getChangingConfigurations()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), false>()
		)
	);
}

cpp_int android::graphics::drawable::DrawableContainer_::DrawableContainerState::addChild(local_ref< android::graphics::drawable::Drawable > const &a0)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int android::graphics::drawable::DrawableContainer_::DrawableContainerState::getChildCount()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>()
		)
	);
}

local_ref< cpp_object_array<android::graphics::drawable::Drawable, 1> > android::graphics::drawable::DrawableContainer_::DrawableContainerState::getChildren()
{
	return local_ref< cpp_object_array<android::graphics::drawable::Drawable, 1> >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>()
		)
	);
}

void android::graphics::drawable::DrawableContainer_::DrawableContainerState::setVariablePadding(cpp_boolean const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< android::graphics::Rect > android::graphics::drawable::DrawableContainer_::DrawableContainerState::getConstantPadding()
{
	return local_ref< android::graphics::Rect >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>()
		)
	);
}

void android::graphics::drawable::DrawableContainer_::DrawableContainerState::setConstantSize(cpp_boolean const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(7), J2CPP_METHOD_SIGNATURE(7), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean android::graphics::drawable::DrawableContainer_::DrawableContainerState::isConstantSize()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(8), J2CPP_METHOD_SIGNATURE(8), false>()
		)
	);
}

cpp_int android::graphics::drawable::DrawableContainer_::DrawableContainerState::getConstantWidth()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(9), J2CPP_METHOD_SIGNATURE(9), false>()
		)
	);
}

cpp_int android::graphics::drawable::DrawableContainer_::DrawableContainerState::getConstantHeight()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(10), J2CPP_METHOD_SIGNATURE(10), false>()
		)
	);
}

cpp_int android::graphics::drawable::DrawableContainer_::DrawableContainerState::getConstantMinimumWidth()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(11), J2CPP_METHOD_SIGNATURE(11), false>()
		)
	);
}

cpp_int android::graphics::drawable::DrawableContainer_::DrawableContainerState::getConstantMinimumHeight()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(12), J2CPP_METHOD_SIGNATURE(12), false>()
		)
	);
}

cpp_int android::graphics::drawable::DrawableContainer_::DrawableContainerState::getOpacity()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(13), J2CPP_METHOD_SIGNATURE(13), false>()
		)
	);
}

cpp_boolean android::graphics::drawable::DrawableContainer_::DrawableContainerState::isStateful()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(14), J2CPP_METHOD_SIGNATURE(14), false>()
		)
	);
}

void android::graphics::drawable::DrawableContainer_::DrawableContainerState::growArray(cpp_int const &a0, cpp_int const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(15), J2CPP_METHOD_SIGNATURE(15), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_boolean android::graphics::drawable::DrawableContainer_::DrawableContainerState::canConstantState()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(16), J2CPP_METHOD_SIGNATURE(16), false>()
		)
	);
}


J2CPP_DEFINE_CLASS(android::graphics::drawable::DrawableContainer_::DrawableContainerState,"android/graphics/drawable/DrawableContainer$DrawableContainerState")
J2CPP_DEFINE_METHOD(android::graphics::drawable::DrawableContainer_::DrawableContainerState,0,"<init>","()V")
J2CPP_DEFINE_METHOD(android::graphics::drawable::DrawableContainer_::DrawableContainerState,1,"getChangingConfigurations","()I")
J2CPP_DEFINE_METHOD(android::graphics::drawable::DrawableContainer_::DrawableContainerState,2,"addChild","(Landroid/graphics/drawable/Drawable;)I")
J2CPP_DEFINE_METHOD(android::graphics::drawable::DrawableContainer_::DrawableContainerState,3,"getChildCount","()I")
J2CPP_DEFINE_METHOD(android::graphics::drawable::DrawableContainer_::DrawableContainerState,4,"getChildren","()[android.graphics.drawable.Drawable")
J2CPP_DEFINE_METHOD(android::graphics::drawable::DrawableContainer_::DrawableContainerState,5,"setVariablePadding","(Z)V")
J2CPP_DEFINE_METHOD(android::graphics::drawable::DrawableContainer_::DrawableContainerState,6,"getConstantPadding","()Landroid/graphics/Rect;")
J2CPP_DEFINE_METHOD(android::graphics::drawable::DrawableContainer_::DrawableContainerState,7,"setConstantSize","(Z)V")
J2CPP_DEFINE_METHOD(android::graphics::drawable::DrawableContainer_::DrawableContainerState,8,"isConstantSize","()Z")
J2CPP_DEFINE_METHOD(android::graphics::drawable::DrawableContainer_::DrawableContainerState,9,"getConstantWidth","()I")
J2CPP_DEFINE_METHOD(android::graphics::drawable::DrawableContainer_::DrawableContainerState,10,"getConstantHeight","()I")
J2CPP_DEFINE_METHOD(android::graphics::drawable::DrawableContainer_::DrawableContainerState,11,"getConstantMinimumWidth","()I")
J2CPP_DEFINE_METHOD(android::graphics::drawable::DrawableContainer_::DrawableContainerState,12,"getConstantMinimumHeight","()I")
J2CPP_DEFINE_METHOD(android::graphics::drawable::DrawableContainer_::DrawableContainerState,13,"getOpacity","()I")
J2CPP_DEFINE_METHOD(android::graphics::drawable::DrawableContainer_::DrawableContainerState,14,"isStateful","()Z")
J2CPP_DEFINE_METHOD(android::graphics::drawable::DrawableContainer_::DrawableContainerState,15,"growArray","(II)V")
J2CPP_DEFINE_METHOD(android::graphics::drawable::DrawableContainer_::DrawableContainerState,16,"canConstantState","()Z")


template <>
local_ref< android::graphics::drawable::DrawableContainer > create< android::graphics::drawable::DrawableContainer>()
{
	return local_ref< android::graphics::drawable::DrawableContainer >(
		environment::get().get_jenv()->NewObject(
			get_class<android::graphics::drawable::DrawableContainer::J2CPP_CLASS_NAME>(),
			get_method_id<android::graphics::drawable::DrawableContainer::J2CPP_CLASS_NAME, android::graphics::drawable::DrawableContainer::J2CPP_METHOD_NAME(0), android::graphics::drawable::DrawableContainer::J2CPP_METHOD_SIGNATURE(0), false>()
		)
	);
}

void android::graphics::drawable::DrawableContainer::draw(local_ref< android::graphics::Canvas > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int android::graphics::drawable::DrawableContainer::getChangingConfigurations()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>()
		)
	);
}

cpp_boolean android::graphics::drawable::DrawableContainer::getPadding(local_ref< android::graphics::Rect > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>(),
			a0.get_jtype()
		)
	);
}

void android::graphics::drawable::DrawableContainer::setAlpha(cpp_int const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>(),
			a0.get_jtype()
		)
	);
}

void android::graphics::drawable::DrawableContainer::setDither(cpp_boolean const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>(),
			a0.get_jtype()
		)
	);
}

void android::graphics::drawable::DrawableContainer::setColorFilter(local_ref< android::graphics::ColorFilter > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>(),
			a0.get_jtype()
		)
	);
}


cpp_boolean android::graphics::drawable::DrawableContainer::isStateful()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(8), J2CPP_METHOD_SIGNATURE(8), false>()
		)
	);
}



cpp_int android::graphics::drawable::DrawableContainer::getIntrinsicWidth()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(11), J2CPP_METHOD_SIGNATURE(11), false>()
		)
	);
}

cpp_int android::graphics::drawable::DrawableContainer::getIntrinsicHeight()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(12), J2CPP_METHOD_SIGNATURE(12), false>()
		)
	);
}

cpp_int android::graphics::drawable::DrawableContainer::getMinimumWidth()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(13), J2CPP_METHOD_SIGNATURE(13), false>()
		)
	);
}

cpp_int android::graphics::drawable::DrawableContainer::getMinimumHeight()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(14), J2CPP_METHOD_SIGNATURE(14), false>()
		)
	);
}

void android::graphics::drawable::DrawableContainer::invalidateDrawable(local_ref< android::graphics::drawable::Drawable > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(15), J2CPP_METHOD_SIGNATURE(15), false>(),
			a0.get_jtype()
		)
	);
}

void android::graphics::drawable::DrawableContainer::scheduleDrawable(local_ref< android::graphics::drawable::Drawable > const &a0, local_ref< java::lang::Runnable > const &a1, cpp_long const &a2)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(16), J2CPP_METHOD_SIGNATURE(16), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

void android::graphics::drawable::DrawableContainer::unscheduleDrawable(local_ref< android::graphics::drawable::Drawable > const &a0, local_ref< java::lang::Runnable > const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(17), J2CPP_METHOD_SIGNATURE(17), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_boolean android::graphics::drawable::DrawableContainer::setVisible(cpp_boolean const &a0, cpp_boolean const &a1)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(18), J2CPP_METHOD_SIGNATURE(18), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_int android::graphics::drawable::DrawableContainer::getOpacity()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(19), J2CPP_METHOD_SIGNATURE(19), false>()
		)
	);
}

cpp_boolean android::graphics::drawable::DrawableContainer::selectDrawable(cpp_int const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(20), J2CPP_METHOD_SIGNATURE(20), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< android::graphics::drawable::Drawable > android::graphics::drawable::DrawableContainer::getCurrent()
{
	return local_ref< android::graphics::drawable::Drawable >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(21), J2CPP_METHOD_SIGNATURE(21), false>()
		)
	);
}

local_ref< android::graphics::drawable::Drawable_::ConstantState > android::graphics::drawable::DrawableContainer::getConstantState()
{
	return local_ref< android::graphics::drawable::Drawable_::ConstantState >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(22), J2CPP_METHOD_SIGNATURE(22), false>()
		)
	);
}

local_ref< android::graphics::drawable::Drawable > android::graphics::drawable::DrawableContainer::mutate()
{
	return local_ref< android::graphics::drawable::Drawable >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(23), J2CPP_METHOD_SIGNATURE(23), false>()
		)
	);
}



J2CPP_DEFINE_CLASS(android::graphics::drawable::DrawableContainer,"android/graphics/drawable/DrawableContainer")
J2CPP_DEFINE_METHOD(android::graphics::drawable::DrawableContainer,0,"<init>","()V")
J2CPP_DEFINE_METHOD(android::graphics::drawable::DrawableContainer,1,"draw","(Landroid/graphics/Canvas;)V")
J2CPP_DEFINE_METHOD(android::graphics::drawable::DrawableContainer,2,"getChangingConfigurations","()I")
J2CPP_DEFINE_METHOD(android::graphics::drawable::DrawableContainer,3,"getPadding","(Landroid/graphics/Rect;)Z")
J2CPP_DEFINE_METHOD(android::graphics::drawable::DrawableContainer,4,"setAlpha","(I)V")
J2CPP_DEFINE_METHOD(android::graphics::drawable::DrawableContainer,5,"setDither","(Z)V")
J2CPP_DEFINE_METHOD(android::graphics::drawable::DrawableContainer,6,"setColorFilter","(Landroid/graphics/ColorFilter;)V")
J2CPP_DEFINE_METHOD(android::graphics::drawable::DrawableContainer,7,"onBoundsChange","(Landroid/graphics/Rect;)V")
J2CPP_DEFINE_METHOD(android::graphics::drawable::DrawableContainer,8,"isStateful","()Z")
J2CPP_DEFINE_METHOD(android::graphics::drawable::DrawableContainer,9,"onStateChange","([I)Z")
J2CPP_DEFINE_METHOD(android::graphics::drawable::DrawableContainer,10,"onLevelChange","(I)Z")
J2CPP_DEFINE_METHOD(android::graphics::drawable::DrawableContainer,11,"getIntrinsicWidth","()I")
J2CPP_DEFINE_METHOD(android::graphics::drawable::DrawableContainer,12,"getIntrinsicHeight","()I")
J2CPP_DEFINE_METHOD(android::graphics::drawable::DrawableContainer,13,"getMinimumWidth","()I")
J2CPP_DEFINE_METHOD(android::graphics::drawable::DrawableContainer,14,"getMinimumHeight","()I")
J2CPP_DEFINE_METHOD(android::graphics::drawable::DrawableContainer,15,"invalidateDrawable","(Landroid/graphics/drawable/Drawable;)V")
J2CPP_DEFINE_METHOD(android::graphics::drawable::DrawableContainer,16,"scheduleDrawable","(Landroid/graphics/drawable/Drawable;Ljava/lang/Runnable;J)V")
J2CPP_DEFINE_METHOD(android::graphics::drawable::DrawableContainer,17,"unscheduleDrawable","(Landroid/graphics/drawable/Drawable;Ljava/lang/Runnable;)V")
J2CPP_DEFINE_METHOD(android::graphics::drawable::DrawableContainer,18,"setVisible","(ZZ)Z")
J2CPP_DEFINE_METHOD(android::graphics::drawable::DrawableContainer,19,"getOpacity","()I")
J2CPP_DEFINE_METHOD(android::graphics::drawable::DrawableContainer,20,"selectDrawable","(I)Z")
J2CPP_DEFINE_METHOD(android::graphics::drawable::DrawableContainer,21,"getCurrent","()Landroid/graphics/drawable/Drawable;")
J2CPP_DEFINE_METHOD(android::graphics::drawable::DrawableContainer,22,"getConstantState","()Landroid/graphics/drawable/Drawable$ConstantState;")
J2CPP_DEFINE_METHOD(android::graphics::drawable::DrawableContainer,23,"mutate","()Landroid/graphics/drawable/Drawable;")
J2CPP_DEFINE_METHOD(android::graphics::drawable::DrawableContainer,24,"setConstantState","(Landroid/graphics/drawable/DrawableContainer$DrawableContainerState;)V")

} //namespace j2cpp

#endif //J2CPP_ANDROID_GRAPHICS_DRAWABLE_DRAWABLECONTAINER_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
