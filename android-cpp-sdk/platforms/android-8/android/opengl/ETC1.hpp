/*================================================================================
  code generated by: java2cpp
  class: android.opengl.ETC1
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_OPENGL_ETC1_HPP_DECL
#define J2CPP_ANDROID_OPENGL_ETC1_HPP_DECL


namespace j2cpp { namespace java { namespace nio { class Buffer; } } }


#include <java/nio/Buffer.hpp>


namespace j2cpp {

namespace android { namespace opengl {

	class ETC1;
	class ETC1
		: public cpp_object<ETC1>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_FIELD(0)
		J2CPP_DECLARE_FIELD(1)
		J2CPP_DECLARE_FIELD(2)
		J2CPP_DECLARE_FIELD(3)

		ETC1(jobject jobj)
		: cpp_object<ETC1>(jobj)
		{
		}

		static void encodeBlock(local_ref< java::nio::Buffer > const&, cpp_int const&, local_ref< java::nio::Buffer > const&);
		static void decodeBlock(local_ref< java::nio::Buffer > const&, local_ref< java::nio::Buffer > const&);
		static cpp_int getEncodedDataSize(cpp_int const&, cpp_int const&);
		static void encodeImage(local_ref< java::nio::Buffer > const&, cpp_int const&, cpp_int const&, cpp_int const&, cpp_int const&, local_ref< java::nio::Buffer > const&);
		static void decodeImage(local_ref< java::nio::Buffer > const&, local_ref< java::nio::Buffer > const&, cpp_int const&, cpp_int const&, cpp_int const&, cpp_int const&);
		static void formatHeader(local_ref< java::nio::Buffer > const&, cpp_int const&, cpp_int const&);
		static cpp_boolean isValid(local_ref< java::nio::Buffer > const&);
		static cpp_int getWidth(local_ref< java::nio::Buffer > const&);
		static cpp_int getHeight(local_ref< java::nio::Buffer > const&);

		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(0), J2CPP_FIELD_SIGNATURE(0), cpp_int > ENCODED_BLOCK_SIZE;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(1), J2CPP_FIELD_SIGNATURE(1), cpp_int > DECODED_BLOCK_SIZE;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(2), J2CPP_FIELD_SIGNATURE(2), cpp_int > ETC_PKM_HEADER_SIZE;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(3), J2CPP_FIELD_SIGNATURE(3), cpp_int > ETC1_RGB8_OES;
	}; //class ETC1

} //namespace opengl
} //namespace android


} //namespace j2cpp

#endif //J2CPP_ANDROID_OPENGL_ETC1_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_OPENGL_ETC1_HPP_IMPL
#define J2CPP_ANDROID_OPENGL_ETC1_HPP_IMPL

namespace j2cpp {


template <>
local_ref< android::opengl::ETC1 > create< android::opengl::ETC1>()
{
	return local_ref< android::opengl::ETC1 >(
		environment::get().get_jenv()->NewObject(
			get_class<android::opengl::ETC1::J2CPP_CLASS_NAME>(),
			get_method_id<android::opengl::ETC1::J2CPP_CLASS_NAME, android::opengl::ETC1::J2CPP_METHOD_NAME(0), android::opengl::ETC1::J2CPP_METHOD_SIGNATURE(0), false>()
		)
	);
}

void android::opengl::ETC1::encodeBlock(local_ref< java::nio::Buffer > const &a0, cpp_int const &a1, local_ref< java::nio::Buffer > const &a2)
{
	return void(
		environment::get().get_jenv()->CallStaticVoidMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), true>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

void android::opengl::ETC1::decodeBlock(local_ref< java::nio::Buffer > const &a0, local_ref< java::nio::Buffer > const &a1)
{
	return void(
		environment::get().get_jenv()->CallStaticVoidMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), true>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_int android::opengl::ETC1::getEncodedDataSize(cpp_int const &a0, cpp_int const &a1)
{
	return cpp_int(
		environment::get().get_jenv()->CallStaticIntMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), true>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void android::opengl::ETC1::encodeImage(local_ref< java::nio::Buffer > const &a0, cpp_int const &a1, cpp_int const &a2, cpp_int const &a3, cpp_int const &a4, local_ref< java::nio::Buffer > const &a5)
{
	return void(
		environment::get().get_jenv()->CallStaticVoidMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), true>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype(), a3.get_jtype(), a4.get_jtype(), a5.get_jtype()
		)
	);
}

void android::opengl::ETC1::decodeImage(local_ref< java::nio::Buffer > const &a0, local_ref< java::nio::Buffer > const &a1, cpp_int const &a2, cpp_int const &a3, cpp_int const &a4, cpp_int const &a5)
{
	return void(
		environment::get().get_jenv()->CallStaticVoidMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), true>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype(), a3.get_jtype(), a4.get_jtype(), a5.get_jtype()
		)
	);
}

void android::opengl::ETC1::formatHeader(local_ref< java::nio::Buffer > const &a0, cpp_int const &a1, cpp_int const &a2)
{
	return void(
		environment::get().get_jenv()->CallStaticVoidMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), true>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

cpp_boolean android::opengl::ETC1::isValid(local_ref< java::nio::Buffer > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallStaticBooleanMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(7), J2CPP_METHOD_SIGNATURE(7), true>(),
			a0.get_jtype()
		)
	);
}

cpp_int android::opengl::ETC1::getWidth(local_ref< java::nio::Buffer > const &a0)
{
	return cpp_int(
		environment::get().get_jenv()->CallStaticIntMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(8), J2CPP_METHOD_SIGNATURE(8), true>(),
			a0.get_jtype()
		)
	);
}

cpp_int android::opengl::ETC1::getHeight(local_ref< java::nio::Buffer > const &a0)
{
	return cpp_int(
		environment::get().get_jenv()->CallStaticIntMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(9), J2CPP_METHOD_SIGNATURE(9), true>(),
			a0.get_jtype()
		)
	);
}


static_field<
	android::opengl::ETC1::J2CPP_CLASS_NAME,
	android::opengl::ETC1::J2CPP_FIELD_NAME(0),
	android::opengl::ETC1::J2CPP_FIELD_SIGNATURE(0),
	cpp_int
> android::opengl::ETC1::ENCODED_BLOCK_SIZE;

static_field<
	android::opengl::ETC1::J2CPP_CLASS_NAME,
	android::opengl::ETC1::J2CPP_FIELD_NAME(1),
	android::opengl::ETC1::J2CPP_FIELD_SIGNATURE(1),
	cpp_int
> android::opengl::ETC1::DECODED_BLOCK_SIZE;

static_field<
	android::opengl::ETC1::J2CPP_CLASS_NAME,
	android::opengl::ETC1::J2CPP_FIELD_NAME(2),
	android::opengl::ETC1::J2CPP_FIELD_SIGNATURE(2),
	cpp_int
> android::opengl::ETC1::ETC_PKM_HEADER_SIZE;

static_field<
	android::opengl::ETC1::J2CPP_CLASS_NAME,
	android::opengl::ETC1::J2CPP_FIELD_NAME(3),
	android::opengl::ETC1::J2CPP_FIELD_SIGNATURE(3),
	cpp_int
> android::opengl::ETC1::ETC1_RGB8_OES;


J2CPP_DEFINE_CLASS(android::opengl::ETC1,"android/opengl/ETC1")
J2CPP_DEFINE_METHOD(android::opengl::ETC1,0,"<init>","()V")
J2CPP_DEFINE_METHOD(android::opengl::ETC1,1,"encodeBlock","(Ljava/nio/Buffer;ILjava/nio/Buffer;)V")
J2CPP_DEFINE_METHOD(android::opengl::ETC1,2,"decodeBlock","(Ljava/nio/Buffer;Ljava/nio/Buffer;)V")
J2CPP_DEFINE_METHOD(android::opengl::ETC1,3,"getEncodedDataSize","(II)I")
J2CPP_DEFINE_METHOD(android::opengl::ETC1,4,"encodeImage","(Ljava/nio/Buffer;IIIILjava/nio/Buffer;)V")
J2CPP_DEFINE_METHOD(android::opengl::ETC1,5,"decodeImage","(Ljava/nio/Buffer;Ljava/nio/Buffer;IIII)V")
J2CPP_DEFINE_METHOD(android::opengl::ETC1,6,"formatHeader","(Ljava/nio/Buffer;II)V")
J2CPP_DEFINE_METHOD(android::opengl::ETC1,7,"isValid","(Ljava/nio/Buffer;)Z")
J2CPP_DEFINE_METHOD(android::opengl::ETC1,8,"getWidth","(Ljava/nio/Buffer;)I")
J2CPP_DEFINE_METHOD(android::opengl::ETC1,9,"getHeight","(Ljava/nio/Buffer;)I")
J2CPP_DEFINE_FIELD(android::opengl::ETC1,0,"ENCODED_BLOCK_SIZE","I")
J2CPP_DEFINE_FIELD(android::opengl::ETC1,1,"DECODED_BLOCK_SIZE","I")
J2CPP_DEFINE_FIELD(android::opengl::ETC1,2,"ETC_PKM_HEADER_SIZE","I")
J2CPP_DEFINE_FIELD(android::opengl::ETC1,3,"ETC1_RGB8_OES","I")

} //namespace j2cpp

#endif //J2CPP_ANDROID_OPENGL_ETC1_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
