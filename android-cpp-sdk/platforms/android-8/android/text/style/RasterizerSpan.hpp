/*================================================================================
  code generated by: java2cpp
  class: android.text.style.RasterizerSpan
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_TEXT_STYLE_RASTERIZERSPAN_HPP_DECL
#define J2CPP_ANDROID_TEXT_STYLE_RASTERIZERSPAN_HPP_DECL


namespace j2cpp { namespace android { namespace text { class TextPaint; } } }
namespace j2cpp { namespace android { namespace graphics { class Rasterizer; } } }


#include <android/graphics/Rasterizer.hpp>
#include <android/text/TextPaint.hpp>


namespace j2cpp {

namespace android { namespace text { namespace style {

	class RasterizerSpan;
	class RasterizerSpan
		: public cpp_object<RasterizerSpan>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)

		RasterizerSpan(jobject jobj)
		: cpp_object<RasterizerSpan>(jobj)
		{
		}

		local_ref< android::graphics::Rasterizer > getRasterizer();
		void updateDrawState(local_ref< android::text::TextPaint > const&);
	}; //class RasterizerSpan

} //namespace style
} //namespace text
} //namespace android


} //namespace j2cpp

#endif //J2CPP_ANDROID_TEXT_STYLE_RASTERIZERSPAN_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_TEXT_STYLE_RASTERIZERSPAN_HPP_IMPL
#define J2CPP_ANDROID_TEXT_STYLE_RASTERIZERSPAN_HPP_IMPL

namespace j2cpp {


template <>
local_ref< android::text::style::RasterizerSpan > create< android::text::style::RasterizerSpan>(local_ref< android::graphics::Rasterizer > const &a0)
{
	return local_ref< android::text::style::RasterizerSpan >(
		environment::get().get_jenv()->NewObject(
			get_class<android::text::style::RasterizerSpan::J2CPP_CLASS_NAME>(),
			get_method_id<android::text::style::RasterizerSpan::J2CPP_CLASS_NAME, android::text::style::RasterizerSpan::J2CPP_METHOD_NAME(0), android::text::style::RasterizerSpan::J2CPP_METHOD_SIGNATURE(0), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< android::graphics::Rasterizer > android::text::style::RasterizerSpan::getRasterizer()
{
	return local_ref< android::graphics::Rasterizer >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), false>()
		)
	);
}

void android::text::style::RasterizerSpan::updateDrawState(local_ref< android::text::TextPaint > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>(),
			a0.get_jtype()
		)
	);
}


J2CPP_DEFINE_CLASS(android::text::style::RasterizerSpan,"android/text/style/RasterizerSpan")
J2CPP_DEFINE_METHOD(android::text::style::RasterizerSpan,0,"<init>","(Landroid/graphics/Rasterizer;)V")
J2CPP_DEFINE_METHOD(android::text::style::RasterizerSpan,1,"getRasterizer","()Landroid/graphics/Rasterizer;")
J2CPP_DEFINE_METHOD(android::text::style::RasterizerSpan,2,"updateDrawState","(Landroid/text/TextPaint;)V")

} //namespace j2cpp

#endif //J2CPP_ANDROID_TEXT_STYLE_RASTERIZERSPAN_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
