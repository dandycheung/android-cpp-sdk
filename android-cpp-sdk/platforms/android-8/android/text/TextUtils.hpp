/*================================================================================
  code generated by: java2cpp
  class: android.text.TextUtils
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_TEXT_TEXTUTILS_HPP_DECL
#define J2CPP_ANDROID_TEXT_TEXTUTILS_HPP_DECL


namespace j2cpp { namespace android { namespace os { namespace Parcelable_ { class Creator; } } } }
namespace j2cpp { namespace android { namespace os { class Parcel; } } }
namespace j2cpp { namespace android { namespace text { class Spanned; } } }
namespace j2cpp { namespace android { namespace text { namespace TextUtils_ { class EllipsizeCallback; } } } }
namespace j2cpp { namespace android { namespace text { namespace TextUtils_ { class TruncateAt; } } } }
namespace j2cpp { namespace android { namespace text { class Spannable; } } }
namespace j2cpp { namespace android { namespace text { class TextPaint; } } }
namespace j2cpp { namespace android { namespace util { class Printer; } } }
namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace lang { class Class; } } }
namespace j2cpp { namespace java { namespace lang { class CharSequence; } } }
namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace lang { class Iterable; } } }
namespace j2cpp { namespace java { namespace util { namespace regex { class Pattern; } } } }
namespace j2cpp { namespace java { namespace util { class Iterator; } } }


#include <android/os/Parcel.hpp>
#include <android/os/Parcelable.hpp>
#include <android/text/Spannable.hpp>
#include <android/text/Spanned.hpp>
#include <android/text/TextPaint.hpp>
#include <android/text/TextUtils.hpp>
#include <android/util/Printer.hpp>
#include <java/lang/CharSequence.hpp>
#include <java/lang/Class.hpp>
#include <java/lang/Iterable.hpp>
#include <java/lang/Object.hpp>
#include <java/lang/String.hpp>
#include <java/util/Iterator.hpp>
#include <java/util/regex/Pattern.hpp>


namespace j2cpp {

namespace android { namespace text {

	class TextUtils;
	namespace TextUtils_ {

		class StringSplitter;
		class StringSplitter
			: public cpp_object<StringSplitter>
		{
		public:

			J2CPP_DECLARE_CLASS

			J2CPP_DECLARE_METHOD(0)

			StringSplitter(jobject jobj)
			: cpp_object<StringSplitter>(jobj)
			{
			}

			void setString(local_ref< java::lang::String > const&);
		}; //class StringSplitter

		class EllipsizeCallback;
		class EllipsizeCallback
			: public cpp_object<EllipsizeCallback>
		{
		public:

			J2CPP_DECLARE_CLASS

			J2CPP_DECLARE_METHOD(0)

			EllipsizeCallback(jobject jobj)
			: cpp_object<EllipsizeCallback>(jobj)
			{
			}

			void ellipsized(cpp_int const&, cpp_int const&);
		}; //class EllipsizeCallback

		class TruncateAt;
		class TruncateAt
			: public cpp_object<TruncateAt>
		{
		public:

			J2CPP_DECLARE_CLASS

			J2CPP_DECLARE_METHOD(0)
			J2CPP_DECLARE_METHOD(1)
			J2CPP_DECLARE_METHOD(2)
			J2CPP_DECLARE_METHOD(3)
			J2CPP_DECLARE_FIELD(0)
			J2CPP_DECLARE_FIELD(1)
			J2CPP_DECLARE_FIELD(2)
			J2CPP_DECLARE_FIELD(3)
			J2CPP_DECLARE_FIELD(4)

			TruncateAt(jobject jobj)
			: cpp_object<TruncateAt>(jobj)
			{
			}

			static local_ref< cpp_object_array<android::text::TextUtils_::TruncateAt, 1> > values();
			static local_ref< android::text::TextUtils_::TruncateAt > valueOf(local_ref< java::lang::String > const&);

			static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(0), J2CPP_FIELD_SIGNATURE(0), local_ref< android::text::TextUtils_::TruncateAt > > END;
			static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(1), J2CPP_FIELD_SIGNATURE(1), local_ref< android::text::TextUtils_::TruncateAt > > MARQUEE;
			static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(2), J2CPP_FIELD_SIGNATURE(2), local_ref< android::text::TextUtils_::TruncateAt > > MIDDLE;
			static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(3), J2CPP_FIELD_SIGNATURE(3), local_ref< android::text::TextUtils_::TruncateAt > > START;
		}; //class TruncateAt

		class SimpleStringSplitter;
		class SimpleStringSplitter
			: public cpp_object<SimpleStringSplitter>
		{
		public:

			J2CPP_DECLARE_CLASS

			J2CPP_DECLARE_METHOD(0)
			J2CPP_DECLARE_METHOD(1)
			J2CPP_DECLARE_METHOD(2)
			J2CPP_DECLARE_METHOD(3)
			J2CPP_DECLARE_METHOD(4)
			J2CPP_DECLARE_METHOD(5)
			J2CPP_DECLARE_METHOD(6)

			SimpleStringSplitter(jobject jobj)
			: cpp_object<SimpleStringSplitter>(jobj)
			{
			}

			void setString(local_ref< java::lang::String > const&);
			local_ref< java::util::Iterator > iterator();
			cpp_boolean hasNext();
			local_ref< java::lang::String > next();
			void remove();
			local_ref< java::lang::Object > next_1();
		}; //class SimpleStringSplitter

	} //namespace TextUtils_

	class TextUtils
		: public cpp_object<TextUtils>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_METHOD(12)
		J2CPP_DECLARE_METHOD(13)
		J2CPP_DECLARE_METHOD(14)
		J2CPP_DECLARE_METHOD(15)
		J2CPP_DECLARE_METHOD(16)
		J2CPP_DECLARE_METHOD(17)
		J2CPP_DECLARE_METHOD(18)
		J2CPP_DECLARE_METHOD(19)
		J2CPP_DECLARE_METHOD(20)
		J2CPP_DECLARE_METHOD(21)
		J2CPP_DECLARE_METHOD(22)
		J2CPP_DECLARE_METHOD(23)
		J2CPP_DECLARE_METHOD(24)
		J2CPP_DECLARE_METHOD(25)
		J2CPP_DECLARE_METHOD(26)
		J2CPP_DECLARE_METHOD(27)
		J2CPP_DECLARE_METHOD(28)
		J2CPP_DECLARE_METHOD(29)
		J2CPP_DECLARE_METHOD(30)
		J2CPP_DECLARE_METHOD(31)
		J2CPP_DECLARE_METHOD(32)
		J2CPP_DECLARE_METHOD(33)
		J2CPP_DECLARE_METHOD(34)
		J2CPP_DECLARE_METHOD(35)
		J2CPP_DECLARE_METHOD(36)
		J2CPP_DECLARE_METHOD(37)
		J2CPP_DECLARE_METHOD(38)
		J2CPP_DECLARE_FIELD(0)
		J2CPP_DECLARE_FIELD(1)
		J2CPP_DECLARE_FIELD(2)
		J2CPP_DECLARE_FIELD(3)

		typedef TextUtils_::StringSplitter StringSplitter;
		typedef TextUtils_::EllipsizeCallback EllipsizeCallback;
		typedef TextUtils_::TruncateAt TruncateAt;
		typedef TextUtils_::SimpleStringSplitter SimpleStringSplitter;

		TextUtils(jobject jobj)
		: cpp_object<TextUtils>(jobj)
		{
		}

		static void getChars(local_ref< java::lang::CharSequence > const&, cpp_int const&, cpp_int const&, local_ref< cpp_char_array<1> > const&, cpp_int const&);
		static cpp_int indexOf(local_ref< java::lang::CharSequence > const&, cpp_char const&);
		static cpp_int indexOf(local_ref< java::lang::CharSequence > const&, cpp_char const&, cpp_int const&);
		static cpp_int indexOf(local_ref< java::lang::CharSequence > const&, cpp_char const&, cpp_int const&, cpp_int const&);
		static cpp_int lastIndexOf(local_ref< java::lang::CharSequence > const&, cpp_char const&);
		static cpp_int lastIndexOf(local_ref< java::lang::CharSequence > const&, cpp_char const&, cpp_int const&);
		static cpp_int lastIndexOf(local_ref< java::lang::CharSequence > const&, cpp_char const&, cpp_int const&, cpp_int const&);
		static cpp_int indexOf(local_ref< java::lang::CharSequence > const&, local_ref< java::lang::CharSequence > const&);
		static cpp_int indexOf(local_ref< java::lang::CharSequence > const&, local_ref< java::lang::CharSequence > const&, cpp_int const&);
		static cpp_int indexOf(local_ref< java::lang::CharSequence > const&, local_ref< java::lang::CharSequence > const&, cpp_int const&, cpp_int const&);
		static cpp_boolean regionMatches(local_ref< java::lang::CharSequence > const&, cpp_int const&, local_ref< java::lang::CharSequence > const&, cpp_int const&, cpp_int const&);
		static local_ref< java::lang::String > substring(local_ref< java::lang::CharSequence > const&, cpp_int const&, cpp_int const&);
		static local_ref< java::lang::String > join(local_ref< java::lang::CharSequence > const&, local_ref< cpp_object_array<java::lang::Object, 1> > const&);
		static local_ref< java::lang::String > join(local_ref< java::lang::CharSequence > const&, local_ref< java::lang::Iterable > const&);
		static local_ref< cpp_object_array<java::lang::String, 1> > split(local_ref< java::lang::String > const&, local_ref< java::lang::String > const&);
		static local_ref< cpp_object_array<java::lang::String, 1> > split(local_ref< java::lang::String > const&, local_ref< java::util::regex::Pattern > const&);
		static local_ref< java::lang::CharSequence > stringOrSpannedString(local_ref< java::lang::CharSequence > const&);
		static cpp_boolean isEmpty(local_ref< java::lang::CharSequence > const&);
		static cpp_int getTrimmedLength(local_ref< java::lang::CharSequence > const&);
		static cpp_boolean equals(local_ref< java::lang::CharSequence > const&, local_ref< java::lang::CharSequence > const&);
		static local_ref< java::lang::CharSequence > getReverse(local_ref< java::lang::CharSequence > const&, cpp_int const&, cpp_int const&);
		static void writeToParcel(local_ref< java::lang::CharSequence > const&, local_ref< android::os::Parcel > const&, cpp_int const&);
		static void dumpSpans(local_ref< java::lang::CharSequence > const&, local_ref< android::util::Printer > const&, local_ref< java::lang::String > const&);
		static local_ref< java::lang::CharSequence > replace(local_ref< java::lang::CharSequence > const&, local_ref< cpp_object_array<java::lang::String, 1> > const&, local_ref< cpp_object_array<java::lang::CharSequence, 1> > const&);
		static local_ref< java::lang::CharSequence > expandTemplate(local_ref< java::lang::CharSequence > const&, local_ref< cpp_object_array<java::lang::CharSequence, 1> > const&);
		static cpp_int getOffsetBefore(local_ref< java::lang::CharSequence > const&, cpp_int const&);
		static cpp_int getOffsetAfter(local_ref< java::lang::CharSequence > const&, cpp_int const&);
		static void copySpansFrom(local_ref< android::text::Spanned > const&, cpp_int const&, cpp_int const&, local_ref< java::lang::Class > const&, local_ref< android::text::Spannable > const&, cpp_int const&);
		static local_ref< java::lang::CharSequence > ellipsize(local_ref< java::lang::CharSequence > const&, local_ref< android::text::TextPaint > const&, cpp_float const&, local_ref< android::text::TextUtils_::TruncateAt > const&);
		static local_ref< java::lang::CharSequence > ellipsize(local_ref< java::lang::CharSequence > const&, local_ref< android::text::TextPaint > const&, cpp_float const&, local_ref< android::text::TextUtils_::TruncateAt > const&, cpp_boolean const&, local_ref< android::text::TextUtils_::EllipsizeCallback > const&);
		static local_ref< java::lang::CharSequence > commaEllipsize(local_ref< java::lang::CharSequence > const&, local_ref< android::text::TextPaint > const&, cpp_float const&, local_ref< java::lang::String > const&, local_ref< java::lang::String > const&);
		static local_ref< java::lang::String > htmlEncode(local_ref< java::lang::String > const&);
		static local_ref< java::lang::CharSequence > concat(local_ref< cpp_object_array<java::lang::CharSequence, 1> > const&);
		static cpp_boolean isGraphic(local_ref< java::lang::CharSequence > const&);
		static cpp_boolean isGraphic(cpp_char const&);
		static cpp_boolean isDigitsOnly(local_ref< java::lang::CharSequence > const&);
		static cpp_int getCapsMode(local_ref< java::lang::CharSequence > const&, cpp_int const&, cpp_int const&);

		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(0), J2CPP_FIELD_SIGNATURE(0), local_ref< android::os::Parcelable_::Creator > > CHAR_SEQUENCE_CREATOR;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(1), J2CPP_FIELD_SIGNATURE(1), cpp_int > CAP_MODE_CHARACTERS;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(2), J2CPP_FIELD_SIGNATURE(2), cpp_int > CAP_MODE_WORDS;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(3), J2CPP_FIELD_SIGNATURE(3), cpp_int > CAP_MODE_SENTENCES;
	}; //class TextUtils

} //namespace text
} //namespace android


} //namespace j2cpp

#endif //J2CPP_ANDROID_TEXT_TEXTUTILS_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_TEXT_TEXTUTILS_HPP_IMPL
#define J2CPP_ANDROID_TEXT_TEXTUTILS_HPP_IMPL

namespace j2cpp {



void android::text::TextUtils_::StringSplitter::setString(local_ref< java::lang::String > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(0), J2CPP_METHOD_SIGNATURE(0), false>(),
			a0.get_jtype()
		)
	);
}


J2CPP_DEFINE_CLASS(android::text::TextUtils_::StringSplitter,"android/text/TextUtils$StringSplitter")
J2CPP_DEFINE_METHOD(android::text::TextUtils_::StringSplitter,0,"setString","(Ljava/lang/String;)V")

void android::text::TextUtils_::EllipsizeCallback::ellipsized(cpp_int const &a0, cpp_int const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(0), J2CPP_METHOD_SIGNATURE(0), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}


J2CPP_DEFINE_CLASS(android::text::TextUtils_::EllipsizeCallback,"android/text/TextUtils$EllipsizeCallback")
J2CPP_DEFINE_METHOD(android::text::TextUtils_::EllipsizeCallback,0,"ellipsized","(II)V")

local_ref< cpp_object_array<android::text::TextUtils_::TruncateAt, 1> > android::text::TextUtils_::TruncateAt::values()
{
	return local_ref< cpp_object_array<android::text::TextUtils_::TruncateAt, 1> >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(0), J2CPP_METHOD_SIGNATURE(0), true>()
		)
	);
}

local_ref< android::text::TextUtils_::TruncateAt > android::text::TextUtils_::TruncateAt::valueOf(local_ref< java::lang::String > const &a0)
{
	return local_ref< android::text::TextUtils_::TruncateAt >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), true>(),
			a0.get_jtype()
		)
	);
}

template <>
local_ref< android::text::TextUtils_::TruncateAt > create< android::text::TextUtils_::TruncateAt>(local_ref< java::lang::String > const &a0, cpp_int const &a1)
{
	return local_ref< android::text::TextUtils_::TruncateAt >(
		environment::get().get_jenv()->NewObject(
			get_class<android::text::TextUtils_::TruncateAt::J2CPP_CLASS_NAME>(),
			get_method_id<android::text::TextUtils_::TruncateAt::J2CPP_CLASS_NAME, android::text::TextUtils_::TruncateAt::J2CPP_METHOD_NAME(2), android::text::TextUtils_::TruncateAt::J2CPP_METHOD_SIGNATURE(2), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}


static_field<
	android::text::TextUtils_::TruncateAt::J2CPP_CLASS_NAME,
	android::text::TextUtils_::TruncateAt::J2CPP_FIELD_NAME(0),
	android::text::TextUtils_::TruncateAt::J2CPP_FIELD_SIGNATURE(0),
	local_ref< android::text::TextUtils_::TruncateAt >
> android::text::TextUtils_::TruncateAt::END;

static_field<
	android::text::TextUtils_::TruncateAt::J2CPP_CLASS_NAME,
	android::text::TextUtils_::TruncateAt::J2CPP_FIELD_NAME(1),
	android::text::TextUtils_::TruncateAt::J2CPP_FIELD_SIGNATURE(1),
	local_ref< android::text::TextUtils_::TruncateAt >
> android::text::TextUtils_::TruncateAt::MARQUEE;

static_field<
	android::text::TextUtils_::TruncateAt::J2CPP_CLASS_NAME,
	android::text::TextUtils_::TruncateAt::J2CPP_FIELD_NAME(2),
	android::text::TextUtils_::TruncateAt::J2CPP_FIELD_SIGNATURE(2),
	local_ref< android::text::TextUtils_::TruncateAt >
> android::text::TextUtils_::TruncateAt::MIDDLE;

static_field<
	android::text::TextUtils_::TruncateAt::J2CPP_CLASS_NAME,
	android::text::TextUtils_::TruncateAt::J2CPP_FIELD_NAME(3),
	android::text::TextUtils_::TruncateAt::J2CPP_FIELD_SIGNATURE(3),
	local_ref< android::text::TextUtils_::TruncateAt >
> android::text::TextUtils_::TruncateAt::START;


J2CPP_DEFINE_CLASS(android::text::TextUtils_::TruncateAt,"android/text/TextUtils$TruncateAt")
J2CPP_DEFINE_METHOD(android::text::TextUtils_::TruncateAt,0,"values","()[android.text.TextUtils.TruncateAt")
J2CPP_DEFINE_METHOD(android::text::TextUtils_::TruncateAt,1,"valueOf","(Ljava/lang/String;)Landroid/text/TextUtils$TruncateAt;")
J2CPP_DEFINE_METHOD(android::text::TextUtils_::TruncateAt,2,"<init>","(Ljava/lang/String;I)V")
J2CPP_DEFINE_METHOD(android::text::TextUtils_::TruncateAt,3,"<clinit>","()V")
J2CPP_DEFINE_FIELD(android::text::TextUtils_::TruncateAt,0,"END","Landroid/text/TextUtils$TruncateAt;")
J2CPP_DEFINE_FIELD(android::text::TextUtils_::TruncateAt,1,"MARQUEE","Landroid/text/TextUtils$TruncateAt;")
J2CPP_DEFINE_FIELD(android::text::TextUtils_::TruncateAt,2,"MIDDLE","Landroid/text/TextUtils$TruncateAt;")
J2CPP_DEFINE_FIELD(android::text::TextUtils_::TruncateAt,3,"START","Landroid/text/TextUtils$TruncateAt;")
J2CPP_DEFINE_FIELD(android::text::TextUtils_::TruncateAt,4,"$VALUES","[android.text.TextUtils.TruncateAt")

template <>
local_ref< android::text::TextUtils_::SimpleStringSplitter > create< android::text::TextUtils_::SimpleStringSplitter>(cpp_char const &a0)
{
	return local_ref< android::text::TextUtils_::SimpleStringSplitter >(
		environment::get().get_jenv()->NewObject(
			get_class<android::text::TextUtils_::SimpleStringSplitter::J2CPP_CLASS_NAME>(),
			get_method_id<android::text::TextUtils_::SimpleStringSplitter::J2CPP_CLASS_NAME, android::text::TextUtils_::SimpleStringSplitter::J2CPP_METHOD_NAME(0), android::text::TextUtils_::SimpleStringSplitter::J2CPP_METHOD_SIGNATURE(0), false>(),
			a0.get_jtype()
		)
	);
}

void android::text::TextUtils_::SimpleStringSplitter::setString(local_ref< java::lang::String > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::util::Iterator > android::text::TextUtils_::SimpleStringSplitter::iterator()
{
	return local_ref< java::util::Iterator >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>()
		)
	);
}

cpp_boolean android::text::TextUtils_::SimpleStringSplitter::hasNext()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>()
		)
	);
}

local_ref< java::lang::String > android::text::TextUtils_::SimpleStringSplitter::next()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>()
		)
	);
}

void android::text::TextUtils_::SimpleStringSplitter::remove()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>()
		)
	);
}

local_ref< java::lang::Object > android::text::TextUtils_::SimpleStringSplitter::next_1()
{
	return local_ref< java::lang::Object >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>()
		)
	);
}


J2CPP_DEFINE_CLASS(android::text::TextUtils_::SimpleStringSplitter,"android/text/TextUtils$SimpleStringSplitter")
J2CPP_DEFINE_METHOD(android::text::TextUtils_::SimpleStringSplitter,0,"<init>","(C)V")
J2CPP_DEFINE_METHOD(android::text::TextUtils_::SimpleStringSplitter,1,"setString","(Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(android::text::TextUtils_::SimpleStringSplitter,2,"iterator","()Ljava/util/Iterator;")
J2CPP_DEFINE_METHOD(android::text::TextUtils_::SimpleStringSplitter,3,"hasNext","()Z")
J2CPP_DEFINE_METHOD(android::text::TextUtils_::SimpleStringSplitter,4,"next","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(android::text::TextUtils_::SimpleStringSplitter,5,"remove","()V")
J2CPP_DEFINE_METHOD(android::text::TextUtils_::SimpleStringSplitter,6,"next","()Ljava/lang/Object;")


template <>
local_ref< android::text::TextUtils > create< android::text::TextUtils>()
{
	return local_ref< android::text::TextUtils >(
		environment::get().get_jenv()->NewObject(
			get_class<android::text::TextUtils::J2CPP_CLASS_NAME>(),
			get_method_id<android::text::TextUtils::J2CPP_CLASS_NAME, android::text::TextUtils::J2CPP_METHOD_NAME(0), android::text::TextUtils::J2CPP_METHOD_SIGNATURE(0), false>()
		)
	);
}

void android::text::TextUtils::getChars(local_ref< java::lang::CharSequence > const &a0, cpp_int const &a1, cpp_int const &a2, local_ref< cpp_char_array<1> > const &a3, cpp_int const &a4)
{
	return void(
		environment::get().get_jenv()->CallStaticVoidMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), true>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype(), a3.get_jtype(), a4.get_jtype()
		)
	);
}

cpp_int android::text::TextUtils::indexOf(local_ref< java::lang::CharSequence > const &a0, cpp_char const &a1)
{
	return cpp_int(
		environment::get().get_jenv()->CallStaticIntMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), true>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_int android::text::TextUtils::indexOf(local_ref< java::lang::CharSequence > const &a0, cpp_char const &a1, cpp_int const &a2)
{
	return cpp_int(
		environment::get().get_jenv()->CallStaticIntMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), true>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

cpp_int android::text::TextUtils::indexOf(local_ref< java::lang::CharSequence > const &a0, cpp_char const &a1, cpp_int const &a2, cpp_int const &a3)
{
	return cpp_int(
		environment::get().get_jenv()->CallStaticIntMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), true>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype(), a3.get_jtype()
		)
	);
}

cpp_int android::text::TextUtils::lastIndexOf(local_ref< java::lang::CharSequence > const &a0, cpp_char const &a1)
{
	return cpp_int(
		environment::get().get_jenv()->CallStaticIntMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), true>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_int android::text::TextUtils::lastIndexOf(local_ref< java::lang::CharSequence > const &a0, cpp_char const &a1, cpp_int const &a2)
{
	return cpp_int(
		environment::get().get_jenv()->CallStaticIntMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), true>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

cpp_int android::text::TextUtils::lastIndexOf(local_ref< java::lang::CharSequence > const &a0, cpp_char const &a1, cpp_int const &a2, cpp_int const &a3)
{
	return cpp_int(
		environment::get().get_jenv()->CallStaticIntMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(7), J2CPP_METHOD_SIGNATURE(7), true>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype(), a3.get_jtype()
		)
	);
}

cpp_int android::text::TextUtils::indexOf(local_ref< java::lang::CharSequence > const &a0, local_ref< java::lang::CharSequence > const &a1)
{
	return cpp_int(
		environment::get().get_jenv()->CallStaticIntMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(8), J2CPP_METHOD_SIGNATURE(8), true>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_int android::text::TextUtils::indexOf(local_ref< java::lang::CharSequence > const &a0, local_ref< java::lang::CharSequence > const &a1, cpp_int const &a2)
{
	return cpp_int(
		environment::get().get_jenv()->CallStaticIntMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(9), J2CPP_METHOD_SIGNATURE(9), true>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

cpp_int android::text::TextUtils::indexOf(local_ref< java::lang::CharSequence > const &a0, local_ref< java::lang::CharSequence > const &a1, cpp_int const &a2, cpp_int const &a3)
{
	return cpp_int(
		environment::get().get_jenv()->CallStaticIntMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(10), J2CPP_METHOD_SIGNATURE(10), true>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype(), a3.get_jtype()
		)
	);
}

cpp_boolean android::text::TextUtils::regionMatches(local_ref< java::lang::CharSequence > const &a0, cpp_int const &a1, local_ref< java::lang::CharSequence > const &a2, cpp_int const &a3, cpp_int const &a4)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallStaticBooleanMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(11), J2CPP_METHOD_SIGNATURE(11), true>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype(), a3.get_jtype(), a4.get_jtype()
		)
	);
}

local_ref< java::lang::String > android::text::TextUtils::substring(local_ref< java::lang::CharSequence > const &a0, cpp_int const &a1, cpp_int const &a2)
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(12), J2CPP_METHOD_SIGNATURE(12), true>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

local_ref< java::lang::String > android::text::TextUtils::join(local_ref< java::lang::CharSequence > const &a0, local_ref< cpp_object_array<java::lang::Object, 1> > const &a1)
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(13), J2CPP_METHOD_SIGNATURE(13), true>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< java::lang::String > android::text::TextUtils::join(local_ref< java::lang::CharSequence > const &a0, local_ref< java::lang::Iterable > const &a1)
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(14), J2CPP_METHOD_SIGNATURE(14), true>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< cpp_object_array<java::lang::String, 1> > android::text::TextUtils::split(local_ref< java::lang::String > const &a0, local_ref< java::lang::String > const &a1)
{
	return local_ref< cpp_object_array<java::lang::String, 1> >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(15), J2CPP_METHOD_SIGNATURE(15), true>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< cpp_object_array<java::lang::String, 1> > android::text::TextUtils::split(local_ref< java::lang::String > const &a0, local_ref< java::util::regex::Pattern > const &a1)
{
	return local_ref< cpp_object_array<java::lang::String, 1> >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(16), J2CPP_METHOD_SIGNATURE(16), true>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< java::lang::CharSequence > android::text::TextUtils::stringOrSpannedString(local_ref< java::lang::CharSequence > const &a0)
{
	return local_ref< java::lang::CharSequence >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(17), J2CPP_METHOD_SIGNATURE(17), true>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean android::text::TextUtils::isEmpty(local_ref< java::lang::CharSequence > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallStaticBooleanMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(18), J2CPP_METHOD_SIGNATURE(18), true>(),
			a0.get_jtype()
		)
	);
}

cpp_int android::text::TextUtils::getTrimmedLength(local_ref< java::lang::CharSequence > const &a0)
{
	return cpp_int(
		environment::get().get_jenv()->CallStaticIntMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(19), J2CPP_METHOD_SIGNATURE(19), true>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean android::text::TextUtils::equals(local_ref< java::lang::CharSequence > const &a0, local_ref< java::lang::CharSequence > const &a1)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallStaticBooleanMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(20), J2CPP_METHOD_SIGNATURE(20), true>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< java::lang::CharSequence > android::text::TextUtils::getReverse(local_ref< java::lang::CharSequence > const &a0, cpp_int const &a1, cpp_int const &a2)
{
	return local_ref< java::lang::CharSequence >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(21), J2CPP_METHOD_SIGNATURE(21), true>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

void android::text::TextUtils::writeToParcel(local_ref< java::lang::CharSequence > const &a0, local_ref< android::os::Parcel > const &a1, cpp_int const &a2)
{
	return void(
		environment::get().get_jenv()->CallStaticVoidMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(22), J2CPP_METHOD_SIGNATURE(22), true>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

void android::text::TextUtils::dumpSpans(local_ref< java::lang::CharSequence > const &a0, local_ref< android::util::Printer > const &a1, local_ref< java::lang::String > const &a2)
{
	return void(
		environment::get().get_jenv()->CallStaticVoidMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(23), J2CPP_METHOD_SIGNATURE(23), true>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

local_ref< java::lang::CharSequence > android::text::TextUtils::replace(local_ref< java::lang::CharSequence > const &a0, local_ref< cpp_object_array<java::lang::String, 1> > const &a1, local_ref< cpp_object_array<java::lang::CharSequence, 1> > const &a2)
{
	return local_ref< java::lang::CharSequence >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(24), J2CPP_METHOD_SIGNATURE(24), true>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

local_ref< java::lang::CharSequence > android::text::TextUtils::expandTemplate(local_ref< java::lang::CharSequence > const &a0, local_ref< cpp_object_array<java::lang::CharSequence, 1> > const &a1)
{
	return local_ref< java::lang::CharSequence >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(25), J2CPP_METHOD_SIGNATURE(25), true>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_int android::text::TextUtils::getOffsetBefore(local_ref< java::lang::CharSequence > const &a0, cpp_int const &a1)
{
	return cpp_int(
		environment::get().get_jenv()->CallStaticIntMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(26), J2CPP_METHOD_SIGNATURE(26), true>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_int android::text::TextUtils::getOffsetAfter(local_ref< java::lang::CharSequence > const &a0, cpp_int const &a1)
{
	return cpp_int(
		environment::get().get_jenv()->CallStaticIntMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(27), J2CPP_METHOD_SIGNATURE(27), true>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void android::text::TextUtils::copySpansFrom(local_ref< android::text::Spanned > const &a0, cpp_int const &a1, cpp_int const &a2, local_ref< java::lang::Class > const &a3, local_ref< android::text::Spannable > const &a4, cpp_int const &a5)
{
	return void(
		environment::get().get_jenv()->CallStaticVoidMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(28), J2CPP_METHOD_SIGNATURE(28), true>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype(), a3.get_jtype(), a4.get_jtype(), a5.get_jtype()
		)
	);
}

local_ref< java::lang::CharSequence > android::text::TextUtils::ellipsize(local_ref< java::lang::CharSequence > const &a0, local_ref< android::text::TextPaint > const &a1, cpp_float const &a2, local_ref< android::text::TextUtils_::TruncateAt > const &a3)
{
	return local_ref< java::lang::CharSequence >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(29), J2CPP_METHOD_SIGNATURE(29), true>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype(), a3.get_jtype()
		)
	);
}

local_ref< java::lang::CharSequence > android::text::TextUtils::ellipsize(local_ref< java::lang::CharSequence > const &a0, local_ref< android::text::TextPaint > const &a1, cpp_float const &a2, local_ref< android::text::TextUtils_::TruncateAt > const &a3, cpp_boolean const &a4, local_ref< android::text::TextUtils_::EllipsizeCallback > const &a5)
{
	return local_ref< java::lang::CharSequence >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(30), J2CPP_METHOD_SIGNATURE(30), true>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype(), a3.get_jtype(), a4.get_jtype(), a5.get_jtype()
		)
	);
}

local_ref< java::lang::CharSequence > android::text::TextUtils::commaEllipsize(local_ref< java::lang::CharSequence > const &a0, local_ref< android::text::TextPaint > const &a1, cpp_float const &a2, local_ref< java::lang::String > const &a3, local_ref< java::lang::String > const &a4)
{
	return local_ref< java::lang::CharSequence >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(31), J2CPP_METHOD_SIGNATURE(31), true>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype(), a3.get_jtype(), a4.get_jtype()
		)
	);
}

local_ref< java::lang::String > android::text::TextUtils::htmlEncode(local_ref< java::lang::String > const &a0)
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(32), J2CPP_METHOD_SIGNATURE(32), true>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::CharSequence > android::text::TextUtils::concat(local_ref< cpp_object_array<java::lang::CharSequence, 1> > const &a0)
{
	return local_ref< java::lang::CharSequence >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(33), J2CPP_METHOD_SIGNATURE(33), true>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean android::text::TextUtils::isGraphic(local_ref< java::lang::CharSequence > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallStaticBooleanMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(34), J2CPP_METHOD_SIGNATURE(34), true>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean android::text::TextUtils::isGraphic(cpp_char const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallStaticBooleanMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(35), J2CPP_METHOD_SIGNATURE(35), true>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean android::text::TextUtils::isDigitsOnly(local_ref< java::lang::CharSequence > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallStaticBooleanMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(36), J2CPP_METHOD_SIGNATURE(36), true>(),
			a0.get_jtype()
		)
	);
}

cpp_int android::text::TextUtils::getCapsMode(local_ref< java::lang::CharSequence > const &a0, cpp_int const &a1, cpp_int const &a2)
{
	return cpp_int(
		environment::get().get_jenv()->CallStaticIntMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(37), J2CPP_METHOD_SIGNATURE(37), true>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}


static_field<
	android::text::TextUtils::J2CPP_CLASS_NAME,
	android::text::TextUtils::J2CPP_FIELD_NAME(0),
	android::text::TextUtils::J2CPP_FIELD_SIGNATURE(0),
	local_ref< android::os::Parcelable_::Creator >
> android::text::TextUtils::CHAR_SEQUENCE_CREATOR;

static_field<
	android::text::TextUtils::J2CPP_CLASS_NAME,
	android::text::TextUtils::J2CPP_FIELD_NAME(1),
	android::text::TextUtils::J2CPP_FIELD_SIGNATURE(1),
	cpp_int
> android::text::TextUtils::CAP_MODE_CHARACTERS;

static_field<
	android::text::TextUtils::J2CPP_CLASS_NAME,
	android::text::TextUtils::J2CPP_FIELD_NAME(2),
	android::text::TextUtils::J2CPP_FIELD_SIGNATURE(2),
	cpp_int
> android::text::TextUtils::CAP_MODE_WORDS;

static_field<
	android::text::TextUtils::J2CPP_CLASS_NAME,
	android::text::TextUtils::J2CPP_FIELD_NAME(3),
	android::text::TextUtils::J2CPP_FIELD_SIGNATURE(3),
	cpp_int
> android::text::TextUtils::CAP_MODE_SENTENCES;


J2CPP_DEFINE_CLASS(android::text::TextUtils,"android/text/TextUtils")
J2CPP_DEFINE_METHOD(android::text::TextUtils,0,"<init>","()V")
J2CPP_DEFINE_METHOD(android::text::TextUtils,1,"getChars","(Ljava/lang/CharSequence;II[CI)V")
J2CPP_DEFINE_METHOD(android::text::TextUtils,2,"indexOf","(Ljava/lang/CharSequence;C)I")
J2CPP_DEFINE_METHOD(android::text::TextUtils,3,"indexOf","(Ljava/lang/CharSequence;CI)I")
J2CPP_DEFINE_METHOD(android::text::TextUtils,4,"indexOf","(Ljava/lang/CharSequence;CII)I")
J2CPP_DEFINE_METHOD(android::text::TextUtils,5,"lastIndexOf","(Ljava/lang/CharSequence;C)I")
J2CPP_DEFINE_METHOD(android::text::TextUtils,6,"lastIndexOf","(Ljava/lang/CharSequence;CI)I")
J2CPP_DEFINE_METHOD(android::text::TextUtils,7,"lastIndexOf","(Ljava/lang/CharSequence;CII)I")
J2CPP_DEFINE_METHOD(android::text::TextUtils,8,"indexOf","(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)I")
J2CPP_DEFINE_METHOD(android::text::TextUtils,9,"indexOf","(Ljava/lang/CharSequence;Ljava/lang/CharSequence;I)I")
J2CPP_DEFINE_METHOD(android::text::TextUtils,10,"indexOf","(Ljava/lang/CharSequence;Ljava/lang/CharSequence;II)I")
J2CPP_DEFINE_METHOD(android::text::TextUtils,11,"regionMatches","(Ljava/lang/CharSequence;ILjava/lang/CharSequence;II)Z")
J2CPP_DEFINE_METHOD(android::text::TextUtils,12,"substring","(Ljava/lang/CharSequence;II)Ljava/lang/String;")
J2CPP_DEFINE_METHOD(android::text::TextUtils,13,"join","(Ljava/lang/CharSequence;[java.lang.Object)Ljava/lang/String;")
J2CPP_DEFINE_METHOD(android::text::TextUtils,14,"join","(Ljava/lang/CharSequence;Ljava/lang/Iterable;)Ljava/lang/String;")
J2CPP_DEFINE_METHOD(android::text::TextUtils,15,"split","(Ljava/lang/String;Ljava/lang/String;)[java.lang.String")
J2CPP_DEFINE_METHOD(android::text::TextUtils,16,"split","(Ljava/lang/String;Ljava/util/regex/Pattern;)[java.lang.String")
J2CPP_DEFINE_METHOD(android::text::TextUtils,17,"stringOrSpannedString","(Ljava/lang/CharSequence;)Ljava/lang/CharSequence;")
J2CPP_DEFINE_METHOD(android::text::TextUtils,18,"isEmpty","(Ljava/lang/CharSequence;)Z")
J2CPP_DEFINE_METHOD(android::text::TextUtils,19,"getTrimmedLength","(Ljava/lang/CharSequence;)I")
J2CPP_DEFINE_METHOD(android::text::TextUtils,20,"equals","(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Z")
J2CPP_DEFINE_METHOD(android::text::TextUtils,21,"getReverse","(Ljava/lang/CharSequence;II)Ljava/lang/CharSequence;")
J2CPP_DEFINE_METHOD(android::text::TextUtils,22,"writeToParcel","(Ljava/lang/CharSequence;Landroid/os/Parcel;I)V")
J2CPP_DEFINE_METHOD(android::text::TextUtils,23,"dumpSpans","(Ljava/lang/CharSequence;Landroid/util/Printer;Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(android::text::TextUtils,24,"replace","(Ljava/lang/CharSequence;[java.lang.String[java.lang.CharSequence)Ljava/lang/CharSequence;")
J2CPP_DEFINE_METHOD(android::text::TextUtils,25,"expandTemplate","(Ljava/lang/CharSequence;[java.lang.CharSequence)Ljava/lang/CharSequence;")
J2CPP_DEFINE_METHOD(android::text::TextUtils,26,"getOffsetBefore","(Ljava/lang/CharSequence;I)I")
J2CPP_DEFINE_METHOD(android::text::TextUtils,27,"getOffsetAfter","(Ljava/lang/CharSequence;I)I")
J2CPP_DEFINE_METHOD(android::text::TextUtils,28,"copySpansFrom","(Landroid/text/Spanned;IILjava/lang/Class;Landroid/text/Spannable;I)V")
J2CPP_DEFINE_METHOD(android::text::TextUtils,29,"ellipsize","(Ljava/lang/CharSequence;Landroid/text/TextPaint;FLandroid/text/TextUtils$TruncateAt;)Ljava/lang/CharSequence;")
J2CPP_DEFINE_METHOD(android::text::TextUtils,30,"ellipsize","(Ljava/lang/CharSequence;Landroid/text/TextPaint;FLandroid/text/TextUtils$TruncateAt;ZLandroid/text/TextUtils$EllipsizeCallback;)Ljava/lang/CharSequence;")
J2CPP_DEFINE_METHOD(android::text::TextUtils,31,"commaEllipsize","(Ljava/lang/CharSequence;Landroid/text/TextPaint;FLjava/lang/String;Ljava/lang/String;)Ljava/lang/CharSequence;")
J2CPP_DEFINE_METHOD(android::text::TextUtils,32,"htmlEncode","(Ljava/lang/String;)Ljava/lang/String;")
J2CPP_DEFINE_METHOD(android::text::TextUtils,33,"concat","([java.lang.CharSequence)Ljava/lang/CharSequence;")
J2CPP_DEFINE_METHOD(android::text::TextUtils,34,"isGraphic","(Ljava/lang/CharSequence;)Z")
J2CPP_DEFINE_METHOD(android::text::TextUtils,35,"isGraphic","(C)Z")
J2CPP_DEFINE_METHOD(android::text::TextUtils,36,"isDigitsOnly","(Ljava/lang/CharSequence;)Z")
J2CPP_DEFINE_METHOD(android::text::TextUtils,37,"getCapsMode","(Ljava/lang/CharSequence;II)I")
J2CPP_DEFINE_METHOD(android::text::TextUtils,38,"<clinit>","()V")
J2CPP_DEFINE_FIELD(android::text::TextUtils,0,"CHAR_SEQUENCE_CREATOR","Landroid/os/Parcelable$Creator;")
J2CPP_DEFINE_FIELD(android::text::TextUtils,1,"CAP_MODE_CHARACTERS","I")
J2CPP_DEFINE_FIELD(android::text::TextUtils,2,"CAP_MODE_WORDS","I")
J2CPP_DEFINE_FIELD(android::text::TextUtils,3,"CAP_MODE_SENTENCES","I")

} //namespace j2cpp

#endif //J2CPP_ANDROID_TEXT_TEXTUTILS_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
