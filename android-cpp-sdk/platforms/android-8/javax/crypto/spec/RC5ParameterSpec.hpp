/*================================================================================
  code generated by: java2cpp
  class: javax.crypto.spec.RC5ParameterSpec
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVAX_CRYPTO_SPEC_RC5PARAMETERSPEC_HPP_DECL
#define J2CPP_JAVAX_CRYPTO_SPEC_RC5PARAMETERSPEC_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class Object; } } }


#include <java/lang/Object.hpp>


namespace j2cpp {

namespace javax { namespace crypto { namespace spec {

	class RC5ParameterSpec;
	class RC5ParameterSpec
		: public cpp_object<RC5ParameterSpec>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)

		RC5ParameterSpec(jobject jobj)
		: cpp_object<RC5ParameterSpec>(jobj)
		{
		}

		cpp_int getVersion();
		cpp_int getRounds();
		cpp_int getWordSize();
		local_ref< cpp_byte_array<1> > getIV();
		cpp_boolean equals(local_ref< java::lang::Object > const&);
		cpp_int hashCode();
	}; //class RC5ParameterSpec

} //namespace spec
} //namespace crypto
} //namespace javax


} //namespace j2cpp

#endif //J2CPP_JAVAX_CRYPTO_SPEC_RC5PARAMETERSPEC_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVAX_CRYPTO_SPEC_RC5PARAMETERSPEC_HPP_IMPL
#define J2CPP_JAVAX_CRYPTO_SPEC_RC5PARAMETERSPEC_HPP_IMPL

namespace j2cpp {


template <>
local_ref< javax::crypto::spec::RC5ParameterSpec > create< javax::crypto::spec::RC5ParameterSpec>(cpp_int const &a0, cpp_int const &a1, cpp_int const &a2)
{
	return local_ref< javax::crypto::spec::RC5ParameterSpec >(
		environment::get().get_jenv()->NewObject(
			get_class<javax::crypto::spec::RC5ParameterSpec::J2CPP_CLASS_NAME>(),
			get_method_id<javax::crypto::spec::RC5ParameterSpec::J2CPP_CLASS_NAME, javax::crypto::spec::RC5ParameterSpec::J2CPP_METHOD_NAME(0), javax::crypto::spec::RC5ParameterSpec::J2CPP_METHOD_SIGNATURE(0), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

template <>
local_ref< javax::crypto::spec::RC5ParameterSpec > create< javax::crypto::spec::RC5ParameterSpec>(cpp_int const &a0, cpp_int const &a1, cpp_int const &a2, local_ref< cpp_byte_array<1> > const &a3)
{
	return local_ref< javax::crypto::spec::RC5ParameterSpec >(
		environment::get().get_jenv()->NewObject(
			get_class<javax::crypto::spec::RC5ParameterSpec::J2CPP_CLASS_NAME>(),
			get_method_id<javax::crypto::spec::RC5ParameterSpec::J2CPP_CLASS_NAME, javax::crypto::spec::RC5ParameterSpec::J2CPP_METHOD_NAME(1), javax::crypto::spec::RC5ParameterSpec::J2CPP_METHOD_SIGNATURE(1), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype(), a3.get_jtype()
		)
	);
}

template <>
local_ref< javax::crypto::spec::RC5ParameterSpec > create< javax::crypto::spec::RC5ParameterSpec>(cpp_int const &a0, cpp_int const &a1, cpp_int const &a2, local_ref< cpp_byte_array<1> > const &a3, cpp_int const &a4)
{
	return local_ref< javax::crypto::spec::RC5ParameterSpec >(
		environment::get().get_jenv()->NewObject(
			get_class<javax::crypto::spec::RC5ParameterSpec::J2CPP_CLASS_NAME>(),
			get_method_id<javax::crypto::spec::RC5ParameterSpec::J2CPP_CLASS_NAME, javax::crypto::spec::RC5ParameterSpec::J2CPP_METHOD_NAME(2), javax::crypto::spec::RC5ParameterSpec::J2CPP_METHOD_SIGNATURE(2), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype(), a3.get_jtype(), a4.get_jtype()
		)
	);
}

cpp_int javax::crypto::spec::RC5ParameterSpec::getVersion()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>()
		)
	);
}

cpp_int javax::crypto::spec::RC5ParameterSpec::getRounds()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>()
		)
	);
}

cpp_int javax::crypto::spec::RC5ParameterSpec::getWordSize()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>()
		)
	);
}

local_ref< cpp_byte_array<1> > javax::crypto::spec::RC5ParameterSpec::getIV()
{
	return local_ref< cpp_byte_array<1> >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>()
		)
	);
}

cpp_boolean javax::crypto::spec::RC5ParameterSpec::equals(local_ref< java::lang::Object > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(7), J2CPP_METHOD_SIGNATURE(7), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int javax::crypto::spec::RC5ParameterSpec::hashCode()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(8), J2CPP_METHOD_SIGNATURE(8), false>()
		)
	);
}


J2CPP_DEFINE_CLASS(javax::crypto::spec::RC5ParameterSpec,"javax/crypto/spec/RC5ParameterSpec")
J2CPP_DEFINE_METHOD(javax::crypto::spec::RC5ParameterSpec,0,"<init>","(III)V")
J2CPP_DEFINE_METHOD(javax::crypto::spec::RC5ParameterSpec,1,"<init>","(III[B)V")
J2CPP_DEFINE_METHOD(javax::crypto::spec::RC5ParameterSpec,2,"<init>","(III[BI)V")
J2CPP_DEFINE_METHOD(javax::crypto::spec::RC5ParameterSpec,3,"getVersion","()I")
J2CPP_DEFINE_METHOD(javax::crypto::spec::RC5ParameterSpec,4,"getRounds","()I")
J2CPP_DEFINE_METHOD(javax::crypto::spec::RC5ParameterSpec,5,"getWordSize","()I")
J2CPP_DEFINE_METHOD(javax::crypto::spec::RC5ParameterSpec,6,"getIV","()[B")
J2CPP_DEFINE_METHOD(javax::crypto::spec::RC5ParameterSpec,7,"equals","(Ljava/lang/Object;)Z")
J2CPP_DEFINE_METHOD(javax::crypto::spec::RC5ParameterSpec,8,"hashCode","()I")

} //namespace j2cpp

#endif //J2CPP_JAVAX_CRYPTO_SPEC_RC5PARAMETERSPEC_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
