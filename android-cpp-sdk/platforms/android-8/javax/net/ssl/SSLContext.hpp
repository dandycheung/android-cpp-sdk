/*================================================================================
  code generated by: java2cpp
  class: javax.net.ssl.SSLContext
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVAX_NET_SSL_SSLCONTEXT_HPP_DECL
#define J2CPP_JAVAX_NET_SSL_SSLCONTEXT_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace security { class Provider; } } }
namespace j2cpp { namespace java { namespace security { class SecureRandom; } } }
namespace j2cpp { namespace javax { namespace net { namespace ssl { class SSLSessionContext; } } } }
namespace j2cpp { namespace javax { namespace net { namespace ssl { class SSLEngine; } } } }
namespace j2cpp { namespace javax { namespace net { namespace ssl { class KeyManager; } } } }
namespace j2cpp { namespace javax { namespace net { namespace ssl { class SSLServerSocketFactory; } } } }
namespace j2cpp { namespace javax { namespace net { namespace ssl { class SSLSocketFactory; } } } }
namespace j2cpp { namespace javax { namespace net { namespace ssl { class TrustManager; } } } }


#include <java/lang/String.hpp>
#include <java/security/Provider.hpp>
#include <java/security/SecureRandom.hpp>
#include <javax/net/ssl/KeyManager.hpp>
#include <javax/net/ssl/SSLEngine.hpp>
#include <javax/net/ssl/SSLServerSocketFactory.hpp>
#include <javax/net/ssl/SSLSessionContext.hpp>
#include <javax/net/ssl/SSLSocketFactory.hpp>
#include <javax/net/ssl/TrustManager.hpp>


namespace j2cpp {

namespace javax { namespace net { namespace ssl {

	class SSLContext;
	class SSLContext
		: public cpp_object<SSLContext>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_METHOD(12)

		SSLContext(jobject jobj)
		: cpp_object<SSLContext>(jobj)
		{
		}

		static local_ref< javax::net::ssl::SSLContext > getInstance(local_ref< java::lang::String > const&);
		static local_ref< javax::net::ssl::SSLContext > getInstance(local_ref< java::lang::String > const&, local_ref< java::lang::String > const&);
		static local_ref< javax::net::ssl::SSLContext > getInstance(local_ref< java::lang::String > const&, local_ref< java::security::Provider > const&);
		local_ref< java::lang::String > getProtocol();
		local_ref< java::security::Provider > getProvider();
		void init(local_ref< cpp_object_array<javax::net::ssl::KeyManager, 1> > const&, local_ref< cpp_object_array<javax::net::ssl::TrustManager, 1> > const&, local_ref< java::security::SecureRandom > const&);
		local_ref< javax::net::ssl::SSLSocketFactory > getSocketFactory();
		local_ref< javax::net::ssl::SSLServerSocketFactory > getServerSocketFactory();
		local_ref< javax::net::ssl::SSLEngine > createSSLEngine();
		local_ref< javax::net::ssl::SSLEngine > createSSLEngine(local_ref< java::lang::String > const&, cpp_int const&);
		local_ref< javax::net::ssl::SSLSessionContext > getServerSessionContext();
		local_ref< javax::net::ssl::SSLSessionContext > getClientSessionContext();
	}; //class SSLContext

} //namespace ssl
} //namespace net
} //namespace javax


} //namespace j2cpp

#endif //J2CPP_JAVAX_NET_SSL_SSLCONTEXT_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVAX_NET_SSL_SSLCONTEXT_HPP_IMPL
#define J2CPP_JAVAX_NET_SSL_SSLCONTEXT_HPP_IMPL

namespace j2cpp {


template <>
local_ref< javax::net::ssl::SSLContext > create< javax::net::ssl::SSLContext>(local_ref< javax::net::ssl::SSLContextSpi > const &a0, local_ref< java::security::Provider > const &a1, local_ref< java::lang::String > const &a2)
{
	return local_ref< javax::net::ssl::SSLContext >(
		environment::get().get_jenv()->NewObject(
			get_class<javax::net::ssl::SSLContext::J2CPP_CLASS_NAME>(),
			get_method_id<javax::net::ssl::SSLContext::J2CPP_CLASS_NAME, javax::net::ssl::SSLContext::J2CPP_METHOD_NAME(0), javax::net::ssl::SSLContext::J2CPP_METHOD_SIGNATURE(0), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

local_ref< javax::net::ssl::SSLContext > javax::net::ssl::SSLContext::getInstance(local_ref< java::lang::String > const &a0)
{
	return local_ref< javax::net::ssl::SSLContext >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), true>(),
			a0.get_jtype()
		)
	);
}

local_ref< javax::net::ssl::SSLContext > javax::net::ssl::SSLContext::getInstance(local_ref< java::lang::String > const &a0, local_ref< java::lang::String > const &a1)
{
	return local_ref< javax::net::ssl::SSLContext >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), true>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< javax::net::ssl::SSLContext > javax::net::ssl::SSLContext::getInstance(local_ref< java::lang::String > const &a0, local_ref< java::security::Provider > const &a1)
{
	return local_ref< javax::net::ssl::SSLContext >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), true>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< java::lang::String > javax::net::ssl::SSLContext::getProtocol()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>()
		)
	);
}

local_ref< java::security::Provider > javax::net::ssl::SSLContext::getProvider()
{
	return local_ref< java::security::Provider >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>()
		)
	);
}

void javax::net::ssl::SSLContext::init(local_ref< cpp_object_array<javax::net::ssl::KeyManager, 1> > const &a0, local_ref< cpp_object_array<javax::net::ssl::TrustManager, 1> > const &a1, local_ref< java::security::SecureRandom > const &a2)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

local_ref< javax::net::ssl::SSLSocketFactory > javax::net::ssl::SSLContext::getSocketFactory()
{
	return local_ref< javax::net::ssl::SSLSocketFactory >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(7), J2CPP_METHOD_SIGNATURE(7), false>()
		)
	);
}

local_ref< javax::net::ssl::SSLServerSocketFactory > javax::net::ssl::SSLContext::getServerSocketFactory()
{
	return local_ref< javax::net::ssl::SSLServerSocketFactory >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(8), J2CPP_METHOD_SIGNATURE(8), false>()
		)
	);
}

local_ref< javax::net::ssl::SSLEngine > javax::net::ssl::SSLContext::createSSLEngine()
{
	return local_ref< javax::net::ssl::SSLEngine >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(9), J2CPP_METHOD_SIGNATURE(9), false>()
		)
	);
}

local_ref< javax::net::ssl::SSLEngine > javax::net::ssl::SSLContext::createSSLEngine(local_ref< java::lang::String > const &a0, cpp_int const &a1)
{
	return local_ref< javax::net::ssl::SSLEngine >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(10), J2CPP_METHOD_SIGNATURE(10), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< javax::net::ssl::SSLSessionContext > javax::net::ssl::SSLContext::getServerSessionContext()
{
	return local_ref< javax::net::ssl::SSLSessionContext >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(11), J2CPP_METHOD_SIGNATURE(11), false>()
		)
	);
}

local_ref< javax::net::ssl::SSLSessionContext > javax::net::ssl::SSLContext::getClientSessionContext()
{
	return local_ref< javax::net::ssl::SSLSessionContext >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(12), J2CPP_METHOD_SIGNATURE(12), false>()
		)
	);
}


J2CPP_DEFINE_CLASS(javax::net::ssl::SSLContext,"javax/net/ssl/SSLContext")
J2CPP_DEFINE_METHOD(javax::net::ssl::SSLContext,0,"<init>","(Ljavax/net/ssl/SSLContextSpi;Ljava/security/Provider;Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(javax::net::ssl::SSLContext,1,"getInstance","(Ljava/lang/String;)Ljavax/net/ssl/SSLContext;")
J2CPP_DEFINE_METHOD(javax::net::ssl::SSLContext,2,"getInstance","(Ljava/lang/String;Ljava/lang/String;)Ljavax/net/ssl/SSLContext;")
J2CPP_DEFINE_METHOD(javax::net::ssl::SSLContext,3,"getInstance","(Ljava/lang/String;Ljava/security/Provider;)Ljavax/net/ssl/SSLContext;")
J2CPP_DEFINE_METHOD(javax::net::ssl::SSLContext,4,"getProtocol","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(javax::net::ssl::SSLContext,5,"getProvider","()Ljava/security/Provider;")
J2CPP_DEFINE_METHOD(javax::net::ssl::SSLContext,6,"init","([javax.net.ssl.KeyManager[javax.net.ssl.TrustManagerLjava/security/SecureRandom;)V")
J2CPP_DEFINE_METHOD(javax::net::ssl::SSLContext,7,"getSocketFactory","()Ljavax/net/ssl/SSLSocketFactory;")
J2CPP_DEFINE_METHOD(javax::net::ssl::SSLContext,8,"getServerSocketFactory","()Ljavax/net/ssl/SSLServerSocketFactory;")
J2CPP_DEFINE_METHOD(javax::net::ssl::SSLContext,9,"createSSLEngine","()Ljavax/net/ssl/SSLEngine;")
J2CPP_DEFINE_METHOD(javax::net::ssl::SSLContext,10,"createSSLEngine","(Ljava/lang/String;I)Ljavax/net/ssl/SSLEngine;")
J2CPP_DEFINE_METHOD(javax::net::ssl::SSLContext,11,"getServerSessionContext","()Ljavax/net/ssl/SSLSessionContext;")
J2CPP_DEFINE_METHOD(javax::net::ssl::SSLContext,12,"getClientSessionContext","()Ljavax/net/ssl/SSLSessionContext;")

} //namespace j2cpp

#endif //J2CPP_JAVAX_NET_SSL_SSLCONTEXT_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
