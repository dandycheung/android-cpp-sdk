/*================================================================================
  code generated by: java2cpp
  class: javax.net.ssl.KeyStoreBuilderParameters
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVAX_NET_SSL_KEYSTOREBUILDERPARAMETERS_HPP_DECL
#define J2CPP_JAVAX_NET_SSL_KEYSTOREBUILDERPARAMETERS_HPP_DECL


namespace j2cpp { namespace java { namespace security { namespace KeyStore_ { class Builder; } } } }
namespace j2cpp { namespace java { namespace util { class List; } } }


#include <java/security/KeyStore.hpp>
#include <java/util/List.hpp>


namespace j2cpp {

namespace javax { namespace net { namespace ssl {

	class KeyStoreBuilderParameters;
	class KeyStoreBuilderParameters
		: public cpp_object<KeyStoreBuilderParameters>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)

		KeyStoreBuilderParameters(jobject jobj)
		: cpp_object<KeyStoreBuilderParameters>(jobj)
		{
		}

		local_ref< java::util::List > getParameters();
	}; //class KeyStoreBuilderParameters

} //namespace ssl
} //namespace net
} //namespace javax


} //namespace j2cpp

#endif //J2CPP_JAVAX_NET_SSL_KEYSTOREBUILDERPARAMETERS_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVAX_NET_SSL_KEYSTOREBUILDERPARAMETERS_HPP_IMPL
#define J2CPP_JAVAX_NET_SSL_KEYSTOREBUILDERPARAMETERS_HPP_IMPL

namespace j2cpp {


template <>
local_ref< javax::net::ssl::KeyStoreBuilderParameters > create< javax::net::ssl::KeyStoreBuilderParameters>(local_ref< java::security::KeyStore_::Builder > const &a0)
{
	return local_ref< javax::net::ssl::KeyStoreBuilderParameters >(
		environment::get().get_jenv()->NewObject(
			get_class<javax::net::ssl::KeyStoreBuilderParameters::J2CPP_CLASS_NAME>(),
			get_method_id<javax::net::ssl::KeyStoreBuilderParameters::J2CPP_CLASS_NAME, javax::net::ssl::KeyStoreBuilderParameters::J2CPP_METHOD_NAME(0), javax::net::ssl::KeyStoreBuilderParameters::J2CPP_METHOD_SIGNATURE(0), false>(),
			a0.get_jtype()
		)
	);
}

template <>
local_ref< javax::net::ssl::KeyStoreBuilderParameters > create< javax::net::ssl::KeyStoreBuilderParameters>(local_ref< java::util::List > const &a0)
{
	return local_ref< javax::net::ssl::KeyStoreBuilderParameters >(
		environment::get().get_jenv()->NewObject(
			get_class<javax::net::ssl::KeyStoreBuilderParameters::J2CPP_CLASS_NAME>(),
			get_method_id<javax::net::ssl::KeyStoreBuilderParameters::J2CPP_CLASS_NAME, javax::net::ssl::KeyStoreBuilderParameters::J2CPP_METHOD_NAME(1), javax::net::ssl::KeyStoreBuilderParameters::J2CPP_METHOD_SIGNATURE(1), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::util::List > javax::net::ssl::KeyStoreBuilderParameters::getParameters()
{
	return local_ref< java::util::List >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>()
		)
	);
}


J2CPP_DEFINE_CLASS(javax::net::ssl::KeyStoreBuilderParameters,"javax/net/ssl/KeyStoreBuilderParameters")
J2CPP_DEFINE_METHOD(javax::net::ssl::KeyStoreBuilderParameters,0,"<init>","(Ljava/security/KeyStore$Builder;)V")
J2CPP_DEFINE_METHOD(javax::net::ssl::KeyStoreBuilderParameters,1,"<init>","(Ljava/util/List;)V")
J2CPP_DEFINE_METHOD(javax::net::ssl::KeyStoreBuilderParameters,2,"getParameters","()Ljava/util/List;")

} //namespace j2cpp

#endif //J2CPP_JAVAX_NET_SSL_KEYSTOREBUILDERPARAMETERS_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
