/*================================================================================
  code generated by: java2cpp
  class: javax.net.ssl.SSLServerSocketFactory
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVAX_NET_SSL_SSLSERVERSOCKETFACTORY_HPP_DECL
#define J2CPP_JAVAX_NET_SSL_SSLSERVERSOCKETFACTORY_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace javax { namespace net { class ServerSocketFactory; } } }


#include <java/lang/String.hpp>
#include <javax/net/ServerSocketFactory.hpp>


namespace j2cpp {

namespace javax { namespace net { namespace ssl {

	class SSLServerSocketFactory;
	class SSLServerSocketFactory
		: public cpp_object<SSLServerSocketFactory>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)

		SSLServerSocketFactory(jobject jobj)
		: cpp_object<SSLServerSocketFactory>(jobj)
		{
		}

		static local_ref< javax::net::ServerSocketFactory > getDefault();
		local_ref< cpp_object_array<java::lang::String, 1> > getDefaultCipherSuites();
		local_ref< cpp_object_array<java::lang::String, 1> > getSupportedCipherSuites();
	}; //class SSLServerSocketFactory

} //namespace ssl
} //namespace net
} //namespace javax


} //namespace j2cpp

#endif //J2CPP_JAVAX_NET_SSL_SSLSERVERSOCKETFACTORY_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVAX_NET_SSL_SSLSERVERSOCKETFACTORY_HPP_IMPL
#define J2CPP_JAVAX_NET_SSL_SSLSERVERSOCKETFACTORY_HPP_IMPL

namespace j2cpp {


template <>
local_ref< javax::net::ssl::SSLServerSocketFactory > create< javax::net::ssl::SSLServerSocketFactory>()
{
	return local_ref< javax::net::ssl::SSLServerSocketFactory >(
		environment::get().get_jenv()->NewObject(
			get_class<javax::net::ssl::SSLServerSocketFactory::J2CPP_CLASS_NAME>(),
			get_method_id<javax::net::ssl::SSLServerSocketFactory::J2CPP_CLASS_NAME, javax::net::ssl::SSLServerSocketFactory::J2CPP_METHOD_NAME(0), javax::net::ssl::SSLServerSocketFactory::J2CPP_METHOD_SIGNATURE(0), false>()
		)
	);
}

local_ref< javax::net::ServerSocketFactory > javax::net::ssl::SSLServerSocketFactory::getDefault()
{
	return local_ref< javax::net::ServerSocketFactory >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), true>()
		)
	);
}

local_ref< cpp_object_array<java::lang::String, 1> > javax::net::ssl::SSLServerSocketFactory::getDefaultCipherSuites()
{
	return local_ref< cpp_object_array<java::lang::String, 1> >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>()
		)
	);
}

local_ref< cpp_object_array<java::lang::String, 1> > javax::net::ssl::SSLServerSocketFactory::getSupportedCipherSuites()
{
	return local_ref< cpp_object_array<java::lang::String, 1> >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>()
		)
	);
}


J2CPP_DEFINE_CLASS(javax::net::ssl::SSLServerSocketFactory,"javax/net/ssl/SSLServerSocketFactory")
J2CPP_DEFINE_METHOD(javax::net::ssl::SSLServerSocketFactory,0,"<init>","()V")
J2CPP_DEFINE_METHOD(javax::net::ssl::SSLServerSocketFactory,1,"getDefault","()Ljavax/net/ServerSocketFactory;")
J2CPP_DEFINE_METHOD(javax::net::ssl::SSLServerSocketFactory,2,"getDefaultCipherSuites","()[java.lang.String")
J2CPP_DEFINE_METHOD(javax::net::ssl::SSLServerSocketFactory,3,"getSupportedCipherSuites","()[java.lang.String")

} //namespace j2cpp

#endif //J2CPP_JAVAX_NET_SSL_SSLSERVERSOCKETFACTORY_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
