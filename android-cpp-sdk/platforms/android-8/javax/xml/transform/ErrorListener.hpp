/*================================================================================
  code generated by: java2cpp
  class: javax.xml.transform.ErrorListener
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVAX_XML_TRANSFORM_ERRORLISTENER_HPP_DECL
#define J2CPP_JAVAX_XML_TRANSFORM_ERRORLISTENER_HPP_DECL


namespace j2cpp { namespace javax { namespace xml { namespace transform { class TransformerException; } } } }


#include <javax/xml/transform/TransformerException.hpp>


namespace j2cpp {

namespace javax { namespace xml { namespace transform {

	class ErrorListener;
	class ErrorListener
		: public cpp_object<ErrorListener>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)

		ErrorListener(jobject jobj)
		: cpp_object<ErrorListener>(jobj)
		{
		}

		void warning(local_ref< javax::xml::transform::TransformerException > const&);
		void error(local_ref< javax::xml::transform::TransformerException > const&);
		void fatalError(local_ref< javax::xml::transform::TransformerException > const&);
	}; //class ErrorListener

} //namespace transform
} //namespace xml
} //namespace javax


} //namespace j2cpp

#endif //J2CPP_JAVAX_XML_TRANSFORM_ERRORLISTENER_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVAX_XML_TRANSFORM_ERRORLISTENER_HPP_IMPL
#define J2CPP_JAVAX_XML_TRANSFORM_ERRORLISTENER_HPP_IMPL

namespace j2cpp {


void javax::xml::transform::ErrorListener::warning(local_ref< javax::xml::transform::TransformerException > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(0), J2CPP_METHOD_SIGNATURE(0), false>(),
			a0.get_jtype()
		)
	);
}

void javax::xml::transform::ErrorListener::error(local_ref< javax::xml::transform::TransformerException > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), false>(),
			a0.get_jtype()
		)
	);
}

void javax::xml::transform::ErrorListener::fatalError(local_ref< javax::xml::transform::TransformerException > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>(),
			a0.get_jtype()
		)
	);
}


J2CPP_DEFINE_CLASS(javax::xml::transform::ErrorListener,"javax/xml/transform/ErrorListener")
J2CPP_DEFINE_METHOD(javax::xml::transform::ErrorListener,0,"warning","(Ljavax/xml/transform/TransformerException;)V")
J2CPP_DEFINE_METHOD(javax::xml::transform::ErrorListener,1,"error","(Ljavax/xml/transform/TransformerException;)V")
J2CPP_DEFINE_METHOD(javax::xml::transform::ErrorListener,2,"fatalError","(Ljavax/xml/transform/TransformerException;)V")

} //namespace j2cpp

#endif //J2CPP_JAVAX_XML_TRANSFORM_ERRORLISTENER_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
