/*================================================================================
  code generated by: java2cpp
  class: dalvik.system.DexFile
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_DALVIK_SYSTEM_DEXFILE_HPP_DECL
#define J2CPP_DALVIK_SYSTEM_DEXFILE_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace lang { class Class; } } }
namespace j2cpp { namespace java { namespace lang { class ClassLoader; } } }
namespace j2cpp { namespace java { namespace util { class Enumeration; } } }
namespace j2cpp { namespace java { namespace io { class File; } } }


#include <java/io/File.hpp>
#include <java/lang/Class.hpp>
#include <java/lang/ClassLoader.hpp>
#include <java/lang/String.hpp>
#include <java/util/Enumeration.hpp>


namespace j2cpp {

namespace dalvik { namespace system {

	class DexFile;
	class DexFile
		: public cpp_object<DexFile>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)

		DexFile(jobject jobj)
		: cpp_object<DexFile>(jobj)
		{
		}

		static local_ref< dalvik::system::DexFile > loadDex(local_ref< java::lang::String > const&, local_ref< java::lang::String > const&, cpp_int const&);
		local_ref< java::lang::String > getName();
		void close();
		local_ref< java::lang::Class > loadClass(local_ref< java::lang::String > const&, local_ref< java::lang::ClassLoader > const&);
		local_ref< java::util::Enumeration > entries();
		static cpp_boolean isDexOptNeeded(local_ref< java::lang::String > const&);
	}; //class DexFile

} //namespace system
} //namespace dalvik


} //namespace j2cpp

#endif //J2CPP_DALVIK_SYSTEM_DEXFILE_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_DALVIK_SYSTEM_DEXFILE_HPP_IMPL
#define J2CPP_DALVIK_SYSTEM_DEXFILE_HPP_IMPL

namespace j2cpp {


template <>
local_ref< dalvik::system::DexFile > create< dalvik::system::DexFile>(local_ref< java::io::File > const &a0)
{
	return local_ref< dalvik::system::DexFile >(
		environment::get().get_jenv()->NewObject(
			get_class<dalvik::system::DexFile::J2CPP_CLASS_NAME>(),
			get_method_id<dalvik::system::DexFile::J2CPP_CLASS_NAME, dalvik::system::DexFile::J2CPP_METHOD_NAME(0), dalvik::system::DexFile::J2CPP_METHOD_SIGNATURE(0), false>(),
			a0.get_jtype()
		)
	);
}

template <>
local_ref< dalvik::system::DexFile > create< dalvik::system::DexFile>(local_ref< java::lang::String > const &a0)
{
	return local_ref< dalvik::system::DexFile >(
		environment::get().get_jenv()->NewObject(
			get_class<dalvik::system::DexFile::J2CPP_CLASS_NAME>(),
			get_method_id<dalvik::system::DexFile::J2CPP_CLASS_NAME, dalvik::system::DexFile::J2CPP_METHOD_NAME(1), dalvik::system::DexFile::J2CPP_METHOD_SIGNATURE(1), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< dalvik::system::DexFile > dalvik::system::DexFile::loadDex(local_ref< java::lang::String > const &a0, local_ref< java::lang::String > const &a1, cpp_int const &a2)
{
	return local_ref< dalvik::system::DexFile >(
		environment::get().get_jenv()->CallStaticObjectMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), true>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

local_ref< java::lang::String > dalvik::system::DexFile::getName()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>()
		)
	);
}

void dalvik::system::DexFile::close()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>()
		)
	);
}

local_ref< java::lang::Class > dalvik::system::DexFile::loadClass(local_ref< java::lang::String > const &a0, local_ref< java::lang::ClassLoader > const &a1)
{
	return local_ref< java::lang::Class >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< java::util::Enumeration > dalvik::system::DexFile::entries()
{
	return local_ref< java::util::Enumeration >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>()
		)
	);
}


cpp_boolean dalvik::system::DexFile::isDexOptNeeded(local_ref< java::lang::String > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallStaticBooleanMethod(
			get_class<J2CPP_CLASS_NAME>(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(8), J2CPP_METHOD_SIGNATURE(8), true>(),
			a0.get_jtype()
		)
	);
}


J2CPP_DEFINE_CLASS(dalvik::system::DexFile,"dalvik/system/DexFile")
J2CPP_DEFINE_METHOD(dalvik::system::DexFile,0,"<init>","(Ljava/io/File;)V")
J2CPP_DEFINE_METHOD(dalvik::system::DexFile,1,"<init>","(Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(dalvik::system::DexFile,2,"loadDex","(Ljava/lang/String;Ljava/lang/String;I)Ldalvik/system/DexFile;")
J2CPP_DEFINE_METHOD(dalvik::system::DexFile,3,"getName","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(dalvik::system::DexFile,4,"close","()V")
J2CPP_DEFINE_METHOD(dalvik::system::DexFile,5,"loadClass","(Ljava/lang/String;Ljava/lang/ClassLoader;)Ljava/lang/Class;")
J2CPP_DEFINE_METHOD(dalvik::system::DexFile,6,"entries","()Ljava/util/Enumeration;")
J2CPP_DEFINE_METHOD(dalvik::system::DexFile,7,"finalize","()V")
J2CPP_DEFINE_METHOD(dalvik::system::DexFile,8,"isDexOptNeeded","(Ljava/lang/String;)Z")

} //namespace j2cpp

#endif //J2CPP_DALVIK_SYSTEM_DEXFILE_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
