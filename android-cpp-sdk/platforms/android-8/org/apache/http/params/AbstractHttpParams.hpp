/*================================================================================
  code generated by: java2cpp
  class: org.apache.http.params.AbstractHttpParams
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ORG_APACHE_HTTP_PARAMS_ABSTRACTHTTPPARAMS_HPP_DECL
#define J2CPP_ORG_APACHE_HTTP_PARAMS_ABSTRACTHTTPPARAMS_HPP_DECL


namespace j2cpp { namespace org { namespace apache { namespace http { namespace params { class HttpParams; } } } } }
namespace j2cpp { namespace java { namespace lang { class String; } } }


#include <java/lang/String.hpp>
#include <org/apache/http/params/HttpParams.hpp>


namespace j2cpp {

namespace org { namespace apache { namespace http { namespace params {

	class AbstractHttpParams;
	class AbstractHttpParams
		: public cpp_object<AbstractHttpParams>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)

		AbstractHttpParams(jobject jobj)
		: cpp_object<AbstractHttpParams>(jobj)
		{
		}

		cpp_long getLongParameter(local_ref< java::lang::String > const&, cpp_long const&);
		local_ref< org::apache::http::params::HttpParams > setLongParameter(local_ref< java::lang::String > const&, cpp_long const&);
		cpp_int getIntParameter(local_ref< java::lang::String > const&, cpp_int const&);
		local_ref< org::apache::http::params::HttpParams > setIntParameter(local_ref< java::lang::String > const&, cpp_int const&);
		cpp_double getDoubleParameter(local_ref< java::lang::String > const&, cpp_double const&);
		local_ref< org::apache::http::params::HttpParams > setDoubleParameter(local_ref< java::lang::String > const&, cpp_double const&);
		cpp_boolean getBooleanParameter(local_ref< java::lang::String > const&, cpp_boolean const&);
		local_ref< org::apache::http::params::HttpParams > setBooleanParameter(local_ref< java::lang::String > const&, cpp_boolean const&);
		cpp_boolean isParameterTrue(local_ref< java::lang::String > const&);
		cpp_boolean isParameterFalse(local_ref< java::lang::String > const&);
	}; //class AbstractHttpParams

} //namespace params
} //namespace http
} //namespace apache
} //namespace org


} //namespace j2cpp

#endif //J2CPP_ORG_APACHE_HTTP_PARAMS_ABSTRACTHTTPPARAMS_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ORG_APACHE_HTTP_PARAMS_ABSTRACTHTTPPARAMS_HPP_IMPL
#define J2CPP_ORG_APACHE_HTTP_PARAMS_ABSTRACTHTTPPARAMS_HPP_IMPL

namespace j2cpp {


template <>
local_ref< org::apache::http::params::AbstractHttpParams > create< org::apache::http::params::AbstractHttpParams>()
{
	return local_ref< org::apache::http::params::AbstractHttpParams >(
		environment::get().get_jenv()->NewObject(
			get_class<org::apache::http::params::AbstractHttpParams::J2CPP_CLASS_NAME>(),
			get_method_id<org::apache::http::params::AbstractHttpParams::J2CPP_CLASS_NAME, org::apache::http::params::AbstractHttpParams::J2CPP_METHOD_NAME(0), org::apache::http::params::AbstractHttpParams::J2CPP_METHOD_SIGNATURE(0), false>()
		)
	);
}

cpp_long org::apache::http::params::AbstractHttpParams::getLongParameter(local_ref< java::lang::String > const &a0, cpp_long const &a1)
{
	return cpp_long(
		environment::get().get_jenv()->CallLongMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< org::apache::http::params::HttpParams > org::apache::http::params::AbstractHttpParams::setLongParameter(local_ref< java::lang::String > const &a0, cpp_long const &a1)
{
	return local_ref< org::apache::http::params::HttpParams >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_int org::apache::http::params::AbstractHttpParams::getIntParameter(local_ref< java::lang::String > const &a0, cpp_int const &a1)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< org::apache::http::params::HttpParams > org::apache::http::params::AbstractHttpParams::setIntParameter(local_ref< java::lang::String > const &a0, cpp_int const &a1)
{
	return local_ref< org::apache::http::params::HttpParams >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_double org::apache::http::params::AbstractHttpParams::getDoubleParameter(local_ref< java::lang::String > const &a0, cpp_double const &a1)
{
	return cpp_double(
		environment::get().get_jenv()->CallDoubleMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< org::apache::http::params::HttpParams > org::apache::http::params::AbstractHttpParams::setDoubleParameter(local_ref< java::lang::String > const &a0, cpp_double const &a1)
{
	return local_ref< org::apache::http::params::HttpParams >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_boolean org::apache::http::params::AbstractHttpParams::getBooleanParameter(local_ref< java::lang::String > const &a0, cpp_boolean const &a1)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(7), J2CPP_METHOD_SIGNATURE(7), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

local_ref< org::apache::http::params::HttpParams > org::apache::http::params::AbstractHttpParams::setBooleanParameter(local_ref< java::lang::String > const &a0, cpp_boolean const &a1)
{
	return local_ref< org::apache::http::params::HttpParams >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(8), J2CPP_METHOD_SIGNATURE(8), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_boolean org::apache::http::params::AbstractHttpParams::isParameterTrue(local_ref< java::lang::String > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(9), J2CPP_METHOD_SIGNATURE(9), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean org::apache::http::params::AbstractHttpParams::isParameterFalse(local_ref< java::lang::String > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(10), J2CPP_METHOD_SIGNATURE(10), false>(),
			a0.get_jtype()
		)
	);
}


J2CPP_DEFINE_CLASS(org::apache::http::params::AbstractHttpParams,"org/apache/http/params/AbstractHttpParams")
J2CPP_DEFINE_METHOD(org::apache::http::params::AbstractHttpParams,0,"<init>","()V")
J2CPP_DEFINE_METHOD(org::apache::http::params::AbstractHttpParams,1,"getLongParameter","(Ljava/lang/String;J)J")
J2CPP_DEFINE_METHOD(org::apache::http::params::AbstractHttpParams,2,"setLongParameter","(Ljava/lang/String;J)Lorg/apache/http/params/HttpParams;")
J2CPP_DEFINE_METHOD(org::apache::http::params::AbstractHttpParams,3,"getIntParameter","(Ljava/lang/String;I)I")
J2CPP_DEFINE_METHOD(org::apache::http::params::AbstractHttpParams,4,"setIntParameter","(Ljava/lang/String;I)Lorg/apache/http/params/HttpParams;")
J2CPP_DEFINE_METHOD(org::apache::http::params::AbstractHttpParams,5,"getDoubleParameter","(Ljava/lang/String;D)D")
J2CPP_DEFINE_METHOD(org::apache::http::params::AbstractHttpParams,6,"setDoubleParameter","(Ljava/lang/String;D)Lorg/apache/http/params/HttpParams;")
J2CPP_DEFINE_METHOD(org::apache::http::params::AbstractHttpParams,7,"getBooleanParameter","(Ljava/lang/String;Z)Z")
J2CPP_DEFINE_METHOD(org::apache::http::params::AbstractHttpParams,8,"setBooleanParameter","(Ljava/lang/String;Z)Lorg/apache/http/params/HttpParams;")
J2CPP_DEFINE_METHOD(org::apache::http::params::AbstractHttpParams,9,"isParameterTrue","(Ljava/lang/String;)Z")
J2CPP_DEFINE_METHOD(org::apache::http::params::AbstractHttpParams,10,"isParameterFalse","(Ljava/lang/String;)Z")

} //namespace j2cpp

#endif //J2CPP_ORG_APACHE_HTTP_PARAMS_ABSTRACTHTTPPARAMS_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
