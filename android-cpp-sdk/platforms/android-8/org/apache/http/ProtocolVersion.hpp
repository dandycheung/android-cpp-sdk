/*================================================================================
  code generated by: java2cpp
  class: org.apache.http.ProtocolVersion
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ORG_APACHE_HTTP_PROTOCOLVERSION_HPP_DECL
#define J2CPP_ORG_APACHE_HTTP_PROTOCOLVERSION_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace lang { class Object; } } }


#include <java/lang/Object.hpp>
#include <java/lang/String.hpp>


namespace j2cpp {

namespace org { namespace apache { namespace http {

	class ProtocolVersion;
	class ProtocolVersion
		: public cpp_object<ProtocolVersion>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_METHOD(12)
		J2CPP_DECLARE_FIELD(0)
		J2CPP_DECLARE_FIELD(1)
		J2CPP_DECLARE_FIELD(2)

		ProtocolVersion(jobject jobj)
		: cpp_object<ProtocolVersion>(jobj)
		{
		}

		local_ref< java::lang::String > getProtocol();
		cpp_int getMajor();
		cpp_int getMinor();
		local_ref< org::apache::http::ProtocolVersion > forVersion(cpp_int const&, cpp_int const&);
		cpp_int hashCode();
		cpp_boolean equals(local_ref< java::lang::Object > const&);
		cpp_boolean isComparable(local_ref< org::apache::http::ProtocolVersion > const&);
		cpp_int compareToVersion(local_ref< org::apache::http::ProtocolVersion > const&);
		cpp_boolean greaterEquals(local_ref< org::apache::http::ProtocolVersion > const&);
		cpp_boolean lessEquals(local_ref< org::apache::http::ProtocolVersion > const&);
		local_ref< java::lang::String > toString();
		local_ref< java::lang::Object > clone();

	}; //class ProtocolVersion

} //namespace http
} //namespace apache
} //namespace org


} //namespace j2cpp

#endif //J2CPP_ORG_APACHE_HTTP_PROTOCOLVERSION_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ORG_APACHE_HTTP_PROTOCOLVERSION_HPP_IMPL
#define J2CPP_ORG_APACHE_HTTP_PROTOCOLVERSION_HPP_IMPL

namespace j2cpp {


template <>
local_ref< org::apache::http::ProtocolVersion > create< org::apache::http::ProtocolVersion>(local_ref< java::lang::String > const &a0, cpp_int const &a1, cpp_int const &a2)
{
	return local_ref< org::apache::http::ProtocolVersion >(
		environment::get().get_jenv()->NewObject(
			get_class<org::apache::http::ProtocolVersion::J2CPP_CLASS_NAME>(),
			get_method_id<org::apache::http::ProtocolVersion::J2CPP_CLASS_NAME, org::apache::http::ProtocolVersion::J2CPP_METHOD_NAME(0), org::apache::http::ProtocolVersion::J2CPP_METHOD_SIGNATURE(0), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

local_ref< java::lang::String > org::apache::http::ProtocolVersion::getProtocol()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), false>()
		)
	);
}

cpp_int org::apache::http::ProtocolVersion::getMajor()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>()
		)
	);
}

cpp_int org::apache::http::ProtocolVersion::getMinor()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>()
		)
	);
}

local_ref< org::apache::http::ProtocolVersion > org::apache::http::ProtocolVersion::forVersion(cpp_int const &a0, cpp_int const &a1)
{
	return local_ref< org::apache::http::ProtocolVersion >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_int org::apache::http::ProtocolVersion::hashCode()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>()
		)
	);
}

cpp_boolean org::apache::http::ProtocolVersion::equals(local_ref< java::lang::Object > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean org::apache::http::ProtocolVersion::isComparable(local_ref< org::apache::http::ProtocolVersion > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(7), J2CPP_METHOD_SIGNATURE(7), false>(),
			a0.get_jtype()
		)
	);
}

cpp_int org::apache::http::ProtocolVersion::compareToVersion(local_ref< org::apache::http::ProtocolVersion > const &a0)
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(8), J2CPP_METHOD_SIGNATURE(8), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean org::apache::http::ProtocolVersion::greaterEquals(local_ref< org::apache::http::ProtocolVersion > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(9), J2CPP_METHOD_SIGNATURE(9), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean org::apache::http::ProtocolVersion::lessEquals(local_ref< org::apache::http::ProtocolVersion > const &a0)
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(10), J2CPP_METHOD_SIGNATURE(10), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< java::lang::String > org::apache::http::ProtocolVersion::toString()
{
	return local_ref< java::lang::String >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(11), J2CPP_METHOD_SIGNATURE(11), false>()
		)
	);
}

local_ref< java::lang::Object > org::apache::http::ProtocolVersion::clone()
{
	return local_ref< java::lang::Object >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(12), J2CPP_METHOD_SIGNATURE(12), false>()
		)
	);
}



J2CPP_DEFINE_CLASS(org::apache::http::ProtocolVersion,"org/apache/http/ProtocolVersion")
J2CPP_DEFINE_METHOD(org::apache::http::ProtocolVersion,0,"<init>","(Ljava/lang/String;II)V")
J2CPP_DEFINE_METHOD(org::apache::http::ProtocolVersion,1,"getProtocol","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(org::apache::http::ProtocolVersion,2,"getMajor","()I")
J2CPP_DEFINE_METHOD(org::apache::http::ProtocolVersion,3,"getMinor","()I")
J2CPP_DEFINE_METHOD(org::apache::http::ProtocolVersion,4,"forVersion","(II)Lorg/apache/http/ProtocolVersion;")
J2CPP_DEFINE_METHOD(org::apache::http::ProtocolVersion,5,"hashCode","()I")
J2CPP_DEFINE_METHOD(org::apache::http::ProtocolVersion,6,"equals","(Ljava/lang/Object;)Z")
J2CPP_DEFINE_METHOD(org::apache::http::ProtocolVersion,7,"isComparable","(Lorg/apache/http/ProtocolVersion;)Z")
J2CPP_DEFINE_METHOD(org::apache::http::ProtocolVersion,8,"compareToVersion","(Lorg/apache/http/ProtocolVersion;)I")
J2CPP_DEFINE_METHOD(org::apache::http::ProtocolVersion,9,"greaterEquals","(Lorg/apache/http/ProtocolVersion;)Z")
J2CPP_DEFINE_METHOD(org::apache::http::ProtocolVersion,10,"lessEquals","(Lorg/apache/http/ProtocolVersion;)Z")
J2CPP_DEFINE_METHOD(org::apache::http::ProtocolVersion,11,"toString","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(org::apache::http::ProtocolVersion,12,"clone","()Ljava/lang/Object;")
J2CPP_DEFINE_FIELD(org::apache::http::ProtocolVersion,0,"protocol","Ljava/lang/String;")
J2CPP_DEFINE_FIELD(org::apache::http::ProtocolVersion,1,"major","I")
J2CPP_DEFINE_FIELD(org::apache::http::ProtocolVersion,2,"minor","I")

} //namespace j2cpp

#endif //J2CPP_ORG_APACHE_HTTP_PROTOCOLVERSION_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
