/*================================================================================
  code generated by: java2cpp
  class: org.apache.http.protocol.BasicHttpProcessor
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ORG_APACHE_HTTP_PROTOCOL_BASICHTTPPROCESSOR_HPP_DECL
#define J2CPP_ORG_APACHE_HTTP_PROTOCOL_BASICHTTPPROCESSOR_HPP_DECL


namespace j2cpp { namespace org { namespace apache { namespace http { class HttpResponse; } } } }
namespace j2cpp { namespace org { namespace apache { namespace http { class HttpRequest; } } } }
namespace j2cpp { namespace org { namespace apache { namespace http { class HttpResponseInterceptor; } } } }
namespace j2cpp { namespace org { namespace apache { namespace http { class HttpRequestInterceptor; } } } }
namespace j2cpp { namespace org { namespace apache { namespace http { namespace protocol { class HttpContext; } } } } }
namespace j2cpp { namespace java { namespace lang { class Class; } } }
namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace util { class List; } } }


#include <java/lang/Class.hpp>
#include <java/lang/Object.hpp>
#include <java/util/List.hpp>
#include <org/apache/http/HttpRequest.hpp>
#include <org/apache/http/HttpRequestInterceptor.hpp>
#include <org/apache/http/HttpResponse.hpp>
#include <org/apache/http/HttpResponseInterceptor.hpp>
#include <org/apache/http/protocol/HttpContext.hpp>


namespace j2cpp {

namespace org { namespace apache { namespace http { namespace protocol {

	class BasicHttpProcessor;
	class BasicHttpProcessor
		: public cpp_object<BasicHttpProcessor>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_METHOD(12)
		J2CPP_DECLARE_METHOD(13)
		J2CPP_DECLARE_METHOD(14)
		J2CPP_DECLARE_METHOD(15)
		J2CPP_DECLARE_METHOD(16)
		J2CPP_DECLARE_METHOD(17)
		J2CPP_DECLARE_METHOD(18)
		J2CPP_DECLARE_METHOD(19)
		J2CPP_DECLARE_METHOD(20)
		J2CPP_DECLARE_METHOD(21)
		J2CPP_DECLARE_METHOD(22)
		J2CPP_DECLARE_METHOD(23)
		J2CPP_DECLARE_FIELD(0)
		J2CPP_DECLARE_FIELD(1)

		BasicHttpProcessor(jobject jobj)
		: cpp_object<BasicHttpProcessor>(jobj)
		{
		}

		void addRequestInterceptor(local_ref< org::apache::http::HttpRequestInterceptor > const&);
		void addRequestInterceptor(local_ref< org::apache::http::HttpRequestInterceptor > const&, cpp_int const&);
		void addResponseInterceptor(local_ref< org::apache::http::HttpResponseInterceptor > const&, cpp_int const&);
		void removeRequestInterceptorByClass(local_ref< java::lang::Class > const&);
		void removeResponseInterceptorByClass(local_ref< java::lang::Class > const&);
		void addInterceptor(local_ref< org::apache::http::HttpRequestInterceptor > const&);
		void addInterceptor(local_ref< org::apache::http::HttpRequestInterceptor > const&, cpp_int const&);
		cpp_int getRequestInterceptorCount();
		local_ref< org::apache::http::HttpRequestInterceptor > getRequestInterceptor(cpp_int const&);
		void clearRequestInterceptors();
		void addResponseInterceptor(local_ref< org::apache::http::HttpResponseInterceptor > const&);
		void addInterceptor(local_ref< org::apache::http::HttpResponseInterceptor > const&);
		void addInterceptor(local_ref< org::apache::http::HttpResponseInterceptor > const&, cpp_int const&);
		cpp_int getResponseInterceptorCount();
		local_ref< org::apache::http::HttpResponseInterceptor > getResponseInterceptor(cpp_int const&);
		void clearResponseInterceptors();
		void setInterceptors(local_ref< java::util::List > const&);
		void clearInterceptors();
		void process(local_ref< org::apache::http::HttpRequest > const&, local_ref< org::apache::http::protocol::HttpContext > const&);
		void process(local_ref< org::apache::http::HttpResponse > const&, local_ref< org::apache::http::protocol::HttpContext > const&);
		local_ref< org::apache::http::protocol::BasicHttpProcessor > copy();
		local_ref< java::lang::Object > clone();

	}; //class BasicHttpProcessor

} //namespace protocol
} //namespace http
} //namespace apache
} //namespace org


} //namespace j2cpp

#endif //J2CPP_ORG_APACHE_HTTP_PROTOCOL_BASICHTTPPROCESSOR_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ORG_APACHE_HTTP_PROTOCOL_BASICHTTPPROCESSOR_HPP_IMPL
#define J2CPP_ORG_APACHE_HTTP_PROTOCOL_BASICHTTPPROCESSOR_HPP_IMPL

namespace j2cpp {


template <>
local_ref< org::apache::http::protocol::BasicHttpProcessor > create< org::apache::http::protocol::BasicHttpProcessor>()
{
	return local_ref< org::apache::http::protocol::BasicHttpProcessor >(
		environment::get().get_jenv()->NewObject(
			get_class<org::apache::http::protocol::BasicHttpProcessor::J2CPP_CLASS_NAME>(),
			get_method_id<org::apache::http::protocol::BasicHttpProcessor::J2CPP_CLASS_NAME, org::apache::http::protocol::BasicHttpProcessor::J2CPP_METHOD_NAME(0), org::apache::http::protocol::BasicHttpProcessor::J2CPP_METHOD_SIGNATURE(0), false>()
		)
	);
}

void org::apache::http::protocol::BasicHttpProcessor::addRequestInterceptor(local_ref< org::apache::http::HttpRequestInterceptor > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), false>(),
			a0.get_jtype()
		)
	);
}

void org::apache::http::protocol::BasicHttpProcessor::addRequestInterceptor(local_ref< org::apache::http::HttpRequestInterceptor > const &a0, cpp_int const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void org::apache::http::protocol::BasicHttpProcessor::addResponseInterceptor(local_ref< org::apache::http::HttpResponseInterceptor > const &a0, cpp_int const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void org::apache::http::protocol::BasicHttpProcessor::removeRequestInterceptorByClass(local_ref< java::lang::Class > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>(),
			a0.get_jtype()
		)
	);
}

void org::apache::http::protocol::BasicHttpProcessor::removeResponseInterceptorByClass(local_ref< java::lang::Class > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>(),
			a0.get_jtype()
		)
	);
}

void org::apache::http::protocol::BasicHttpProcessor::addInterceptor(local_ref< org::apache::http::HttpRequestInterceptor > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>(),
			a0.get_jtype()
		)
	);
}

void org::apache::http::protocol::BasicHttpProcessor::addInterceptor(local_ref< org::apache::http::HttpRequestInterceptor > const &a0, cpp_int const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(7), J2CPP_METHOD_SIGNATURE(7), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_int org::apache::http::protocol::BasicHttpProcessor::getRequestInterceptorCount()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(8), J2CPP_METHOD_SIGNATURE(8), false>()
		)
	);
}

local_ref< org::apache::http::HttpRequestInterceptor > org::apache::http::protocol::BasicHttpProcessor::getRequestInterceptor(cpp_int const &a0)
{
	return local_ref< org::apache::http::HttpRequestInterceptor >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(9), J2CPP_METHOD_SIGNATURE(9), false>(),
			a0.get_jtype()
		)
	);
}

void org::apache::http::protocol::BasicHttpProcessor::clearRequestInterceptors()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(10), J2CPP_METHOD_SIGNATURE(10), false>()
		)
	);
}

void org::apache::http::protocol::BasicHttpProcessor::addResponseInterceptor(local_ref< org::apache::http::HttpResponseInterceptor > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(11), J2CPP_METHOD_SIGNATURE(11), false>(),
			a0.get_jtype()
		)
	);
}

void org::apache::http::protocol::BasicHttpProcessor::addInterceptor(local_ref< org::apache::http::HttpResponseInterceptor > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(12), J2CPP_METHOD_SIGNATURE(12), false>(),
			a0.get_jtype()
		)
	);
}

void org::apache::http::protocol::BasicHttpProcessor::addInterceptor(local_ref< org::apache::http::HttpResponseInterceptor > const &a0, cpp_int const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(13), J2CPP_METHOD_SIGNATURE(13), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

cpp_int org::apache::http::protocol::BasicHttpProcessor::getResponseInterceptorCount()
{
	return cpp_int(
		environment::get().get_jenv()->CallIntMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(14), J2CPP_METHOD_SIGNATURE(14), false>()
		)
	);
}

local_ref< org::apache::http::HttpResponseInterceptor > org::apache::http::protocol::BasicHttpProcessor::getResponseInterceptor(cpp_int const &a0)
{
	return local_ref< org::apache::http::HttpResponseInterceptor >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(15), J2CPP_METHOD_SIGNATURE(15), false>(),
			a0.get_jtype()
		)
	);
}

void org::apache::http::protocol::BasicHttpProcessor::clearResponseInterceptors()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(16), J2CPP_METHOD_SIGNATURE(16), false>()
		)
	);
}

void org::apache::http::protocol::BasicHttpProcessor::setInterceptors(local_ref< java::util::List > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(17), J2CPP_METHOD_SIGNATURE(17), false>(),
			a0.get_jtype()
		)
	);
}

void org::apache::http::protocol::BasicHttpProcessor::clearInterceptors()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(18), J2CPP_METHOD_SIGNATURE(18), false>()
		)
	);
}

void org::apache::http::protocol::BasicHttpProcessor::process(local_ref< org::apache::http::HttpRequest > const &a0, local_ref< org::apache::http::protocol::HttpContext > const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(19), J2CPP_METHOD_SIGNATURE(19), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void org::apache::http::protocol::BasicHttpProcessor::process(local_ref< org::apache::http::HttpResponse > const &a0, local_ref< org::apache::http::protocol::HttpContext > const &a1)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(20), J2CPP_METHOD_SIGNATURE(20), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}


local_ref< org::apache::http::protocol::BasicHttpProcessor > org::apache::http::protocol::BasicHttpProcessor::copy()
{
	return local_ref< org::apache::http::protocol::BasicHttpProcessor >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(22), J2CPP_METHOD_SIGNATURE(22), false>()
		)
	);
}

local_ref< java::lang::Object > org::apache::http::protocol::BasicHttpProcessor::clone()
{
	return local_ref< java::lang::Object >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(23), J2CPP_METHOD_SIGNATURE(23), false>()
		)
	);
}



J2CPP_DEFINE_CLASS(org::apache::http::protocol::BasicHttpProcessor,"org/apache/http/protocol/BasicHttpProcessor")
J2CPP_DEFINE_METHOD(org::apache::http::protocol::BasicHttpProcessor,0,"<init>","()V")
J2CPP_DEFINE_METHOD(org::apache::http::protocol::BasicHttpProcessor,1,"addRequestInterceptor","(Lorg/apache/http/HttpRequestInterceptor;)V")
J2CPP_DEFINE_METHOD(org::apache::http::protocol::BasicHttpProcessor,2,"addRequestInterceptor","(Lorg/apache/http/HttpRequestInterceptor;I)V")
J2CPP_DEFINE_METHOD(org::apache::http::protocol::BasicHttpProcessor,3,"addResponseInterceptor","(Lorg/apache/http/HttpResponseInterceptor;I)V")
J2CPP_DEFINE_METHOD(org::apache::http::protocol::BasicHttpProcessor,4,"removeRequestInterceptorByClass","(Ljava/lang/Class;)V")
J2CPP_DEFINE_METHOD(org::apache::http::protocol::BasicHttpProcessor,5,"removeResponseInterceptorByClass","(Ljava/lang/Class;)V")
J2CPP_DEFINE_METHOD(org::apache::http::protocol::BasicHttpProcessor,6,"addInterceptor","(Lorg/apache/http/HttpRequestInterceptor;)V")
J2CPP_DEFINE_METHOD(org::apache::http::protocol::BasicHttpProcessor,7,"addInterceptor","(Lorg/apache/http/HttpRequestInterceptor;I)V")
J2CPP_DEFINE_METHOD(org::apache::http::protocol::BasicHttpProcessor,8,"getRequestInterceptorCount","()I")
J2CPP_DEFINE_METHOD(org::apache::http::protocol::BasicHttpProcessor,9,"getRequestInterceptor","(I)Lorg/apache/http/HttpRequestInterceptor;")
J2CPP_DEFINE_METHOD(org::apache::http::protocol::BasicHttpProcessor,10,"clearRequestInterceptors","()V")
J2CPP_DEFINE_METHOD(org::apache::http::protocol::BasicHttpProcessor,11,"addResponseInterceptor","(Lorg/apache/http/HttpResponseInterceptor;)V")
J2CPP_DEFINE_METHOD(org::apache::http::protocol::BasicHttpProcessor,12,"addInterceptor","(Lorg/apache/http/HttpResponseInterceptor;)V")
J2CPP_DEFINE_METHOD(org::apache::http::protocol::BasicHttpProcessor,13,"addInterceptor","(Lorg/apache/http/HttpResponseInterceptor;I)V")
J2CPP_DEFINE_METHOD(org::apache::http::protocol::BasicHttpProcessor,14,"getResponseInterceptorCount","()I")
J2CPP_DEFINE_METHOD(org::apache::http::protocol::BasicHttpProcessor,15,"getResponseInterceptor","(I)Lorg/apache/http/HttpResponseInterceptor;")
J2CPP_DEFINE_METHOD(org::apache::http::protocol::BasicHttpProcessor,16,"clearResponseInterceptors","()V")
J2CPP_DEFINE_METHOD(org::apache::http::protocol::BasicHttpProcessor,17,"setInterceptors","(Ljava/util/List;)V")
J2CPP_DEFINE_METHOD(org::apache::http::protocol::BasicHttpProcessor,18,"clearInterceptors","()V")
J2CPP_DEFINE_METHOD(org::apache::http::protocol::BasicHttpProcessor,19,"process","(Lorg/apache/http/HttpRequest;Lorg/apache/http/protocol/HttpContext;)V")
J2CPP_DEFINE_METHOD(org::apache::http::protocol::BasicHttpProcessor,20,"process","(Lorg/apache/http/HttpResponse;Lorg/apache/http/protocol/HttpContext;)V")
J2CPP_DEFINE_METHOD(org::apache::http::protocol::BasicHttpProcessor,21,"copyInterceptors","(Lorg/apache/http/protocol/BasicHttpProcessor;)V")
J2CPP_DEFINE_METHOD(org::apache::http::protocol::BasicHttpProcessor,22,"copy","()Lorg/apache/http/protocol/BasicHttpProcessor;")
J2CPP_DEFINE_METHOD(org::apache::http::protocol::BasicHttpProcessor,23,"clone","()Ljava/lang/Object;")
J2CPP_DEFINE_FIELD(org::apache::http::protocol::BasicHttpProcessor,0,"requestInterceptors","Ljava/util/List;")
J2CPP_DEFINE_FIELD(org::apache::http::protocol::BasicHttpProcessor,1,"responseInterceptors","Ljava/util/List;")

} //namespace j2cpp

#endif //J2CPP_ORG_APACHE_HTTP_PROTOCOL_BASICHTTPPROCESSOR_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
