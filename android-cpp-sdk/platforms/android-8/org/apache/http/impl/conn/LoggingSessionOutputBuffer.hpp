/*================================================================================
  code generated by: java2cpp
  class: org.apache.http.impl.conn.LoggingSessionOutputBuffer
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ORG_APACHE_HTTP_IMPL_CONN_LOGGINGSESSIONOUTPUTBUFFER_HPP_DECL
#define J2CPP_ORG_APACHE_HTTP_IMPL_CONN_LOGGINGSESSIONOUTPUTBUFFER_HPP_DECL


namespace j2cpp { namespace org { namespace apache { namespace http { namespace impl { namespace conn { class Wire; } } } } } }
namespace j2cpp { namespace org { namespace apache { namespace http { namespace util { class CharArrayBuffer; } } } } }
namespace j2cpp { namespace org { namespace apache { namespace http { namespace io { class HttpTransportMetrics; } } } } }
namespace j2cpp { namespace org { namespace apache { namespace http { namespace io { class SessionOutputBuffer; } } } } }
namespace j2cpp { namespace java { namespace lang { class String; } } }


#include <java/lang/String.hpp>
#include <org/apache/http/impl/conn/Wire.hpp>
#include <org/apache/http/io/HttpTransportMetrics.hpp>
#include <org/apache/http/io/SessionOutputBuffer.hpp>
#include <org/apache/http/util/CharArrayBuffer.hpp>


namespace j2cpp {

namespace org { namespace apache { namespace http { namespace impl { namespace conn {

	class LoggingSessionOutputBuffer;
	class LoggingSessionOutputBuffer
		: public cpp_object<LoggingSessionOutputBuffer>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)

		LoggingSessionOutputBuffer(jobject jobj)
		: cpp_object<LoggingSessionOutputBuffer>(jobj)
		{
		}

		void write(local_ref< cpp_byte_array<1> > const&, cpp_int const&, cpp_int const&);
		void write(cpp_int const&);
		void write(local_ref< cpp_byte_array<1> > const&);
		void flush();
		void writeLine(local_ref< org::apache::http::util::CharArrayBuffer > const&);
		void writeLine(local_ref< java::lang::String > const&);
		local_ref< org::apache::http::io::HttpTransportMetrics > getMetrics();
	}; //class LoggingSessionOutputBuffer

} //namespace conn
} //namespace impl
} //namespace http
} //namespace apache
} //namespace org


} //namespace j2cpp

#endif //J2CPP_ORG_APACHE_HTTP_IMPL_CONN_LOGGINGSESSIONOUTPUTBUFFER_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ORG_APACHE_HTTP_IMPL_CONN_LOGGINGSESSIONOUTPUTBUFFER_HPP_IMPL
#define J2CPP_ORG_APACHE_HTTP_IMPL_CONN_LOGGINGSESSIONOUTPUTBUFFER_HPP_IMPL

namespace j2cpp {


template <>
local_ref< org::apache::http::impl::conn::LoggingSessionOutputBuffer > create< org::apache::http::impl::conn::LoggingSessionOutputBuffer>(local_ref< org::apache::http::io::SessionOutputBuffer > const &a0, local_ref< org::apache::http::impl::conn::Wire > const &a1)
{
	return local_ref< org::apache::http::impl::conn::LoggingSessionOutputBuffer >(
		environment::get().get_jenv()->NewObject(
			get_class<org::apache::http::impl::conn::LoggingSessionOutputBuffer::J2CPP_CLASS_NAME>(),
			get_method_id<org::apache::http::impl::conn::LoggingSessionOutputBuffer::J2CPP_CLASS_NAME, org::apache::http::impl::conn::LoggingSessionOutputBuffer::J2CPP_METHOD_NAME(0), org::apache::http::impl::conn::LoggingSessionOutputBuffer::J2CPP_METHOD_SIGNATURE(0), false>(),
			a0.get_jtype(), a1.get_jtype()
		)
	);
}

void org::apache::http::impl::conn::LoggingSessionOutputBuffer::write(local_ref< cpp_byte_array<1> > const &a0, cpp_int const &a1, cpp_int const &a2)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

void org::apache::http::impl::conn::LoggingSessionOutputBuffer::write(cpp_int const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>(),
			a0.get_jtype()
		)
	);
}

void org::apache::http::impl::conn::LoggingSessionOutputBuffer::write(local_ref< cpp_byte_array<1> > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>(),
			a0.get_jtype()
		)
	);
}

void org::apache::http::impl::conn::LoggingSessionOutputBuffer::flush()
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>()
		)
	);
}

void org::apache::http::impl::conn::LoggingSessionOutputBuffer::writeLine(local_ref< org::apache::http::util::CharArrayBuffer > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>(),
			a0.get_jtype()
		)
	);
}

void org::apache::http::impl::conn::LoggingSessionOutputBuffer::writeLine(local_ref< java::lang::String > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>(),
			a0.get_jtype()
		)
	);
}

local_ref< org::apache::http::io::HttpTransportMetrics > org::apache::http::impl::conn::LoggingSessionOutputBuffer::getMetrics()
{
	return local_ref< org::apache::http::io::HttpTransportMetrics >(
		environment::get().get_jenv()->CallObjectMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(7), J2CPP_METHOD_SIGNATURE(7), false>()
		)
	);
}


J2CPP_DEFINE_CLASS(org::apache::http::impl::conn::LoggingSessionOutputBuffer,"org/apache/http/impl/conn/LoggingSessionOutputBuffer")
J2CPP_DEFINE_METHOD(org::apache::http::impl::conn::LoggingSessionOutputBuffer,0,"<init>","(Lorg/apache/http/io/SessionOutputBuffer;Lorg/apache/http/impl/conn/Wire;)V")
J2CPP_DEFINE_METHOD(org::apache::http::impl::conn::LoggingSessionOutputBuffer,1,"write","([BII)V")
J2CPP_DEFINE_METHOD(org::apache::http::impl::conn::LoggingSessionOutputBuffer,2,"write","(I)V")
J2CPP_DEFINE_METHOD(org::apache::http::impl::conn::LoggingSessionOutputBuffer,3,"write","([B)V")
J2CPP_DEFINE_METHOD(org::apache::http::impl::conn::LoggingSessionOutputBuffer,4,"flush","()V")
J2CPP_DEFINE_METHOD(org::apache::http::impl::conn::LoggingSessionOutputBuffer,5,"writeLine","(Lorg/apache/http/util/CharArrayBuffer;)V")
J2CPP_DEFINE_METHOD(org::apache::http::impl::conn::LoggingSessionOutputBuffer,6,"writeLine","(Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(org::apache::http::impl::conn::LoggingSessionOutputBuffer,7,"getMetrics","()Lorg/apache/http/io/HttpTransportMetrics;")

} //namespace j2cpp

#endif //J2CPP_ORG_APACHE_HTTP_IMPL_CONN_LOGGINGSESSIONOUTPUTBUFFER_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
