/*================================================================================
  code generated by: java2cpp
  class: org.apache.http.impl.conn.Wire
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ORG_APACHE_HTTP_IMPL_CONN_WIRE_HPP_DECL
#define J2CPP_ORG_APACHE_HTTP_IMPL_CONN_WIRE_HPP_DECL


namespace j2cpp { namespace org { namespace apache { namespace commons { namespace logging { class Log; } } } } }
namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace io { class InputStream; } } }


#include <java/io/InputStream.hpp>
#include <java/lang/String.hpp>
#include <org/apache/commons/logging/Log.hpp>


namespace j2cpp {

namespace org { namespace apache { namespace http { namespace impl { namespace conn {

	class Wire;
	class Wire
		: public cpp_object<Wire>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)

		Wire(jobject jobj)
		: cpp_object<Wire>(jobj)
		{
		}

		cpp_boolean enabled();
		void output(local_ref< java::io::InputStream > const&);
		void input(local_ref< java::io::InputStream > const&);
		void output(local_ref< cpp_byte_array<1> > const&, cpp_int const&, cpp_int const&);
		void input(local_ref< cpp_byte_array<1> > const&, cpp_int const&, cpp_int const&);
		void output(local_ref< cpp_byte_array<1> > const&);
		void input(local_ref< cpp_byte_array<1> > const&);
		void output(cpp_int const&);
		void input(cpp_int const&);
		void output(local_ref< java::lang::String > const&);
		void input(local_ref< java::lang::String > const&);
	}; //class Wire

} //namespace conn
} //namespace impl
} //namespace http
} //namespace apache
} //namespace org


} //namespace j2cpp

#endif //J2CPP_ORG_APACHE_HTTP_IMPL_CONN_WIRE_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ORG_APACHE_HTTP_IMPL_CONN_WIRE_HPP_IMPL
#define J2CPP_ORG_APACHE_HTTP_IMPL_CONN_WIRE_HPP_IMPL

namespace j2cpp {


template <>
local_ref< org::apache::http::impl::conn::Wire > create< org::apache::http::impl::conn::Wire>(local_ref< org::apache::commons::logging::Log > const &a0)
{
	return local_ref< org::apache::http::impl::conn::Wire >(
		environment::get().get_jenv()->NewObject(
			get_class<org::apache::http::impl::conn::Wire::J2CPP_CLASS_NAME>(),
			get_method_id<org::apache::http::impl::conn::Wire::J2CPP_CLASS_NAME, org::apache::http::impl::conn::Wire::J2CPP_METHOD_NAME(0), org::apache::http::impl::conn::Wire::J2CPP_METHOD_SIGNATURE(0), false>(),
			a0.get_jtype()
		)
	);
}

cpp_boolean org::apache::http::impl::conn::Wire::enabled()
{
	return cpp_boolean(
		environment::get().get_jenv()->CallBooleanMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(1), J2CPP_METHOD_SIGNATURE(1), false>()
		)
	);
}

void org::apache::http::impl::conn::Wire::output(local_ref< java::io::InputStream > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(2), J2CPP_METHOD_SIGNATURE(2), false>(),
			a0.get_jtype()
		)
	);
}

void org::apache::http::impl::conn::Wire::input(local_ref< java::io::InputStream > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(3), J2CPP_METHOD_SIGNATURE(3), false>(),
			a0.get_jtype()
		)
	);
}

void org::apache::http::impl::conn::Wire::output(local_ref< cpp_byte_array<1> > const &a0, cpp_int const &a1, cpp_int const &a2)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(4), J2CPP_METHOD_SIGNATURE(4), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

void org::apache::http::impl::conn::Wire::input(local_ref< cpp_byte_array<1> > const &a0, cpp_int const &a1, cpp_int const &a2)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(5), J2CPP_METHOD_SIGNATURE(5), false>(),
			a0.get_jtype(), a1.get_jtype(), a2.get_jtype()
		)
	);
}

void org::apache::http::impl::conn::Wire::output(local_ref< cpp_byte_array<1> > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(6), J2CPP_METHOD_SIGNATURE(6), false>(),
			a0.get_jtype()
		)
	);
}

void org::apache::http::impl::conn::Wire::input(local_ref< cpp_byte_array<1> > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(7), J2CPP_METHOD_SIGNATURE(7), false>(),
			a0.get_jtype()
		)
	);
}

void org::apache::http::impl::conn::Wire::output(cpp_int const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(8), J2CPP_METHOD_SIGNATURE(8), false>(),
			a0.get_jtype()
		)
	);
}

void org::apache::http::impl::conn::Wire::input(cpp_int const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(9), J2CPP_METHOD_SIGNATURE(9), false>(),
			a0.get_jtype()
		)
	);
}

void org::apache::http::impl::conn::Wire::output(local_ref< java::lang::String > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(10), J2CPP_METHOD_SIGNATURE(10), false>(),
			a0.get_jtype()
		)
	);
}

void org::apache::http::impl::conn::Wire::input(local_ref< java::lang::String > const &a0)
{
	return void(
		environment::get().get_jenv()->CallVoidMethod(
			get_jtype(),
			get_method_id<J2CPP_CLASS_NAME, J2CPP_METHOD_NAME(11), J2CPP_METHOD_SIGNATURE(11), false>(),
			a0.get_jtype()
		)
	);
}


J2CPP_DEFINE_CLASS(org::apache::http::impl::conn::Wire,"org/apache/http/impl/conn/Wire")
J2CPP_DEFINE_METHOD(org::apache::http::impl::conn::Wire,0,"<init>","(Lorg/apache/commons/logging/Log;)V")
J2CPP_DEFINE_METHOD(org::apache::http::impl::conn::Wire,1,"enabled","()Z")
J2CPP_DEFINE_METHOD(org::apache::http::impl::conn::Wire,2,"output","(Ljava/io/InputStream;)V")
J2CPP_DEFINE_METHOD(org::apache::http::impl::conn::Wire,3,"input","(Ljava/io/InputStream;)V")
J2CPP_DEFINE_METHOD(org::apache::http::impl::conn::Wire,4,"output","([BII)V")
J2CPP_DEFINE_METHOD(org::apache::http::impl::conn::Wire,5,"input","([BII)V")
J2CPP_DEFINE_METHOD(org::apache::http::impl::conn::Wire,6,"output","([B)V")
J2CPP_DEFINE_METHOD(org::apache::http::impl::conn::Wire,7,"input","([B)V")
J2CPP_DEFINE_METHOD(org::apache::http::impl::conn::Wire,8,"output","(I)V")
J2CPP_DEFINE_METHOD(org::apache::http::impl::conn::Wire,9,"input","(I)V")
J2CPP_DEFINE_METHOD(org::apache::http::impl::conn::Wire,10,"output","(Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(org::apache::http::impl::conn::Wire,11,"input","(Ljava/lang/String;)V")

} //namespace j2cpp

#endif //J2CPP_ORG_APACHE_HTTP_IMPL_CONN_WIRE_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
